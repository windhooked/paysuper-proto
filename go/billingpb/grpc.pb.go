// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.13.0
// source: grpc.proto

package billingpb

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EmptyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyRequest) Reset() {
	*x = EmptyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyRequest) ProtoMessage() {}

func (x *EmptyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyRequest.ProtoReflect.Descriptor instead.
func (*EmptyRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{0}
}

type EmptyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyResponse) Reset() {
	*x = EmptyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyResponse) ProtoMessage() {}

func (x *EmptyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyResponse.ProtoReflect.Descriptor instead.
func (*EmptyResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{1}
}

type EmptyResponseWithStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The response status code.
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// The response error message (if any).
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *EmptyResponseWithStatus) Reset() {
	*x = EmptyResponseWithStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyResponseWithStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyResponseWithStatus) ProtoMessage() {}

func (x *EmptyResponseWithStatus) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyResponseWithStatus.ProtoReflect.Descriptor instead.
func (*EmptyResponseWithStatus) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{2}
}

func (x *EmptyResponseWithStatus) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *EmptyResponseWithStatus) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

type CheckSkuAndKeyProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"required,max=255"
	//
	// The SKU of the project's product.
	Sku string `protobuf:"bytes,1,opt,name=sku,proto3" json:"sku,omitempty" validate:"required,max=255"`
	//@inject_tag: validate:"required,hexadecimal,len=24" param:"project_id" json:"-"
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"-" validate:"required,hexadecimal,len=24" param:"project_id"`
}

func (x *CheckSkuAndKeyProjectRequest) Reset() {
	*x = CheckSkuAndKeyProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckSkuAndKeyProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckSkuAndKeyProjectRequest) ProtoMessage() {}

func (x *CheckSkuAndKeyProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckSkuAndKeyProjectRequest.ProtoReflect.Descriptor instead.
func (*CheckSkuAndKeyProjectRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{3}
}

func (x *CheckSkuAndKeyProjectRequest) GetSku() string {
	if x != nil {
		return x.Sku
	}
	return ""
}

func (x *CheckSkuAndKeyProjectRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

type ChangeCodeInOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"required" json:"-"
	OrderId string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"-" validate:"required"`
	//@inject_tag: validate:"required,hexadecimal,len=24" required:"true"
	//
	// The unique identifier for the key-activated product.
	KeyProductId string `protobuf:"bytes,2,opt,name=key_product_id,json=keyProductId,proto3" json:"key_product_id,omitempty" validate:"required,hexadecimal,len=24" required:"true"`
}

func (x *ChangeCodeInOrderRequest) Reset() {
	*x = ChangeCodeInOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeCodeInOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeCodeInOrderRequest) ProtoMessage() {}

func (x *ChangeCodeInOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeCodeInOrderRequest.ProtoReflect.Descriptor instead.
func (*ChangeCodeInOrderRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{4}
}

func (x *ChangeCodeInOrderRequest) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *ChangeCodeInOrderRequest) GetKeyProductId() string {
	if x != nil {
		return x.KeyProductId
	}
	return ""
}

type ChangeCodeInOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32                 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Order   *Order                `protobuf:"bytes,3,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *ChangeCodeInOrderResponse) Reset() {
	*x = ChangeCodeInOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeCodeInOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeCodeInOrderResponse) ProtoMessage() {}

func (x *ChangeCodeInOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeCodeInOrderResponse.ProtoReflect.Descriptor instead.
func (*ChangeCodeInOrderResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{5}
}

func (x *ChangeCodeInOrderResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ChangeCodeInOrderResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *ChangeCodeInOrderResponse) GetOrder() *Order {
	if x != nil {
		return x.Order
	}
	return nil
}

type GetPlatformKeyCountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The response status code.
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// The response error message (if any).
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	//@inject_tag: json:"count"
	//
	// The total number of keys for products.
	Count int32 `protobuf:"varint,3,opt,name=count,proto3" json:"count"`
}

func (x *GetPlatformKeyCountResponse) Reset() {
	*x = GetPlatformKeyCountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlatformKeyCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlatformKeyCountResponse) ProtoMessage() {}

func (x *GetPlatformKeyCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlatformKeyCountResponse.ProtoReflect.Descriptor instead.
func (*GetPlatformKeyCountResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{6}
}

func (x *GetPlatformKeyCountResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetPlatformKeyCountResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *GetPlatformKeyCountResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type KeyForOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"required,hexadecimal,len=24"
	KeyId string `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty" validate:"required,hexadecimal,len=24"`
}

func (x *KeyForOrderRequest) Reset() {
	*x = KeyForOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyForOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyForOrderRequest) ProtoMessage() {}

func (x *KeyForOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyForOrderRequest.ProtoReflect.Descriptor instead.
func (*KeyForOrderRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{7}
}

func (x *KeyForOrderRequest) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

type GetKeyForOrderRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32                 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	//@inject_tag: json:"key"
	Key *Key `protobuf:"bytes,3,opt,name=key,proto3" json:"key"`
}

func (x *GetKeyForOrderRequestResponse) Reset() {
	*x = GetKeyForOrderRequestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKeyForOrderRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKeyForOrderRequestResponse) ProtoMessage() {}

func (x *GetKeyForOrderRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKeyForOrderRequestResponse.ProtoReflect.Descriptor instead.
func (*GetKeyForOrderRequestResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{8}
}

func (x *GetKeyForOrderRequestResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetKeyForOrderRequestResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *GetKeyForOrderRequestResponse) GetKey() *Key {
	if x != nil {
		return x.Key
	}
	return nil
}

type PlatformKeyReserveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32                 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	//@inject_tag: json:"key_id"
	KeyId string `protobuf:"bytes,3,opt,name=key_id,json=keyId,proto3" json:"key_id"`
}

func (x *PlatformKeyReserveResponse) Reset() {
	*x = PlatformKeyReserveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlatformKeyReserveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlatformKeyReserveResponse) ProtoMessage() {}

func (x *PlatformKeyReserveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlatformKeyReserveResponse.ProtoReflect.Descriptor instead.
func (*PlatformKeyReserveResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{9}
}

func (x *PlatformKeyReserveResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *PlatformKeyReserveResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *PlatformKeyReserveResponse) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

type PlatformKeyReserveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"required,hexadecimal,len=24"
	KeyProductId string `protobuf:"bytes,2,opt,name=key_product_id,json=keyProductId,proto3" json:"key_product_id,omitempty" validate:"required,hexadecimal,len=24"`
	//@inject_tag: validate:"hexadecimal,len=24"
	MerchantId string `protobuf:"bytes,3,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty" validate:"hexadecimal,len=24"`
	//@inject_tag: validate:"required,max=255"
	PlatformId string `protobuf:"bytes,4,opt,name=platform_id,json=platformId,proto3" json:"platform_id,omitempty" validate:"required,max=255"`
	//@inject_tag: validate:"required"
	Ttl int32 `protobuf:"varint,5,opt,name=ttl,proto3" json:"ttl,omitempty" validate:"required"`
	//@inject_tag: validate:"required,hexadecimal,len=24"
	OrderId string `protobuf:"bytes,6,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty" validate:"required,hexadecimal,len=24"`
}

func (x *PlatformKeyReserveRequest) Reset() {
	*x = PlatformKeyReserveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlatformKeyReserveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlatformKeyReserveRequest) ProtoMessage() {}

func (x *PlatformKeyReserveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlatformKeyReserveRequest.ProtoReflect.Descriptor instead.
func (*PlatformKeyReserveRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{10}
}

func (x *PlatformKeyReserveRequest) GetKeyProductId() string {
	if x != nil {
		return x.KeyProductId
	}
	return ""
}

func (x *PlatformKeyReserveRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *PlatformKeyReserveRequest) GetPlatformId() string {
	if x != nil {
		return x.PlatformId
	}
	return ""
}

func (x *PlatformKeyReserveRequest) GetTtl() int32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *PlatformKeyReserveRequest) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

type PlatformKeysFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The response status code.
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// The response error message (if any).
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// The number of the processed keys.
	KeysProcessed int32 `protobuf:"varint,3,opt,name=keys_processed,json=keysProcessed,proto3" json:"keys_processed,omitempty"`
	// The total number of keys.
	TotalCount int32 `protobuf:"varint,4,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
}

func (x *PlatformKeysFileResponse) Reset() {
	*x = PlatformKeysFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlatformKeysFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlatformKeysFileResponse) ProtoMessage() {}

func (x *PlatformKeysFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlatformKeysFileResponse.ProtoReflect.Descriptor instead.
func (*PlatformKeysFileResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{11}
}

func (x *PlatformKeysFileResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *PlatformKeysFileResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *PlatformKeysFileResponse) GetKeysProcessed() int32 {
	if x != nil {
		return x.KeysProcessed
	}
	return 0
}

func (x *PlatformKeysFileResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type PlatformKeysFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"required,max=10485760" required:"true"
	//
	// The file with keys.
	File []byte `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty" validate:"required,max=10485760" required:"true"`
	//@inject_tag: validate:"required,hexadecimal,len=24" json:"-"
	KeyProductId string `protobuf:"bytes,2,opt,name=key_product_id,json=keyProductId,proto3" json:"-" validate:"required,hexadecimal,len=24"`
	//@inject_tag: validate:"hexadecimal,len=24" json:"-"
	MerchantId string `protobuf:"bytes,3,opt,name=merchant_id,json=merchantId,proto3" json:"-" validate:"hexadecimal,len=24"`
	//@inject_tag: validate:"required,max=255" json:"-"
	PlatformId string `protobuf:"bytes,4,opt,name=platform_id,json=platformId,proto3" json:"-" validate:"required,max=255"`
}

func (x *PlatformKeysFileRequest) Reset() {
	*x = PlatformKeysFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlatformKeysFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlatformKeysFileRequest) ProtoMessage() {}

func (x *PlatformKeysFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlatformKeysFileRequest.ProtoReflect.Descriptor instead.
func (*PlatformKeysFileRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{12}
}

func (x *PlatformKeysFileRequest) GetFile() []byte {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *PlatformKeysFileRequest) GetKeyProductId() string {
	if x != nil {
		return x.KeyProductId
	}
	return ""
}

func (x *PlatformKeysFileRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *PlatformKeysFileRequest) GetPlatformId() string {
	if x != nil {
		return x.PlatformId
	}
	return ""
}

type GetPlatformKeyCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: query:"key_product_id" validate:"required,hexadecimal,len=24"
	KeyProductId string `protobuf:"bytes,1,opt,name=key_product_id,json=keyProductId,proto3" json:"key_product_id,omitempty" query:"key_product_id" validate:"required,hexadecimal,len=24"`
	//@inject_tag: validate:"hexadecimal,len=24"
	MerchantId string `protobuf:"bytes,2,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty" validate:"hexadecimal,len=24"`
	//@inject_tag: query:"platform_id" validate:"required,max=255"
	PlatformId string `protobuf:"bytes,3,opt,name=platform_id,json=platformId,proto3" json:"platform_id,omitempty" query:"platform_id" validate:"required,max=255"`
}

func (x *GetPlatformKeyCountRequest) Reset() {
	*x = GetPlatformKeyCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlatformKeyCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlatformKeyCountRequest) ProtoMessage() {}

func (x *GetPlatformKeyCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlatformKeyCountRequest.ProtoReflect.Descriptor instead.
func (*GetPlatformKeyCountRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{13}
}

func (x *GetPlatformKeyCountRequest) GetKeyProductId() string {
	if x != nil {
		return x.KeyProductId
	}
	return ""
}

func (x *GetPlatformKeyCountRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *GetPlatformKeyCountRequest) GetPlatformId() string {
	if x != nil {
		return x.PlatformId
	}
	return ""
}

type RemovePlatformRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"required,hexadecimal,len=24"
	KeyProductId string `protobuf:"bytes,1,opt,name=key_product_id,json=keyProductId,proto3" json:"key_product_id,omitempty" validate:"required,hexadecimal,len=24"`
	//@inject_tag: validate:"hexadecimal,len=24" json:"merchant_id"
	MerchantId string `protobuf:"bytes,2,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id" validate:"hexadecimal,len=24"`
	//@inject_tag: validate:"required,max=255"
	PlatformId string `protobuf:"bytes,3,opt,name=platform_id,json=platformId,proto3" json:"platform_id,omitempty" validate:"required,max=255"`
}

func (x *RemovePlatformRequest) Reset() {
	*x = RemovePlatformRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemovePlatformRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovePlatformRequest) ProtoMessage() {}

func (x *RemovePlatformRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovePlatformRequest.ProtoReflect.Descriptor instead.
func (*RemovePlatformRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{14}
}

func (x *RemovePlatformRequest) GetKeyProductId() string {
	if x != nil {
		return x.KeyProductId
	}
	return ""
}

func (x *RemovePlatformRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *RemovePlatformRequest) GetPlatformId() string {
	if x != nil {
		return x.PlatformId
	}
	return ""
}

type KeyProductResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32                 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	//@inject_tag: json:"product"
	Product *KeyProduct `protobuf:"bytes,3,opt,name=product,proto3" json:"product"`
}

func (x *KeyProductResponse) Reset() {
	*x = KeyProductResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyProductResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyProductResponse) ProtoMessage() {}

func (x *KeyProductResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyProductResponse.ProtoReflect.Descriptor instead.
func (*KeyProductResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{15}
}

func (x *KeyProductResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *KeyProductResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *KeyProductResponse) GetProduct() *KeyProduct {
	if x != nil {
		return x.Product
	}
	return nil
}

type CreateOrUpdateKeyProductRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"required,min=1" required:"true"
	//
	// The list of the product's localized names.
	Name map[string]string `protobuf:"bytes,1,rep,name=name,proto3" json:"name,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" validate:"required,min=1" required:"true"`
	//@inject_tag: validate:"required,hexadecimal,len=24" required:"true"
	//
	// The unique identifier for the project.
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty" validate:"required,hexadecimal,len=24" required:"true"`
	//@inject_tag: validate:"required,min=1" required:"true"
	//
	// The list of the product's localized concise descriptions.
	Description map[string]string `protobuf:"bytes,3,rep,name=description,proto3" json:"description,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" validate:"required,min=1" required:"true"`
	//@inject_tag: json:"long_description"
	//
	// The list of the product's localized extended descriptions.
	LongDescription map[string]string `protobuf:"bytes,4,rep,name=long_description,json=longDescription,proto3" json:"long_description" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	//@inject_tag: validate:"required,max=255" required:"true"
	//
	// The SKU of the product.
	Sku string `protobuf:"bytes,5,opt,name=sku,proto3" json:"sku,omitempty" validate:"required,max=255" required:"true"`
	//@inject_tag: json:"cover"
	//
	// The product's covers for each localization.
	Cover *ImageCollection `protobuf:"bytes,6,opt,name=cover,proto3" json:"cover"`
	//@inject_tag: validate:"omitempty,url" json:"url"
	//
	// The product's URL in the merchant project.
	Url string `protobuf:"bytes,7,opt,name=url,proto3" json:"url" validate:"omitempty,url"`
	//@inject_tag: validate:"required,alpha,len=3" json:"default_currency" required:"true"
	//
	// The product's default currency. Three-letter Currency Code ISO 4217, in uppercase.
	DefaultCurrency string `protobuf:"bytes,8,opt,name=default_currency,json=defaultCurrency,proto3" json:"default_currency" validate:"required,alpha,len=3" required:"true"`
	//@inject_tag: validate:"hexadecimal,len=24" json:"merchant_id"
	//
	// The unique identifier for the merchant.
	MerchantId string `protobuf:"bytes,9,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id" validate:"hexadecimal,len=24"`
	//@inject_tag: validate:"omitempty,hexadecimal,len=24"
	//
	// The unique identifier for the key-activated product.
	Id string `protobuf:"bytes,10,opt,name=id,proto3" json:"id,omitempty" validate:"omitempty,hexadecimal,len=24"`
	//@inject_tag: json:"object" validate:"required" required:"true"
	//
	// The system constant that contains the returned object's type.
	Object string `protobuf:"bytes,11,opt,name=object,proto3" json:"object" validate:"required" required:"true"`
	//@inject_tag: json:"metadata"
	//
	// The string-value description for the product.
	Metadata map[string]string `protobuf:"bytes,12,rep,name=metadata,proto3" json:"metadata" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	//@inject_tag: validate:"dive" json:"platforms"
	//
	// The list of the platforms.
	Platforms []*PlatformPrice `protobuf:"bytes,13,rep,name=platforms,proto3" json:"platforms" validate:"dive"`
	// @inject_tag: json:"pricing" validate:"required,oneof=currency manual steam default" required:"true"
	//
	// The pricing mode. Available values: currency, manual, steam, default.
	Pricing string `protobuf:"bytes,14,opt,name=pricing,proto3" json:"pricing" validate:"required,oneof=currency manual steam default" required:"true"`
	// @inject_tag: json:"minimal_limit_notify" validate:"omitempty"
	//
	// The minimum number of keys to send a notification that they are running out.
	MinimalLimitNotify int32 `protobuf:"varint,15,opt,name=minimal_limit_notify,json=minimalLimitNotify,proto3" json:"minimal_limit_notify" validate:"omitempty"`
}

func (x *CreateOrUpdateKeyProductRequest) Reset() {
	*x = CreateOrUpdateKeyProductRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrUpdateKeyProductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrUpdateKeyProductRequest) ProtoMessage() {}

func (x *CreateOrUpdateKeyProductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrUpdateKeyProductRequest.ProtoReflect.Descriptor instead.
func (*CreateOrUpdateKeyProductRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{16}
}

func (x *CreateOrUpdateKeyProductRequest) GetName() map[string]string {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *CreateOrUpdateKeyProductRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *CreateOrUpdateKeyProductRequest) GetDescription() map[string]string {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *CreateOrUpdateKeyProductRequest) GetLongDescription() map[string]string {
	if x != nil {
		return x.LongDescription
	}
	return nil
}

func (x *CreateOrUpdateKeyProductRequest) GetSku() string {
	if x != nil {
		return x.Sku
	}
	return ""
}

func (x *CreateOrUpdateKeyProductRequest) GetCover() *ImageCollection {
	if x != nil {
		return x.Cover
	}
	return nil
}

func (x *CreateOrUpdateKeyProductRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *CreateOrUpdateKeyProductRequest) GetDefaultCurrency() string {
	if x != nil {
		return x.DefaultCurrency
	}
	return ""
}

func (x *CreateOrUpdateKeyProductRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *CreateOrUpdateKeyProductRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateOrUpdateKeyProductRequest) GetObject() string {
	if x != nil {
		return x.Object
	}
	return ""
}

func (x *CreateOrUpdateKeyProductRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *CreateOrUpdateKeyProductRequest) GetPlatforms() []*PlatformPrice {
	if x != nil {
		return x.Platforms
	}
	return nil
}

func (x *CreateOrUpdateKeyProductRequest) GetPricing() string {
	if x != nil {
		return x.Pricing
	}
	return ""
}

func (x *CreateOrUpdateKeyProductRequest) GetMinimalLimitNotify() int32 {
	if x != nil {
		return x.MinimalLimitNotify
	}
	return 0
}

type UnPublishKeyProductRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"required,hexadecimal,len=24" json:"-"
	KeyProductId string `protobuf:"bytes,1,opt,name=key_product_id,json=keyProductId,proto3" json:"-" validate:"required,hexadecimal,len=24"`
	//@inject_tag: validate:"required" json:"-"
	MerchantId string `protobuf:"bytes,2,opt,name=merchant_id,json=merchantId,proto3" json:"-" validate:"required"`
}

func (x *UnPublishKeyProductRequest) Reset() {
	*x = UnPublishKeyProductRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnPublishKeyProductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnPublishKeyProductRequest) ProtoMessage() {}

func (x *UnPublishKeyProductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnPublishKeyProductRequest.ProtoReflect.Descriptor instead.
func (*UnPublishKeyProductRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{17}
}

func (x *UnPublishKeyProductRequest) GetKeyProductId() string {
	if x != nil {
		return x.KeyProductId
	}
	return ""
}

func (x *UnPublishKeyProductRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

type PublishKeyProductRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"required,hexadecimal,len=24" json:"-"
	KeyProductId string `protobuf:"bytes,1,opt,name=key_product_id,json=keyProductId,proto3" json:"-" validate:"required,hexadecimal,len=24"`
	//@inject_tag: validate:"hexadecimal,len=24" json:"-"
	MerchantId string `protobuf:"bytes,2,opt,name=merchant_id,json=merchantId,proto3" json:"-" validate:"hexadecimal,len=24"`
}

func (x *PublishKeyProductRequest) Reset() {
	*x = PublishKeyProductRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishKeyProductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishKeyProductRequest) ProtoMessage() {}

func (x *PublishKeyProductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishKeyProductRequest.ProtoReflect.Descriptor instead.
func (*PublishKeyProductRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{18}
}

func (x *PublishKeyProductRequest) GetKeyProductId() string {
	if x != nil {
		return x.KeyProductId
	}
	return ""
}

func (x *PublishKeyProductRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

type ListPlatformsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: query:"limit" validate:"required,numeric,gt=0"
	Limit int32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty" query:"limit" validate:"required,numeric,gt=0"`
	// @inject_tag: query:"offset" validate:"omitempty,numeric,gte=0"
	Offset int32 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty" query:"offset" validate:"omitempty,numeric,gte=0"`
}

func (x *ListPlatformsRequest) Reset() {
	*x = ListPlatformsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPlatformsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPlatformsRequest) ProtoMessage() {}

func (x *ListPlatformsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPlatformsRequest.ProtoReflect.Descriptor instead.
func (*ListPlatformsRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{19}
}

func (x *ListPlatformsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListPlatformsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type ListPlatformsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The response status code.
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// The response error message (if any).
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// @inject_tag: json:"limit"
	//
	// The number of platforms returned in one page.
	Limit int32 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit"`
	// @inject_tag: json:"offset"
	//
	// The ranking number of the first item on the page.
	Offset int32 `protobuf:"varint,4,opt,name=offset,proto3" json:"offset"`
	// @inject_tag: json:"count"
	//
	// The total number of found products.
	Count int32 `protobuf:"varint,5,opt,name=count,proto3" json:"count"`
	// @inject_tag: json:"platforms"
	//
	// The list of platforms.
	Platforms []*Platform `protobuf:"bytes,6,rep,name=platforms,proto3" json:"platforms"`
}

func (x *ListPlatformsResponse) Reset() {
	*x = ListPlatformsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPlatformsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPlatformsResponse) ProtoMessage() {}

func (x *ListPlatformsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPlatformsResponse.ProtoReflect.Descriptor instead.
func (*ListPlatformsResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{20}
}

func (x *ListPlatformsResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ListPlatformsResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *ListPlatformsResponse) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListPlatformsResponse) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListPlatformsResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ListPlatformsResponse) GetPlatforms() []*Platform {
	if x != nil {
		return x.Platforms
	}
	return nil
}

type ListKeyProductsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The response status code.
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// The response error message (if any).
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// @inject_tag: json:"limit"
	//
	// The number of products returned in one page.
	Limit int64 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit"`
	// @inject_tag: json:"offset"
	//
	// The ranking number of the first item on the page.
	Offset int64 `protobuf:"varint,4,opt,name=offset,proto3" json:"offset"`
	// @inject_tag: json:"count"
	//
	// The total number of found products.
	Count int64 `protobuf:"varint,5,opt,name=count,proto3" json:"count"`
	// @inject_tag: json:"products"
	//
	// The list of key-activated products.
	Products []*KeyProduct `protobuf:"bytes,6,rep,name=products,proto3" json:"products"`
}

func (x *ListKeyProductsResponse) Reset() {
	*x = ListKeyProductsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListKeyProductsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListKeyProductsResponse) ProtoMessage() {}

func (x *ListKeyProductsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListKeyProductsResponse.ProtoReflect.Descriptor instead.
func (*ListKeyProductsResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{21}
}

func (x *ListKeyProductsResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ListKeyProductsResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *ListKeyProductsResponse) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListKeyProductsResponse) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListKeyProductsResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ListKeyProductsResponse) GetProducts() []*KeyProduct {
	if x != nil {
		return x.Products
	}
	return nil
}

type ListKeyProductsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: query:"name" json:"name"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name" query:"name"`
	//@inject_tag: query:"sku" json:"sku"
	Sku string `protobuf:"bytes,2,opt,name=sku,proto3" json:"sku" query:"sku"`
	// @inject_tag: query:"limit" validate:"required,numeric,gt=0" json:"limit"
	Limit int64 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit" query:"limit" validate:"required,numeric,gt=0"`
	// @inject_tag: query:"offset" validate:"omitempty,numeric,gte=0" json:"offset"
	Offset int64 `protobuf:"varint,4,opt,name=offset,proto3" json:"offset" query:"offset" validate:"omitempty,numeric,gte=0"`
	//@inject_tag: validate:"required,hexadecimal,len=24"
	MerchantId string `protobuf:"bytes,5,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty" validate:"required,hexadecimal,len=24"`
	//@inject_tag: query:"project_id" validate:"omitempty,hexadecimal,len=24"
	ProjectId string `protobuf:"bytes,6,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty" query:"project_id" validate:"omitempty,hexadecimal,len=24"`
	//@inject_tag: query:"enabled" validate:"omitempty,oneof=true false"
	Enabled string `protobuf:"bytes,7,opt,name=enabled,proto3" json:"enabled,omitempty" query:"enabled" validate:"omitempty,oneof=true false"`
}

func (x *ListKeyProductsRequest) Reset() {
	*x = ListKeyProductsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListKeyProductsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListKeyProductsRequest) ProtoMessage() {}

func (x *ListKeyProductsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListKeyProductsRequest.ProtoReflect.Descriptor instead.
func (*ListKeyProductsRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{22}
}

func (x *ListKeyProductsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListKeyProductsRequest) GetSku() string {
	if x != nil {
		return x.Sku
	}
	return ""
}

func (x *ListKeyProductsRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListKeyProductsRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListKeyProductsRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *ListKeyProductsRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ListKeyProductsRequest) GetEnabled() string {
	if x != nil {
		return x.Enabled
	}
	return ""
}

type PaymentCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: required:"true"
	//
	// The customer's payment requisites.
	Data map[string]string `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" required:"true"`
	// @inject_tag: json:"-"
	Ip string `protobuf:"bytes,3,opt,name=ip,proto3" json:"-"`
	// @inject_tag: json:"-"
	AcceptLanguage string `protobuf:"bytes,4,opt,name=accept_language,json=acceptLanguage,proto3" json:"-"`
	// @inject_tag: json:"-"
	UserAgent string `protobuf:"bytes,5,opt,name=user_agent,json=userAgent,proto3" json:"-"`
	Cookie    string `protobuf:"bytes,6,opt,name=cookie,proto3" json:"cookie,omitempty"`
}

func (x *PaymentCreateRequest) Reset() {
	*x = PaymentCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentCreateRequest) ProtoMessage() {}

func (x *PaymentCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentCreateRequest.ProtoReflect.Descriptor instead.
func (*PaymentCreateRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{23}
}

func (x *PaymentCreateRequest) GetData() map[string]string {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *PaymentCreateRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *PaymentCreateRequest) GetAcceptLanguage() string {
	if x != nil {
		return x.AcceptLanguage
	}
	return ""
}

func (x *PaymentCreateRequest) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *PaymentCreateRequest) GetCookie() string {
	if x != nil {
		return x.Cookie
	}
	return ""
}

type PaymentCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       int32                 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message      *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	RedirectUrl  string                `protobuf:"bytes,3,opt,name=redirect_url,json=redirectUrl,proto3" json:"redirect_url,omitempty"`
	NeedRedirect bool                  `protobuf:"varint,4,opt,name=need_redirect,json=needRedirect,proto3" json:"need_redirect,omitempty"`
	// @inject_tag: json:"-"
	Cookie              string               `protobuf:"bytes,5,opt,name=cookie,proto3" json:"-"`
	RecurringExpireDate *timestamp.Timestamp `protobuf:"bytes,6,opt,name=recurring_expire_date,json=recurringExpireDate,proto3" json:"recurring_expire_date,omitempty"`
}

func (x *PaymentCreateResponse) Reset() {
	*x = PaymentCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentCreateResponse) ProtoMessage() {}

func (x *PaymentCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentCreateResponse.ProtoReflect.Descriptor instead.
func (*PaymentCreateResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{24}
}

func (x *PaymentCreateResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *PaymentCreateResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *PaymentCreateResponse) GetRedirectUrl() string {
	if x != nil {
		return x.RedirectUrl
	}
	return ""
}

func (x *PaymentCreateResponse) GetNeedRedirect() bool {
	if x != nil {
		return x.NeedRedirect
	}
	return false
}

func (x *PaymentCreateResponse) GetCookie() string {
	if x != nil {
		return x.Cookie
	}
	return ""
}

func (x *PaymentCreateResponse) GetRecurringExpireDate() *timestamp.Timestamp {
	if x != nil {
		return x.RecurringExpireDate
	}
	return nil
}

type PaymentFormJsonDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: validate:"required,uuid" param:"order_id"
	OrderId             string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty" validate:"required,uuid" param:"order_id"`
	Scheme              string `protobuf:"bytes,2,opt,name=scheme,proto3" json:"scheme,omitempty"`
	Host                string `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`
	Locale              string `protobuf:"bytes,4,opt,name=locale,proto3" json:"locale,omitempty"`
	Ip                  string `protobuf:"bytes,5,opt,name=ip,proto3" json:"ip,omitempty"`
	UserAgent           string `protobuf:"bytes,6,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
	Cookie              string `protobuf:"bytes,7,opt,name=cookie,proto3" json:"cookie,omitempty"`
	Referer             string `protobuf:"bytes,8,opt,name=referer,proto3" json:"referer,omitempty"`
	IsEmbedded          bool   `protobuf:"varint,9,opt,name=is_embedded,json=isEmbedded,proto3" json:"is_embedded,omitempty"`
	IssuerReference     string `protobuf:"bytes,10,opt,name=issuer_reference,json=issuerReference,proto3" json:"issuer_reference,omitempty"`
	IssuerReferenceType string `protobuf:"bytes,11,opt,name=issuer_reference_type,json=issuerReferenceType,proto3" json:"issuer_reference_type,omitempty"`
	UtmSource           string `protobuf:"bytes,12,opt,name=utm_source,json=utmSource,proto3" json:"utm_source,omitempty"`
	UtmMedium           string `protobuf:"bytes,13,opt,name=utm_medium,json=utmMedium,proto3" json:"utm_medium,omitempty"`
	UtmCampaign         string `protobuf:"bytes,14,opt,name=utm_campaign,json=utmCampaign,proto3" json:"utm_campaign,omitempty"`
}

func (x *PaymentFormJsonDataRequest) Reset() {
	*x = PaymentFormJsonDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentFormJsonDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentFormJsonDataRequest) ProtoMessage() {}

func (x *PaymentFormJsonDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentFormJsonDataRequest.ProtoReflect.Descriptor instead.
func (*PaymentFormJsonDataRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{25}
}

func (x *PaymentFormJsonDataRequest) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *PaymentFormJsonDataRequest) GetScheme() string {
	if x != nil {
		return x.Scheme
	}
	return ""
}

func (x *PaymentFormJsonDataRequest) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *PaymentFormJsonDataRequest) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

func (x *PaymentFormJsonDataRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *PaymentFormJsonDataRequest) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *PaymentFormJsonDataRequest) GetCookie() string {
	if x != nil {
		return x.Cookie
	}
	return ""
}

func (x *PaymentFormJsonDataRequest) GetReferer() string {
	if x != nil {
		return x.Referer
	}
	return ""
}

func (x *PaymentFormJsonDataRequest) GetIsEmbedded() bool {
	if x != nil {
		return x.IsEmbedded
	}
	return false
}

func (x *PaymentFormJsonDataRequest) GetIssuerReference() string {
	if x != nil {
		return x.IssuerReference
	}
	return ""
}

func (x *PaymentFormJsonDataRequest) GetIssuerReferenceType() string {
	if x != nil {
		return x.IssuerReferenceType
	}
	return ""
}

func (x *PaymentFormJsonDataRequest) GetUtmSource() string {
	if x != nil {
		return x.UtmSource
	}
	return ""
}

func (x *PaymentFormJsonDataRequest) GetUtmMedium() string {
	if x != nil {
		return x.UtmMedium
	}
	return ""
}

func (x *PaymentFormJsonDataRequest) GetUtmCampaign() string {
	if x != nil {
		return x.UtmCampaign
	}
	return ""
}

type PaymentFormJsonDataProject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"name"
	//
	// The project's name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name"`
	// @inject_tag: json:"url_success"
	//
	// The redirect URL for a successful payment. Has an empty value if the dynamic notify URLs option is not set in the Project Settings.
	UrlSuccess string `protobuf:"bytes,2,opt,name=url_success,json=urlSuccess,proto3" json:"url_success"`
	// @inject_tag: json:"url_fail"
	//
	// The redirect URL for a failed payment. Has an empty value if the dynamic notify URLs option is not set in the Project Settings.
	UrlFail string `protobuf:"bytes,3,opt,name=url_fail,json=urlFail,proto3" json:"url_fail"`
	// @inject_tag: json:"id"
	//
	// The unique identifier for the project.
	Id string `protobuf:"bytes,4,opt,name=id,proto3" json:"id"`
	//@inject_tag: json:"redirect_settings" bson:"redirect_settings" validate:"required,dive"
	//
	//Object contain setting for user's redirect after when payment ending
	RedirectSettings *ProjectRedirectSettings `protobuf:"bytes,5,opt,name=redirect_settings,json=redirectSettings,proto3" json:"redirect_settings" bson:"redirect_settings" validate:"required,dive"`
	// @inject_tag: json:"form_default_text"
	//
	// The localized default text on payment form ("In-game purchase")
	FormDefaultText string `protobuf:"bytes,6,opt,name=form_default_text,json=formDefaultText,proto3" json:"form_default_text"`
}

func (x *PaymentFormJsonDataProject) Reset() {
	*x = PaymentFormJsonDataProject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentFormJsonDataProject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentFormJsonDataProject) ProtoMessage() {}

func (x *PaymentFormJsonDataProject) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentFormJsonDataProject.ProtoReflect.Descriptor instead.
func (*PaymentFormJsonDataProject) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{26}
}

func (x *PaymentFormJsonDataProject) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PaymentFormJsonDataProject) GetUrlSuccess() string {
	if x != nil {
		return x.UrlSuccess
	}
	return ""
}

func (x *PaymentFormJsonDataProject) GetUrlFail() string {
	if x != nil {
		return x.UrlFail
	}
	return ""
}

func (x *PaymentFormJsonDataProject) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PaymentFormJsonDataProject) GetRedirectSettings() *ProjectRedirectSettings {
	if x != nil {
		return x.RedirectSettings
	}
	return nil
}

func (x *PaymentFormJsonDataProject) GetFormDefaultText() string {
	if x != nil {
		return x.FormDefaultText
	}
	return ""
}

type PaymentFormJsonData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier for the order.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// @inject_tag: json:"account,omitempty"
	//
	// The customer account in the merchant project. Can be an empty string.
	Account string `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
	// @inject_tag: json:"has_vat"
	//
	// Has a true value if the payment has the VAT commission.
	HasVat bool `protobuf:"varint,3,opt,name=has_vat,json=hasVat,proto3" json:"has_vat"`
	// @inject_tag: json:"vat"
	//
	// The amount of VAT.
	Vat float64 `protobuf:"fixed64,4,opt,name=vat,proto3" json:"vat"`
	// The payment amount without VAT.
	Amount float64 `protobuf:"fixed64,5,opt,name=amount,proto3" json:"amount,omitempty"`
	// The payment amount including VAT.
	TotalAmount float64 `protobuf:"fixed64,6,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	// The currency of the payment order.
	Currency string `protobuf:"bytes,7,opt,name=currency,proto3" json:"currency,omitempty"`
	// The PaySuper Project data.
	Project *PaymentFormJsonDataProject `protobuf:"bytes,8,opt,name=project,proto3" json:"project,omitempty"`
	// The available payment methods list.
	PaymentMethods []*PaymentFormPaymentMethod `protobuf:"bytes,9,rep,name=payment_methods,json=paymentMethods,proto3" json:"payment_methods,omitempty"`
	// An access token to subscribe a WebSocket private channel.
	Token string `protobuf:"bytes,11,opt,name=token,proto3" json:"token,omitempty"`
	// @inject_tag: json:"user_address_data_required"
	//
	// Has a true value if it's required to get a real customer's geo-position information.
	UserAddressDataRequired bool `protobuf:"varint,12,opt,name=user_address_data_required,json=userAddressDataRequired,proto3" json:"user_address_data_required"`
	// @inject_tag: json:"user_ip_data"
	//
	// The customer's IP address data.
	UserIpData *UserIpData `protobuf:"bytes,13,opt,name=user_ip_data,json=userIpData,proto3" json:"user_ip_data"`
	// @inject_tag: json:"items" validate="omitempty,gte=1,dive"
	//
	// The list of purchased items in this order. Can be null for a payment order with the simple or virtual_currency types.
	Items []*OrderItem `protobuf:"bytes,14,rep,name=items,proto3" json:"items"`
	// @inject_tag: json:"email"
	//
	// The customer's email.
	Email string `protobuf:"bytes,16,opt,name=email,proto3" json:"email"`
	// @inject_tag: json:"description"
	//
	// An order description.
	Description string `protobuf:"bytes,17,opt,name=description,proto3" json:"description"`
	//@inject_tag: json:"country_payments_allowed"
	//
	// Has a true value if the payments are allowed from this customer's country.
	CountryPaymentsAllowed bool `protobuf:"varint,18,opt,name=country_payments_allowed,json=countryPaymentsAllowed,proto3" json:"country_payments_allowed"`
	//@inject_tag: json:"country_change_allowed"
	//
	// Has a true value if the customer can select another country while payments are disallowed for his country.
	CountryChangeAllowed bool `protobuf:"varint,19,opt,name=country_change_allowed,json=countryChangeAllowed,proto3" json:"country_change_allowed"`
	//@inject_tag: json:"platforms"
	//
	// The list of supported platforms if this payment is for the key type. For another types, this field can be null.
	Platforms []*Platform `protobuf:"bytes,20,rep,name=platforms,proto3" json:"platforms"`
	//@inject_tag: json:"lang"
	//
	// The language predefined by the payment token in the merchant project for a payment form.
	Lang string `protobuf:"bytes,21,opt,name=lang,proto3" json:"lang"`
	//@inject_tag: json:"is_already_processed"
	//
	// Has a true value if the order has already been processed.
	IsAlreadyProcessed bool `protobuf:"varint,22,opt,name=is_already_processed,json=isAlreadyProcessed,proto3" json:"is_already_processed"`
	//@inject_tag: json:"receipt_url"
	//
	// A receipt link for a completed payment.
	ReceiptUrl string `protobuf:"bytes,23,opt,name=receipt_url,json=receiptUrl,proto3" json:"receipt_url"`
	//@inject_tag: json:"type"
	//
	// The order type. It depends on your sales option (Game Keys, Virtual Items, Virtual Currency, the simple checkout). Available values: key, product, virtual_currency, simple.
	Type string `protobuf:"bytes,24,opt,name=type,proto3" json:"type"`
	// @inject_tag: json:"charge_currency"
	//
	// The currency of the order charge. It can differ from the order currency because it also depends on the customer's card currency.
	ChargeCurrency string `protobuf:"bytes,25,opt,name=charge_currency,json=chargeCurrency,proto3" json:"charge_currency"`
	// @inject_tag: json:"charge_amount"
	//
	// The total amount of the order charge.
	ChargeAmount float64 `protobuf:"fixed64,26,opt,name=charge_amount,json=chargeAmount,proto3" json:"charge_amount"`
	// @inject_tag: json:"vat_in_charge_currency"
	//
	// The VAT currency of the order charge. It can differ from the order currency because it depends on the customer's card currency.
	VatInChargeCurrency float64 `protobuf:"fixed64,27,opt,name=vat_in_charge_currency,json=vatInChargeCurrency,proto3" json:"vat_in_charge_currency"`
	// @inject_tag: json:"vat_rate"
	//
	// VAT rate.
	VatRate float64 `protobuf:"fixed64,28,opt,name=vat_rate,json=vatRate,proto3" json:"vat_rate"`
	// @inject_tag: json:"vat_payer"
	//
	// The responsible for VAT. Available values: buyer (VAT is added to the order charge), seller (VAT is included in the order charge), nobody (VAT exempt).
	VatPayer string `protobuf:"bytes,29,opt,name=vat_payer,json=vatPayer,proto3" json:"vat_payer"`
	// @inject_tag: json:"is_production"
	//
	// Has a true value for a production payment and false for a test payment that goes through a test sandbox.
	IsProduction bool `protobuf:"varint,30,opt,name=is_production,json=isProduction,proto3" json:"is_production"`
	//@inject_tag: json:"recurring_settings"
	//
	//Settings for recurring payments.
	RecurringSettings *OrderRecurringSettings `protobuf:"bytes,31,opt,name=recurring_settings,json=recurringSettings,proto3" json:"recurring_settings"`
	//@inject_tag: json:"recurring_management_url"
	//
	//URL for managing customer recurring subscriptions.
	RecurringManagementUrl string `protobuf:"bytes,32,opt,name=recurring_management_url,json=recurringManagementUrl,proto3" json:"recurring_management_url"`
}

func (x *PaymentFormJsonData) Reset() {
	*x = PaymentFormJsonData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentFormJsonData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentFormJsonData) ProtoMessage() {}

func (x *PaymentFormJsonData) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentFormJsonData.ProtoReflect.Descriptor instead.
func (*PaymentFormJsonData) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{27}
}

func (x *PaymentFormJsonData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PaymentFormJsonData) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *PaymentFormJsonData) GetHasVat() bool {
	if x != nil {
		return x.HasVat
	}
	return false
}

func (x *PaymentFormJsonData) GetVat() float64 {
	if x != nil {
		return x.Vat
	}
	return 0
}

func (x *PaymentFormJsonData) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *PaymentFormJsonData) GetTotalAmount() float64 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *PaymentFormJsonData) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *PaymentFormJsonData) GetProject() *PaymentFormJsonDataProject {
	if x != nil {
		return x.Project
	}
	return nil
}

func (x *PaymentFormJsonData) GetPaymentMethods() []*PaymentFormPaymentMethod {
	if x != nil {
		return x.PaymentMethods
	}
	return nil
}

func (x *PaymentFormJsonData) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *PaymentFormJsonData) GetUserAddressDataRequired() bool {
	if x != nil {
		return x.UserAddressDataRequired
	}
	return false
}

func (x *PaymentFormJsonData) GetUserIpData() *UserIpData {
	if x != nil {
		return x.UserIpData
	}
	return nil
}

func (x *PaymentFormJsonData) GetItems() []*OrderItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *PaymentFormJsonData) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *PaymentFormJsonData) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PaymentFormJsonData) GetCountryPaymentsAllowed() bool {
	if x != nil {
		return x.CountryPaymentsAllowed
	}
	return false
}

func (x *PaymentFormJsonData) GetCountryChangeAllowed() bool {
	if x != nil {
		return x.CountryChangeAllowed
	}
	return false
}

func (x *PaymentFormJsonData) GetPlatforms() []*Platform {
	if x != nil {
		return x.Platforms
	}
	return nil
}

func (x *PaymentFormJsonData) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *PaymentFormJsonData) GetIsAlreadyProcessed() bool {
	if x != nil {
		return x.IsAlreadyProcessed
	}
	return false
}

func (x *PaymentFormJsonData) GetReceiptUrl() string {
	if x != nil {
		return x.ReceiptUrl
	}
	return ""
}

func (x *PaymentFormJsonData) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PaymentFormJsonData) GetChargeCurrency() string {
	if x != nil {
		return x.ChargeCurrency
	}
	return ""
}

func (x *PaymentFormJsonData) GetChargeAmount() float64 {
	if x != nil {
		return x.ChargeAmount
	}
	return 0
}

func (x *PaymentFormJsonData) GetVatInChargeCurrency() float64 {
	if x != nil {
		return x.VatInChargeCurrency
	}
	return 0
}

func (x *PaymentFormJsonData) GetVatRate() float64 {
	if x != nil {
		return x.VatRate
	}
	return 0
}

func (x *PaymentFormJsonData) GetVatPayer() string {
	if x != nil {
		return x.VatPayer
	}
	return ""
}

func (x *PaymentFormJsonData) GetIsProduction() bool {
	if x != nil {
		return x.IsProduction
	}
	return false
}

func (x *PaymentFormJsonData) GetRecurringSettings() *OrderRecurringSettings {
	if x != nil {
		return x.RecurringSettings
	}
	return nil
}

func (x *PaymentFormJsonData) GetRecurringManagementUrl() string {
	if x != nil {
		return x.RecurringManagementUrl
	}
	return ""
}

type PaymentFormJsonDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"status"
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status"`
	//@inject_tag: json:"message"
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message"`
	//@inject_tag: json:"item"
	Item *PaymentFormJsonData `protobuf:"bytes,3,opt,name=item,proto3" json:"item"`
	// @inject_tag: json:"-"
	Cookie string `protobuf:"bytes,4,opt,name=cookie,proto3" json:"-"`
}

func (x *PaymentFormJsonDataResponse) Reset() {
	*x = PaymentFormJsonDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentFormJsonDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentFormJsonDataResponse) ProtoMessage() {}

func (x *PaymentFormJsonDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentFormJsonDataResponse.ProtoReflect.Descriptor instead.
func (*PaymentFormJsonDataResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{28}
}

func (x *PaymentFormJsonDataResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *PaymentFormJsonDataResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *PaymentFormJsonDataResponse) GetItem() *PaymentFormJsonData {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *PaymentFormJsonDataResponse) GetCookie() string {
	if x != nil {
		return x.Cookie
	}
	return ""
}

type PaymentNotifyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId   string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	Request   []byte `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
	Signature string `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *PaymentNotifyRequest) Reset() {
	*x = PaymentNotifyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentNotifyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentNotifyRequest) ProtoMessage() {}

func (x *PaymentNotifyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentNotifyRequest.ProtoReflect.Descriptor instead.
func (*PaymentNotifyRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{29}
}

func (x *PaymentNotifyRequest) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *PaymentNotifyRequest) GetRequest() []byte {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *PaymentNotifyRequest) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

type PaymentNotifyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status int32  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Error  string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *PaymentNotifyResponse) Reset() {
	*x = PaymentNotifyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentNotifyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentNotifyResponse) ProtoMessage() {}

func (x *PaymentNotifyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentNotifyResponse.ProtoReflect.Descriptor instead.
func (*PaymentNotifyResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{30}
}

func (x *PaymentNotifyResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *PaymentNotifyResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type OnboardingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: validate:"omitempty,hexadecimal,len=24"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" validate:"omitempty,hexadecimal,len=24"`
	//@inject_tag: validate:"required"
	User     *MerchantUser        `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty" validate:"required"`
	Company  *MerchantCompanyInfo `protobuf:"bytes,3,opt,name=company,proto3" json:"company,omitempty"`
	Contacts *MerchantContact     `protobuf:"bytes,14,opt,name=contacts,proto3" json:"contacts,omitempty"`
	Banking  *MerchantBanking     `protobuf:"bytes,15,opt,name=banking,proto3" json:"banking,omitempty"`
}

func (x *OnboardingRequest) Reset() {
	*x = OnboardingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnboardingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnboardingRequest) ProtoMessage() {}

func (x *OnboardingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnboardingRequest.ProtoReflect.Descriptor instead.
func (*OnboardingRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{31}
}

func (x *OnboardingRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *OnboardingRequest) GetUser() *MerchantUser {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *OnboardingRequest) GetCompany() *MerchantCompanyInfo {
	if x != nil {
		return x.Company
	}
	return nil
}

func (x *OnboardingRequest) GetContacts() *MerchantContact {
	if x != nil {
		return x.Contacts
	}
	return nil
}

func (x *OnboardingRequest) GetBanking() *MerchantBanking {
	if x != nil {
		return x.Banking
	}
	return nil
}

type FindByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *FindByIdRequest) Reset() {
	*x = FindByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindByIdRequest) ProtoMessage() {}

func (x *FindByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindByIdRequest.ProtoReflect.Descriptor instead.
func (*FindByIdRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{32}
}

func (x *FindByIdRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type MerchantListingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: query:"name"
	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" query:"name"`
	IsSigned int32  `protobuf:"varint,2,opt,name=is_signed,json=isSigned,proto3" json:"is_signed,omitempty"`
	// @inject_tag: query:"last_payout_date_from" validate:"omitempty,datetime"
	LastPayoutDateFrom string `protobuf:"bytes,3,opt,name=last_payout_date_from,json=lastPayoutDateFrom,proto3" json:"last_payout_date_from,omitempty" query:"last_payout_date_from" validate:"omitempty,datetime"`
	// @inject_tag: query:"last_payout_date_to" validate:"omitempty,datetime"
	LastPayoutDateTo string `protobuf:"bytes,4,opt,name=last_payout_date_to,json=lastPayoutDateTo,proto3" json:"last_payout_date_to,omitempty" query:"last_payout_date_to" validate:"omitempty,datetime"`
	// @inject_tag: query:"last_payout_amount" validate:"omitempty,numeric"
	LastPayoutAmount float64 `protobuf:"fixed64,5,opt,name=last_payout_amount,json=lastPayoutAmount,proto3" json:"last_payout_amount,omitempty" query:"last_payout_amount" validate:"omitempty,numeric"`
	// @inject_tag: query:"sort[]"
	Sort []string `protobuf:"bytes,6,rep,name=sort,proto3" json:"sort,omitempty" query:"sort[]"`
	// @inject_tag: query:"limit" validate:"omitempty,numeric,gt=0"
	Limit int64 `protobuf:"varint,7,opt,name=limit,proto3" json:"limit,omitempty" query:"limit" validate:"omitempty,numeric,gt=0"`
	// @inject_tag: query:"offset" validate:"omitempty,numeric,gte=0"
	Offset int64 `protobuf:"varint,8,opt,name=offset,proto3" json:"offset,omitempty" query:"offset" validate:"omitempty,numeric,gte=0"`
	// @inject_tag: query:"quick_search"
	QuickSearch string `protobuf:"bytes,9,opt,name=quick_search,json=quickSearch,proto3" json:"quick_search,omitempty" query:"quick_search"`
	// @inject_tag: query:"status[]"
	Statuses []int32 `protobuf:"varint,10,rep,packed,name=statuses,proto3" json:"statuses,omitempty" query:"status[]"`
	// @inject_tag: query:"registration_date_from" validate:"omitempty,datetime"
	RegistrationDateFrom string `protobuf:"bytes,11,opt,name=registration_date_from,json=registrationDateFrom,proto3" json:"registration_date_from,omitempty" query:"registration_date_from" validate:"omitempty,datetime"`
	// @inject_tag: query:"registration_date_to" validate:"omitempty,datetime"
	RegistrationDateTo string `protobuf:"bytes,12,opt,name=registration_date_to,json=registrationDateTo,proto3" json:"registration_date_to,omitempty" query:"registration_date_to" validate:"omitempty,datetime"`
	// @inject_tag: query:"received_date_from" validate:"omitempty,datetime"
	ReceivedDateFrom string `protobuf:"bytes,13,opt,name=received_date_from,json=receivedDateFrom,proto3" json:"received_date_from,omitempty" query:"received_date_from" validate:"omitempty,datetime"`
	// @inject_tag: query:"received_date_to" validate:"omitempty,datetime"
	ReceivedDateTo string `protobuf:"bytes,14,opt,name=received_date_to,json=receivedDateTo,proto3" json:"received_date_to,omitempty" query:"received_date_to" validate:"omitempty,datetime"`
	// @inject_tag: query:"status_last_updated_from" validate:"omitempty,datetime"
	StatusLastUpdatedFrom string `protobuf:"bytes,15,opt,name=status_last_updated_from,json=statusLastUpdatedFrom,proto3" json:"status_last_updated_from,omitempty" query:"status_last_updated_from" validate:"omitempty,datetime"`
	// @inject_tag: query:"status_last_updated_to" validate:"omitempty,datetime"
	StatusLastUpdatedTo string `protobuf:"bytes,16,opt,name=status_last_updated_to,json=statusLastUpdatedTo,proto3" json:"status_last_updated_to,omitempty" query:"status_last_updated_to" validate:"omitempty,datetime"`
}

func (x *MerchantListingRequest) Reset() {
	*x = MerchantListingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerchantListingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerchantListingRequest) ProtoMessage() {}

func (x *MerchantListingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerchantListingRequest.ProtoReflect.Descriptor instead.
func (*MerchantListingRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{33}
}

func (x *MerchantListingRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MerchantListingRequest) GetIsSigned() int32 {
	if x != nil {
		return x.IsSigned
	}
	return 0
}

func (x *MerchantListingRequest) GetLastPayoutDateFrom() string {
	if x != nil {
		return x.LastPayoutDateFrom
	}
	return ""
}

func (x *MerchantListingRequest) GetLastPayoutDateTo() string {
	if x != nil {
		return x.LastPayoutDateTo
	}
	return ""
}

func (x *MerchantListingRequest) GetLastPayoutAmount() float64 {
	if x != nil {
		return x.LastPayoutAmount
	}
	return 0
}

func (x *MerchantListingRequest) GetSort() []string {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *MerchantListingRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *MerchantListingRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *MerchantListingRequest) GetQuickSearch() string {
	if x != nil {
		return x.QuickSearch
	}
	return ""
}

func (x *MerchantListingRequest) GetStatuses() []int32 {
	if x != nil {
		return x.Statuses
	}
	return nil
}

func (x *MerchantListingRequest) GetRegistrationDateFrom() string {
	if x != nil {
		return x.RegistrationDateFrom
	}
	return ""
}

func (x *MerchantListingRequest) GetRegistrationDateTo() string {
	if x != nil {
		return x.RegistrationDateTo
	}
	return ""
}

func (x *MerchantListingRequest) GetReceivedDateFrom() string {
	if x != nil {
		return x.ReceivedDateFrom
	}
	return ""
}

func (x *MerchantListingRequest) GetReceivedDateTo() string {
	if x != nil {
		return x.ReceivedDateTo
	}
	return ""
}

func (x *MerchantListingRequest) GetStatusLastUpdatedFrom() string {
	if x != nil {
		return x.StatusLastUpdatedFrom
	}
	return ""
}

func (x *MerchantListingRequest) GetStatusLastUpdatedTo() string {
	if x != nil {
		return x.StatusLastUpdatedTo
	}
	return ""
}

type MerchantListingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"count"
	//
	// The total number of the merchants.
	Count int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count"`
	// @inject_tag: json:"items"
	//
	// The merchants list.
	Items []*MerchantShortInfo `protobuf:"bytes,2,rep,name=items,proto3" json:"items"`
}

func (x *MerchantListingResponse) Reset() {
	*x = MerchantListingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerchantListingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerchantListingResponse) ProtoMessage() {}

func (x *MerchantListingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerchantListingResponse.ProtoReflect.Descriptor instead.
func (*MerchantListingResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{34}
}

func (x *MerchantListingResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *MerchantListingResponse) GetItems() []*MerchantShortInfo {
	if x != nil {
		return x.Items
	}
	return nil
}

type ListMerchantsForAgreementResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"count"
	//
	// The total number of the merchants.
	Count int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count"`
	// @inject_tag: json:"items"
	//
	// The merchants list.
	Items []*Merchant `protobuf:"bytes,2,rep,name=items,proto3" json:"items"`
}

func (x *ListMerchantsForAgreementResponse) Reset() {
	*x = ListMerchantsForAgreementResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMerchantsForAgreementResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMerchantsForAgreementResponse) ProtoMessage() {}

func (x *ListMerchantsForAgreementResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMerchantsForAgreementResponse.ProtoReflect.Descriptor instead.
func (*ListMerchantsForAgreementResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{35}
}

func (x *ListMerchantsForAgreementResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ListMerchantsForAgreementResponse) GetItems() []*Merchant {
	if x != nil {
		return x.Items
	}
	return nil
}

type MerchantChangeStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: validate:"required,hexadecimal" json:"-"
	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"-" validate:"required,hexadecimal"`
	// @inject_tag: json:"-"
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"-"`
	// @inject_tag: validate:"omitempty,numeric,oneof=5 6 4 11"
	//
	// The merchant's status. Available values: 5 - removed, 6 - rejected, 4 - signed, 11 - suspend.
	Status int32 `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty" validate:"omitempty,numeric,oneof=5 6 4 11"`
	// The information about changes.
	Message string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *MerchantChangeStatusRequest) Reset() {
	*x = MerchantChangeStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerchantChangeStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerchantChangeStatusRequest) ProtoMessage() {}

func (x *MerchantChangeStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerchantChangeStatusRequest.ProtoReflect.Descriptor instead.
func (*MerchantChangeStatusRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{36}
}

func (x *MerchantChangeStatusRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *MerchantChangeStatusRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *MerchantChangeStatusRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *MerchantChangeStatusRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type NotificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: validate:"required,hexadecimal" json:"-"
	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"-" validate:"required,hexadecimal"`
	// @inject_tag: json:"-"
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"-"`
	// @inject_tag: validate:"required" required:"true"
	//
	// The notification title.
	Title string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty" validate:"required" required:"true"`
	// @inject_tag: validate:"required" required:"true"
	//
	// The notification message.
	Message string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty" validate:"required" required:"true"`
}

func (x *NotificationRequest) Reset() {
	*x = NotificationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationRequest) ProtoMessage() {}

func (x *NotificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationRequest.ProtoReflect.Descriptor instead.
func (*NotificationRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{37}
}

func (x *NotificationRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *NotificationRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *NotificationRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *NotificationRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type Notifications struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"count"
	//
	// The total number of found notifications.
	Count int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count"`
	// @inject_tag: json:"items"
	//
	// The list of notifications.
	Items []*Notification `protobuf:"bytes,2,rep,name=items,proto3" json:"items"`
}

func (x *Notifications) Reset() {
	*x = Notifications{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Notifications) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notifications) ProtoMessage() {}

func (x *Notifications) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notifications.ProtoReflect.Descriptor instead.
func (*Notifications) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{38}
}

func (x *Notifications) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *Notifications) GetItems() []*Notification {
	if x != nil {
		return x.Items
	}
	return nil
}

type ListingNotificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: validate:"required,hexadecimal,len=24"
	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty" validate:"required,hexadecimal,len=24"`
	// @inject_tag: query:"user" validate:"omitempty,hexadecimal,len=24"
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty" query:"user" validate:"omitempty,hexadecimal,len=24"`
	// @inject_tag: query:"-"
	IsSystem int32 `protobuf:"varint,3,opt,name=is_system,json=isSystem,proto3" json:"is_system,omitempty" query:"-"`
	// @inject_tag: query:"limit" validate:"omitempty,numeric,gt=0"
	Limit int64 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty" query:"limit" validate:"omitempty,numeric,gt=0"`
	// @inject_tag: query:"offset" validate:"omitempty,numeric,gte=0"
	Offset int64 `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty" query:"offset" validate:"omitempty,numeric,gte=0"`
	// @inject_tag: query:"sort[]"
	Sort []string `protobuf:"bytes,6,rep,name=sort,proto3" json:"sort,omitempty" query:"sort[]"`
	// @inject_tag: query:"is_system"
	QueryIsSystem bool `protobuf:"varint,7,opt,name=query_is_system,json=queryIsSystem,proto3" json:"query_is_system,omitempty" query:"is_system"`
}

func (x *ListingNotificationRequest) Reset() {
	*x = ListingNotificationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListingNotificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListingNotificationRequest) ProtoMessage() {}

func (x *ListingNotificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListingNotificationRequest.ProtoReflect.Descriptor instead.
func (*ListingNotificationRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{39}
}

func (x *ListingNotificationRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *ListingNotificationRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ListingNotificationRequest) GetIsSystem() int32 {
	if x != nil {
		return x.IsSystem
	}
	return 0
}

func (x *ListingNotificationRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListingNotificationRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListingNotificationRequest) GetSort() []string {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *ListingNotificationRequest) GetQueryIsSystem() bool {
	if x != nil {
		return x.QueryIsSystem
	}
	return false
}

type ListingMerchantPaymentMethod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentMethods []*MerchantPaymentMethod `protobuf:"bytes,1,rep,name=payment_methods,json=paymentMethods,proto3" json:"payment_methods,omitempty"`
}

func (x *ListingMerchantPaymentMethod) Reset() {
	*x = ListingMerchantPaymentMethod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListingMerchantPaymentMethod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListingMerchantPaymentMethod) ProtoMessage() {}

func (x *ListingMerchantPaymentMethod) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListingMerchantPaymentMethod.ProtoReflect.Descriptor instead.
func (*ListingMerchantPaymentMethod) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{40}
}

func (x *ListingMerchantPaymentMethod) GetPaymentMethods() []*MerchantPaymentMethod {
	if x != nil {
		return x.PaymentMethods
	}
	return nil
}

type GetMerchantPaymentMethodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: validate:"required,hexadecimal,len=24"
	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty" validate:"required,hexadecimal,len=24"`
	// @inject_tag: query:"payment_method_id", validate:"required,hexadecimal,len=24"
	PaymentMethodId string `protobuf:"bytes,2,opt,name=payment_method_id,json=paymentMethodId,proto3" json:"payment_method_id,omitempty" query:"payment_method_id" validate:"required,hexadecimal,len=24"`
}

func (x *GetMerchantPaymentMethodRequest) Reset() {
	*x = GetMerchantPaymentMethodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMerchantPaymentMethodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMerchantPaymentMethodRequest) ProtoMessage() {}

func (x *GetMerchantPaymentMethodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMerchantPaymentMethodRequest.ProtoReflect.Descriptor instead.
func (*GetMerchantPaymentMethodRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{41}
}

func (x *GetMerchantPaymentMethodRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *GetMerchantPaymentMethodRequest) GetPaymentMethodId() string {
	if x != nil {
		return x.PaymentMethodId
	}
	return ""
}

type GetMerchantPaymentMethodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32                  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message *ResponseErrorMessage  `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Item    *MerchantPaymentMethod `protobuf:"bytes,3,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *GetMerchantPaymentMethodResponse) Reset() {
	*x = GetMerchantPaymentMethodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMerchantPaymentMethodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMerchantPaymentMethodResponse) ProtoMessage() {}

func (x *GetMerchantPaymentMethodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMerchantPaymentMethodResponse.ProtoReflect.Descriptor instead.
func (*GetMerchantPaymentMethodResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{42}
}

func (x *GetMerchantPaymentMethodResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetMerchantPaymentMethodResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *GetMerchantPaymentMethodResponse) GetItem() *MerchantPaymentMethod {
	if x != nil {
		return x.Item
	}
	return nil
}

type ListMerchantPaymentMethodsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: validate:"required,hexadecimal,len=24"
	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty" validate:"required,hexadecimal,len=24"`
	// @inject_tag: query:"method_name"
	PaymentMethodName string `protobuf:"bytes,2,opt,name=payment_method_name,json=paymentMethodName,proto3" json:"payment_method_name,omitempty" query:"method_name"`
	// @inject_tag: query:"sort[]"
	Sort []string `protobuf:"bytes,3,rep,name=sort,proto3" json:"sort,omitempty" query:"sort[]"`
}

func (x *ListMerchantPaymentMethodsRequest) Reset() {
	*x = ListMerchantPaymentMethodsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMerchantPaymentMethodsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMerchantPaymentMethodsRequest) ProtoMessage() {}

func (x *ListMerchantPaymentMethodsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMerchantPaymentMethodsRequest.ProtoReflect.Descriptor instead.
func (*ListMerchantPaymentMethodsRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{43}
}

func (x *ListMerchantPaymentMethodsRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *ListMerchantPaymentMethodsRequest) GetPaymentMethodName() string {
	if x != nil {
		return x.PaymentMethodName
	}
	return ""
}

func (x *ListMerchantPaymentMethodsRequest) GetSort() []string {
	if x != nil {
		return x.Sort
	}
	return nil
}

type MerchantPaymentMethodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: validate:"required,hexadecimal,len=24"
	MerchantId string `protobuf:"bytes,2,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty" validate:"required,hexadecimal,len=24"`
	// @inject_tag: validate:"required,dive"
	PaymentMethod *MerchantPaymentMethodIdentification `protobuf:"bytes,3,opt,name=payment_method,json=paymentMethod,proto3" json:"payment_method,omitempty" validate:"required,dive"`
	// @inject_tag: validate:"required,dive"
	Commission *MerchantPaymentMethodCommissions `protobuf:"bytes,4,opt,name=commission,proto3" json:"commission,omitempty" validate:"required,dive"`
	// @inject_tag: validate:"required,dive"
	Integration *MerchantPaymentMethodIntegration `protobuf:"bytes,5,opt,name=integration,proto3" json:"integration,omitempty" validate:"required,dive"`
	// @inject_tag: validate:"required"
	IsActive bool `protobuf:"varint,6,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty" validate:"required"`
	// @inject_tag: validate:"required,hexadecimal,len=24"
	UserId string `protobuf:"bytes,7,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty" validate:"required,hexadecimal,len=24"`
}

func (x *MerchantPaymentMethodRequest) Reset() {
	*x = MerchantPaymentMethodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerchantPaymentMethodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerchantPaymentMethodRequest) ProtoMessage() {}

func (x *MerchantPaymentMethodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerchantPaymentMethodRequest.ProtoReflect.Descriptor instead.
func (*MerchantPaymentMethodRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{44}
}

func (x *MerchantPaymentMethodRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *MerchantPaymentMethodRequest) GetPaymentMethod() *MerchantPaymentMethodIdentification {
	if x != nil {
		return x.PaymentMethod
	}
	return nil
}

func (x *MerchantPaymentMethodRequest) GetCommission() *MerchantPaymentMethodCommissions {
	if x != nil {
		return x.Commission
	}
	return nil
}

func (x *MerchantPaymentMethodRequest) GetIntegration() *MerchantPaymentMethodIntegration {
	if x != nil {
		return x.Integration
	}
	return nil
}

func (x *MerchantPaymentMethodRequest) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *MerchantPaymentMethodRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type MerchantPaymentMethodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32                  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message *ResponseErrorMessage  `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Item    *MerchantPaymentMethod `protobuf:"bytes,3,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *MerchantPaymentMethodResponse) Reset() {
	*x = MerchantPaymentMethodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerchantPaymentMethodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerchantPaymentMethodResponse) ProtoMessage() {}

func (x *MerchantPaymentMethodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerchantPaymentMethodResponse.ProtoReflect.Descriptor instead.
func (*MerchantPaymentMethodResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{45}
}

func (x *MerchantPaymentMethodResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *MerchantPaymentMethodResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *MerchantPaymentMethodResponse) GetItem() *MerchantPaymentMethod {
	if x != nil {
		return x.Item
	}
	return nil
}

type GetMerchantResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32                 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Item    *Merchant             `protobuf:"bytes,3,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *GetMerchantResponse) Reset() {
	*x = GetMerchantResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMerchantResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMerchantResponse) ProtoMessage() {}

func (x *GetMerchantResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMerchantResponse.ProtoReflect.Descriptor instead.
func (*GetMerchantResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{46}
}

func (x *GetMerchantResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetMerchantResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *GetMerchantResponse) GetItem() *Merchant {
	if x != nil {
		return x.Item
	}
	return nil
}

type GetNotificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: validate:"required,hexadecimal,len=24" param:"merchant_id"
	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty" validate:"required,hexadecimal,len=24" param:"merchant_id"`
	// @inject_tag: validate:"required,hexadecimal,len=24" param:"notification_id"
	NotificationId string `protobuf:"bytes,2,opt,name=notification_id,json=notificationId,proto3" json:"notification_id,omitempty" validate:"required,hexadecimal,len=24" param:"notification_id"`
}

func (x *GetNotificationRequest) Reset() {
	*x = GetNotificationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNotificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNotificationRequest) ProtoMessage() {}

func (x *GetNotificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNotificationRequest.ProtoReflect.Descriptor instead.
func (*GetNotificationRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{47}
}

func (x *GetNotificationRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *GetNotificationRequest) GetNotificationId() string {
	if x != nil {
		return x.NotificationId
	}
	return ""
}

type CreateRefundRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: validate:"required,uuid" json:"-"
	OrderId string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"-" validate:"required,uuid"`
	// @inject_tag: validate:"required,numeric,gt=0" required:"true"
	//
	// The refund amount.
	Amount float64 `protobuf:"fixed64,2,opt,name=amount,proto3" json:"amount,omitempty" validate:"required,numeric,gt=0" required:"true"`
	// The unique identifier for the user initiated an action on the return.
	CreatorId string `protobuf:"bytes,3,opt,name=creator_id,json=creatorId,proto3" json:"creator_id,omitempty"`
	// The refund reason. Available values: Customer's request, Redeem chargeback, Purchase not provided, Card data was stolen.
	Reason string `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
	// Has a true value if this refund is a chargeback.
	IsChargeback bool `protobuf:"varint,5,opt,name=is_chargeback,json=isChargeback,proto3" json:"is_chargeback,omitempty"`
	// @inject_tag: validate:"omitempty,hexadecimal,len=24" json:"-"
	MerchantId string `protobuf:"bytes,6,opt,name=merchant_id,json=merchantId,proto3" json:"-" validate:"omitempty,hexadecimal,len=24"`
}

func (x *CreateRefundRequest) Reset() {
	*x = CreateRefundRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRefundRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRefundRequest) ProtoMessage() {}

func (x *CreateRefundRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRefundRequest.ProtoReflect.Descriptor instead.
func (*CreateRefundRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{48}
}

func (x *CreateRefundRequest) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *CreateRefundRequest) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *CreateRefundRequest) GetCreatorId() string {
	if x != nil {
		return x.CreatorId
	}
	return ""
}

func (x *CreateRefundRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *CreateRefundRequest) GetIsChargeback() bool {
	if x != nil {
		return x.IsChargeback
	}
	return false
}

func (x *CreateRefundRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

type CreateRefundResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32                 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Item    *Refund               `protobuf:"bytes,3,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *CreateRefundResponse) Reset() {
	*x = CreateRefundResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRefundResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRefundResponse) ProtoMessage() {}

func (x *CreateRefundResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRefundResponse.ProtoReflect.Descriptor instead.
func (*CreateRefundResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{49}
}

func (x *CreateRefundResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *CreateRefundResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *CreateRefundResponse) GetItem() *Refund {
	if x != nil {
		return x.Item
	}
	return nil
}

type ListRefundsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: validate:"required,uuid" param:"order_id"
	OrderId string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty" validate:"required,uuid" param:"order_id"`
	// @inject_tag: validate:"required,hexadecimal,len=24"
	MerchantId string `protobuf:"bytes,2,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty" validate:"required,hexadecimal,len=24"`
	// @inject_tag: query:"limit" validate:"omitempty,numeric,gt=0"
	Limit int64 `protobuf:"varint,7,opt,name=limit,proto3" json:"limit,omitempty" query:"limit" validate:"omitempty,numeric,gt=0"`
	// @inject_tag: query:"offset" validate:"omitempty,numeric,gte=0"
	Offset int64 `protobuf:"varint,8,opt,name=offset,proto3" json:"offset,omitempty" query:"offset" validate:"omitempty,numeric,gte=0"`
}

func (x *ListRefundsRequest) Reset() {
	*x = ListRefundsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRefundsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRefundsRequest) ProtoMessage() {}

func (x *ListRefundsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRefundsRequest.ProtoReflect.Descriptor instead.
func (*ListRefundsRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{50}
}

func (x *ListRefundsRequest) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *ListRefundsRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *ListRefundsRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListRefundsRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type ListRefundsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"count"
	//
	// The total number of found refunds.
	Count int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count"`
	// @inject_tag: json:"items"
	//
	// The list of the refunds.
	Items []*Refund `protobuf:"bytes,2,rep,name=items,proto3" json:"items"`
}

func (x *ListRefundsResponse) Reset() {
	*x = ListRefundsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRefundsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRefundsResponse) ProtoMessage() {}

func (x *ListRefundsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRefundsResponse.ProtoReflect.Descriptor instead.
func (*ListRefundsResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{51}
}

func (x *ListRefundsResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ListRefundsResponse) GetItems() []*Refund {
	if x != nil {
		return x.Items
	}
	return nil
}

type GetRefundRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: validate:"required,uuid" param:"order_id"
	OrderId string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty" validate:"required,uuid" param:"order_id"`
	// @inject_tag: validate:"required,hexadecimal,len=24" param:"refund_id"
	RefundId string `protobuf:"bytes,2,opt,name=refund_id,json=refundId,proto3" json:"refund_id,omitempty" validate:"required,hexadecimal,len=24" param:"refund_id"`
	// @inject_tag: validate:"omitempty,hexadecimal,len=24"
	MerchantId string `protobuf:"bytes,3,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty" validate:"omitempty,hexadecimal,len=24"`
}

func (x *GetRefundRequest) Reset() {
	*x = GetRefundRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRefundRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRefundRequest) ProtoMessage() {}

func (x *GetRefundRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRefundRequest.ProtoReflect.Descriptor instead.
func (*GetRefundRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{52}
}

func (x *GetRefundRequest) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *GetRefundRequest) GetRefundId() string {
	if x != nil {
		return x.RefundId
	}
	return ""
}

func (x *GetRefundRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

type CallbackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Handler   string `protobuf:"bytes,1,opt,name=handler,proto3" json:"handler,omitempty"`
	Body      []byte `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	Signature string `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *CallbackRequest) Reset() {
	*x = CallbackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallbackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallbackRequest) ProtoMessage() {}

func (x *CallbackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallbackRequest.ProtoReflect.Descriptor instead.
func (*CallbackRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{53}
}

func (x *CallbackRequest) GetHandler() string {
	if x != nil {
		return x.Handler
	}
	return ""
}

func (x *CallbackRequest) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *CallbackRequest) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

type PaymentFormDataChangedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	Lang    string `protobuf:"bytes,2,opt,name=lang,proto3" json:"lang,omitempty"`
	Account string `protobuf:"bytes,3,opt,name=account,proto3" json:"account,omitempty"`
}

func (x *PaymentFormDataChangedRequest) Reset() {
	*x = PaymentFormDataChangedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentFormDataChangedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentFormDataChangedRequest) ProtoMessage() {}

func (x *PaymentFormDataChangedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentFormDataChangedRequest.ProtoReflect.Descriptor instead.
func (*PaymentFormDataChangedRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{54}
}

func (x *PaymentFormDataChangedRequest) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *PaymentFormDataChangedRequest) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *PaymentFormDataChangedRequest) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

type PaymentFormUserChangePlatformRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: validate:"required,uuid" param:"order_id" required:"true"
	//
	// The unique identifier for the order.
	OrderId string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty" validate:"required,uuid" param:"order_id" required:"true"`
	// @inject_tag: validate:"required,min=2,max=255" required:"true"
	//
	// The platform's name. Available values: steam, gog, uplay, origin, psn, xbox, nintendo, itch, egs.
	Platform string `protobuf:"bytes,2,opt,name=platform,proto3" json:"platform,omitempty" validate:"required,min=2,max=255" required:"true"`
}

func (x *PaymentFormUserChangePlatformRequest) Reset() {
	*x = PaymentFormUserChangePlatformRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentFormUserChangePlatformRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentFormUserChangePlatformRequest) ProtoMessage() {}

func (x *PaymentFormUserChangePlatformRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentFormUserChangePlatformRequest.ProtoReflect.Descriptor instead.
func (*PaymentFormUserChangePlatformRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{55}
}

func (x *PaymentFormUserChangePlatformRequest) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *PaymentFormUserChangePlatformRequest) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

type PaymentFormUserChangeLangRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: validate:"required,uuid" param:"order_id" required:"true"
	//
	// The unique identifier for the order.
	OrderId string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty" validate:"required,uuid" param:"order_id" required:"true"`
	// @inject_tag: validate:"required,len=2" required:"true"
	//
	// The language code.
	Lang string `protobuf:"bytes,2,opt,name=lang,proto3" json:"lang,omitempty" validate:"required,len=2" required:"true"`
	// @inject_tag: json:"-"
	Ip string `protobuf:"bytes,3,opt,name=ip,proto3" json:"-"`
	// @inject_tag: json:"-"
	AcceptLanguage string `protobuf:"bytes,4,opt,name=accept_language,json=acceptLanguage,proto3" json:"-"`
	// @inject_tag: json:"-"
	UserAgent string `protobuf:"bytes,5,opt,name=user_agent,json=userAgent,proto3" json:"-"`
}

func (x *PaymentFormUserChangeLangRequest) Reset() {
	*x = PaymentFormUserChangeLangRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentFormUserChangeLangRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentFormUserChangeLangRequest) ProtoMessage() {}

func (x *PaymentFormUserChangeLangRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentFormUserChangeLangRequest.ProtoReflect.Descriptor instead.
func (*PaymentFormUserChangeLangRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{56}
}

func (x *PaymentFormUserChangeLangRequest) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *PaymentFormUserChangeLangRequest) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *PaymentFormUserChangeLangRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *PaymentFormUserChangeLangRequest) GetAcceptLanguage() string {
	if x != nil {
		return x.AcceptLanguage
	}
	return ""
}

func (x *PaymentFormUserChangeLangRequest) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

type PaymentFormUserChangePaymentAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: validate:"required,uuid" param:"order_id" required:"true"
	//
	// The unique identifier for the order.
	OrderId string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty" validate:"required,uuid" param:"order_id" required:"true"`
	// @inject_tag: validate:"required,hexadecimal,len=24" required:"true"
	//
	// The unique identifier for the payment method.
	MethodId string `protobuf:"bytes,2,opt,name=method_id,json=methodId,proto3" json:"method_id,omitempty" validate:"required,hexadecimal,len=24" required:"true"`
	// @inject_tag: validate:"required" required:"true"
	//
	// The customer account in the merchant project.
	Account string `protobuf:"bytes,3,opt,name=account,proto3" json:"account,omitempty" validate:"required" required:"true"`
	// @inject_tag: json:"-"
	Ip string `protobuf:"bytes,4,opt,name=ip,proto3" json:"-"`
	// @inject_tag: json:"-"
	AcceptLanguage string `protobuf:"bytes,5,opt,name=accept_language,json=acceptLanguage,proto3" json:"-"`
	// @inject_tag: json:"-"
	UserAgent string `protobuf:"bytes,6,opt,name=user_agent,json=userAgent,proto3" json:"-"`
}

func (x *PaymentFormUserChangePaymentAccountRequest) Reset() {
	*x = PaymentFormUserChangePaymentAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentFormUserChangePaymentAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentFormUserChangePaymentAccountRequest) ProtoMessage() {}

func (x *PaymentFormUserChangePaymentAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentFormUserChangePaymentAccountRequest.ProtoReflect.Descriptor instead.
func (*PaymentFormUserChangePaymentAccountRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{57}
}

func (x *PaymentFormUserChangePaymentAccountRequest) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *PaymentFormUserChangePaymentAccountRequest) GetMethodId() string {
	if x != nil {
		return x.MethodId
	}
	return ""
}

func (x *PaymentFormUserChangePaymentAccountRequest) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *PaymentFormUserChangePaymentAccountRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *PaymentFormUserChangePaymentAccountRequest) GetAcceptLanguage() string {
	if x != nil {
		return x.AcceptLanguage
	}
	return ""
}

func (x *PaymentFormUserChangePaymentAccountRequest) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

type PaymentFormDataChangeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32                              `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message *ResponseErrorMessage              `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Item    *PaymentFormDataChangeResponseItem `protobuf:"bytes,3,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *PaymentFormDataChangeResponse) Reset() {
	*x = PaymentFormDataChangeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentFormDataChangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentFormDataChangeResponse) ProtoMessage() {}

func (x *PaymentFormDataChangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentFormDataChangeResponse.ProtoReflect.Descriptor instead.
func (*PaymentFormDataChangeResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{58}
}

func (x *PaymentFormDataChangeResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *PaymentFormDataChangeResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *PaymentFormDataChangeResponse) GetItem() *PaymentFormDataChangeResponseItem {
	if x != nil {
		return x.Item
	}
	return nil
}

type ProcessBillingAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: validate:"required,uuid" param:"order_id" required:"true"
	//
	// The unique identifier for the order.
	OrderId string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty" validate:"required,uuid" param:"order_id" required:"true"`
	// @inject_tag: validate:"required,len=2" required:"true"
	//
	// The customer's country. Two-letter country code in ISO 3166-1, in uppercase (for instance US).
	Country string `protobuf:"bytes,2,opt,name=country,proto3" json:"country,omitempty" validate:"required,len=2" required:"true"`
	// @inject_tag: validate:"omitempty,zip_usa"
	//
	// The customer's ZIP code.
	Zip string `protobuf:"bytes,4,opt,name=zip,proto3" json:"zip,omitempty" validate:"omitempty,zip_usa"`
	// @inject_tag: json:"-"
	Ip string `protobuf:"bytes,5,opt,name=ip,proto3" json:"-"`
	// @inject_tag: json:"-"
	Cookie string `protobuf:"bytes,6,opt,name=cookie,proto3" json:"-"`
}

func (x *ProcessBillingAddressRequest) Reset() {
	*x = ProcessBillingAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessBillingAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessBillingAddressRequest) ProtoMessage() {}

func (x *ProcessBillingAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessBillingAddressRequest.ProtoReflect.Descriptor instead.
func (*ProcessBillingAddressRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{59}
}

func (x *ProcessBillingAddressRequest) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *ProcessBillingAddressRequest) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *ProcessBillingAddressRequest) GetZip() string {
	if x != nil {
		return x.Zip
	}
	return ""
}

func (x *ProcessBillingAddressRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *ProcessBillingAddressRequest) GetCookie() string {
	if x != nil {
		return x.Cookie
	}
	return ""
}

type ProcessBillingAddressResponseItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"has_vat"
	//
	// Has a true value if the payment has the VAT commission.
	HasVat bool `protobuf:"varint,2,opt,name=has_vat,json=hasVat,proto3" json:"has_vat"`
	// @inject_tag: json:"vat"
	//
	// The amount of VAT.
	Vat float64 `protobuf:"fixed64,3,opt,name=vat,proto3" json:"vat"`
	// @inject_tag: json:"amount"
	//
	// The payment amount without VAT.
	Amount float64 `protobuf:"fixed64,4,opt,name=amount,proto3" json:"amount"`
	// @inject_tag: json:"total_amount"
	//
	// The payment amount including VAT.
	TotalAmount float64 `protobuf:"fixed64,5,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount"`
	//@inject_tag: json:"currency"
	//
	// The currency of the order.
	Currency string `protobuf:"bytes,6,opt,name=currency,proto3" json:"currency"`
	// @inject_tag: json:"items"
	//
	// The list of purchased items in this order. Can be null for a payment order with the simple or virtual_currency types.
	Items []*OrderItem `protobuf:"bytes,7,rep,name=items,proto3" json:"items"`
	// @inject_tag: json:"charge_currency"
	//
	// The currency of the order charge. It can differ from the order currency because it also depends on the customer's card currency.
	ChargeCurrency string `protobuf:"bytes,8,opt,name=charge_currency,json=chargeCurrency,proto3" json:"charge_currency"`
	// @inject_tag: json:"charge_amount"
	//
	// The total amount of the order charge.
	ChargeAmount float64 `protobuf:"fixed64,9,opt,name=charge_amount,json=chargeAmount,proto3" json:"charge_amount"`
	// @inject_tag: json:"vat_in_charge_currency"
	//
	// The VAT currency of the order charge. It can differ from the order currency because it depends on the customer's card currency.
	VatInChargeCurrency float64 `protobuf:"fixed64,10,opt,name=vat_in_charge_currency,json=vatInChargeCurrency,proto3" json:"vat_in_charge_currency"`
	// @inject_tag: json:"country_change_allowed"
	//
	// Has a true value if the customer can select another country while payments are disallowed for his country.
	CountryChangeAllowed bool `protobuf:"varint,11,opt,name=country_change_allowed,json=countryChangeAllowed,proto3" json:"country_change_allowed"`
	// @inject_tag: json:"vat_rate"
	//
	// VAT rate.
	VatRate float64 `protobuf:"fixed64,12,opt,name=vat_rate,json=vatRate,proto3" json:"vat_rate"`
}

func (x *ProcessBillingAddressResponseItem) Reset() {
	*x = ProcessBillingAddressResponseItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessBillingAddressResponseItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessBillingAddressResponseItem) ProtoMessage() {}

func (x *ProcessBillingAddressResponseItem) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessBillingAddressResponseItem.ProtoReflect.Descriptor instead.
func (*ProcessBillingAddressResponseItem) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{60}
}

func (x *ProcessBillingAddressResponseItem) GetHasVat() bool {
	if x != nil {
		return x.HasVat
	}
	return false
}

func (x *ProcessBillingAddressResponseItem) GetVat() float64 {
	if x != nil {
		return x.Vat
	}
	return 0
}

func (x *ProcessBillingAddressResponseItem) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *ProcessBillingAddressResponseItem) GetTotalAmount() float64 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *ProcessBillingAddressResponseItem) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *ProcessBillingAddressResponseItem) GetItems() []*OrderItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ProcessBillingAddressResponseItem) GetChargeCurrency() string {
	if x != nil {
		return x.ChargeCurrency
	}
	return ""
}

func (x *ProcessBillingAddressResponseItem) GetChargeAmount() float64 {
	if x != nil {
		return x.ChargeAmount
	}
	return 0
}

func (x *ProcessBillingAddressResponseItem) GetVatInChargeCurrency() float64 {
	if x != nil {
		return x.VatInChargeCurrency
	}
	return 0
}

func (x *ProcessBillingAddressResponseItem) GetCountryChangeAllowed() bool {
	if x != nil {
		return x.CountryChangeAllowed
	}
	return false
}

func (x *ProcessBillingAddressResponseItem) GetVatRate() float64 {
	if x != nil {
		return x.VatRate
	}
	return 0
}

type ProcessBillingAddressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32                              `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message *ResponseErrorMessage              `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Item    *ProcessBillingAddressResponseItem `protobuf:"bytes,3,opt,name=item,proto3" json:"item,omitempty"`
	// @inject_tag: json:"-"
	Cookie string `protobuf:"bytes,4,opt,name=cookie,proto3" json:"-"`
}

func (x *ProcessBillingAddressResponse) Reset() {
	*x = ProcessBillingAddressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessBillingAddressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessBillingAddressResponse) ProtoMessage() {}

func (x *ProcessBillingAddressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessBillingAddressResponse.ProtoReflect.Descriptor instead.
func (*ProcessBillingAddressResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{61}
}

func (x *ProcessBillingAddressResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ProcessBillingAddressResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *ProcessBillingAddressResponse) GetItem() *ProcessBillingAddressResponseItem {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *ProcessBillingAddressResponse) GetCookie() string {
	if x != nil {
		return x.Cookie
	}
	return ""
}

type GetMerchantByRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	UserId     string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *GetMerchantByRequest) Reset() {
	*x = GetMerchantByRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMerchantByRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMerchantByRequest) ProtoMessage() {}

func (x *GetMerchantByRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMerchantByRequest.ProtoReflect.Descriptor instead.
func (*GetMerchantByRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{62}
}

func (x *GetMerchantByRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *GetMerchantByRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type ChangeMerchantDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: validate:"required,hexadecimal,len=24"
	//
	// The unique identifier for the merchant.
	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty" validate:"required,hexadecimal,len=24"`
	// Has a true value if the merchant has signed the license agreement.
	HasMerchantSignature bool `protobuf:"varint,3,opt,name=has_merchant_signature,json=hasMerchantSignature,proto3" json:"has_merchant_signature,omitempty"`
	// Has a true value if PaySuper has signed the license agreement.
	HasPspSignature bool `protobuf:"varint,4,opt,name=has_psp_signature,json=hasPspSignature,proto3" json:"has_psp_signature,omitempty"`
}

func (x *ChangeMerchantDataRequest) Reset() {
	*x = ChangeMerchantDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeMerchantDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeMerchantDataRequest) ProtoMessage() {}

func (x *ChangeMerchantDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeMerchantDataRequest.ProtoReflect.Descriptor instead.
func (*ChangeMerchantDataRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{63}
}

func (x *ChangeMerchantDataRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *ChangeMerchantDataRequest) GetHasMerchantSignature() bool {
	if x != nil {
		return x.HasMerchantSignature
	}
	return false
}

func (x *ChangeMerchantDataRequest) GetHasPspSignature() bool {
	if x != nil {
		return x.HasPspSignature
	}
	return false
}

type ChangeMerchantDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32                 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Item    *Merchant             `protobuf:"bytes,3,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *ChangeMerchantDataResponse) Reset() {
	*x = ChangeMerchantDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeMerchantDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeMerchantDataResponse) ProtoMessage() {}

func (x *ChangeMerchantDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeMerchantDataResponse.ProtoReflect.Descriptor instead.
func (*ChangeMerchantDataResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{64}
}

func (x *ChangeMerchantDataResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ChangeMerchantDataResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *ChangeMerchantDataResponse) GetItem() *Merchant {
	if x != nil {
		return x.Item
	}
	return nil
}

type ChangeMerchantResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32                 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Item    *Merchant             `protobuf:"bytes,3,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *ChangeMerchantResponse) Reset() {
	*x = ChangeMerchantResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeMerchantResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeMerchantResponse) ProtoMessage() {}

func (x *ChangeMerchantResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeMerchantResponse.ProtoReflect.Descriptor instead.
func (*ChangeMerchantResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{65}
}

func (x *ChangeMerchantResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ChangeMerchantResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *ChangeMerchantResponse) GetItem() *Merchant {
	if x != nil {
		return x.Item
	}
	return nil
}

type ChangeMerchantStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32                 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Item    *Merchant             `protobuf:"bytes,3,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *ChangeMerchantStatusResponse) Reset() {
	*x = ChangeMerchantStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeMerchantStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeMerchantStatusResponse) ProtoMessage() {}

func (x *ChangeMerchantStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeMerchantStatusResponse.ProtoReflect.Descriptor instead.
func (*ChangeMerchantStatusResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{66}
}

func (x *ChangeMerchantStatusResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ChangeMerchantStatusResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *ChangeMerchantStatusResponse) GetItem() *Merchant {
	if x != nil {
		return x.Item
	}
	return nil
}

type CreateNotificationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32                 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Item    *Notification         `protobuf:"bytes,3,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *CreateNotificationResponse) Reset() {
	*x = CreateNotificationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNotificationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNotificationResponse) ProtoMessage() {}

func (x *CreateNotificationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNotificationResponse.ProtoReflect.Descriptor instead.
func (*CreateNotificationResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{67}
}

func (x *CreateNotificationResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *CreateNotificationResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *CreateNotificationResponse) GetItem() *Notification {
	if x != nil {
		return x.Item
	}
	return nil
}

type OrderCreateProcessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32                 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Item    *Order                `protobuf:"bytes,3,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *OrderCreateProcessResponse) Reset() {
	*x = OrderCreateProcessResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderCreateProcessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderCreateProcessResponse) ProtoMessage() {}

func (x *OrderCreateProcessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderCreateProcessResponse.ProtoReflect.Descriptor instead.
func (*OrderCreateProcessResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{68}
}

func (x *OrderCreateProcessResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *OrderCreateProcessResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *OrderCreateProcessResponse) GetItem() *Order {
	if x != nil {
		return x.Item
	}
	return nil
}

type SetMerchantS3AgreementRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: validate:"required,hexadecimal,len=24"
	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty" validate:"required,hexadecimal,len=24"`
	// @inject_tag: json:"-"
	S3AgreementName string `protobuf:"bytes,2,opt,name=s3_agreement_name,json=s3AgreementName,proto3" json:"-"`
}

func (x *SetMerchantS3AgreementRequest) Reset() {
	*x = SetMerchantS3AgreementRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMerchantS3AgreementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMerchantS3AgreementRequest) ProtoMessage() {}

func (x *SetMerchantS3AgreementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMerchantS3AgreementRequest.ProtoReflect.Descriptor instead.
func (*SetMerchantS3AgreementRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{69}
}

func (x *SetMerchantS3AgreementRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *SetMerchantS3AgreementRequest) GetS3AgreementName() string {
	if x != nil {
		return x.S3AgreementName
	}
	return ""
}

type KeyProductInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier for the product.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The unique identifier for the product's project.
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// The localized name of the product.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// The localized concise description of the product.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// The localized extended description of the product.
	LongDescription string `protobuf:"bytes,5,opt,name=long_description,json=longDescription,proto3" json:"long_description,omitempty"`
	// The list of the URL images of the product.
	Images []string `protobuf:"bytes,6,rep,name=images,proto3" json:"images,omitempty"`
	// The list of the platforms data.
	Platforms []*PlatformPriceInfo `protobuf:"bytes,7,rep,name=platforms,proto3" json:"platforms,omitempty"`
}

func (x *KeyProductInfo) Reset() {
	*x = KeyProductInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyProductInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyProductInfo) ProtoMessage() {}

func (x *KeyProductInfo) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyProductInfo.ProtoReflect.Descriptor instead.
func (*KeyProductInfo) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{70}
}

func (x *KeyProductInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *KeyProductInfo) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *KeyProductInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KeyProductInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *KeyProductInfo) GetLongDescription() string {
	if x != nil {
		return x.LongDescription
	}
	return ""
}

func (x *KeyProductInfo) GetImages() []string {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *KeyProductInfo) GetPlatforms() []*PlatformPriceInfo {
	if x != nil {
		return x.Platforms
	}
	return nil
}

type PlatformPriceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier for the platform.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The platform's name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The product price data.
	Price *ProductPriceInfo `protobuf:"bytes,3,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *PlatformPriceInfo) Reset() {
	*x = PlatformPriceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlatformPriceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlatformPriceInfo) ProtoMessage() {}

func (x *PlatformPriceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlatformPriceInfo.ProtoReflect.Descriptor instead.
func (*PlatformPriceInfo) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{71}
}

func (x *PlatformPriceInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PlatformPriceInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PlatformPriceInfo) GetPrice() *ProductPriceInfo {
	if x != nil {
		return x.Price
	}
	return nil
}

type ProductPriceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The product's price.
	Amount float64 `protobuf:"fixed64,1,opt,name=amount,proto3" json:"amount,omitempty"`
	// The product's price currency.
	Currency string `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
	// The product's region.
	Region string `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	// Has a true value if the price was calculated in the default currency instead of the specified.
	IsFallback bool `protobuf:"varint,4,opt,name=is_fallback,json=isFallback,proto3" json:"is_fallback,omitempty"`
}

func (x *ProductPriceInfo) Reset() {
	*x = ProductPriceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductPriceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductPriceInfo) ProtoMessage() {}

func (x *ProductPriceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductPriceInfo.ProtoReflect.Descriptor instead.
func (*ProductPriceInfo) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{72}
}

func (x *ProductPriceInfo) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *ProductPriceInfo) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *ProductPriceInfo) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ProductPriceInfo) GetIsFallback() bool {
	if x != nil {
		return x.IsFallback
	}
	return false
}

type KeyProduct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"omitempty,hexadecimal,len=24" json:"id" faker:"objectIdString"
	//
	// The unique identifier for the key-activated product.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id" validate:"omitempty,hexadecimal,len=24" faker:"objectIdString"`
	//@inject_tag: validate:"required,hexadecimal,len=24" json:"-" faker:"objectIdString"
	MerchantId string `protobuf:"bytes,2,opt,name=merchant_id,json=merchantId,proto3" json:"-" validate:"required,hexadecimal,len=24" faker:"objectIdString"`
	//@inject_tag: validate:"required,hexadecimal,len=24" json:"project_id" faker:"objectIdString"
	//
	// The unique identifier for the project.
	ProjectId string `protobuf:"bytes,3,opt,name=project_id,json=projectId,proto3" json:"project_id" validate:"required,hexadecimal,len=24" faker:"objectIdString"`
	//@inject_tag: validate:"omitempty" json:"object"
	//
	// The system constant that contains the returned object's type.
	Object string `protobuf:"bytes,4,opt,name=object,proto3" json:"object" validate:"omitempty"`
	//@inject_tag: validate:"required" json:"sku"
	//
	// The SKU of the product.
	Sku string `protobuf:"bytes,5,opt,name=sku,proto3" json:"sku" validate:"required"`
	//@inject_tag: validate:"required" json:"name"
	//
	// The list of the product's localized names.
	Name map[string]string `protobuf:"bytes,6,rep,name=name,proto3" json:"name" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" validate:"required"`
	//@inject_tag: validate:"required,alpha,len=3" json:"default_currency"
	//
	// The product's default currency. Three-letter Currency Code ISO 4217, in uppercase.
	DefaultCurrency string `protobuf:"bytes,7,opt,name=default_currency,json=defaultCurrency,proto3" json:"default_currency" validate:"required,alpha,len=3"`
	//@inject_tag: json:"enabled"
	//
	// Has a true value if the product is enabled.
	Enabled bool `protobuf:"varint,8,opt,name=enabled,proto3" json:"enabled"`
	//@inject_tag: validate:"required,min=1,dive" json:"platforms"
	//
	// The list of the platforms.
	Platforms []*PlatformPrice `protobuf:"bytes,9,rep,name=platforms,proto3" json:"platforms" validate:"required,min=1,dive"`
	//@inject_tag: validate:"required" json:"description"
	//
	// The list of the product's localized concise descriptions.
	Description map[string]string `protobuf:"bytes,10,rep,name=description,proto3" json:"description" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" validate:"required"`
	//@inject_tag: validate:"omitempty" json:"long_description"
	//
	// The list of the product's localized extended descriptions.
	LongDescription map[string]string `protobuf:"bytes,11,rep,name=long_description,json=longDescription,proto3" json:"long_description" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" validate:"omitempty"`
	//@inject_tag: json:"created_at"
	//
	// The date of the product creation.
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,12,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	//@inject_tag: json:"updated_at"
	//
	// The date of the product last update.
	UpdatedAt *timestamp.Timestamp `protobuf:"bytes,13,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	//@inject_tag: json:"cover"
	//
	// The product's covers for each localization.
	Cover *ImageCollection `protobuf:"bytes,14,opt,name=cover,proto3" json:"cover"`
	//@inject_tag: validate:"omitempty,url" json:"url"
	//
	// The product's URL in the merchant project.
	Url string `protobuf:"bytes,15,opt,name=url,proto3" json:"url" validate:"omitempty,url"`
	//@inject_tag: json:"metadata"
	//
	// The string-value description for the product.
	Metadata map[string]string `protobuf:"bytes,16,rep,name=metadata,proto3" json:"metadata" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	//@inject_tag: json:"-"
	Deleted bool `protobuf:"varint,17,opt,name=deleted,proto3" json:"-"`
	//@inject_tag: json:"published_at"
	//
	// Tha date of the product publishing.
	PublishedAt *timestamp.Timestamp `protobuf:"bytes,18,opt,name=published_at,json=publishedAt,proto3" json:"published_at"`
	// @inject_tag: json:"pricing" validate:"required,oneof=currency manual steam default"
	//
	// The pricing mode. Available values: currency, manual, steam, default.
	Pricing string `protobuf:"bytes,19,opt,name=pricing,proto3" json:"pricing" validate:"required,oneof=currency manual steam default"`
	// @inject_tag: json:"minimal_limit_notify" validate:"omitempty"
	//
	// The minimum number of keys to send a notification that they are running out.
	MinimalLimitNotify int32 `protobuf:"varint,20,opt,name=minimal_limit_notify,json=minimalLimitNotify,proto3" json:"minimal_limit_notify" validate:"omitempty"`
}

func (x *KeyProduct) Reset() {
	*x = KeyProduct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyProduct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyProduct) ProtoMessage() {}

func (x *KeyProduct) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyProduct.ProtoReflect.Descriptor instead.
func (*KeyProduct) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{73}
}

func (x *KeyProduct) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *KeyProduct) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *KeyProduct) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *KeyProduct) GetObject() string {
	if x != nil {
		return x.Object
	}
	return ""
}

func (x *KeyProduct) GetSku() string {
	if x != nil {
		return x.Sku
	}
	return ""
}

func (x *KeyProduct) GetName() map[string]string {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *KeyProduct) GetDefaultCurrency() string {
	if x != nil {
		return x.DefaultCurrency
	}
	return ""
}

func (x *KeyProduct) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *KeyProduct) GetPlatforms() []*PlatformPrice {
	if x != nil {
		return x.Platforms
	}
	return nil
}

func (x *KeyProduct) GetDescription() map[string]string {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *KeyProduct) GetLongDescription() map[string]string {
	if x != nil {
		return x.LongDescription
	}
	return nil
}

func (x *KeyProduct) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *KeyProduct) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *KeyProduct) GetCover() *ImageCollection {
	if x != nil {
		return x.Cover
	}
	return nil
}

func (x *KeyProduct) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *KeyProduct) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *KeyProduct) GetDeleted() bool {
	if x != nil {
		return x.Deleted
	}
	return false
}

func (x *KeyProduct) GetPublishedAt() *timestamp.Timestamp {
	if x != nil {
		return x.PublishedAt
	}
	return nil
}

func (x *KeyProduct) GetPricing() string {
	if x != nil {
		return x.Pricing
	}
	return ""
}

func (x *KeyProduct) GetMinimalLimitNotify() int32 {
	if x != nil {
		return x.MinimalLimitNotify
	}
	return 0
}

type PlatformPrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"required" json:"id"
	//
	// The unique name of the platform. Available values: steam, gog, uplay, origin, psn, xbox, nintendo, itch, egs.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id" validate:"required"`
	//@inject_tag: json:"name"
	//
	// The full name of the platform. (for instance for gog - Good old games.com)
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	//@inject_tag: validate:"required,min=1,currency_price,dive" json:"prices"
	//
	// The list of the key pricing for all platforms.
	Prices []*ProductPrice `protobuf:"bytes,3,rep,name=prices,proto3" json:"prices" validate:"required,min=1,currency_price,dive"`
	//@inject_tag: validate:"omitempty,url" json:"eula_url"
	//
	// The license agreement link of the platform.
	EulaUrl string `protobuf:"bytes,4,opt,name=eula_url,json=eulaUrl,proto3" json:"eula_url" validate:"omitempty,url"`
	//@inject_tag: validate:"omitempty,url" json:"activation_url"
	//
	// The link of the key's activation rules for the platform.
	ActivationUrl string `protobuf:"bytes,5,opt,name=activation_url,json=activationUrl,proto3" json:"activation_url" validate:"omitempty,url"`
	//@inject_tag: validate:"omitempty" json:"count"
	//
	// The number of created keys for the platform.
	Count int32 `protobuf:"varint,6,opt,name=count,proto3" json:"count" validate:"omitempty"`
	//@inject_tag: validate:"dive" json:"os"
	//
	// An available operation systems for keys on this platform.
	Os []*PlatformOs `protobuf:"bytes,7,rep,name=os,proto3" json:"os" validate:"dive"`
	//@inject_tag: json:"console_only"
	ConsoleOnly bool `protobuf:"varint,8,opt,name=console_only,json=consoleOnly,proto3" json:"console_only"`
}

func (x *PlatformPrice) Reset() {
	*x = PlatformPrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlatformPrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlatformPrice) ProtoMessage() {}

func (x *PlatformPrice) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlatformPrice.ProtoReflect.Descriptor instead.
func (*PlatformPrice) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{74}
}

func (x *PlatformPrice) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PlatformPrice) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PlatformPrice) GetPrices() []*ProductPrice {
	if x != nil {
		return x.Prices
	}
	return nil
}

func (x *PlatformPrice) GetEulaUrl() string {
	if x != nil {
		return x.EulaUrl
	}
	return ""
}

func (x *PlatformPrice) GetActivationUrl() string {
	if x != nil {
		return x.ActivationUrl
	}
	return ""
}

func (x *PlatformPrice) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *PlatformPrice) GetOs() []*PlatformOs {
	if x != nil {
		return x.Os
	}
	return nil
}

func (x *PlatformPrice) GetConsoleOnly() bool {
	if x != nil {
		return x.ConsoleOnly
	}
	return false
}

type PlatformOs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"required,oneof=win mac linux steam" json:"id"
	//
	// The unique name of the operation system. Available values: win, mac, linux and steam.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id" validate:"required,oneof=win mac linux steam"`
	//@inject_tag: json:"name"
	//
	// The full name of the operation system. (for instance for steam - SteamOS)
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
}

func (x *PlatformOs) Reset() {
	*x = PlatformOs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlatformOs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlatformOs) ProtoMessage() {}

func (x *PlatformOs) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlatformOs.ProtoReflect.Descriptor instead.
func (*PlatformOs) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{75}
}

func (x *PlatformOs) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PlatformOs) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Platform struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"required,hexadecimal,len=24" json:"id" required:"true"
	//
	// The unique identifier for the platform.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id" validate:"required,hexadecimal,len=24" required:"true"`
	//@inject_tag: json:"name"
	//
	// The platform's name. Available values: steam, gog, uplay, origin, psn, xbox, nintendo, itch, egs.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	//@inject_tag: json:"-"
	Icon string `protobuf:"bytes,3,opt,name=icon,proto3" json:"-"`
	//@inject_tag: json:"-"
	Order int32 `protobuf:"varint,4,opt,name=order,proto3" json:"-"`
	//@inject_tag: json:"-"
	ActivationInstructionUrl string `protobuf:"bytes,5,opt,name=activation_instruction_url,json=activationInstructionUrl,proto3" json:"-"`
	//@inject_tag: json:"os"
	Os []*PlatformOs `protobuf:"bytes,6,rep,name=os,proto3" json:"os"`
	//@inject_tag: json:"console_only"
	ConsoleOnly bool `protobuf:"varint,7,opt,name=console_only,json=consoleOnly,proto3" json:"console_only"`
}

func (x *Platform) Reset() {
	*x = Platform{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Platform) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Platform) ProtoMessage() {}

func (x *Platform) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Platform.ProtoReflect.Descriptor instead.
func (*Platform) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{76}
}

func (x *Platform) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Platform) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Platform) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *Platform) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *Platform) GetActivationInstructionUrl() string {
	if x != nil {
		return x.ActivationInstructionUrl
	}
	return ""
}

func (x *Platform) GetOs() []*PlatformOs {
	if x != nil {
		return x.Os
	}
	return nil
}

func (x *Platform) GetConsoleOnly() bool {
	if x != nil {
		return x.ConsoleOnly
	}
	return false
}

type Product struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"omitempty,hexadecimal,len=24" json:"id" bson:"_id" faker:"objectIdString"
	//
	// The unique identifier for the product.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id" validate:"omitempty,hexadecimal,len=24" bson:"_id" faker:"objectIdString"`
	//@inject_tag: validate:"required,hexadecimal,len=24" json:"-" bson:"merchant_id" required:"true" faker:"objectIdString"
	//
	// The unique identifier for the product's merchant.
	MerchantId string `protobuf:"bytes,2,opt,name=merchant_id,json=merchantId,proto3" json:"-" validate:"required,hexadecimal,len=24" bson:"merchant_id" required:"true" faker:"objectIdString"`
	//@inject_tag: validate:"required,hexadecimal,len=24" json:"project_id" bson:"project_id" required:"true" faker:"objectIdString"
	//
	// The unique identifier for the product's project.
	ProjectId string `protobuf:"bytes,3,opt,name=project_id,json=projectId,proto3" json:"project_id" validate:"required,hexadecimal,len=24" bson:"project_id" required:"true" faker:"objectIdString"`
	//@inject_tag: validate:"required" json:"object" required:"true"
	//
	// The system constant that contains the returned object's type. Const value: product.
	Object string `protobuf:"bytes,4,opt,name=object,proto3" json:"object" validate:"required" required:"true"`
	//@inject_tag: validate:"required" json:"type" required:"true"
	//
	// The product's type.
	Type string `protobuf:"bytes,5,opt,name=type,proto3" json:"type" validate:"required" required:"true"`
	//@inject_tag: validate:"required" json:"sku" bson:"sku" required:"true"
	//
	// The SKU of the product.
	Sku string `protobuf:"bytes,6,opt,name=sku,proto3" json:"sku" validate:"required" bson:"sku" required:"true"`
	//@inject_tag: validate:"required" json:"name" required:"true"
	//
	// The list of the product's localized names.
	Name map[string]string `protobuf:"bytes,7,rep,name=name,proto3" json:"name" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" validate:"required" required:"true"`
	//@inject_tag: validate:"required,alpha,len=3" json:"default_currency" required:"true"
	//
	// The product's default currency.
	DefaultCurrency string `protobuf:"bytes,8,opt,name=default_currency,json=defaultCurrency,proto3" json:"default_currency" validate:"required,alpha,len=3" required:"true"`
	//@inject_tag: json:"enabled"
	//
	// Has a true value if the product is enabled.
	Enabled bool `protobuf:"varint,9,opt,name=enabled,proto3" json:"enabled"`
	//@inject_tag: validate:"required,min=1,currency_price,dive" json:"prices"
	//
	// The product's price.
	Prices []*ProductPrice `protobuf:"bytes,10,rep,name=prices,proto3" json:"prices" validate:"required,min=1,currency_price,dive"`
	//@inject_tag: validate:"required" json:"description"
	//
	// The list of the product's localized concise descriptions.
	Description map[string]string `protobuf:"bytes,11,rep,name=description,proto3" json:"description" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" validate:"required"`
	//@inject_tag: validate:"omitempty" json:"long_description"
	//
	// The list of the product's localized extended descriptions.
	LongDescription map[string]string `protobuf:"bytes,12,rep,name=long_description,json=longDescription,proto3" json:"long_description" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" validate:"omitempty"`
	//@inject_tag: json:"created_at"
	//
	// The date the product has been created.
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,13,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	//@inject_tag: json:"updated_at"
	//
	// The date the product has been updated.
	UpdatedAt *timestamp.Timestamp `protobuf:"bytes,14,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	//@inject_tag: validate:"dive,omitempty,uri" json:"images"
	//
	// The product's images URL list.
	Images []string `protobuf:"bytes,15,rep,name=images,proto3" json:"images" validate:"dive,omitempty,uri"`
	//@inject_tag: validate:"omitempty,url" json:"url"
	//
	// The product's URL in the merchant project.
	Url string `protobuf:"bytes,16,opt,name=url,proto3" json:"url" validate:"omitempty,url"`
	//@inject_tag: json:"metadata"
	//
	// The string-value description for the product's object.
	Metadata map[string]string `protobuf:"bytes,17,rep,name=metadata,proto3" json:"metadata" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	//@inject_tag: json:"-" bson:"deleted"
	Deleted bool `protobuf:"varint,18,opt,name=deleted,proto3" json:"-" bson:"deleted"`
	// @inject_tag: json:"pricing" validate:"required,oneof=currency manual steam default" required:"true"
	//
	// The pricing mode. Available values: currency, manual, steam, default.
	Pricing string `protobuf:"bytes,19,opt,name=pricing,proto3" json:"pricing" validate:"required,oneof=currency manual steam default" required:"true"`
	// @inject_tag: json:"billing_type" validate:"required,oneof=real virtual" required:"true"
	//
	// The billing type. Available values: real, virtual.
	BillingType string `protobuf:"bytes,20,opt,name=billing_type,json=billingType,proto3" json:"billing_type" validate:"required,oneof=real virtual" required:"true"`
}

func (x *Product) Reset() {
	*x = Product{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product) ProtoMessage() {}

func (x *Product) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product.ProtoReflect.Descriptor instead.
func (*Product) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{77}
}

func (x *Product) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Product) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *Product) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *Product) GetObject() string {
	if x != nil {
		return x.Object
	}
	return ""
}

func (x *Product) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Product) GetSku() string {
	if x != nil {
		return x.Sku
	}
	return ""
}

func (x *Product) GetName() map[string]string {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Product) GetDefaultCurrency() string {
	if x != nil {
		return x.DefaultCurrency
	}
	return ""
}

func (x *Product) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Product) GetPrices() []*ProductPrice {
	if x != nil {
		return x.Prices
	}
	return nil
}

func (x *Product) GetDescription() map[string]string {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *Product) GetLongDescription() map[string]string {
	if x != nil {
		return x.LongDescription
	}
	return nil
}

func (x *Product) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Product) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Product) GetImages() []string {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *Product) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Product) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Product) GetDeleted() bool {
	if x != nil {
		return x.Deleted
	}
	return false
}

func (x *Product) GetPricing() string {
	if x != nil {
		return x.Pricing
	}
	return ""
}

func (x *Product) GetBillingType() string {
	if x != nil {
		return x.BillingType
	}
	return ""
}

type ListProductsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"name" query:"name"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name" query:"name"`
	//@inject_tag: json:"sku" query:"sku"
	Sku string `protobuf:"bytes,2,opt,name=sku,proto3" json:"sku" query:"sku"`
	// @inject_tag: validate:"required,numeric,gt=0" json:"limit" query:"limit"
	Limit int64 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit" validate:"required,numeric,gt=0" query:"limit"`
	// @inject_tag: validate:"omitempty,numeric,gte=0" json:"offset" query:"offset"
	Offset int64 `protobuf:"varint,4,opt,name=offset,proto3" json:"offset" validate:"omitempty,numeric,gte=0" query:"offset"`
	//@inject_tag: validate:"required,hexadecimal,len=24" json:"merchant_id" bson:"merchant_id"
	MerchantId string `protobuf:"bytes,5,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id" validate:"required,hexadecimal,len=24" bson:"merchant_id"`
	//@inject_tag: validate:"omitempty,hexadecimal,len=24" json:"project_id" bson:"project_id" query:"project_id"
	ProjectId string `protobuf:"bytes,6,opt,name=project_id,json=projectId,proto3" json:"project_id" validate:"omitempty,hexadecimal,len=24" bson:"project_id" query:"project_id"`
	//@inject_tag: validate:"omitempty,oneof=all true false" json:"enabled" query:"enabled"
	Enabled string `protobuf:"bytes,7,opt,name=enabled,proto3" json:"enabled" validate:"omitempty,oneof=all true false" query:"enabled"`
}

func (x *ListProductsRequest) Reset() {
	*x = ListProductsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProductsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProductsRequest) ProtoMessage() {}

func (x *ListProductsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProductsRequest.ProtoReflect.Descriptor instead.
func (*ListProductsRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{78}
}

func (x *ListProductsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListProductsRequest) GetSku() string {
	if x != nil {
		return x.Sku
	}
	return ""
}

func (x *ListProductsRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListProductsRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListProductsRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *ListProductsRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ListProductsRequest) GetEnabled() string {
	if x != nil {
		return x.Enabled
	}
	return ""
}

type GetProductsForOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"required,hexadecimal,len=24" json:"project_id" bson:"project_id"
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id" validate:"required,hexadecimal,len=24" bson:"project_id"`
	//@inject_tag: validate:"required,dive,hexadecimal,len=24" json:"ids" bson:"ids"
	Ids []string `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids" validate:"required,dive,hexadecimal,len=24" bson:"ids"`
}

func (x *GetProductsForOrderRequest) Reset() {
	*x = GetProductsForOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProductsForOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProductsForOrderRequest) ProtoMessage() {}

func (x *GetProductsForOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProductsForOrderRequest.ProtoReflect.Descriptor instead.
func (*GetProductsForOrderRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{79}
}

func (x *GetProductsForOrderRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *GetProductsForOrderRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type GetKeyProductInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"country" query:"country"
	Country string `protobuf:"bytes,1,opt,name=country,proto3" json:"country" query:"country"`
	// @inject_tag: json:"key_product_id" validate:"required,hexadecimal,len=24"
	KeyProductId string `protobuf:"bytes,2,opt,name=key_product_id,json=keyProductId,proto3" json:"key_product_id" validate:"required,hexadecimal,len=24"`
	// @inject_tag: json:"language" query:"language"
	Language string `protobuf:"bytes,3,opt,name=language,proto3" json:"language" query:"language"`
	// @inject_tag: json:"currency" query:"currency"
	Currency string `protobuf:"bytes,4,opt,name=currency,proto3" json:"currency" query:"currency"`
}

func (x *GetKeyProductInfoRequest) Reset() {
	*x = GetKeyProductInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKeyProductInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKeyProductInfoRequest) ProtoMessage() {}

func (x *GetKeyProductInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKeyProductInfoRequest.ProtoReflect.Descriptor instead.
func (*GetKeyProductInfoRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{80}
}

func (x *GetKeyProductInfoRequest) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *GetKeyProductInfoRequest) GetKeyProductId() string {
	if x != nil {
		return x.KeyProductId
	}
	return ""
}

func (x *GetKeyProductInfoRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *GetKeyProductInfoRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

type GetKeyProductInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     int32                 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message    *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	KeyProduct *KeyProductInfo       `protobuf:"bytes,3,opt,name=key_product,json=keyProduct,proto3" json:"key_product,omitempty"`
}

func (x *GetKeyProductInfoResponse) Reset() {
	*x = GetKeyProductInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKeyProductInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKeyProductInfoResponse) ProtoMessage() {}

func (x *GetKeyProductInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKeyProductInfoResponse.ProtoReflect.Descriptor instead.
func (*GetKeyProductInfoResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{81}
}

func (x *GetKeyProductInfoResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetKeyProductInfoResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *GetKeyProductInfoResponse) GetKeyProduct() *KeyProductInfo {
	if x != nil {
		return x.KeyProduct
	}
	return nil
}

type GetKeyProductsForOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: query:"project_id" validate:"required,hexadecimal,len=24"
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty" query:"project_id" validate:"required,hexadecimal,len=24"`
	//@inject_tag: query:"ids[]" validate:"required,dive,hexadecimal,len=24"
	Ids []string `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty" query:"ids[]" validate:"required,dive,hexadecimal,len=24"`
}

func (x *GetKeyProductsForOrderRequest) Reset() {
	*x = GetKeyProductsForOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKeyProductsForOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKeyProductsForOrderRequest) ProtoMessage() {}

func (x *GetKeyProductsForOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKeyProductsForOrderRequest.ProtoReflect.Descriptor instead.
func (*GetKeyProductsForOrderRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{82}
}

func (x *GetKeyProductsForOrderRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *GetKeyProductsForOrderRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type ListProductsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"limit"
	//
	// The number of products returned in one page.
	Limit int64 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit"`
	// @inject_tag: json:"offset"
	//
	// The ranking number of the first item on the page.
	Offset int64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset"`
	// @inject_tag: json:"count"
	//
	// The total number of found items.
	Total int64 `protobuf:"varint,3,opt,name=total,proto3" json:"count"`
	// @inject_tag: json:"items"
	//
	// The list of products.
	Products []*Product `protobuf:"bytes,5,rep,name=products,proto3" json:"items"`
}

func (x *ListProductsResponse) Reset() {
	*x = ListProductsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProductsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProductsResponse) ProtoMessage() {}

func (x *ListProductsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProductsResponse.ProtoReflect.Descriptor instead.
func (*ListProductsResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{83}
}

func (x *ListProductsResponse) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListProductsResponse) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListProductsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListProductsResponse) GetProducts() []*Product {
	if x != nil {
		return x.Products
	}
	return nil
}

type RequestProduct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"required,hexadecimal,len=24" param:"product_id"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" validate:"required,hexadecimal,len=24" param:"product_id"`
	//@inject_tag: validate:"hexadecimal,len=24"
	MerchantId string `protobuf:"bytes,2,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty" validate:"hexadecimal,len=24"`
}

func (x *RequestProduct) Reset() {
	*x = RequestProduct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestProduct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestProduct) ProtoMessage() {}

func (x *RequestProduct) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestProduct.ProtoReflect.Descriptor instead.
func (*RequestProduct) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{84}
}

func (x *RequestProduct) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RequestProduct) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

type RequestKeyProductMerchant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: query:"id" validate:"required,hexadecimal,len=24"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" query:"id" validate:"required,hexadecimal,len=24"`
	//@inject_tag: validate:"hexadecimal,len=24"
	MerchantId string `protobuf:"bytes,2,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty" validate:"hexadecimal,len=24"`
}

func (x *RequestKeyProductMerchant) Reset() {
	*x = RequestKeyProductMerchant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestKeyProductMerchant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestKeyProductMerchant) ProtoMessage() {}

func (x *RequestKeyProductMerchant) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestKeyProductMerchant.ProtoReflect.Descriptor instead.
func (*RequestKeyProductMerchant) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{85}
}

func (x *RequestKeyProductMerchant) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RequestKeyProductMerchant) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

type RequestKeyProduct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: query:"id" validate:"required,hexadecimal,len=24"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" query:"id" validate:"required,hexadecimal,len=24"`
}

func (x *RequestKeyProduct) Reset() {
	*x = RequestKeyProduct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestKeyProduct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestKeyProduct) ProtoMessage() {}

func (x *RequestKeyProduct) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestKeyProduct.ProtoReflect.Descriptor instead.
func (*RequestKeyProduct) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{86}
}

func (x *RequestKeyProduct) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type I18NTextSearchable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"required,alpha,len=2" json:"lang"
	Lang string `protobuf:"bytes,1,opt,name=lang,proto3" json:"lang" validate:"required,alpha,len=2"`
	//@inject_tag: validate:"required" json:"value"
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value" validate:"required"`
}

func (x *I18NTextSearchable) Reset() {
	*x = I18NTextSearchable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *I18NTextSearchable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*I18NTextSearchable) ProtoMessage() {}

func (x *I18NTextSearchable) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use I18NTextSearchable.ProtoReflect.Descriptor instead.
func (*I18NTextSearchable) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{87}
}

func (x *I18NTextSearchable) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *I18NTextSearchable) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type ChangeProjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The response status code.
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// The response error message (if any).
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// The project data.
	Item *Project `protobuf:"bytes,3,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *ChangeProjectResponse) Reset() {
	*x = ChangeProjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeProjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeProjectResponse) ProtoMessage() {}

func (x *ChangeProjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeProjectResponse.ProtoReflect.Descriptor instead.
func (*ChangeProjectResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{88}
}

func (x *ChangeProjectResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ChangeProjectResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *ChangeProjectResponse) GetItem() *Project {
	if x != nil {
		return x.Item
	}
	return nil
}

type GetProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"omitempty,hexadecimal,len=24"
	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty" validate:"omitempty,hexadecimal,len=24"`
	//@inject_tag: validate:"required,hexadecimal,len=24" param:"project_id"
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty" validate:"required,hexadecimal,len=24" param:"project_id"`
}

func (x *GetProjectRequest) Reset() {
	*x = GetProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectRequest) ProtoMessage() {}

func (x *GetProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectRequest.ProtoReflect.Descriptor instead.
func (*GetProjectRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{89}
}

func (x *GetProjectRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *GetProjectRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

type ListProjectsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"omitempty,hexadecimal,len=24"
	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty" validate:"omitempty,hexadecimal,len=24"`
	// @inject_tag: query:"limit" validate:"omitempty,numeric,gt=0"
	Limit int32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty" query:"limit" validate:"omitempty,numeric,gt=0"`
	// @inject_tag: query:"offset" validate:"omitempty,numeric,gte=0"
	Offset int32 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty" query:"offset" validate:"omitempty,numeric,gte=0"`
	// @inject_tag: query:"quick_search"
	QuickSearch string `protobuf:"bytes,4,opt,name=quick_search,json=quickSearch,proto3" json:"quick_search,omitempty" query:"quick_search"`
	// @inject_tag: query:"status[]"
	Statuses []int32 `protobuf:"varint,5,rep,packed,name=statuses,proto3" json:"statuses,omitempty" query:"status[]"`
	// @inject_tag: query:"sort[]"
	Sort []string `protobuf:"bytes,6,rep,name=sort,proto3" json:"sort,omitempty" query:"sort[]"`
}

func (x *ListProjectsRequest) Reset() {
	*x = ListProjectsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProjectsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProjectsRequest) ProtoMessage() {}

func (x *ListProjectsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProjectsRequest.ProtoReflect.Descriptor instead.
func (*ListProjectsRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{90}
}

func (x *ListProjectsRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *ListProjectsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListProjectsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListProjectsRequest) GetQuickSearch() string {
	if x != nil {
		return x.QuickSearch
	}
	return ""
}

func (x *ListProjectsRequest) GetStatuses() []int32 {
	if x != nil {
		return x.Statuses
	}
	return nil
}

func (x *ListProjectsRequest) GetSort() []string {
	if x != nil {
		return x.Sort
	}
	return nil
}

type ListProjectsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"count"
	//
	// The total number of found projects.
	Count int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count"`
	//@inject_tag: json:"items"
	//
	// The list of the projects.
	Items []*Project `protobuf:"bytes,2,rep,name=items,proto3" json:"items"`
}

func (x *ListProjectsResponse) Reset() {
	*x = ListProjectsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProjectsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProjectsResponse) ProtoMessage() {}

func (x *ListProjectsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProjectsResponse.ProtoReflect.Descriptor instead.
func (*ListProjectsResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{91}
}

func (x *ListProjectsResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ListProjectsResponse) GetItems() []*Project {
	if x != nil {
		return x.Items
	}
	return nil
}

type TokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"required" required:"true"
	//
	// The customer data.
	User *TokenUser `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty" validate:"required" required:"true"`
	//@inject_tag: validate:"required" required:"true"
	//
	// The payment order data.
	Settings *TokenSettings `protobuf:"bytes,2,opt,name=settings,proto3" json:"settings,omitempty" validate:"required" required:"true"`
}

func (x *TokenRequest) Reset() {
	*x = TokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenRequest) ProtoMessage() {}

func (x *TokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenRequest.ProtoReflect.Descriptor instead.
func (*TokenRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{92}
}

func (x *TokenRequest) GetUser() *TokenUser {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *TokenRequest) GetSettings() *TokenSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type TokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32                 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Token   string                `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *TokenResponse) Reset() {
	*x = TokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenResponse) ProtoMessage() {}

func (x *TokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenResponse.ProtoReflect.Descriptor instead.
func (*TokenResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{93}
}

func (x *TokenResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *TokenResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *TokenResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type CheckProjectRequestSignatureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Body      string `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Signature string `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *CheckProjectRequestSignatureRequest) Reset() {
	*x = CheckProjectRequestSignatureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckProjectRequestSignatureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckProjectRequestSignatureRequest) ProtoMessage() {}

func (x *CheckProjectRequestSignatureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckProjectRequestSignatureRequest.ProtoReflect.Descriptor instead.
func (*CheckProjectRequestSignatureRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{94}
}

func (x *CheckProjectRequestSignatureRequest) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *CheckProjectRequestSignatureRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *CheckProjectRequestSignatureRequest) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

type CheckProjectRequestSignatureResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32                 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CheckProjectRequestSignatureResponse) Reset() {
	*x = CheckProjectRequestSignatureResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckProjectRequestSignatureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckProjectRequestSignatureResponse) ProtoMessage() {}

func (x *CheckProjectRequestSignatureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckProjectRequestSignatureResponse.ProtoReflect.Descriptor instead.
func (*CheckProjectRequestSignatureResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{95}
}

func (x *CheckProjectRequestSignatureResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *CheckProjectRequestSignatureResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

type ListOrdersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: query:"id" validate:"omitempty,uuid"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" query:"id" validate:"omitempty,uuid"`
	// @inject_tag: query:"project[]" validate:"omitempty,dive,hexadecimal,len=24"
	Project []string `protobuf:"bytes,2,rep,name=project,proto3" json:"project,omitempty" query:"project[]" validate:"omitempty,dive,hexadecimal,len=24"`
	// @inject_tag: query:"payment_method[]" validate:"omitempty,dive,hexadecimal,len=24"
	PaymentMethod []string `protobuf:"bytes,3,rep,name=payment_method,json=paymentMethod,proto3" json:"payment_method,omitempty" query:"payment_method[]" validate:"omitempty,dive,hexadecimal,len=24"`
	// @inject_tag: query:"country[]" validate:"omitempty,dive,alpha,len=2"
	Country []string `protobuf:"bytes,4,rep,name=country,proto3" json:"country,omitempty" query:"country[]" validate:"omitempty,dive,alpha,len=2"`
	// @inject_tag: query:"status[]" validate:"omitempty,dive,alpha,oneof=created processed canceled rejected refunded chargeback pending"
	Status []string `protobuf:"bytes,5,rep,name=status,proto3" json:"status,omitempty" query:"status[]" validate:"omitempty,dive,alpha,oneof=created processed canceled rejected refunded chargeback pending"`
	// @inject_tag: query:"account"
	Account string `protobuf:"bytes,6,opt,name=account,proto3" json:"account,omitempty" query:"account"`
	// @inject_tag: query:"pm_date_from" validate:"omitempty,datetime"
	PmDateFrom string `protobuf:"bytes,7,opt,name=pm_date_from,json=pmDateFrom,proto3" json:"pm_date_from,omitempty" query:"pm_date_from" validate:"omitempty,datetime"`
	// @inject_tag: query:"pm_date_to" validate:"omitempty,datetime"
	PmDateTo string `protobuf:"bytes,8,opt,name=pm_date_to,json=pmDateTo,proto3" json:"pm_date_to,omitempty" query:"pm_date_to" validate:"omitempty,datetime"`
	// @inject_tag: query:"project_date_from" validate:"omitempty,datetime"
	ProjectDateFrom string `protobuf:"bytes,9,opt,name=project_date_from,json=projectDateFrom,proto3" json:"project_date_from,omitempty" query:"project_date_from" validate:"omitempty,datetime"`
	// @inject_tag: query:"project_date_to" validate:"omitempty,datetime"
	ProjectDateTo string `protobuf:"bytes,10,opt,name=project_date_to,json=projectDateTo,proto3" json:"project_date_to,omitempty" query:"project_date_to" validate:"omitempty,datetime"`
	// @inject_tag: query:"quick_search"
	QuickSearch string `protobuf:"bytes,11,opt,name=quick_search,json=quickSearch,proto3" json:"quick_search,omitempty" query:"quick_search"`
	// @inject_tag: query:"limit" validate:"omitempty,numeric,gt=0,lte=1000"
	Limit int64 `protobuf:"varint,12,opt,name=limit,proto3" json:"limit,omitempty" query:"limit" validate:"omitempty,numeric,gt=0,lte=1000"`
	// @inject_tag: query:"offset" validate:"omitempty,numeric,gte=0"
	Offset int64 `protobuf:"varint,13,opt,name=offset,proto3" json:"offset,omitempty" query:"offset" validate:"omitempty,numeric,gte=0"`
	// @inject_tag: query:"sort[]"
	Sort []string `protobuf:"bytes,14,rep,name=sort,proto3" json:"sort,omitempty" query:"sort[]"`
	// @inject_tag: validate:"omitempty,dive,hexadecimal,len=24"
	Merchant []string `protobuf:"bytes,15,rep,name=merchant,proto3" json:"merchant,omitempty" validate:"omitempty,dive,hexadecimal,len=24"`
	// @inject_tag: query:"-"  json:"-"
	StatusNotificationFailedFor string `protobuf:"bytes,16,opt,name=status_notification_failed_for,json=statusNotificationFailedFor,proto3" json:"-" query:"-"`
	// @inject_tag: query:"type" validate:"omitempty,oneof=simple product key"
	Type string `protobuf:"bytes,17,opt,name=type,proto3" json:"type,omitempty" query:"type" validate:"omitempty,oneof=simple product key"`
	// @inject_tag: query:"hide_test"
	HideTest bool `protobuf:"varint,18,opt,name=hide_test,json=hideTest,proto3" json:"hide_test,omitempty" query:"hide_test"`
	// @inject_tag: query:"merchant_name" validate:"omitempty,company_name,max=60"
	MerchantName string `protobuf:"bytes,19,opt,name=merchant_name,json=merchantName,proto3" json:"merchant_name,omitempty" query:"merchant_name" validate:"omitempty,company_name,max=60"`
	// @inject_tag: query:"royalty_report_id" validate:"omitempty,hexadecimal,len=24"
	RoyaltyReportId string `protobuf:"bytes,20,opt,name=royalty_report_id,json=royaltyReportId,proto3" json:"royalty_report_id,omitempty" query:"royalty_report_id" validate:"omitempty,hexadecimal,len=24"`
	// @inject_tag: query:"invoice_id"
	//
	// Unique identifier of order in merchant's billing system
	InvoiceId string `protobuf:"bytes,21,opt,name=invoice_id,json=invoiceId,proto3" json:"invoice_id,omitempty" query:"invoice_id"`
}

func (x *ListOrdersRequest) Reset() {
	*x = ListOrdersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrdersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrdersRequest) ProtoMessage() {}

func (x *ListOrdersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrdersRequest.ProtoReflect.Descriptor instead.
func (*ListOrdersRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{96}
}

func (x *ListOrdersRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ListOrdersRequest) GetProject() []string {
	if x != nil {
		return x.Project
	}
	return nil
}

func (x *ListOrdersRequest) GetPaymentMethod() []string {
	if x != nil {
		return x.PaymentMethod
	}
	return nil
}

func (x *ListOrdersRequest) GetCountry() []string {
	if x != nil {
		return x.Country
	}
	return nil
}

func (x *ListOrdersRequest) GetStatus() []string {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ListOrdersRequest) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *ListOrdersRequest) GetPmDateFrom() string {
	if x != nil {
		return x.PmDateFrom
	}
	return ""
}

func (x *ListOrdersRequest) GetPmDateTo() string {
	if x != nil {
		return x.PmDateTo
	}
	return ""
}

func (x *ListOrdersRequest) GetProjectDateFrom() string {
	if x != nil {
		return x.ProjectDateFrom
	}
	return ""
}

func (x *ListOrdersRequest) GetProjectDateTo() string {
	if x != nil {
		return x.ProjectDateTo
	}
	return ""
}

func (x *ListOrdersRequest) GetQuickSearch() string {
	if x != nil {
		return x.QuickSearch
	}
	return ""
}

func (x *ListOrdersRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListOrdersRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListOrdersRequest) GetSort() []string {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *ListOrdersRequest) GetMerchant() []string {
	if x != nil {
		return x.Merchant
	}
	return nil
}

func (x *ListOrdersRequest) GetStatusNotificationFailedFor() string {
	if x != nil {
		return x.StatusNotificationFailedFor
	}
	return ""
}

func (x *ListOrdersRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ListOrdersRequest) GetHideTest() bool {
	if x != nil {
		return x.HideTest
	}
	return false
}

func (x *ListOrdersRequest) GetMerchantName() string {
	if x != nil {
		return x.MerchantName
	}
	return ""
}

func (x *ListOrdersRequest) GetRoyaltyReportId() string {
	if x != nil {
		return x.RoyaltyReportId
	}
	return ""
}

func (x *ListOrdersRequest) GetInvoiceId() string {
	if x != nil {
		return x.InvoiceId
	}
	return ""
}

type GetOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: validate:"required,uuid" param:"order_id"
	OrderId string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty" validate:"required,uuid" param:"order_id"`
	// @inject_tag: validate:"omitempty,hexadecimal,len=24"
	MerchantId string `protobuf:"bytes,2,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty" validate:"omitempty,hexadecimal,len=24"`
}

func (x *GetOrderRequest) Reset() {
	*x = GetOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderRequest) ProtoMessage() {}

func (x *GetOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderRequest.ProtoReflect.Descriptor instead.
func (*GetOrderRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{97}
}

func (x *GetOrderRequest) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *GetOrderRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

type IsOrderCanBePayingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	OrderId   string `protobuf:"bytes,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
}

func (x *IsOrderCanBePayingRequest) Reset() {
	*x = IsOrderCanBePayingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsOrderCanBePayingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsOrderCanBePayingRequest) ProtoMessage() {}

func (x *IsOrderCanBePayingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsOrderCanBePayingRequest.ProtoReflect.Descriptor instead.
func (*IsOrderCanBePayingRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{98}
}

func (x *IsOrderCanBePayingRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *IsOrderCanBePayingRequest) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

type IsOrderCanBePayingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32                 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Item    *Order                `protobuf:"bytes,3,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *IsOrderCanBePayingResponse) Reset() {
	*x = IsOrderCanBePayingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsOrderCanBePayingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsOrderCanBePayingResponse) ProtoMessage() {}

func (x *IsOrderCanBePayingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsOrderCanBePayingResponse.ProtoReflect.Descriptor instead.
func (*IsOrderCanBePayingResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{99}
}

func (x *IsOrderCanBePayingResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *IsOrderCanBePayingResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *IsOrderCanBePayingResponse) GetItem() *Order {
	if x != nil {
		return x.Item
	}
	return nil
}

type SetUserNotifyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: validate:"required,uuid" param:"order_id" required:"true"
	//
	// The unique identifier for the order.
	OrderUuid string `protobuf:"bytes,1,opt,name=order_uuid,json=orderUuid,proto3" json:"order_uuid,omitempty" validate:"required,uuid" param:"order_id" required:"true"`
	// @inject_tag: query:"enable_notification" form:"enable_notification" json:"enable_notification"
	//
	// Has a true value if the customer has confirmed to receive notifications.
	EnableNotification bool `protobuf:"varint,2,opt,name=enable_notification,json=enableNotification,proto3" json:"enable_notification" query:"enable_notification" form:"enable_notification"`
	// @inject_tag: query:"email" form:"email" json:"email" validate:"omitempty,email"
	//
	// The customer's email for notifications.
	Email string `protobuf:"bytes,3,opt,name=email,proto3" json:"email" query:"email" form:"email" validate:"omitempty,email"`
}

func (x *SetUserNotifyRequest) Reset() {
	*x = SetUserNotifyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetUserNotifyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUserNotifyRequest) ProtoMessage() {}

func (x *SetUserNotifyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUserNotifyRequest.ProtoReflect.Descriptor instead.
func (*SetUserNotifyRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{100}
}

func (x *SetUserNotifyRequest) GetOrderUuid() string {
	if x != nil {
		return x.OrderUuid
	}
	return ""
}

func (x *SetUserNotifyRequest) GetEnableNotification() bool {
	if x != nil {
		return x.EnableNotification
	}
	return false
}

func (x *SetUserNotifyRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type NotifyUserSales struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: bson:"email"
	Email string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty" bson:"email"`
	//@inject_tag: bson:"order_id"
	OrderId string `protobuf:"bytes,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty" bson:"order_id"`
	//@inject_tag: bson:"user_id"
	UserId string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty" bson:"user_id"`
	//@inject_tag: bson:"created_at"
	Date string `protobuf:"bytes,4,opt,name=date,proto3" json:"date,omitempty" bson:"created_at"`
}

func (x *NotifyUserSales) Reset() {
	*x = NotifyUserSales{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyUserSales) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyUserSales) ProtoMessage() {}

func (x *NotifyUserSales) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyUserSales.ProtoReflect.Descriptor instead.
func (*NotifyUserSales) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{101}
}

func (x *NotifyUserSales) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *NotifyUserSales) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *NotifyUserSales) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *NotifyUserSales) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

type NotifyUserNewRegion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: bson:"country_iso_code_a2"
	CountryIsoCodeA2 string `protobuf:"bytes,1,opt,name=country_iso_code_a2,json=countryIsoCodeA2,proto3" json:"country_iso_code_a2,omitempty" bson:"country_iso_code_a2"`
	//@inject_tag: bson:"email"
	Email string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty" bson:"email"`
	//@inject_tag: bson:"order_id"
	OrderId string `protobuf:"bytes,3,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty" bson:"order_id"`
	//@inject_tag: bson:"user_id"
	UserId string `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty" bson:"user_id"`
	//@inject_tag: bson:"date"
	Date string `protobuf:"bytes,5,opt,name=date,proto3" json:"date,omitempty" bson:"date"`
}

func (x *NotifyUserNewRegion) Reset() {
	*x = NotifyUserNewRegion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyUserNewRegion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyUserNewRegion) ProtoMessage() {}

func (x *NotifyUserNewRegion) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyUserNewRegion.ProtoReflect.Descriptor instead.
func (*NotifyUserNewRegion) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{102}
}

func (x *NotifyUserNewRegion) GetCountryIsoCodeA2() string {
	if x != nil {
		return x.CountryIsoCodeA2
	}
	return ""
}

func (x *NotifyUserNewRegion) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *NotifyUserNewRegion) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *NotifyUserNewRegion) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *NotifyUserNewRegion) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

type GetPaymentMethodSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: query:"payment_method_id" validate:"required,hexadecimal,len=24"
	PaymentMethodId string `protobuf:"bytes,1,opt,name=payment_method_id,json=paymentMethodId,proto3" json:"payment_method_id,omitempty" query:"payment_method_id" validate:"required,hexadecimal,len=24"`
	// @inject_tag: query:"currency_a3" validate:"omitempty,alpha,len=3"
	CurrencyA3 string `protobuf:"bytes,2,opt,name=currency_a3,json=currencyA3,proto3" json:"currency_a3,omitempty" query:"currency_a3" validate:"omitempty,alpha,len=3"`
	// @inject_tag: query:"mcc_code" validate:"omitempty,numeric,len=4"
	MccCode string `protobuf:"bytes,3,opt,name=mcc_code,json=mccCode,proto3" json:"mcc_code,omitempty" query:"mcc_code" validate:"omitempty,numeric,len=4"`
	// @inject_tag: query:"operating_company_id" validate:"omitempty,hexadecimal,len=24"
	OperatingCompanyId string `protobuf:"bytes,4,opt,name=operating_company_id,json=operatingCompanyId,proto3" json:"operating_company_id,omitempty" query:"operating_company_id" validate:"omitempty,hexadecimal,len=24"`
}

func (x *GetPaymentMethodSettingsRequest) Reset() {
	*x = GetPaymentMethodSettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPaymentMethodSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPaymentMethodSettingsRequest) ProtoMessage() {}

func (x *GetPaymentMethodSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPaymentMethodSettingsRequest.ProtoReflect.Descriptor instead.
func (*GetPaymentMethodSettingsRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{103}
}

func (x *GetPaymentMethodSettingsRequest) GetPaymentMethodId() string {
	if x != nil {
		return x.PaymentMethodId
	}
	return ""
}

func (x *GetPaymentMethodSettingsRequest) GetCurrencyA3() string {
	if x != nil {
		return x.CurrencyA3
	}
	return ""
}

func (x *GetPaymentMethodSettingsRequest) GetMccCode() string {
	if x != nil {
		return x.MccCode
	}
	return ""
}

func (x *GetPaymentMethodSettingsRequest) GetOperatingCompanyId() string {
	if x != nil {
		return x.OperatingCompanyId
	}
	return ""
}

type GetPaymentMethodSettingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"params"
	//
	// The payment method settings.
	Params []*PaymentMethodParams `protobuf:"bytes,1,rep,name=params,proto3" json:"params"`
}

func (x *GetPaymentMethodSettingsResponse) Reset() {
	*x = GetPaymentMethodSettingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPaymentMethodSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPaymentMethodSettingsResponse) ProtoMessage() {}

func (x *GetPaymentMethodSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPaymentMethodSettingsResponse.ProtoReflect.Descriptor instead.
func (*GetPaymentMethodSettingsResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{104}
}

func (x *GetPaymentMethodSettingsResponse) GetParams() []*PaymentMethodParams {
	if x != nil {
		return x.Params
	}
	return nil
}

type ChangePaymentMethodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: query:"payment_method_id" validate:"required,hexadecimal,len=24"
	PaymentMethodId string `protobuf:"bytes,1,opt,name=payment_method_id,json=paymentMethodId,proto3" json:"payment_method_id,omitempty" query:"payment_method_id" validate:"required,hexadecimal,len=24"`
	// @inject_tag: query:"params" validate:"required"
	Params *PaymentMethod `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty" query:"params" validate:"required"`
}

func (x *ChangePaymentMethodRequest) Reset() {
	*x = ChangePaymentMethodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangePaymentMethodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangePaymentMethodRequest) ProtoMessage() {}

func (x *ChangePaymentMethodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangePaymentMethodRequest.ProtoReflect.Descriptor instead.
func (*ChangePaymentMethodRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{105}
}

func (x *ChangePaymentMethodRequest) GetPaymentMethodId() string {
	if x != nil {
		return x.PaymentMethodId
	}
	return ""
}

func (x *ChangePaymentMethodRequest) GetParams() *PaymentMethod {
	if x != nil {
		return x.Params
	}
	return nil
}

type ChangePaymentMethodParamsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: query:"payment_method_id" validate:"required,hexadecimal,len=24"
	PaymentMethodId string `protobuf:"bytes,1,opt,name=payment_method_id,json=paymentMethodId,proto3" json:"payment_method_id,omitempty" query:"payment_method_id" validate:"required,hexadecimal,len=24"`
	// @inject_tag: query:"params" validate:"required"
	Params *PaymentMethodParams `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty" query:"params" validate:"required"`
}

func (x *ChangePaymentMethodParamsRequest) Reset() {
	*x = ChangePaymentMethodParamsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangePaymentMethodParamsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangePaymentMethodParamsRequest) ProtoMessage() {}

func (x *ChangePaymentMethodParamsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangePaymentMethodParamsRequest.ProtoReflect.Descriptor instead.
func (*ChangePaymentMethodParamsRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{106}
}

func (x *ChangePaymentMethodParamsRequest) GetPaymentMethodId() string {
	if x != nil {
		return x.PaymentMethodId
	}
	return ""
}

func (x *ChangePaymentMethodParamsRequest) GetParams() *PaymentMethodParams {
	if x != nil {
		return x.Params
	}
	return nil
}

type ChangePaymentMethodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The response status code.
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// The response error message (if any).
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ChangePaymentMethodResponse) Reset() {
	*x = ChangePaymentMethodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangePaymentMethodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangePaymentMethodResponse) ProtoMessage() {}

func (x *ChangePaymentMethodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangePaymentMethodResponse.ProtoReflect.Descriptor instead.
func (*ChangePaymentMethodResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{107}
}

func (x *ChangePaymentMethodResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ChangePaymentMethodResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ChangePaymentMethodParamsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The response status code.
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// The response error message (if any).
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ChangePaymentMethodParamsResponse) Reset() {
	*x = ChangePaymentMethodParamsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangePaymentMethodParamsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangePaymentMethodParamsResponse) ProtoMessage() {}

func (x *ChangePaymentMethodParamsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangePaymentMethodParamsResponse.ProtoReflect.Descriptor instead.
func (*ChangePaymentMethodParamsResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{108}
}

func (x *ChangePaymentMethodParamsResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ChangePaymentMethodParamsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type FindByZipCodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: query:"country" validate:"required,len=2"
	Country string `protobuf:"bytes,1,opt,name=country,proto3" json:"country,omitempty" query:"country" validate:"required,len=2"`
	// @inject_tag: query:"zip" validate:"required,gte=2"
	Zip string `protobuf:"bytes,2,opt,name=zip,proto3" json:"zip,omitempty" query:"zip" validate:"required,gte=2"`
	// @inject_tag: query:"limit" validate:"omitempty,numeric,gt=0"
	Limit int64 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty" query:"limit" validate:"omitempty,numeric,gt=0"`
	// @inject_tag: query:"offset" validate:"omitempty,numeric,gte=0"
	Offset int64 `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty" query:"offset" validate:"omitempty,numeric,gte=0"`
}

func (x *FindByZipCodeRequest) Reset() {
	*x = FindByZipCodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindByZipCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindByZipCodeRequest) ProtoMessage() {}

func (x *FindByZipCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindByZipCodeRequest.ProtoReflect.Descriptor instead.
func (*FindByZipCodeRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{109}
}

func (x *FindByZipCodeRequest) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *FindByZipCodeRequest) GetZip() string {
	if x != nil {
		return x.Zip
	}
	return ""
}

func (x *FindByZipCodeRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *FindByZipCodeRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type FindByZipCodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"count"
	//
	// The total number of found cities.
	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count"`
	// @inject_tag: json:"items"
	//
	// The data found by the ZIP code.
	Items []*ZipCode `protobuf:"bytes,2,rep,name=items,proto3" json:"items"`
}

func (x *FindByZipCodeResponse) Reset() {
	*x = FindByZipCodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindByZipCodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindByZipCodeResponse) ProtoMessage() {}

func (x *FindByZipCodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindByZipCodeResponse.ProtoReflect.Descriptor instead.
func (*FindByZipCodeResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{110}
}

func (x *FindByZipCodeResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *FindByZipCodeResponse) GetItems() []*ZipCode {
	if x != nil {
		return x.Items
	}
	return nil
}

type ResponseError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"status"
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status"`
	//@inject_tag: json:"message"
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message"`
}

func (x *ResponseError) Reset() {
	*x = ResponseError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseError) ProtoMessage() {}

func (x *ResponseError) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseError.ProtoReflect.Descriptor instead.
func (*ResponseError) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{111}
}

func (x *ResponseError) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ResponseError) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

type ResponseErrorMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"code"
	//
	// The error code.
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code"`
	//@inject_tag: json:"message"
	//
	// The error short description.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message"`
	//@inject_tag: json:"details,omitempty"
	//
	// The error details.
	Details string `protobuf:"bytes,3,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *ResponseErrorMessage) Reset() {
	*x = ResponseErrorMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseErrorMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseErrorMessage) ProtoMessage() {}

func (x *ResponseErrorMessage) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseErrorMessage.ProtoReflect.Descriptor instead.
func (*ResponseErrorMessage) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{112}
}

func (x *ResponseErrorMessage) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ResponseErrorMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ResponseErrorMessage) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

type CreateAccountingEntryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: validate:"required"
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty" validate:"required"`
	// @inject_tag: validate:"omitempty,hexadecimal,len=24"
	OrderId string `protobuf:"bytes,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty" validate:"omitempty,hexadecimal,len=24"`
	// @inject_tag: validate:"omitempty,hexadecimal,len=24"
	RefundId string `protobuf:"bytes,3,opt,name=refund_id,json=refundId,proto3" json:"refund_id,omitempty" validate:"omitempty,hexadecimal,len=24"`
	// @inject_tag: validate:"omitempty,hexadecimal,len=24"
	MerchantId string `protobuf:"bytes,4,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty" validate:"omitempty,hexadecimal,len=24"`
	// @inject_tag: validate:"required,numeric"
	Amount float64 `protobuf:"fixed64,5,opt,name=amount,proto3" json:"amount,omitempty" validate:"required,numeric"`
	// @inject_tag: validate:"required,alpha,len=3"
	Currency string `protobuf:"bytes,6,opt,name=currency,proto3" json:"currency,omitempty" validate:"required,alpha,len=3"`
	// @inject_tag: validate:"required,oneof=pending available"
	Status string `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty" validate:"required,oneof=pending available"`
	// @inject_tag: validate:"omitempty,numeric,gt=0"
	Date int64 `protobuf:"varint,8,opt,name=date,proto3" json:"date,omitempty" validate:"omitempty,numeric,gt=0"`
	//@inject_tag: json:"country" validate:"required,alpha,len=2"
	Country string `protobuf:"bytes,9,opt,name=country,proto3" json:"country" validate:"required,alpha,len=2"`
	//@inject_tag: json:"reason"
	Reason string `protobuf:"bytes,10,opt,name=reason,proto3" json:"reason"`
}

func (x *CreateAccountingEntryRequest) Reset() {
	*x = CreateAccountingEntryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAccountingEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAccountingEntryRequest) ProtoMessage() {}

func (x *CreateAccountingEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAccountingEntryRequest.ProtoReflect.Descriptor instead.
func (*CreateAccountingEntryRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{113}
}

func (x *CreateAccountingEntryRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CreateAccountingEntryRequest) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *CreateAccountingEntryRequest) GetRefundId() string {
	if x != nil {
		return x.RefundId
	}
	return ""
}

func (x *CreateAccountingEntryRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *CreateAccountingEntryRequest) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *CreateAccountingEntryRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *CreateAccountingEntryRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *CreateAccountingEntryRequest) GetDate() int64 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *CreateAccountingEntryRequest) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *CreateAccountingEntryRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type CreateAccountingEntryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32                 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Item    *AccountingEntry      `protobuf:"bytes,3,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *CreateAccountingEntryResponse) Reset() {
	*x = CreateAccountingEntryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAccountingEntryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAccountingEntryResponse) ProtoMessage() {}

func (x *CreateAccountingEntryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAccountingEntryResponse.ProtoReflect.Descriptor instead.
func (*CreateAccountingEntryResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{114}
}

func (x *CreateAccountingEntryResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *CreateAccountingEntryResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *CreateAccountingEntryResponse) GetItem() *AccountingEntry {
	if x != nil {
		return x.Item
	}
	return nil
}

type CreateRoyaltyReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Merchants []string `protobuf:"bytes,1,rep,name=merchants,proto3" json:"merchants,omitempty"`
}

func (x *CreateRoyaltyReportRequest) Reset() {
	*x = CreateRoyaltyReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRoyaltyReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRoyaltyReportRequest) ProtoMessage() {}

func (x *CreateRoyaltyReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRoyaltyReportRequest.ProtoReflect.Descriptor instead.
func (*CreateRoyaltyReportRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{115}
}

func (x *CreateRoyaltyReportRequest) GetMerchants() []string {
	if x != nil {
		return x.Merchants
	}
	return nil
}

type ListRoyaltyReportsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: query:"period_from" validate:"omitempty,datetime"
	PeriodFrom string `protobuf:"bytes,1,opt,name=period_from,json=periodFrom,proto3" json:"period_from,omitempty" query:"period_from" validate:"omitempty,datetime"`
	// @inject_tag: query:"period_to" validate:"omitempty,datetime"
	PeriodTo string `protobuf:"bytes,2,opt,name=period_to,json=periodTo,proto3" json:"period_to,omitempty" query:"period_to" validate:"omitempty,datetime"`
	// @inject_tag: validate:"omitempty,hexadecimal,len=24"
	MerchantId string `protobuf:"bytes,3,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty" validate:"omitempty,hexadecimal,len=24"`
	//@inject_tag: query:"status[]" validate:"omitempty,dive,oneof=pending accepted canceled dispute waiting_payment paid"
	Status []string `protobuf:"bytes,4,rep,name=status,proto3" json:"status,omitempty" query:"status[]" validate:"omitempty,dive,oneof=pending accepted canceled dispute waiting_payment paid"`
	// @inject_tag: query:"limit" validate:"omitempty,numeric,gt=0"
	Limit int64 `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty" query:"limit" validate:"omitempty,numeric,gt=0"`
	// @inject_tag: query:"offset" validate:"omitempty,numeric,gte=0"
	Offset int64 `protobuf:"varint,6,opt,name=offset,proto3" json:"offset,omitempty" query:"offset" validate:"omitempty,numeric,gte=0"`
	// @inject_tag: query:"sort[]"
	Sort []string `protobuf:"bytes,7,rep,name=sort,proto3" json:"sort,omitempty" query:"sort[]"`
}

func (x *ListRoyaltyReportsRequest) Reset() {
	*x = ListRoyaltyReportsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRoyaltyReportsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRoyaltyReportsRequest) ProtoMessage() {}

func (x *ListRoyaltyReportsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRoyaltyReportsRequest.ProtoReflect.Descriptor instead.
func (*ListRoyaltyReportsRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{116}
}

func (x *ListRoyaltyReportsRequest) GetPeriodFrom() string {
	if x != nil {
		return x.PeriodFrom
	}
	return ""
}

func (x *ListRoyaltyReportsRequest) GetPeriodTo() string {
	if x != nil {
		return x.PeriodTo
	}
	return ""
}

func (x *ListRoyaltyReportsRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *ListRoyaltyReportsRequest) GetStatus() []string {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ListRoyaltyReportsRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListRoyaltyReportsRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListRoyaltyReportsRequest) GetSort() []string {
	if x != nil {
		return x.Sort
	}
	return nil
}

type RoyaltyReportsPaginate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"count"
	//
	// The total number of reports.
	Count int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count"`
	// @inject_tag: json:"items"
	//
	// The royalty reports list.
	Items []*RoyaltyReport `protobuf:"bytes,2,rep,name=items,proto3" json:"items"`
}

func (x *RoyaltyReportsPaginate) Reset() {
	*x = RoyaltyReportsPaginate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoyaltyReportsPaginate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoyaltyReportsPaginate) ProtoMessage() {}

func (x *RoyaltyReportsPaginate) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoyaltyReportsPaginate.ProtoReflect.Descriptor instead.
func (*RoyaltyReportsPaginate) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{117}
}

func (x *RoyaltyReportsPaginate) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *RoyaltyReportsPaginate) GetItems() []*RoyaltyReport {
	if x != nil {
		return x.Items
	}
	return nil
}

type ListRoyaltyReportsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// @inject_tag: json:"message,omitempty"
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// @inject_tag: json:"data"
	Data *RoyaltyReportsPaginate `protobuf:"bytes,3,opt,name=data,proto3" json:"data"`
}

func (x *ListRoyaltyReportsResponse) Reset() {
	*x = ListRoyaltyReportsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRoyaltyReportsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRoyaltyReportsResponse) ProtoMessage() {}

func (x *ListRoyaltyReportsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRoyaltyReportsResponse.ProtoReflect.Descriptor instead.
func (*ListRoyaltyReportsResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{118}
}

func (x *ListRoyaltyReportsResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ListRoyaltyReportsResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *ListRoyaltyReportsResponse) GetData() *RoyaltyReportsPaginate {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListRoyaltyReportOrdersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: validate:"omitempty,hexadecimal,len=24" param:"merchant_id"
	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty" validate:"omitempty,hexadecimal,len=24" param:"merchant_id"`
	// @inject_tag: query:"report_id" validate:"required,hexadecimal,len=24" param:"report_id"
	ReportId string `protobuf:"bytes,2,opt,name=report_id,json=reportId,proto3" json:"report_id,omitempty" query:"report_id" validate:"required,hexadecimal,len=24" param:"report_id"`
	// @inject_tag: query:"limit" validate:"omitempty,numeric,gt=0"
	Limit int64 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty" query:"limit" validate:"omitempty,numeric,gt=0"`
	// @inject_tag: query:"offset" validate:"omitempty,numeric,gte=0"
	Offset int64 `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty" query:"offset" validate:"omitempty,numeric,gte=0"`
}

func (x *ListRoyaltyReportOrdersRequest) Reset() {
	*x = ListRoyaltyReportOrdersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRoyaltyReportOrdersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRoyaltyReportOrdersRequest) ProtoMessage() {}

func (x *ListRoyaltyReportOrdersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRoyaltyReportOrdersRequest.ProtoReflect.Descriptor instead.
func (*ListRoyaltyReportOrdersRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{119}
}

func (x *ListRoyaltyReportOrdersRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *ListRoyaltyReportOrdersRequest) GetReportId() string {
	if x != nil {
		return x.ReportId
	}
	return ""
}

func (x *ListRoyaltyReportOrdersRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListRoyaltyReportOrdersRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type ChangeRoyaltyReportCorrection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The correction amount.
	Amount float64 `protobuf:"fixed64,1,opt,name=amount,proto3" json:"amount,omitempty"`
	// The correction reason.
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *ChangeRoyaltyReportCorrection) Reset() {
	*x = ChangeRoyaltyReportCorrection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeRoyaltyReportCorrection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeRoyaltyReportCorrection) ProtoMessage() {}

func (x *ChangeRoyaltyReportCorrection) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeRoyaltyReportCorrection.ProtoReflect.Descriptor instead.
func (*ChangeRoyaltyReportCorrection) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{120}
}

func (x *ChangeRoyaltyReportCorrection) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *ChangeRoyaltyReportCorrection) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type GetRoyaltyReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"merchant_id" validate:"omitempty,hexadecimal,len=24"
	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id" validate:"omitempty,hexadecimal,len=24"`
	// @inject_tag: json:"report_id" validate:"required,hexadecimal,len=24" param:"report_id"
	ReportId string `protobuf:"bytes,2,opt,name=report_id,json=reportId,proto3" json:"report_id" validate:"required,hexadecimal,len=24" param:"report_id"`
}

func (x *GetRoyaltyReportRequest) Reset() {
	*x = GetRoyaltyReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRoyaltyReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRoyaltyReportRequest) ProtoMessage() {}

func (x *GetRoyaltyReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRoyaltyReportRequest.ProtoReflect.Descriptor instead.
func (*GetRoyaltyReportRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{121}
}

func (x *GetRoyaltyReportRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *GetRoyaltyReportRequest) GetReportId() string {
	if x != nil {
		return x.ReportId
	}
	return ""
}

type GetRoyaltyReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"status"
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status"`
	//@inject_tag: json:"message"
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message"`
	//@inject_tag: json:"item"
	Item *RoyaltyReport `protobuf:"bytes,3,opt,name=item,proto3" json:"item"`
}

func (x *GetRoyaltyReportResponse) Reset() {
	*x = GetRoyaltyReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRoyaltyReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRoyaltyReportResponse) ProtoMessage() {}

func (x *GetRoyaltyReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRoyaltyReportResponse.ProtoReflect.Descriptor instead.
func (*GetRoyaltyReportResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{122}
}

func (x *GetRoyaltyReportResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetRoyaltyReportResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *GetRoyaltyReportResponse) GetItem() *RoyaltyReport {
	if x != nil {
		return x.Item
	}
	return nil
}

type ChangeRoyaltyReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: validate:"required,hexadecimal,len=24" json:"merchant_id"
	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id" validate:"required,hexadecimal,len=24"`
	// @inject_tag: json:"-" validate:"required,hexadecimal,len=24" param:"report_id"
	ReportId string `protobuf:"bytes,2,opt,name=report_id,json=reportId,proto3" json:"-" validate:"required,hexadecimal,len=24" param:"report_id"`
	// @inject_tag: json:"status" validate:"omitempty,oneof=pending skipped accepted canceled dispute ready_for_invoice payment_in_progress payment_done payment_error"
	//
	// The report status. Available values: pending, skipped, accepted, canceled, dispute, ready_for_invoice, payment_in_progress, payment_done, payment_error.
	Status string `protobuf:"bytes,3,opt,name=status,proto3" json:"status" validate:"omitempty,oneof=pending skipped accepted canceled dispute ready_for_invoice payment_in_progress payment_done payment_error"`
	// @inject_tag: json:"correction"
	//
	// The report correction.
	Correction *ChangeRoyaltyReportCorrection `protobuf:"bytes,4,opt,name=correction,proto3" json:"correction"`
	// @inject_tag: json:"-"
	Ip string `protobuf:"bytes,5,opt,name=ip,proto3" json:"-"`
}

func (x *ChangeRoyaltyReportRequest) Reset() {
	*x = ChangeRoyaltyReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeRoyaltyReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeRoyaltyReportRequest) ProtoMessage() {}

func (x *ChangeRoyaltyReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeRoyaltyReportRequest.ProtoReflect.Descriptor instead.
func (*ChangeRoyaltyReportRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{123}
}

func (x *ChangeRoyaltyReportRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *ChangeRoyaltyReportRequest) GetReportId() string {
	if x != nil {
		return x.ReportId
	}
	return ""
}

func (x *ChangeRoyaltyReportRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ChangeRoyaltyReportRequest) GetCorrection() *ChangeRoyaltyReportCorrection {
	if x != nil {
		return x.Correction
	}
	return nil
}

func (x *ChangeRoyaltyReportRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

type MerchantReviewRoyaltyReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: validate:"required,hexadecimal,len=24" json:"-"
	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"-" validate:"required,hexadecimal,len=24"`
	// @inject_tag: validate:"required,hexadecimal,len=24" param:"report_id" json:"-"
	ReportId string `protobuf:"bytes,2,opt,name=report_id,json=reportId,proto3" json:"-" validate:"required,hexadecimal,len=24" param:"report_id"`
	//@inject_tag: json:"is_accepted" json:"-"
	IsAccepted bool `protobuf:"varint,3,opt,name=is_accepted,json=isAccepted,proto3" json:"is_accepted" json:"-"`
	// @inject_tag: json:"-"
	Ip string `protobuf:"bytes,4,opt,name=ip,proto3" json:"-"`
	//@inject_tag: json:"dispute_reason"
	//
	// The dispute reason.
	DisputeReason string `protobuf:"bytes,5,opt,name=dispute_reason,json=disputeReason,proto3" json:"dispute_reason"`
}

func (x *MerchantReviewRoyaltyReportRequest) Reset() {
	*x = MerchantReviewRoyaltyReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerchantReviewRoyaltyReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerchantReviewRoyaltyReportRequest) ProtoMessage() {}

func (x *MerchantReviewRoyaltyReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerchantReviewRoyaltyReportRequest.ProtoReflect.Descriptor instead.
func (*MerchantReviewRoyaltyReportRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{124}
}

func (x *MerchantReviewRoyaltyReportRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *MerchantReviewRoyaltyReportRequest) GetReportId() string {
	if x != nil {
		return x.ReportId
	}
	return ""
}

func (x *MerchantReviewRoyaltyReportRequest) GetIsAccepted() bool {
	if x != nil {
		return x.IsAccepted
	}
	return false
}

func (x *MerchantReviewRoyaltyReportRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *MerchantReviewRoyaltyReportRequest) GetDisputeReason() string {
	if x != nil {
		return x.DisputeReason
	}
	return ""
}

type PaymentChannelCostSystemListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"status"
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status"`
	//@inject_tag: json:"message"
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message"`
	//@inject_tag: json:"item"
	Item *PaymentChannelCostSystemList `protobuf:"bytes,3,opt,name=item,proto3" json:"item"`
}

func (x *PaymentChannelCostSystemListResponse) Reset() {
	*x = PaymentChannelCostSystemListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentChannelCostSystemListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentChannelCostSystemListResponse) ProtoMessage() {}

func (x *PaymentChannelCostSystemListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentChannelCostSystemListResponse.ProtoReflect.Descriptor instead.
func (*PaymentChannelCostSystemListResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{125}
}

func (x *PaymentChannelCostSystemListResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *PaymentChannelCostSystemListResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *PaymentChannelCostSystemListResponse) GetItem() *PaymentChannelCostSystemList {
	if x != nil {
		return x.Item
	}
	return nil
}

type PaymentChannelCostSystemResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"status"
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status"`
	//@inject_tag: json:"message"
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message"`
	//@inject_tag: json:"item"
	Item *PaymentChannelCostSystem `protobuf:"bytes,3,opt,name=item,proto3" json:"item"`
}

func (x *PaymentChannelCostSystemResponse) Reset() {
	*x = PaymentChannelCostSystemResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentChannelCostSystemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentChannelCostSystemResponse) ProtoMessage() {}

func (x *PaymentChannelCostSystemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentChannelCostSystemResponse.ProtoReflect.Descriptor instead.
func (*PaymentChannelCostSystemResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{126}
}

func (x *PaymentChannelCostSystemResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *PaymentChannelCostSystemResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *PaymentChannelCostSystemResponse) GetItem() *PaymentChannelCostSystem {
	if x != nil {
		return x.Item
	}
	return nil
}

type PaymentChannelCostMerchantListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"status"
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status"`
	//@inject_tag: json:"message"
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message"`
	//@inject_tag: json:"item"
	Item *PaymentChannelCostMerchantList `protobuf:"bytes,3,opt,name=item,proto3" json:"item"`
}

func (x *PaymentChannelCostMerchantListResponse) Reset() {
	*x = PaymentChannelCostMerchantListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentChannelCostMerchantListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentChannelCostMerchantListResponse) ProtoMessage() {}

func (x *PaymentChannelCostMerchantListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentChannelCostMerchantListResponse.ProtoReflect.Descriptor instead.
func (*PaymentChannelCostMerchantListResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{127}
}

func (x *PaymentChannelCostMerchantListResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *PaymentChannelCostMerchantListResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *PaymentChannelCostMerchantListResponse) GetItem() *PaymentChannelCostMerchantList {
	if x != nil {
		return x.Item
	}
	return nil
}

type PaymentChannelCostMerchantResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"status"
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status"`
	//@inject_tag: json:"message"
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message"`
	//@inject_tag: json:"item"
	Item *PaymentChannelCostMerchant `protobuf:"bytes,3,opt,name=item,proto3" json:"item"`
}

func (x *PaymentChannelCostMerchantResponse) Reset() {
	*x = PaymentChannelCostMerchantResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentChannelCostMerchantResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentChannelCostMerchantResponse) ProtoMessage() {}

func (x *PaymentChannelCostMerchantResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentChannelCostMerchantResponse.ProtoReflect.Descriptor instead.
func (*PaymentChannelCostMerchantResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{128}
}

func (x *PaymentChannelCostMerchantResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *PaymentChannelCostMerchantResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *PaymentChannelCostMerchantResponse) GetItem() *PaymentChannelCostMerchant {
	if x != nil {
		return x.Item
	}
	return nil
}

type MoneyBackCostSystemListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"status"
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status"`
	//@inject_tag: json:"message"
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message"`
	//@inject_tag: json:"item"
	Item *MoneyBackCostSystemList `protobuf:"bytes,3,opt,name=item,proto3" json:"item"`
}

func (x *MoneyBackCostSystemListResponse) Reset() {
	*x = MoneyBackCostSystemListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneyBackCostSystemListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneyBackCostSystemListResponse) ProtoMessage() {}

func (x *MoneyBackCostSystemListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneyBackCostSystemListResponse.ProtoReflect.Descriptor instead.
func (*MoneyBackCostSystemListResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{129}
}

func (x *MoneyBackCostSystemListResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *MoneyBackCostSystemListResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *MoneyBackCostSystemListResponse) GetItem() *MoneyBackCostSystemList {
	if x != nil {
		return x.Item
	}
	return nil
}

type MoneyBackCostSystemResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"status"
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status"`
	//@inject_tag: json:"message"
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message"`
	//@inject_tag: json:"item"
	Item *MoneyBackCostSystem `protobuf:"bytes,3,opt,name=item,proto3" json:"item"`
}

func (x *MoneyBackCostSystemResponse) Reset() {
	*x = MoneyBackCostSystemResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneyBackCostSystemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneyBackCostSystemResponse) ProtoMessage() {}

func (x *MoneyBackCostSystemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneyBackCostSystemResponse.ProtoReflect.Descriptor instead.
func (*MoneyBackCostSystemResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{130}
}

func (x *MoneyBackCostSystemResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *MoneyBackCostSystemResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *MoneyBackCostSystemResponse) GetItem() *MoneyBackCostSystem {
	if x != nil {
		return x.Item
	}
	return nil
}

type MoneyBackCostMerchantListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"status"
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status"`
	//@inject_tag: json:"message"
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message"`
	//@inject_tag: json:"item"
	Item *MoneyBackCostMerchantList `protobuf:"bytes,3,opt,name=item,proto3" json:"item"`
}

func (x *MoneyBackCostMerchantListResponse) Reset() {
	*x = MoneyBackCostMerchantListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneyBackCostMerchantListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneyBackCostMerchantListResponse) ProtoMessage() {}

func (x *MoneyBackCostMerchantListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneyBackCostMerchantListResponse.ProtoReflect.Descriptor instead.
func (*MoneyBackCostMerchantListResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{131}
}

func (x *MoneyBackCostMerchantListResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *MoneyBackCostMerchantListResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *MoneyBackCostMerchantListResponse) GetItem() *MoneyBackCostMerchantList {
	if x != nil {
		return x.Item
	}
	return nil
}

type MoneyBackCostMerchantResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"status"
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status"`
	//@inject_tag: json:"message"
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message"`
	//@inject_tag: json:"item"
	Item *MoneyBackCostMerchant `protobuf:"bytes,3,opt,name=item,proto3" json:"item"`
}

func (x *MoneyBackCostMerchantResponse) Reset() {
	*x = MoneyBackCostMerchantResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneyBackCostMerchantResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneyBackCostMerchantResponse) ProtoMessage() {}

func (x *MoneyBackCostMerchantResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneyBackCostMerchantResponse.ProtoReflect.Descriptor instead.
func (*MoneyBackCostMerchantResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{132}
}

func (x *MoneyBackCostMerchantResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *MoneyBackCostMerchantResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *MoneyBackCostMerchantResponse) GetItem() *MoneyBackCostMerchant {
	if x != nil {
		return x.Item
	}
	return nil
}

type PriceGroupByCountryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"required,alpha,len=2"
	Country string `protobuf:"bytes,1,opt,name=country,proto3" json:"country,omitempty" validate:"required,alpha,len=2"`
}

func (x *PriceGroupByCountryRequest) Reset() {
	*x = PriceGroupByCountryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceGroupByCountryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceGroupByCountryRequest) ProtoMessage() {}

func (x *PriceGroupByCountryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceGroupByCountryRequest.ProtoReflect.Descriptor instead.
func (*PriceGroupByCountryRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{133}
}

func (x *PriceGroupByCountryRequest) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

type PriceGroupCurrenciesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"regions"
	//
	// A list of regions.
	Region []*PriceGroupRegions `protobuf:"bytes,1,rep,name=region,proto3" json:"regions"`
}

func (x *PriceGroupCurrenciesResponse) Reset() {
	*x = PriceGroupCurrenciesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceGroupCurrenciesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceGroupCurrenciesResponse) ProtoMessage() {}

func (x *PriceGroupCurrenciesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceGroupCurrenciesResponse.ProtoReflect.Descriptor instead.
func (*PriceGroupCurrenciesResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{134}
}

func (x *PriceGroupCurrenciesResponse) GetRegion() []*PriceGroupRegions {
	if x != nil {
		return x.Region
	}
	return nil
}

type PriceGroupRegions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"currency"
	//
	// The region's currency.
	Currency string `protobuf:"bytes,1,opt,name=currency,proto3" json:"currency"`
	//@inject_tag: json:"regions"
	//
	// The region data.
	Regions []*PriceGroupRegion `protobuf:"bytes,2,rep,name=regions,proto3" json:"regions"`
}

func (x *PriceGroupRegions) Reset() {
	*x = PriceGroupRegions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceGroupRegions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceGroupRegions) ProtoMessage() {}

func (x *PriceGroupRegions) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceGroupRegions.ProtoReflect.Descriptor instead.
func (*PriceGroupRegions) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{135}
}

func (x *PriceGroupRegions) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *PriceGroupRegions) GetRegions() []*PriceGroupRegion {
	if x != nil {
		return x.Regions
	}
	return nil
}

type PriceGroupRegion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"region"
	//
	// The region's name.
	Region string `protobuf:"bytes,1,opt,name=region,proto3" json:"region"`
	//@inject_tag: json:"country"
	//
	// The country's name.
	Country []string `protobuf:"bytes,2,rep,name=country,proto3" json:"country"`
}

func (x *PriceGroupRegion) Reset() {
	*x = PriceGroupRegion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceGroupRegion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceGroupRegion) ProtoMessage() {}

func (x *PriceGroupRegion) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceGroupRegion.ProtoReflect.Descriptor instead.
func (*PriceGroupRegion) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{136}
}

func (x *PriceGroupRegion) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *PriceGroupRegion) GetCountry() []string {
	if x != nil {
		return x.Country
	}
	return nil
}

type PriceGroupByRegionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"required,alpha"
	Region string `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty" validate:"required,alpha"`
}

func (x *PriceGroupByRegionRequest) Reset() {
	*x = PriceGroupByRegionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceGroupByRegionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceGroupByRegionRequest) ProtoMessage() {}

func (x *PriceGroupByRegionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceGroupByRegionRequest.ProtoReflect.Descriptor instead.
func (*PriceGroupByRegionRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{137}
}

func (x *PriceGroupByRegionRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

type RecommendedPriceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: validate:"required,numeric,gte=0"
	Amount float64 `protobuf:"fixed64,1,opt,name=amount,proto3" json:"amount,omitempty" validate:"required,numeric,gte=0"`
	// @inject_tag: validate:"required,alpha,len=3"
	Currency string `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty" validate:"required,alpha,len=3"`
}

func (x *RecommendedPriceRequest) Reset() {
	*x = RecommendedPriceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecommendedPriceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecommendedPriceRequest) ProtoMessage() {}

func (x *RecommendedPriceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecommendedPriceRequest.ProtoReflect.Descriptor instead.
func (*RecommendedPriceRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{138}
}

func (x *RecommendedPriceRequest) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *RecommendedPriceRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

type RecommendedPriceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"recommended_price"
	//
	// A list of recommended currency conversion prices.
	RecommendedPrice []*RecommendedPrice `protobuf:"bytes,1,rep,name=recommended_price,json=recommendedPrice,proto3" json:"recommended_price"`
}

func (x *RecommendedPriceResponse) Reset() {
	*x = RecommendedPriceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecommendedPriceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecommendedPriceResponse) ProtoMessage() {}

func (x *RecommendedPriceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecommendedPriceResponse.ProtoReflect.Descriptor instead.
func (*RecommendedPriceResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{139}
}

func (x *RecommendedPriceResponse) GetRecommendedPrice() []*RecommendedPrice {
	if x != nil {
		return x.RecommendedPrice
	}
	return nil
}

type RecommendedPriceTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: validate:"required,alpha,len=3"
	//
	// Three-letter currency code in ISO 4217, in uppercase.
	Currency string `protobuf:"bytes,1,opt,name=currency,proto3" json:"currency,omitempty" validate:"required,alpha,len=3"`
}

func (x *RecommendedPriceTableRequest) Reset() {
	*x = RecommendedPriceTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecommendedPriceTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecommendedPriceTableRequest) ProtoMessage() {}

func (x *RecommendedPriceTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecommendedPriceTableRequest.ProtoReflect.Descriptor instead.
func (*RecommendedPriceTableRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{140}
}

func (x *RecommendedPriceTableRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

type RecommendedPriceTableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"ranges"
	//
	// The price ranges list.
	Ranges []*PriceTableRange `protobuf:"bytes,1,rep,name=ranges,proto3" json:"ranges"`
}

func (x *RecommendedPriceTableResponse) Reset() {
	*x = RecommendedPriceTableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecommendedPriceTableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecommendedPriceTableResponse) ProtoMessage() {}

func (x *RecommendedPriceTableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecommendedPriceTableResponse.ProtoReflect.Descriptor instead.
func (*RecommendedPriceTableResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{141}
}

func (x *RecommendedPriceTableResponse) GetRanges() []*PriceTableRange {
	if x != nil {
		return x.Ranges
	}
	return nil
}

type ProductPricesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"product_price"
	ProductPrice []*ProductPrice `protobuf:"bytes,1,rep,name=product_price,json=productPrice,proto3" json:"product_price"`
}

func (x *ProductPricesResponse) Reset() {
	*x = ProductPricesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductPricesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductPricesResponse) ProtoMessage() {}

func (x *ProductPricesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductPricesResponse.ProtoReflect.Descriptor instead.
func (*ProductPricesResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{142}
}

func (x *ProductPricesResponse) GetProductPrice() []*ProductPrice {
	if x != nil {
		return x.ProductPrice
	}
	return nil
}

type UpdateProductPricesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"required,hexadecimal,len=24" json:"product_id" param:"product_id"
	ProductId string `protobuf:"bytes,1,opt,name=product_id,json=productId,proto3" json:"product_id" validate:"required,hexadecimal,len=24" param:"product_id"`
	//@inject_tag: validate:"required,min=1,currency_price,dive" json:"prices"
	Prices []*ProductPrice `protobuf:"bytes,2,rep,name=prices,proto3" json:"prices" validate:"required,min=1,currency_price,dive"`
	//@inject_tag: validate:"hexadecimal,len=24"
	MerchantId string `protobuf:"bytes,3,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty" validate:"hexadecimal,len=24"`
}

func (x *UpdateProductPricesRequest) Reset() {
	*x = UpdateProductPricesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProductPricesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProductPricesRequest) ProtoMessage() {}

func (x *UpdateProductPricesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProductPricesRequest.ProtoReflect.Descriptor instead.
func (*UpdateProductPricesRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{143}
}

func (x *UpdateProductPricesRequest) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *UpdateProductPricesRequest) GetPrices() []*ProductPrice {
	if x != nil {
		return x.Prices
	}
	return nil
}

func (x *UpdateProductPricesRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

type UserProfilePersonal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"first_name" bson:"first_name" validate:"required,name,max=30" required:"true"
	//
	// The user's first name.
	FirstName string `protobuf:"bytes,1,opt,name=first_name,json=firstName,proto3" json:"first_name" bson:"first_name" validate:"required,name,max=30" required:"true"`
	//@inject_tag: json:"last_name" bson:"last_name" validate:"required,name,max=30" required:"true"
	//
	// The user's last name.
	LastName string `protobuf:"bytes,2,opt,name=last_name,json=lastName,proto3" json:"last_name" bson:"last_name" validate:"required,name,max=30" required:"true"`
	//@inject_tag: json:"position" bson:"position" validate:"required,position" required:"true"
	//
	// The user's position in the company.
	Position string `protobuf:"bytes,3,opt,name=position,proto3" json:"position" bson:"position" validate:"required,position" required:"true"`
}

func (x *UserProfilePersonal) Reset() {
	*x = UserProfilePersonal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserProfilePersonal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserProfilePersonal) ProtoMessage() {}

func (x *UserProfilePersonal) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserProfilePersonal.ProtoReflect.Descriptor instead.
func (*UserProfilePersonal) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{144}
}

func (x *UserProfilePersonal) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *UserProfilePersonal) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *UserProfilePersonal) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

type UserProfileHelp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"product_promotion_and_development" bson:"product_promotion_and_development"
	//
	// Has a true value if the user needs help with product promotion and development.
	ProductPromotionAndDevelopment bool `protobuf:"varint,1,opt,name=product_promotion_and_development,json=productPromotionAndDevelopment,proto3" json:"product_promotion_and_development" bson:"product_promotion_and_development"`
	//@inject_tag: json:"released_game_promotion" bson:"released_game_promotion"
	//
	// Has a true value if the user needs help with games promotion that have already been released.
	ReleasedGamePromotion bool `protobuf:"varint,2,opt,name=released_game_promotion,json=releasedGamePromotion,proto3" json:"released_game_promotion" bson:"released_game_promotion"`
	//@inject_tag: json:"international_sales" bson:"international_sales"
	//
	// Has a true value if the user needs help with international sales.
	InternationalSales bool `protobuf:"varint,3,opt,name=international_sales,json=internationalSales,proto3" json:"international_sales" bson:"international_sales"`
	//@inject_tag: json:"other" bson:"other"
	//
	// Has a true value if the user needs help with other problems.
	Other bool `protobuf:"varint,4,opt,name=other,proto3" json:"other" bson:"other"`
}

func (x *UserProfileHelp) Reset() {
	*x = UserProfileHelp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserProfileHelp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserProfileHelp) ProtoMessage() {}

func (x *UserProfileHelp) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserProfileHelp.ProtoReflect.Descriptor instead.
func (*UserProfileHelp) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{145}
}

func (x *UserProfileHelp) GetProductPromotionAndDevelopment() bool {
	if x != nil {
		return x.ProductPromotionAndDevelopment
	}
	return false
}

func (x *UserProfileHelp) GetReleasedGamePromotion() bool {
	if x != nil {
		return x.ReleasedGamePromotion
	}
	return false
}

func (x *UserProfileHelp) GetInternationalSales() bool {
	if x != nil {
		return x.InternationalSales
	}
	return false
}

func (x *UserProfileHelp) GetOther() bool {
	if x != nil {
		return x.Other
	}
	return false
}

type UserProfileCompanyMonetization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"paid_subscription" bson:"paid_subscription"
	//
	// Has a true value if the monetization strategy is buying the paid subscription by company's users.
	PaidSubscription bool `protobuf:"varint,1,opt,name=paid_subscription,json=paidSubscription,proto3" json:"paid_subscription" bson:"paid_subscription"`
	//@inject_tag: json:"in_game_advertising" bson:"in_game_advertising"
	//
	// Has a true value if the monetization strategy is buying the in-game advertising.
	InGameAdvertising bool `protobuf:"varint,2,opt,name=in_game_advertising,json=inGameAdvertising,proto3" json:"in_game_advertising" bson:"in_game_advertising"`
	//@inject_tag: json:"in_game_purchases" bson:"in_game_purchases"
	//
	// Has a true value if the monetization strategy is buying in-game purchases by company's users.
	InGamePurchases bool `protobuf:"varint,3,opt,name=in_game_purchases,json=inGamePurchases,proto3" json:"in_game_purchases" bson:"in_game_purchases"`
	//@inject_tag: json:"premium_access" bson:"premium_access"
	//
	// Has a true value if the monetization strategy is buying the premium access by company's users.
	PremiumAccess bool `protobuf:"varint,4,opt,name=premium_access,json=premiumAccess,proto3" json:"premium_access" bson:"premium_access"`
	//@inject_tag: json:"other" bson:"other"
	//
	// Has a true value if the monetization has the other strategy.
	Other bool `protobuf:"varint,5,opt,name=other,proto3" json:"other" bson:"other"`
}

func (x *UserProfileCompanyMonetization) Reset() {
	*x = UserProfileCompanyMonetization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserProfileCompanyMonetization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserProfileCompanyMonetization) ProtoMessage() {}

func (x *UserProfileCompanyMonetization) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserProfileCompanyMonetization.ProtoReflect.Descriptor instead.
func (*UserProfileCompanyMonetization) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{146}
}

func (x *UserProfileCompanyMonetization) GetPaidSubscription() bool {
	if x != nil {
		return x.PaidSubscription
	}
	return false
}

func (x *UserProfileCompanyMonetization) GetInGameAdvertising() bool {
	if x != nil {
		return x.InGameAdvertising
	}
	return false
}

func (x *UserProfileCompanyMonetization) GetInGamePurchases() bool {
	if x != nil {
		return x.InGamePurchases
	}
	return false
}

func (x *UserProfileCompanyMonetization) GetPremiumAccess() bool {
	if x != nil {
		return x.PremiumAccess
	}
	return false
}

func (x *UserProfileCompanyMonetization) GetOther() bool {
	if x != nil {
		return x.Other
	}
	return false
}

type UserProfileCompanyPlatforms struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"pc_mac" bson:"pc_mac"
	//
	// Has a true value if the platform is PC/MacOs.
	PcMac bool `protobuf:"varint,1,opt,name=pc_mac,json=pcMac,proto3" json:"pc_mac" bson:"pc_mac"`
	//@inject_tag: json:"game_console" bson:"game_console"
	//
	// Has a true value if the platform is the game console.
	GameConsole bool `protobuf:"varint,2,opt,name=game_console,json=gameConsole,proto3" json:"game_console" bson:"game_console"`
	//@inject_tag: json:"mobile_device" bson:"mobile_device"
	//
	// Has a true value if the platform is the mobile device.
	MobileDevice bool `protobuf:"varint,3,opt,name=mobile_device,json=mobileDevice,proto3" json:"mobile_device" bson:"mobile_device"`
	//@inject_tag: json:"web_browser" bson:"web_browser"
	//
	// Has a true value if the platform is the web browser.
	WebBrowser bool `protobuf:"varint,4,opt,name=web_browser,json=webBrowser,proto3" json:"web_browser" bson:"web_browser"`
	//@inject_tag: json:"other" bson:"other"
	//
	// Has a true value if the platform has the other value.
	Other bool `protobuf:"varint,5,opt,name=other,proto3" json:"other" bson:"other"`
}

func (x *UserProfileCompanyPlatforms) Reset() {
	*x = UserProfileCompanyPlatforms{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserProfileCompanyPlatforms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserProfileCompanyPlatforms) ProtoMessage() {}

func (x *UserProfileCompanyPlatforms) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserProfileCompanyPlatforms.ProtoReflect.Descriptor instead.
func (*UserProfileCompanyPlatforms) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{147}
}

func (x *UserProfileCompanyPlatforms) GetPcMac() bool {
	if x != nil {
		return x.PcMac
	}
	return false
}

func (x *UserProfileCompanyPlatforms) GetGameConsole() bool {
	if x != nil {
		return x.GameConsole
	}
	return false
}

func (x *UserProfileCompanyPlatforms) GetMobileDevice() bool {
	if x != nil {
		return x.MobileDevice
	}
	return false
}

func (x *UserProfileCompanyPlatforms) GetWebBrowser() bool {
	if x != nil {
		return x.WebBrowser
	}
	return false
}

func (x *UserProfileCompanyPlatforms) GetOther() bool {
	if x != nil {
		return x.Other
	}
	return false
}

type UserProfileCompany struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"company_name" bson:"company_name" validate:"required,company_name,max=60" required:"true"
	//
	// The company's name.
	CompanyName string `protobuf:"bytes,1,opt,name=company_name,json=companyName,proto3" json:"company_name" bson:"company_name" validate:"required,company_name,max=60" required:"true"`
	//@inject_tag: json:"website" validate:"required,url" bson:"website" required:"true"
	//
	// The company's website.
	Website string `protobuf:"bytes,2,opt,name=website,proto3" json:"website" validate:"required,url" bson:"website" required:"true"`
	//@inject_tag: json:"annual_income" bson:"annual_income" validate:"required" required:"true"
	//
	// The company's annual income.
	AnnualIncome *RangeInt `protobuf:"bytes,3,opt,name=annual_income,json=annualIncome,proto3" json:"annual_income" bson:"annual_income" validate:"required" required:"true"`
	//@inject_tag: json:"number_of_employees" bson:"number_of_employees" validate:"required" required:"true"
	//
	// The company's number of employees.
	NumberOfEmployees *RangeInt `protobuf:"bytes,4,opt,name=number_of_employees,json=numberOfEmployees,proto3" json:"number_of_employees" bson:"number_of_employees" validate:"required" required:"true"`
	//@inject_tag: json:"kind_of_activity" validate:"omitempty,oneof=develop_and_publish_your_games publish_games_of_other_companies publish_your_games_through_other_publishers other" bson:"kind_of_activity"
	//
	// The company's kind of activity. Available values: develop_and_publish_your_games, publish_games_of_other_companies, publish_your_games_through_other_publishers, other.
	KindOfActivity string `protobuf:"bytes,5,opt,name=kind_of_activity,json=kindOfActivity,proto3" json:"kind_of_activity" validate:"omitempty,oneof=develop_and_publish_your_games publish_games_of_other_companies publish_your_games_through_other_publishers other" bson:"kind_of_activity"`
	//@inject_tag: json:"monetization" bson:"monetization"
	//
	// The company's monetization activities.
	Monetization *UserProfileCompanyMonetization `protobuf:"bytes,6,opt,name=monetization,proto3" json:"monetization" bson:"monetization"`
	//@inject_tag: json:"platforms" bson:"platforms"
	//
	// The company's platforms.
	Platforms *UserProfileCompanyPlatforms `protobuf:"bytes,7,opt,name=platforms,proto3" json:"platforms" bson:"platforms"`
}

func (x *UserProfileCompany) Reset() {
	*x = UserProfileCompany{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserProfileCompany) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserProfileCompany) ProtoMessage() {}

func (x *UserProfileCompany) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserProfileCompany.ProtoReflect.Descriptor instead.
func (*UserProfileCompany) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{148}
}

func (x *UserProfileCompany) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *UserProfileCompany) GetWebsite() string {
	if x != nil {
		return x.Website
	}
	return ""
}

func (x *UserProfileCompany) GetAnnualIncome() *RangeInt {
	if x != nil {
		return x.AnnualIncome
	}
	return nil
}

func (x *UserProfileCompany) GetNumberOfEmployees() *RangeInt {
	if x != nil {
		return x.NumberOfEmployees
	}
	return nil
}

func (x *UserProfileCompany) GetKindOfActivity() string {
	if x != nil {
		return x.KindOfActivity
	}
	return ""
}

func (x *UserProfileCompany) GetMonetization() *UserProfileCompanyMonetization {
	if x != nil {
		return x.Monetization
	}
	return nil
}

func (x *UserProfileCompany) GetPlatforms() *UserProfileCompanyPlatforms {
	if x != nil {
		return x.Platforms
	}
	return nil
}

type UserProfileEmail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"email" validate:"required,email" required:"true"
	//
	// The user's email address.
	Email string `protobuf:"bytes,1,opt,name=email,proto3" json:"email" validate:"required,email" required:"true"`
	//@inject_tag: json:"confirmed"
	//
	// Whether the user's email address has been verified.
	Confirmed bool `protobuf:"varint,2,opt,name=confirmed,proto3" json:"confirmed"`
	//@inject_tag: json:"confirmed_at"
	//
	// The date of the user's email confirmation.
	ConfirmedAt *timestamp.Timestamp `protobuf:"bytes,3,opt,name=confirmed_at,json=confirmedAt,proto3" json:"confirmed_at"`
	//@inject_tag: json:"-" bson:"-"
	ConfirmationUrl string `protobuf:"bytes,4,opt,name=confirmation_url,json=confirmationUrl,proto3" json:"-" bson:"-"`
	//@inject_tag: json:"-" bson:"is_confirmation_email_sent"
	IsConfirmationEmailSent bool `protobuf:"varint,5,opt,name=is_confirmation_email_sent,json=isConfirmationEmailSent,proto3" json:"-" bson:"is_confirmation_email_sent"`
}

func (x *UserProfileEmail) Reset() {
	*x = UserProfileEmail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserProfileEmail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserProfileEmail) ProtoMessage() {}

func (x *UserProfileEmail) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserProfileEmail.ProtoReflect.Descriptor instead.
func (*UserProfileEmail) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{149}
}

func (x *UserProfileEmail) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserProfileEmail) GetConfirmed() bool {
	if x != nil {
		return x.Confirmed
	}
	return false
}

func (x *UserProfileEmail) GetConfirmedAt() *timestamp.Timestamp {
	if x != nil {
		return x.ConfirmedAt
	}
	return nil
}

func (x *UserProfileEmail) GetConfirmationUrl() string {
	if x != nil {
		return x.ConfirmationUrl
	}
	return ""
}

func (x *UserProfileEmail) GetIsConfirmationEmailSent() bool {
	if x != nil {
		return x.IsConfirmationEmailSent
	}
	return false
}

type UserProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"id" faker:"objectIdString"
	//
	// The unique identifier for the PaySuper user.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id" faker:"objectIdString"`
	//@inject_tag: json:"-" validate:"required,hexadecimal,len=24" faker:"objectIdString"
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"-" validate:"required,hexadecimal,len=24" faker:"objectIdString"`
	//@inject_tag: json:"email"
	//
	// The user's email data.
	Email *UserProfileEmail `protobuf:"bytes,3,opt,name=email,proto3" json:"email"`
	//@inject_tag: json:"personal"
	//
	// The user personal information.
	Personal *UserProfilePersonal `protobuf:"bytes,4,opt,name=personal,proto3" json:"personal"`
	//@inject_tag: json:"help"
	//
	// Information about the user's problem.
	Help *UserProfileHelp `protobuf:"bytes,5,opt,name=help,proto3" json:"help"`
	//@inject_tag: json:"company"
	//
	// Information about the user's company.
	Company *UserProfileCompany `protobuf:"bytes,6,opt,name=company,proto3" json:"company"`
	//@inject_tag: json:"last_step" bson:"last_step"
	//
	// The identifier for the last step of the wizard that the user need to finish.
	LastStep string `protobuf:"bytes,7,opt,name=last_step,json=lastStep,proto3" json:"last_step" bson:"last_step"`
	//@inject_tag: json:"centrifugo_token" bson:"centrifugo_token"
	//
	// The user authorisation token to connect to the Centrifugo channel.
	CentrifugoToken string `protobuf:"bytes,8,opt,name=centrifugo_token,json=centrifugoToken,proto3" json:"centrifugo_token" bson:"centrifugo_token"`
	// @inject_tag: json:"created_at"
	//
	// The date of the user creation.
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	// @inject_tag: json:"updated_at"
	//
	// The date of the user last update.
	UpdatedAt *timestamp.Timestamp `protobuf:"bytes,10,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	//@inject_tag: json:"locale" bson:"locale" validate:"omitempty,alpha"
	//
	// The user language locale.
	Locale string `protobuf:"bytes,11,opt,name=locale,proto3" json:"locale" bson:"locale" validate:"omitempty,alpha"`
}

func (x *UserProfile) Reset() {
	*x = UserProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserProfile) ProtoMessage() {}

func (x *UserProfile) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserProfile.ProtoReflect.Descriptor instead.
func (*UserProfile) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{150}
}

func (x *UserProfile) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserProfile) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserProfile) GetEmail() *UserProfileEmail {
	if x != nil {
		return x.Email
	}
	return nil
}

func (x *UserProfile) GetPersonal() *UserProfilePersonal {
	if x != nil {
		return x.Personal
	}
	return nil
}

func (x *UserProfile) GetHelp() *UserProfileHelp {
	if x != nil {
		return x.Help
	}
	return nil
}

func (x *UserProfile) GetCompany() *UserProfileCompany {
	if x != nil {
		return x.Company
	}
	return nil
}

func (x *UserProfile) GetLastStep() string {
	if x != nil {
		return x.LastStep
	}
	return ""
}

func (x *UserProfile) GetCentrifugoToken() string {
	if x != nil {
		return x.CentrifugoToken
	}
	return ""
}

func (x *UserProfile) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *UserProfile) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *UserProfile) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

type CommonUserProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"user_id" validate:"required,hexadecimal,len=24"
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id" validate:"required,hexadecimal,len=24"`
	//@inject_tag: json:"merchant_id" validate:"omitempty,hexadecimal,len=24"
	MerchantId string `protobuf:"bytes,2,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id" validate:"omitempty,hexadecimal,len=24"`
}

func (x *CommonUserProfileRequest) Reset() {
	*x = CommonUserProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonUserProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonUserProfileRequest) ProtoMessage() {}

func (x *CommonUserProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonUserProfileRequest.ProtoReflect.Descriptor instead.
func (*CommonUserProfileRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{151}
}

func (x *CommonUserProfileRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CommonUserProfileRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

type CommonUserProfileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32                 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Profile *CommonUserProfile    `protobuf:"bytes,3,opt,name=profile,proto3" json:"profile,omitempty"`
}

func (x *CommonUserProfileResponse) Reset() {
	*x = CommonUserProfileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonUserProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonUserProfileResponse) ProtoMessage() {}

func (x *CommonUserProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonUserProfileResponse.ProtoReflect.Descriptor instead.
func (*CommonUserProfileResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{152}
}

func (x *CommonUserProfileResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *CommonUserProfileResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *CommonUserProfileResponse) GetProfile() *CommonUserProfile {
	if x != nil {
		return x.Profile
	}
	return nil
}

type CommonUserProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user profile data.
	Profile *UserProfile `protobuf:"bytes,1,opt,name=profile,proto3" json:"profile,omitempty"`
	// The user's role.
	Role *UserRole `protobuf:"bytes,2,opt,name=role,proto3" json:"role,omitempty"`
	// The user permissions.
	Permissions []*Permission `protobuf:"bytes,3,rep,name=permissions,proto3" json:"permissions,omitempty"`
	// Information about the merchant (the full list of parameters returns only for the owner and the short list for others).
	Merchant *Merchant `protobuf:"bytes,4,opt,name=merchant,proto3" json:"merchant,omitempty"`
}

func (x *CommonUserProfile) Reset() {
	*x = CommonUserProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonUserProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonUserProfile) ProtoMessage() {}

func (x *CommonUserProfile) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonUserProfile.ProtoReflect.Descriptor instead.
func (*CommonUserProfile) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{153}
}

func (x *CommonUserProfile) GetProfile() *UserProfile {
	if x != nil {
		return x.Profile
	}
	return nil
}

func (x *CommonUserProfile) GetRole() *UserRole {
	if x != nil {
		return x.Role
	}
	return nil
}

func (x *CommonUserProfile) GetPermissions() []*Permission {
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *CommonUserProfile) GetMerchant() *Merchant {
	if x != nil {
		return x.Merchant
	}
	return nil
}

type GetUserProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"required,hexadecimal,len=24"
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty" validate:"required,hexadecimal,len=24"`
	//@inject_tag: validate:"omitempty,hexadecimal,len=24"
	ProfileId string `protobuf:"bytes,2,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty" validate:"omitempty,hexadecimal,len=24"`
}

func (x *GetUserProfileRequest) Reset() {
	*x = GetUserProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserProfileRequest) ProtoMessage() {}

func (x *GetUserProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserProfileRequest.ProtoReflect.Descriptor instead.
func (*GetUserProfileRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{154}
}

func (x *GetUserProfileRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetUserProfileRequest) GetProfileId() string {
	if x != nil {
		return x.ProfileId
	}
	return ""
}

type GetUserProfileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32                 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Item    *UserProfile          `protobuf:"bytes,3,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *GetUserProfileResponse) Reset() {
	*x = GetUserProfileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserProfileResponse) ProtoMessage() {}

func (x *GetUserProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserProfileResponse.ProtoReflect.Descriptor instead.
func (*GetUserProfileResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{155}
}

func (x *GetUserProfileResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetUserProfileResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *GetUserProfileResponse) GetItem() *UserProfile {
	if x != nil {
		return x.Item
	}
	return nil
}

type PageReview struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: faker:"objectIdString"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" faker:"objectIdString"`
	//@inject_tag: json:"user_id" bson:"user_id"
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id" bson:"user_id"`
	Review string `protobuf:"bytes,3,opt,name=review,proto3" json:"review,omitempty"`
	Url    string `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	IsRead bool   `protobuf:"varint,5,opt,name=is_read,json=isRead,proto3" json:"is_read,omitempty"`
	// @inject_tag: json:"created_at"
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	// @inject_tag: json:"updated_at"
	UpdatedAt *timestamp.Timestamp `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
}

func (x *PageReview) Reset() {
	*x = PageReview{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageReview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageReview) ProtoMessage() {}

func (x *PageReview) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageReview.ProtoReflect.Descriptor instead.
func (*PageReview) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{156}
}

func (x *PageReview) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PageReview) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *PageReview) GetReview() string {
	if x != nil {
		return x.Review
	}
	return ""
}

func (x *PageReview) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *PageReview) GetIsRead() bool {
	if x != nil {
		return x.IsRead
	}
	return false
}

func (x *PageReview) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PageReview) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type CreatePageReviewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"required,hexadecimal,len=24" json:"-"
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"-" validate:"required,hexadecimal,len=24"`
	//@inject_tag: validate:"required,max=500" required:"true"
	//
	// The feedback message.
	Review string `protobuf:"bytes,2,opt,name=review,proto3" json:"review,omitempty" validate:"required,max=500" required:"true"`
	//@inject_tag: validate:"required" required:"true"
	//
	// The feedback page URL.
	Url string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty" validate:"required" required:"true"`
}

func (x *CreatePageReviewRequest) Reset() {
	*x = CreatePageReviewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePageReviewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePageReviewRequest) ProtoMessage() {}

func (x *CreatePageReviewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePageReviewRequest.ProtoReflect.Descriptor instead.
func (*CreatePageReviewRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{157}
}

func (x *CreatePageReviewRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreatePageReviewRequest) GetReview() string {
	if x != nil {
		return x.Review
	}
	return ""
}

func (x *CreatePageReviewRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type ConfirmUserEmailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"required" required:"true"
	//
	// An encripted string to confirm the user registration.
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty" validate:"required" required:"true"`
}

func (x *ConfirmUserEmailRequest) Reset() {
	*x = ConfirmUserEmailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfirmUserEmailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmUserEmailRequest) ProtoMessage() {}

func (x *ConfirmUserEmailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmUserEmailRequest.ProtoReflect.Descriptor instead.
func (*ConfirmUserEmailRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{158}
}

func (x *ConfirmUserEmailRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type ConfirmUserEmailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32                 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Profile *UserProfile          `protobuf:"bytes,3,opt,name=profile,proto3" json:"profile,omitempty"`
}

func (x *ConfirmUserEmailResponse) Reset() {
	*x = ConfirmUserEmailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfirmUserEmailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmUserEmailResponse) ProtoMessage() {}

func (x *ConfirmUserEmailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmUserEmailResponse.ProtoReflect.Descriptor instead.
func (*ConfirmUserEmailResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{159}
}

func (x *ConfirmUserEmailResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ConfirmUserEmailResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *ConfirmUserEmailResponse) GetProfile() *UserProfile {
	if x != nil {
		return x.Profile
	}
	return nil
}

type VatTransactionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"vat_report_id" validate:"required,hexadecimal,len=24"
	VatReportId string `protobuf:"bytes,1,opt,name=vat_report_id,json=vatReportId,proto3" json:"vat_report_id" validate:"required,hexadecimal,len=24"`
	// @inject_tag: query:"limit" validate:"omitempty,numeric,gt=0"
	Limit int64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty" query:"limit" validate:"omitempty,numeric,gt=0"`
	// @inject_tag: query:"offset" validate:"omitempty,numeric,gte=0"
	Offset int64 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty" query:"offset" validate:"omitempty,numeric,gte=0"`
	// @inject_tag: query:"sort[]"
	Sort []string `protobuf:"bytes,4,rep,name=sort,proto3" json:"sort,omitempty" query:"sort[]"`
}

func (x *VatTransactionsRequest) Reset() {
	*x = VatTransactionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VatTransactionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VatTransactionsRequest) ProtoMessage() {}

func (x *VatTransactionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VatTransactionsRequest.ProtoReflect.Descriptor instead.
func (*VatTransactionsRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{160}
}

func (x *VatTransactionsRequest) GetVatReportId() string {
	if x != nil {
		return x.VatReportId
	}
	return ""
}

func (x *VatTransactionsRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *VatTransactionsRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *VatTransactionsRequest) GetSort() []string {
	if x != nil {
		return x.Sort
	}
	return nil
}

type TransactionsPaginate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"count"
	//
	// The total number of found transactions.
	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count"`
	// @inject_tag: json:"items"
	//
	// The list of the transactions.
	Items []*OrderViewPublic `protobuf:"bytes,2,rep,name=items,proto3" json:"items"`
}

func (x *TransactionsPaginate) Reset() {
	*x = TransactionsPaginate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionsPaginate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionsPaginate) ProtoMessage() {}

func (x *TransactionsPaginate) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionsPaginate.ProtoReflect.Descriptor instead.
func (*TransactionsPaginate) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{161}
}

func (x *TransactionsPaginate) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *TransactionsPaginate) GetItems() []*OrderViewPublic {
	if x != nil {
		return x.Items
	}
	return nil
}

type TransactionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// @inject_tag: json:"message,omitempty"
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// @inject_tag: json:"data"
	Data *TransactionsPaginate `protobuf:"bytes,3,opt,name=data,proto3" json:"data"`
}

func (x *TransactionsResponse) Reset() {
	*x = TransactionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionsResponse) ProtoMessage() {}

func (x *TransactionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionsResponse.ProtoReflect.Descriptor instead.
func (*TransactionsResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{162}
}

func (x *TransactionsResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *TransactionsResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *TransactionsResponse) GetData() *TransactionsPaginate {
	if x != nil {
		return x.Data
	}
	return nil
}

type VatReportsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"country" query:"country" validate:"required,alpha,len=2"
	Country string `protobuf:"bytes,1,opt,name=country,proto3" json:"country" query:"country" validate:"required,alpha,len=2"`
	// @inject_tag: query:"limit" validate:"omitempty,numeric,gt=0"
	Limit int64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty" query:"limit" validate:"omitempty,numeric,gt=0"`
	// @inject_tag: query:"offset" validate:"omitempty,numeric,gte=0"
	Offset int64 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty" query:"offset" validate:"omitempty,numeric,gte=0"`
	// @inject_tag: query:"sort[]"
	Sort []string `protobuf:"bytes,4,rep,name=sort,proto3" json:"sort,omitempty" query:"sort[]"`
}

func (x *VatReportsRequest) Reset() {
	*x = VatReportsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VatReportsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VatReportsRequest) ProtoMessage() {}

func (x *VatReportsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VatReportsRequest.ProtoReflect.Descriptor instead.
func (*VatReportsRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{163}
}

func (x *VatReportsRequest) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *VatReportsRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *VatReportsRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *VatReportsRequest) GetSort() []string {
	if x != nil {
		return x.Sort
	}
	return nil
}

type VatReportsPaginate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"count"
	//
	// The total number of the found reports.
	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count"`
	// @inject_tag: json:"items"
	//
	// The VAT reports list.
	Items []*VatReport `protobuf:"bytes,2,rep,name=items,proto3" json:"items"`
}

func (x *VatReportsPaginate) Reset() {
	*x = VatReportsPaginate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VatReportsPaginate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VatReportsPaginate) ProtoMessage() {}

func (x *VatReportsPaginate) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VatReportsPaginate.ProtoReflect.Descriptor instead.
func (*VatReportsPaginate) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{164}
}

func (x *VatReportsPaginate) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *VatReportsPaginate) GetItems() []*VatReport {
	if x != nil {
		return x.Items
	}
	return nil
}

type VatReportsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// @inject_tag: json:"message,omitempty"
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// @inject_tag: json:"data"
	Data *VatReportsPaginate `protobuf:"bytes,3,opt,name=data,proto3" json:"data"`
}

func (x *VatReportsResponse) Reset() {
	*x = VatReportsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VatReportsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VatReportsResponse) ProtoMessage() {}

func (x *VatReportsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VatReportsResponse.ProtoReflect.Descriptor instead.
func (*VatReportsResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{165}
}

func (x *VatReportsResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *VatReportsResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *VatReportsResponse) GetData() *VatReportsPaginate {
	if x != nil {
		return x.Data
	}
	return nil
}

type ProcessVatReportsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date *timestamp.Timestamp `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *ProcessVatReportsRequest) Reset() {
	*x = ProcessVatReportsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessVatReportsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessVatReportsRequest) ProtoMessage() {}

func (x *ProcessVatReportsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessVatReportsRequest.ProtoReflect.Descriptor instead.
func (*ProcessVatReportsRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{166}
}

func (x *ProcessVatReportsRequest) GetDate() *timestamp.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

type UpdateVatReportStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"-" bson:"_id" validate:"hexadecimal,len=24"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"-" bson:"_id" validate:"hexadecimal,len=24"`
	//@inject_tag: json:"status" bson:"status" validate:"required,alpha,oneof=paid canceled"
	//
	// The VAT report status. Available values: paid, canceled.
	Status string `protobuf:"bytes,2,opt,name=status,proto3" json:"status" bson:"status" validate:"required,alpha,oneof=paid canceled"`
}

func (x *UpdateVatReportStatusRequest) Reset() {
	*x = UpdateVatReportStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateVatReportStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVatReportStatusRequest) ProtoMessage() {}

func (x *UpdateVatReportStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVatReportStatusRequest.ProtoReflect.Descriptor instead.
func (*UpdateVatReportStatusRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{167}
}

func (x *UpdateVatReportStatusRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateVatReportStatusRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type GetMerchantOnboardingCompleteDataResponseItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"status"
	//
	// The filling out status. Available values: draft, life.
	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status"`
	//@inject_tag: json:"steps"
	//
	// The list of the steps completed.
	Steps *MerchantCompletedSteps `protobuf:"bytes,2,opt,name=steps,proto3" json:"steps"`
	//@inject_tag: json:"complete_steps_count"
	//
	// The number of steps completed.
	CompleteStepsCount int32 `protobuf:"varint,3,opt,name=complete_steps_count,json=completeStepsCount,proto3" json:"complete_steps_count"`
}

func (x *GetMerchantOnboardingCompleteDataResponseItem) Reset() {
	*x = GetMerchantOnboardingCompleteDataResponseItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMerchantOnboardingCompleteDataResponseItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMerchantOnboardingCompleteDataResponseItem) ProtoMessage() {}

func (x *GetMerchantOnboardingCompleteDataResponseItem) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMerchantOnboardingCompleteDataResponseItem.ProtoReflect.Descriptor instead.
func (*GetMerchantOnboardingCompleteDataResponseItem) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{168}
}

func (x *GetMerchantOnboardingCompleteDataResponseItem) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetMerchantOnboardingCompleteDataResponseItem) GetSteps() *MerchantCompletedSteps {
	if x != nil {
		return x.Steps
	}
	return nil
}

func (x *GetMerchantOnboardingCompleteDataResponseItem) GetCompleteStepsCount() int32 {
	if x != nil {
		return x.CompleteStepsCount
	}
	return 0
}

type GetMerchantOnboardingCompleteDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32                                          `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message *ResponseErrorMessage                          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Item    *GetMerchantOnboardingCompleteDataResponseItem `protobuf:"bytes,3,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *GetMerchantOnboardingCompleteDataResponse) Reset() {
	*x = GetMerchantOnboardingCompleteDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMerchantOnboardingCompleteDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMerchantOnboardingCompleteDataResponse) ProtoMessage() {}

func (x *GetMerchantOnboardingCompleteDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMerchantOnboardingCompleteDataResponse.ProtoReflect.Descriptor instead.
func (*GetMerchantOnboardingCompleteDataResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{169}
}

func (x *GetMerchantOnboardingCompleteDataResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetMerchantOnboardingCompleteDataResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *GetMerchantOnboardingCompleteDataResponse) GetItem() *GetMerchantOnboardingCompleteDataResponseItem {
	if x != nil {
		return x.Item
	}
	return nil
}

type GetMerchantTariffRatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: query:"region" validate:"required,tariff_region"
	HomeRegion string `protobuf:"bytes,1,opt,name=home_region,json=homeRegion,proto3" json:"home_region,omitempty" query:"region" validate:"required,tariff_region"`
	//@inject_tag: query:"payer_region" validate:"omitempty,tariff_region"
	PayerRegion string `protobuf:"bytes,2,opt,name=payer_region,json=payerRegion,proto3" json:"payer_region,omitempty" query:"payer_region" validate:"omitempty,tariff_region"`
	// @inject_tag: query:"min_amount" validate:"omitempty,numeric,gte=0"
	MinAmount float64 `protobuf:"fixed64,3,opt,name=min_amount,json=minAmount,proto3" json:"min_amount,omitempty" query:"min_amount" validate:"omitempty,numeric,gte=0"`
	// @inject_tag: query:"max_amount" validate:"omitempty,numeric,gt=0"
	MaxAmount float64 `protobuf:"fixed64,4,opt,name=max_amount,json=maxAmount,proto3" json:"max_amount,omitempty" query:"max_amount" validate:"omitempty,numeric,gt=0"`
	// @inject_tag: query:"merchant_operations_type" json:"merchant_operations_type" validate:"oneof=high-risk low-risk"
	MerchantOperationsType string `protobuf:"bytes,5,opt,name=merchant_operations_type,json=merchantOperationsType,proto3" json:"merchant_operations_type" query:"merchant_operations_type" validate:"oneof=high-risk low-risk"`
}

func (x *GetMerchantTariffRatesRequest) Reset() {
	*x = GetMerchantTariffRatesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMerchantTariffRatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMerchantTariffRatesRequest) ProtoMessage() {}

func (x *GetMerchantTariffRatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMerchantTariffRatesRequest.ProtoReflect.Descriptor instead.
func (*GetMerchantTariffRatesRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{170}
}

func (x *GetMerchantTariffRatesRequest) GetHomeRegion() string {
	if x != nil {
		return x.HomeRegion
	}
	return ""
}

func (x *GetMerchantTariffRatesRequest) GetPayerRegion() string {
	if x != nil {
		return x.PayerRegion
	}
	return ""
}

func (x *GetMerchantTariffRatesRequest) GetMinAmount() float64 {
	if x != nil {
		return x.MinAmount
	}
	return 0
}

func (x *GetMerchantTariffRatesRequest) GetMaxAmount() float64 {
	if x != nil {
		return x.MaxAmount
	}
	return 0
}

func (x *GetMerchantTariffRatesRequest) GetMerchantOperationsType() string {
	if x != nil {
		return x.MerchantOperationsType
	}
	return ""
}

type GetMerchantTariffRatesResponseItems struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The payment tariffs.
	Payment []*MerchantTariffRatesPayment `protobuf:"bytes,1,rep,name=payment,proto3" json:"payment,omitempty"`
	//@inject_tag: json:"-"
	Refund []*MerchantTariffRatesSettingsItem `protobuf:"bytes,2,rep,name=refund,proto3" json:"-"`
	//@inject_tag: json:"chargeback"
	//
	// The chargeback tariffs.
	Chargeback []*MerchantTariffRatesSettingsItem `protobuf:"bytes,3,rep,name=chargeback,proto3" json:"chargeback"`
	//@inject_tag: json:"payout"
	//
	// The payout tariffs.
	Payout map[string]*MerchantTariffRatesSettingsItem `protobuf:"bytes,4,rep,name=payout,proto3" json:"payout" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	//@inject_tag: json:"minimal_payout"
	//
	// The minimum payout limits.
	MinimalPayout map[string]float32 `protobuf:"bytes,5,rep,name=minimal_payout,json=minimalPayout,proto3" json:"minimal_payout" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	//@inject_tag: json:"mcc_code"
	//
	// The Merchant Category Code (MCC) is a four-digit number listed in ISO 18245.
	MccCode string `protobuf:"bytes,6,opt,name=mcc_code,json=mccCode,proto3" json:"mcc_code"`
}

func (x *GetMerchantTariffRatesResponseItems) Reset() {
	*x = GetMerchantTariffRatesResponseItems{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMerchantTariffRatesResponseItems) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMerchantTariffRatesResponseItems) ProtoMessage() {}

func (x *GetMerchantTariffRatesResponseItems) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMerchantTariffRatesResponseItems.ProtoReflect.Descriptor instead.
func (*GetMerchantTariffRatesResponseItems) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{171}
}

func (x *GetMerchantTariffRatesResponseItems) GetPayment() []*MerchantTariffRatesPayment {
	if x != nil {
		return x.Payment
	}
	return nil
}

func (x *GetMerchantTariffRatesResponseItems) GetRefund() []*MerchantTariffRatesSettingsItem {
	if x != nil {
		return x.Refund
	}
	return nil
}

func (x *GetMerchantTariffRatesResponseItems) GetChargeback() []*MerchantTariffRatesSettingsItem {
	if x != nil {
		return x.Chargeback
	}
	return nil
}

func (x *GetMerchantTariffRatesResponseItems) GetPayout() map[string]*MerchantTariffRatesSettingsItem {
	if x != nil {
		return x.Payout
	}
	return nil
}

func (x *GetMerchantTariffRatesResponseItems) GetMinimalPayout() map[string]float32 {
	if x != nil {
		return x.MinimalPayout
	}
	return nil
}

func (x *GetMerchantTariffRatesResponseItems) GetMccCode() string {
	if x != nil {
		return x.MccCode
	}
	return ""
}

type GetMerchantTariffRatesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32                                `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message *ResponseErrorMessage                `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Items   *GetMerchantTariffRatesResponseItems `protobuf:"bytes,3,opt,name=items,proto3" json:"items,omitempty"`
}

func (x *GetMerchantTariffRatesResponse) Reset() {
	*x = GetMerchantTariffRatesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMerchantTariffRatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMerchantTariffRatesResponse) ProtoMessage() {}

func (x *GetMerchantTariffRatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMerchantTariffRatesResponse.ProtoReflect.Descriptor instead.
func (*GetMerchantTariffRatesResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{172}
}

func (x *GetMerchantTariffRatesResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetMerchantTariffRatesResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *GetMerchantTariffRatesResponse) GetItems() *GetMerchantTariffRatesResponseItems {
	if x != nil {
		return x.Items
	}
	return nil
}

type SetMerchantTariffRatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"merchant_id" validate:"required,hexadecimal,len=24"
	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id" validate:"required,hexadecimal,len=24"`
	// @inject_tag: json:"home_region" validate:"required,tariff_region"
	HomeRegion string `protobuf:"bytes,2,opt,name=home_region,json=homeRegion,proto3" json:"home_region" validate:"required,tariff_region"`
	// @inject_tag: json:"merchant_operations_type" validate:"oneof=high-risk low-risk"
	MerchantOperationsType string `protobuf:"bytes,3,opt,name=merchant_operations_type,json=merchantOperationsType,proto3" json:"merchant_operations_type" validate:"oneof=high-risk low-risk"`
}

func (x *SetMerchantTariffRatesRequest) Reset() {
	*x = SetMerchantTariffRatesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMerchantTariffRatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMerchantTariffRatesRequest) ProtoMessage() {}

func (x *SetMerchantTariffRatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMerchantTariffRatesRequest.ProtoReflect.Descriptor instead.
func (*SetMerchantTariffRatesRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{173}
}

func (x *SetMerchantTariffRatesRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *SetMerchantTariffRatesRequest) GetHomeRegion() string {
	if x != nil {
		return x.HomeRegion
	}
	return ""
}

func (x *SetMerchantTariffRatesRequest) GetMerchantOperationsType() string {
	if x != nil {
		return x.MerchantOperationsType
	}
	return ""
}

type ListOrdersPublicResponseItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"count"
	//
	// The total number of found orders.
	Count int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count"`
	// @inject_tag: json:"items"
	//
	// The list of the orders.
	Items []*OrderViewPublic `protobuf:"bytes,2,rep,name=items,proto3" json:"items"`
}

func (x *ListOrdersPublicResponseItem) Reset() {
	*x = ListOrdersPublicResponseItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrdersPublicResponseItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrdersPublicResponseItem) ProtoMessage() {}

func (x *ListOrdersPublicResponseItem) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrdersPublicResponseItem.ProtoReflect.Descriptor instead.
func (*ListOrdersPublicResponseItem) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{174}
}

func (x *ListOrdersPublicResponseItem) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ListOrdersPublicResponseItem) GetItems() []*OrderViewPublic {
	if x != nil {
		return x.Items
	}
	return nil
}

type ListOrdersPrivateResponseItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"count"
	Count int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count"`
	// @inject_tag: json:"items"
	Items []*OrderViewPrivate `protobuf:"bytes,2,rep,name=items,proto3" json:"items"`
}

func (x *ListOrdersPrivateResponseItem) Reset() {
	*x = ListOrdersPrivateResponseItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrdersPrivateResponseItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrdersPrivateResponseItem) ProtoMessage() {}

func (x *ListOrdersPrivateResponseItem) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrdersPrivateResponseItem.ProtoReflect.Descriptor instead.
func (*ListOrdersPrivateResponseItem) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{175}
}

func (x *ListOrdersPrivateResponseItem) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ListOrdersPrivateResponseItem) GetItems() []*OrderViewPrivate {
	if x != nil {
		return x.Items
	}
	return nil
}

type ListOrdersPublicResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32                         `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message *ResponseErrorMessage         `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Item    *ListOrdersPublicResponseItem `protobuf:"bytes,3,opt,name=Item,proto3" json:"Item,omitempty"`
}

func (x *ListOrdersPublicResponse) Reset() {
	*x = ListOrdersPublicResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrdersPublicResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrdersPublicResponse) ProtoMessage() {}

func (x *ListOrdersPublicResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrdersPublicResponse.ProtoReflect.Descriptor instead.
func (*ListOrdersPublicResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{176}
}

func (x *ListOrdersPublicResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ListOrdersPublicResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *ListOrdersPublicResponse) GetItem() *ListOrdersPublicResponseItem {
	if x != nil {
		return x.Item
	}
	return nil
}

type ListOrdersPrivateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32                          `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message *ResponseErrorMessage          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Item    *ListOrdersPrivateResponseItem `protobuf:"bytes,3,opt,name=Item,proto3" json:"Item,omitempty"`
}

func (x *ListOrdersPrivateResponse) Reset() {
	*x = ListOrdersPrivateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrdersPrivateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrdersPrivateResponse) ProtoMessage() {}

func (x *ListOrdersPrivateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrdersPrivateResponse.ProtoReflect.Descriptor instead.
func (*ListOrdersPrivateResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{177}
}

func (x *ListOrdersPrivateResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ListOrdersPrivateResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *ListOrdersPrivateResponse) GetItem() *ListOrdersPrivateResponseItem {
	if x != nil {
		return x.Item
	}
	return nil
}

type ListOrdersResponseItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"count"
	Count int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count"`
	// @inject_tag: json:"items"
	Items []*Order `protobuf:"bytes,2,rep,name=items,proto3" json:"items"`
}

func (x *ListOrdersResponseItem) Reset() {
	*x = ListOrdersResponseItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrdersResponseItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrdersResponseItem) ProtoMessage() {}

func (x *ListOrdersResponseItem) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrdersResponseItem.ProtoReflect.Descriptor instead.
func (*ListOrdersResponseItem) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{178}
}

func (x *ListOrdersResponseItem) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ListOrdersResponseItem) GetItems() []*Order {
	if x != nil {
		return x.Items
	}
	return nil
}

type ListOrdersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32                   `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message *ResponseErrorMessage   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Item    *ListOrdersResponseItem `protobuf:"bytes,3,opt,name=Item,proto3" json:"Item,omitempty"`
}

func (x *ListOrdersResponse) Reset() {
	*x = ListOrdersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrdersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrdersResponse) ProtoMessage() {}

func (x *ListOrdersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrdersResponse.ProtoReflect.Descriptor instead.
func (*ListOrdersResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{179}
}

func (x *ListOrdersResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ListOrdersResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *ListOrdersResponse) GetItem() *ListOrdersResponseItem {
	if x != nil {
		return x.Item
	}
	return nil
}

type GetOrderPublicResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32                 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Item    *OrderViewPublic      `protobuf:"bytes,3,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *GetOrderPublicResponse) Reset() {
	*x = GetOrderPublicResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrderPublicResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderPublicResponse) ProtoMessage() {}

func (x *GetOrderPublicResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderPublicResponse.ProtoReflect.Descriptor instead.
func (*GetOrderPublicResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{180}
}

func (x *GetOrderPublicResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetOrderPublicResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *GetOrderPublicResponse) GetItem() *OrderViewPublic {
	if x != nil {
		return x.Item
	}
	return nil
}

type GetOrderPrivateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32                 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Item    *OrderViewPrivate     `protobuf:"bytes,3,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *GetOrderPrivateResponse) Reset() {
	*x = GetOrderPrivateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrderPrivateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderPrivateResponse) ProtoMessage() {}

func (x *GetOrderPrivateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderPrivateResponse.ProtoReflect.Descriptor instead.
func (*GetOrderPrivateResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{181}
}

func (x *GetOrderPrivateResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetOrderPrivateResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *GetOrderPrivateResponse) GetItem() *OrderViewPrivate {
	if x != nil {
		return x.Item
	}
	return nil
}

type GetOriginalOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32                 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Item    *Order                `protobuf:"bytes,3,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *GetOriginalOrderResponse) Reset() {
	*x = GetOriginalOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOriginalOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOriginalOrderResponse) ProtoMessage() {}

func (x *GetOriginalOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOriginalOrderResponse.ProtoReflect.Descriptor instead.
func (*GetOriginalOrderResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{182}
}

func (x *GetOriginalOrderResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetOriginalOrderResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *GetOriginalOrderResponse) GetItem() *Order {
	if x != nil {
		return x.Item
	}
	return nil
}

type GetDashboardMainRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"required,hexadecimal,len=24" param:"merchant_id"
	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty" validate:"required,hexadecimal,len=24" param:"merchant_id"`
	//@inject_tag: query:"period" validate:"required,oneof=current_month previous_month current_quarter previous_quarter current_year previous_year"
	Period string `protobuf:"bytes,2,opt,name=period,proto3" json:"period,omitempty" query:"period" validate:"required,oneof=current_month previous_month current_quarter previous_quarter current_year previous_year"`
}

func (x *GetDashboardMainRequest) Reset() {
	*x = GetDashboardMainRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDashboardMainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDashboardMainRequest) ProtoMessage() {}

func (x *GetDashboardMainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDashboardMainRequest.ProtoReflect.Descriptor instead.
func (*GetDashboardMainRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{183}
}

func (x *GetDashboardMainRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *GetDashboardMainRequest) GetPeriod() string {
	if x != nil {
		return x.Period
	}
	return ""
}

type GetDashboardMainResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32                 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Item    *DashboardMainReport  `protobuf:"bytes,3,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *GetDashboardMainResponse) Reset() {
	*x = GetDashboardMainResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDashboardMainResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDashboardMainResponse) ProtoMessage() {}

func (x *GetDashboardMainResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDashboardMainResponse.ProtoReflect.Descriptor instead.
func (*GetDashboardMainResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{184}
}

func (x *GetDashboardMainResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetDashboardMainResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *GetDashboardMainResponse) GetItem() *DashboardMainReport {
	if x != nil {
		return x.Item
	}
	return nil
}

type GetDashboardBaseReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"required,hexadecimal,len=24"
	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty" validate:"required,hexadecimal,len=24"`
	//@inject_tag: query:"period" validate:"required,oneof=current_day previous_day current_week previous_week current_month previous_month current_quarter previous_quarter current_year previous_year"
	Period string `protobuf:"bytes,2,opt,name=period,proto3" json:"period,omitempty" query:"period" validate:"required,oneof=current_day previous_day current_week previous_week current_month previous_month current_quarter previous_quarter current_year previous_year"`
}

func (x *GetDashboardBaseReportRequest) Reset() {
	*x = GetDashboardBaseReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDashboardBaseReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDashboardBaseReportRequest) ProtoMessage() {}

func (x *GetDashboardBaseReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDashboardBaseReportRequest.ProtoReflect.Descriptor instead.
func (*GetDashboardBaseReportRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{185}
}

func (x *GetDashboardBaseReportRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *GetDashboardBaseReportRequest) GetPeriod() string {
	if x != nil {
		return x.Period
	}
	return ""
}

type GetDashboardBaseReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32                 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Item    *DashboardBaseReports `protobuf:"bytes,3,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *GetDashboardBaseReportResponse) Reset() {
	*x = GetDashboardBaseReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDashboardBaseReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDashboardBaseReportResponse) ProtoMessage() {}

func (x *GetDashboardBaseReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDashboardBaseReportResponse.ProtoReflect.Descriptor instead.
func (*GetDashboardBaseReportResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{186}
}

func (x *GetDashboardBaseReportResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetDashboardBaseReportResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *GetDashboardBaseReportResponse) GetItem() *DashboardBaseReports {
	if x != nil {
		return x.Item
	}
	return nil
}

type GetDashboardRevenueDynamicsReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32                          `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message *ResponseErrorMessage          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Item    *DashboardRevenueDynamicReport `protobuf:"bytes,3,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *GetDashboardRevenueDynamicsReportResponse) Reset() {
	*x = GetDashboardRevenueDynamicsReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDashboardRevenueDynamicsReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDashboardRevenueDynamicsReportResponse) ProtoMessage() {}

func (x *GetDashboardRevenueDynamicsReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDashboardRevenueDynamicsReportResponse.ProtoReflect.Descriptor instead.
func (*GetDashboardRevenueDynamicsReportResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{187}
}

func (x *GetDashboardRevenueDynamicsReportResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetDashboardRevenueDynamicsReportResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *GetDashboardRevenueDynamicsReportResponse) GetItem() *DashboardRevenueDynamicReport {
	if x != nil {
		return x.Item
	}
	return nil
}

type DashboardAmountItemWithChart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"amount_current"
	//
	// The total amount calculated for the current period.
	AmountCurrent float64 `protobuf:"fixed64,1,opt,name=amount_current,json=amountCurrent,proto3" json:"amount_current"`
	//@inject_tag: json:"amount_previous"
	//
	// The total amount calculated for the previous period.
	AmountPrevious float64 `protobuf:"fixed64,2,opt,name=amount_previous,json=amountPrevious,proto3" json:"amount_previous"`
	//@inject_tag: json:"currency"
	//
	// The current report amount currency. Three-letter currency code ISO 4217, in uppercase.
	Currency string `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency"`
	//@inject_tag: json:"chart"
	//
	// The list of points for drawing the chart.
	Chart []*DashboardChartItemFloat `protobuf:"bytes,4,rep,name=chart,proto3" json:"chart"`
}

func (x *DashboardAmountItemWithChart) Reset() {
	*x = DashboardAmountItemWithChart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardAmountItemWithChart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardAmountItemWithChart) ProtoMessage() {}

func (x *DashboardAmountItemWithChart) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardAmountItemWithChart.ProtoReflect.Descriptor instead.
func (*DashboardAmountItemWithChart) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{188}
}

func (x *DashboardAmountItemWithChart) GetAmountCurrent() float64 {
	if x != nil {
		return x.AmountCurrent
	}
	return 0
}

func (x *DashboardAmountItemWithChart) GetAmountPrevious() float64 {
	if x != nil {
		return x.AmountPrevious
	}
	return 0
}

func (x *DashboardAmountItemWithChart) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *DashboardAmountItemWithChart) GetChart() []*DashboardChartItemFloat {
	if x != nil {
		return x.Chart
	}
	return nil
}

type DashboardChartItemFloat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"label" bson:"label"
	//
	// The point label. For example, if the period of the report equals to month then the point label will be equal to one day.
	Label int64 `protobuf:"varint,1,opt,name=label,proto3" json:"label" bson:"label"`
	//@inject_tag: json:"value" bson:"value"
	//
	// The point value.
	Value float64 `protobuf:"fixed64,2,opt,name=value,proto3" json:"value" bson:"value"`
}

func (x *DashboardChartItemFloat) Reset() {
	*x = DashboardChartItemFloat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardChartItemFloat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardChartItemFloat) ProtoMessage() {}

func (x *DashboardChartItemFloat) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardChartItemFloat.ProtoReflect.Descriptor instead.
func (*DashboardChartItemFloat) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{189}
}

func (x *DashboardChartItemFloat) GetLabel() int64 {
	if x != nil {
		return x.Label
	}
	return 0
}

func (x *DashboardChartItemFloat) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type DashboardMainReportTotalTransactions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"count_current" bson:"count"
	//
	// The total amount calculated for the current period.
	CountCurrent int64 `protobuf:"varint,1,opt,name=count_current,json=countCurrent,proto3" json:"count_current" bson:"count"`
	//@inject_tag: json:"count_previous"
	//
	// The total amount calculated for the previous period.
	CountPrevious int64 `protobuf:"varint,2,opt,name=count_previous,json=countPrevious,proto3" json:"count_previous"`
	//@inject_tag: json:"chart"
	//
	// The list of data for drawing the chart.
	Chart []*DashboardChartItemFloat `protobuf:"bytes,3,rep,name=chart,proto3" json:"chart"`
}

func (x *DashboardMainReportTotalTransactions) Reset() {
	*x = DashboardMainReportTotalTransactions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardMainReportTotalTransactions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardMainReportTotalTransactions) ProtoMessage() {}

func (x *DashboardMainReportTotalTransactions) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardMainReportTotalTransactions.ProtoReflect.Descriptor instead.
func (*DashboardMainReportTotalTransactions) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{190}
}

func (x *DashboardMainReportTotalTransactions) GetCountCurrent() int64 {
	if x != nil {
		return x.CountCurrent
	}
	return 0
}

func (x *DashboardMainReportTotalTransactions) GetCountPrevious() int64 {
	if x != nil {
		return x.CountPrevious
	}
	return 0
}

func (x *DashboardMainReportTotalTransactions) GetChart() []*DashboardChartItemFloat {
	if x != nil {
		return x.Chart
	}
	return nil
}

type DashboardMainReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"gross_revenue" bson:"gross_revenue"
	//
	// The gross revenue data.
	GrossRevenue *DashboardAmountItemWithChart `protobuf:"bytes,1,opt,name=gross_revenue,json=grossRevenue,proto3" json:"gross_revenue" bson:"gross_revenue"`
	//@inject_tag: json:"vat" bson:"vat"
	//
	// VAT data.
	Vat *DashboardAmountItemWithChart `protobuf:"bytes,2,opt,name=vat,proto3" json:"vat" bson:"vat"`
	//@inject_tag: json:"total_transactions" bson:"total_transactions"
	//
	// The transactions data.
	TotalTransactions *DashboardMainReportTotalTransactions `protobuf:"bytes,3,opt,name=total_transactions,json=totalTransactions,proto3" json:"total_transactions" bson:"total_transactions"`
	//@inject_tag: json:"arpu" bson:"arpu"
	//
	// ARPU data.
	Arpu *DashboardAmountItemWithChart `protobuf:"bytes,4,opt,name=arpu,proto3" json:"arpu" bson:"arpu"`
}

func (x *DashboardMainReport) Reset() {
	*x = DashboardMainReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardMainReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardMainReport) ProtoMessage() {}

func (x *DashboardMainReport) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardMainReport.ProtoReflect.Descriptor instead.
func (*DashboardMainReport) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{191}
}

func (x *DashboardMainReport) GetGrossRevenue() *DashboardAmountItemWithChart {
	if x != nil {
		return x.GrossRevenue
	}
	return nil
}

func (x *DashboardMainReport) GetVat() *DashboardAmountItemWithChart {
	if x != nil {
		return x.Vat
	}
	return nil
}

func (x *DashboardMainReport) GetTotalTransactions() *DashboardMainReportTotalTransactions {
	if x != nil {
		return x.TotalTransactions
	}
	return nil
}

func (x *DashboardMainReport) GetArpu() *DashboardAmountItemWithChart {
	if x != nil {
		return x.Arpu
	}
	return nil
}

type DashboardRevenueDynamicReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"currency"
	//
	// The current report amount currency. Three-letter currency code ISO 4217, in uppercase.
	Currency string `protobuf:"bytes,1,opt,name=currency,proto3" json:"currency"`
	//@inject_tag: json:"items"
	//
	// The list of points for drawing the chart.
	Items []*DashboardRevenueDynamicReportItem `protobuf:"bytes,2,rep,name=items,proto3" json:"items"`
}

func (x *DashboardRevenueDynamicReport) Reset() {
	*x = DashboardRevenueDynamicReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardRevenueDynamicReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardRevenueDynamicReport) ProtoMessage() {}

func (x *DashboardRevenueDynamicReport) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardRevenueDynamicReport.ProtoReflect.Descriptor instead.
func (*DashboardRevenueDynamicReport) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{192}
}

func (x *DashboardRevenueDynamicReport) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *DashboardRevenueDynamicReport) GetItems() []*DashboardRevenueDynamicReportItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type DashboardRevenueDynamicReportItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"label"
	//
	// The point label. For example, if the period of the report equals to month then the point label will be equal to one day.
	Label int64 `protobuf:"varint,1,opt,name=label,proto3" json:"label"`
	//@inject_tag: json:"amount"
	//
	// The revenue amount.
	Amount float64 `protobuf:"fixed64,2,opt,name=amount,proto3" json:"amount"`
	//@inject_tag: json:"-"
	Currency string `protobuf:"bytes,3,opt,name=currency,proto3" json:"-"`
	//@inject_tag: json:"count"
	//
	// The total number of transactions.
	Count int64 `protobuf:"varint,4,opt,name=count,proto3" json:"count"`
}

func (x *DashboardRevenueDynamicReportItem) Reset() {
	*x = DashboardRevenueDynamicReportItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[193]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardRevenueDynamicReportItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardRevenueDynamicReportItem) ProtoMessage() {}

func (x *DashboardRevenueDynamicReportItem) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[193]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardRevenueDynamicReportItem.ProtoReflect.Descriptor instead.
func (*DashboardRevenueDynamicReportItem) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{193}
}

func (x *DashboardRevenueDynamicReportItem) GetLabel() int64 {
	if x != nil {
		return x.Label
	}
	return 0
}

func (x *DashboardRevenueDynamicReportItem) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *DashboardRevenueDynamicReportItem) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *DashboardRevenueDynamicReportItem) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type DashboardRevenueByCountryReportTop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"country"
	//
	// The country's name.
	Country string `protobuf:"bytes,1,opt,name=country,proto3" json:"country"`
	//@inject_tag: json:"amount"
	//
	// The revenue amount for this country.
	Amount float64 `protobuf:"fixed64,2,opt,name=amount,proto3" json:"amount"`
}

func (x *DashboardRevenueByCountryReportTop) Reset() {
	*x = DashboardRevenueByCountryReportTop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardRevenueByCountryReportTop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardRevenueByCountryReportTop) ProtoMessage() {}

func (x *DashboardRevenueByCountryReportTop) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardRevenueByCountryReportTop.ProtoReflect.Descriptor instead.
func (*DashboardRevenueByCountryReportTop) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{194}
}

func (x *DashboardRevenueByCountryReportTop) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *DashboardRevenueByCountryReportTop) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type DashboardRevenueByCountryReportChartItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"label"
	//
	// The point label. For example, if the period of the report equals to month then the point label will be equal to one day.
	Label int64 `protobuf:"varint,1,opt,name=label,proto3" json:"label"`
	//@inject_tag: json:"amount"
	//
	// The amount by country.
	Amount float64 `protobuf:"fixed64,2,opt,name=amount,proto3" json:"amount"`
}

func (x *DashboardRevenueByCountryReportChartItem) Reset() {
	*x = DashboardRevenueByCountryReportChartItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardRevenueByCountryReportChartItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardRevenueByCountryReportChartItem) ProtoMessage() {}

func (x *DashboardRevenueByCountryReportChartItem) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardRevenueByCountryReportChartItem.ProtoReflect.Descriptor instead.
func (*DashboardRevenueByCountryReportChartItem) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{195}
}

func (x *DashboardRevenueByCountryReportChartItem) GetLabel() int64 {
	if x != nil {
		return x.Label
	}
	return 0
}

func (x *DashboardRevenueByCountryReportChartItem) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type DashboardRevenueByCountryReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"currency"
	//
	// The current report amount currency. Three-letter currency code ISO 4217, in uppercase.
	Currency string `protobuf:"bytes,1,opt,name=currency,proto3" json:"currency"`
	//@inject_tag: json:"top" bson:"top"
	//
	// The list of data about top 5 revenue countries for the specified period.
	Top []*DashboardRevenueByCountryReportTop `protobuf:"bytes,2,rep,name=top,proto3" json:"top" bson:"top"`
	//@inject_tag: json:"total_current" bson:"total"
	//
	// The total revenue amount for the specified period.
	TotalCurrent float64 `protobuf:"fixed64,3,opt,name=total_current,json=totalCurrent,proto3" json:"total_current" bson:"total"`
	//@inject_tag: json:"total_previous"
	//
	// The total revenue amount for the previous period.
	TotalPrevious float64 `protobuf:"fixed64,4,opt,name=total_previous,json=totalPrevious,proto3" json:"total_previous"`
	//@inject_tag: json:"chart" bson:"chart"
	//
	// The list of points for drawing the chart.
	Chart []*DashboardRevenueByCountryReportChartItem `protobuf:"bytes,5,rep,name=chart,proto3" json:"chart" bson:"chart"`
}

func (x *DashboardRevenueByCountryReport) Reset() {
	*x = DashboardRevenueByCountryReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardRevenueByCountryReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardRevenueByCountryReport) ProtoMessage() {}

func (x *DashboardRevenueByCountryReport) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardRevenueByCountryReport.ProtoReflect.Descriptor instead.
func (*DashboardRevenueByCountryReport) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{196}
}

func (x *DashboardRevenueByCountryReport) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *DashboardRevenueByCountryReport) GetTop() []*DashboardRevenueByCountryReportTop {
	if x != nil {
		return x.Top
	}
	return nil
}

func (x *DashboardRevenueByCountryReport) GetTotalCurrent() float64 {
	if x != nil {
		return x.TotalCurrent
	}
	return 0
}

func (x *DashboardRevenueByCountryReport) GetTotalPrevious() float64 {
	if x != nil {
		return x.TotalPrevious
	}
	return 0
}

func (x *DashboardRevenueByCountryReport) GetChart() []*DashboardRevenueByCountryReportChartItem {
	if x != nil {
		return x.Chart
	}
	return nil
}

type DashboardSalesTodayReportTop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"name" bson:"name"
	//
	// The name of the sold item (product or project).
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name" bson:"name"`
	//@inject_tag: json:"count" bson:"count"
	//
	// The total number of items (products or projects) which were sold for the specified period.
	Count int64 `protobuf:"varint,2,opt,name=count,proto3" json:"count" bson:"count"`
}

func (x *DashboardSalesTodayReportTop) Reset() {
	*x = DashboardSalesTodayReportTop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardSalesTodayReportTop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardSalesTodayReportTop) ProtoMessage() {}

func (x *DashboardSalesTodayReportTop) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardSalesTodayReportTop.ProtoReflect.Descriptor instead.
func (*DashboardSalesTodayReportTop) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{197}
}

func (x *DashboardSalesTodayReportTop) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DashboardSalesTodayReportTop) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type DashboardChartItemInt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"label" bson:"label"
	//
	// The point label. For example, if the period of the report equals to month then the point label will be equal to one day.
	Label int64 `protobuf:"varint,1,opt,name=label,proto3" json:"label" bson:"label"`
	//@inject_tag: json:"value" bson:"value"
	//
	// The point value.
	Value int64 `protobuf:"varint,2,opt,name=value,proto3" json:"value" bson:"value"`
}

func (x *DashboardChartItemInt) Reset() {
	*x = DashboardChartItemInt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[198]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardChartItemInt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardChartItemInt) ProtoMessage() {}

func (x *DashboardChartItemInt) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[198]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardChartItemInt.ProtoReflect.Descriptor instead.
func (*DashboardChartItemInt) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{198}
}

func (x *DashboardChartItemInt) GetLabel() int64 {
	if x != nil {
		return x.Label
	}
	return 0
}

func (x *DashboardChartItemInt) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type DashboardSalesTodayReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"top" bson:"top"
	//
	// The list of data about top 5 merchant's products (projects) which were sold for the specified period.
	Top []*DashboardSalesTodayReportTop `protobuf:"bytes,1,rep,name=top,proto3" json:"top" bson:"top"`
	//@inject_tag: json:"total_current" bson:"total"
	//
	// The total number of items (products or projects) which were sold for the specified period.
	TotalCurrent int64 `protobuf:"varint,2,opt,name=total_current,json=totalCurrent,proto3" json:"total_current" bson:"total"`
	//@inject_tag: json:"total_previous"
	//
	// The total number of items (products or projects) which were sold for the previous period.
	TotalPrevious int64 `protobuf:"varint,3,opt,name=total_previous,json=totalPrevious,proto3" json:"total_previous"`
	//@inject_tag: json:"chart" bson:"chart"
	//
	// The list of points for drawing the chart.
	Chart []*DashboardChartItemInt `protobuf:"bytes,4,rep,name=chart,proto3" json:"chart" bson:"chart"`
}

func (x *DashboardSalesTodayReport) Reset() {
	*x = DashboardSalesTodayReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[199]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardSalesTodayReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardSalesTodayReport) ProtoMessage() {}

func (x *DashboardSalesTodayReport) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[199]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardSalesTodayReport.ProtoReflect.Descriptor instead.
func (*DashboardSalesTodayReport) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{199}
}

func (x *DashboardSalesTodayReport) GetTop() []*DashboardSalesTodayReportTop {
	if x != nil {
		return x.Top
	}
	return nil
}

func (x *DashboardSalesTodayReport) GetTotalCurrent() int64 {
	if x != nil {
		return x.TotalCurrent
	}
	return 0
}

func (x *DashboardSalesTodayReport) GetTotalPrevious() int64 {
	if x != nil {
		return x.TotalPrevious
	}
	return 0
}

func (x *DashboardSalesTodayReport) GetChart() []*DashboardChartItemInt {
	if x != nil {
		return x.Chart
	}
	return nil
}

type DashboardSourcesReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"top" bson:"top"
	//
	// The list of data about top 5 source URLs for the specified period.
	Top []*DashboardSalesTodayReportTop `protobuf:"bytes,1,rep,name=top,proto3" json:"top" bson:"top"`
	//@inject_tag: json:"total_current" bson:"total"
	//
	// The total number of transactions for the specified period.
	TotalCurrent int64 `protobuf:"varint,2,opt,name=total_current,json=totalCurrent,proto3" json:"total_current" bson:"total"`
	//@inject_tag: json:"total_previous"
	//
	// The total number of transactions for the previous period.
	TotalPrevious int64 `protobuf:"varint,3,opt,name=total_previous,json=totalPrevious,proto3" json:"total_previous"`
	//@inject_tag: json:"chart" bson:"chart"
	//
	// The list of points for drawing the chart.
	Chart []*DashboardChartItemInt `protobuf:"bytes,4,rep,name=chart,proto3" json:"chart" bson:"chart"`
}

func (x *DashboardSourcesReport) Reset() {
	*x = DashboardSourcesReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[200]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardSourcesReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardSourcesReport) ProtoMessage() {}

func (x *DashboardSourcesReport) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[200]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardSourcesReport.ProtoReflect.Descriptor instead.
func (*DashboardSourcesReport) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{200}
}

func (x *DashboardSourcesReport) GetTop() []*DashboardSalesTodayReportTop {
	if x != nil {
		return x.Top
	}
	return nil
}

func (x *DashboardSourcesReport) GetTotalCurrent() int64 {
	if x != nil {
		return x.TotalCurrent
	}
	return 0
}

func (x *DashboardSourcesReport) GetTotalPrevious() int64 {
	if x != nil {
		return x.TotalPrevious
	}
	return 0
}

func (x *DashboardSourcesReport) GetChart() []*DashboardChartItemInt {
	if x != nil {
		return x.Chart
	}
	return nil
}

type DashboardBaseReports struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"revenue_by_country"
	//
	// The data for the Dashboard block Revenue by country.
	RevenueByCountry *DashboardRevenueByCountryReport `protobuf:"bytes,1,opt,name=revenue_by_country,json=revenueByCountry,proto3" json:"revenue_by_country"`
	//@inject_tag: json:"sales_today"
	//
	// The data for the Dashboard block Sales today.
	SalesToday *DashboardSalesTodayReport `protobuf:"bytes,2,opt,name=sales_today,json=salesToday,proto3" json:"sales_today"`
	//@inject_tag: json:"sources"
	//
	// The data for the Dashboard block Sources.
	Sources *DashboardSourcesReport `protobuf:"bytes,4,opt,name=sources,proto3" json:"sources"`
}

func (x *DashboardBaseReports) Reset() {
	*x = DashboardBaseReports{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[201]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardBaseReports) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardBaseReports) ProtoMessage() {}

func (x *DashboardBaseReports) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[201]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardBaseReports.ProtoReflect.Descriptor instead.
func (*DashboardBaseReports) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{201}
}

func (x *DashboardBaseReports) GetRevenueByCountry() *DashboardRevenueByCountryReport {
	if x != nil {
		return x.RevenueByCountry
	}
	return nil
}

func (x *DashboardBaseReports) GetSalesToday() *DashboardSalesTodayReport {
	if x != nil {
		return x.SalesToday
	}
	return nil
}

func (x *DashboardBaseReports) GetSources() *DashboardSourcesReport {
	if x != nil {
		return x.Sources
	}
	return nil
}

type CreatePayoutDocumentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"description" validate:"max=255"
	//
	// The description of the payout document.
	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description" validate:"max=255"`
	//@inject_tag: json:"merchant_id" validate:"required,hexadecimal,len=24" required:"true"
	//
	// The unique identifier for the merchant.
	MerchantId string `protobuf:"bytes,2,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id" validate:"required,hexadecimal,len=24" required:"true"`
	//@inject_tag: json:"ip" validate:"required" required:"true"
	//
	// The IP address of the user which created the payout document.
	Ip string `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip" validate:"required" required:"true"`
	//@inject_tag: json:"-" validate:"required"
	Initiator string `protobuf:"bytes,4,opt,name=initiator,proto3" json:"-" validate:"required"`
	//@inject_tag: json:"-"
	IsAutoGeneration bool `protobuf:"varint,5,opt,name=is_auto_generation,json=isAutoGeneration,proto3" json:"-"`
}

func (x *CreatePayoutDocumentRequest) Reset() {
	*x = CreatePayoutDocumentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[202]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePayoutDocumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePayoutDocumentRequest) ProtoMessage() {}

func (x *CreatePayoutDocumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[202]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePayoutDocumentRequest.ProtoReflect.Descriptor instead.
func (*CreatePayoutDocumentRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{202}
}

func (x *CreatePayoutDocumentRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreatePayoutDocumentRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *CreatePayoutDocumentRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *CreatePayoutDocumentRequest) GetInitiator() string {
	if x != nil {
		return x.Initiator
	}
	return ""
}

func (x *CreatePayoutDocumentRequest) GetIsAutoGeneration() bool {
	if x != nil {
		return x.IsAutoGeneration
	}
	return false
}

type PayoutDocumentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"status"
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status"`
	//@inject_tag: json:"message"
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message"`
	//@inject_tag: json:"item"
	Item *PayoutDocument `protobuf:"bytes,3,opt,name=item,proto3" json:"item"`
}

func (x *PayoutDocumentResponse) Reset() {
	*x = PayoutDocumentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[203]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayoutDocumentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayoutDocumentResponse) ProtoMessage() {}

func (x *PayoutDocumentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[203]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayoutDocumentResponse.ProtoReflect.Descriptor instead.
func (*PayoutDocumentResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{203}
}

func (x *PayoutDocumentResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *PayoutDocumentResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *PayoutDocumentResponse) GetItem() *PayoutDocument {
	if x != nil {
		return x.Item
	}
	return nil
}

type CreatePayoutDocumentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"status"
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status"`
	//@inject_tag: json:"message"
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message"`
	//@inject_tag: json:"items"
	Items []*PayoutDocument `protobuf:"bytes,3,rep,name=items,proto3" json:"items"`
}

func (x *CreatePayoutDocumentResponse) Reset() {
	*x = CreatePayoutDocumentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[204]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePayoutDocumentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePayoutDocumentResponse) ProtoMessage() {}

func (x *CreatePayoutDocumentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[204]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePayoutDocumentResponse.ProtoReflect.Descriptor instead.
func (*CreatePayoutDocumentResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{204}
}

func (x *CreatePayoutDocumentResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *CreatePayoutDocumentResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *CreatePayoutDocumentResponse) GetItems() []*PayoutDocument {
	if x != nil {
		return x.Items
	}
	return nil
}

type UpdatePayoutDocumentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"payout_document_id" validate:"required,hexadecimal,len=24" param:"payout_document_id"
	//
	// The unique identifier for the payout document.
	PayoutDocumentId string `protobuf:"bytes,1,opt,name=payout_document_id,json=payoutDocumentId,proto3" json:"payout_document_id" validate:"required,hexadecimal,len=24" param:"payout_document_id"`
	//@inject_tag: json:"transaction" validate:"omitempty,max=255"
	//
	// The unique identifier for the payout transaction.
	Transaction string `protobuf:"bytes,2,opt,name=transaction,proto3" json:"transaction" validate:"omitempty,max=255"`
	//@inject_tag: json:"status" validate:"required,oneof=skip pending in_progress paid canceled failed"
	//
	// The document status. Available values: skip, pending, in_progress, paid, canceled, failed.
	Status string `protobuf:"bytes,3,opt,name=status,proto3" json:"status" validate:"required,oneof=skip pending in_progress paid canceled failed"`
	//@inject_tag: json:"failure_code" validate:"omitempty,oneof=account_closed account_frozen account_restricted destination_bank_invalid could_not_process declined insufficient_funds invalid_account_number incorrect_account_holder_name invalid_currency"
	//
	// The payout's failure code. Available values: account_closed, account_frozen, account_restricted, destination_bank_invalid, could_not_process, declined, insufficient_funds, invalid_account_number, incorrect_account_holder_name, invalid_currency.
	FailureCode string `protobuf:"bytes,4,opt,name=failure_code,json=failureCode,proto3" json:"failure_code" validate:"omitempty,oneof=account_closed account_frozen account_restricted destination_bank_invalid could_not_process declined insufficient_funds invalid_account_number incorrect_account_holder_name invalid_currency"`
	//@inject_tag: json:"failure_message" validate:"omitempty,max=255"
	//
	// The payout's failure message.
	FailureMessage string `protobuf:"bytes,5,opt,name=failure_message,json=failureMessage,proto3" json:"failure_message" validate:"omitempty,max=255"`
	//@inject_tag: json:"failure_transaction" validate:"omitempty,max=255"
	//
	// The unique identifier for the payout failure transaction.
	FailureTransaction string `protobuf:"bytes,6,opt,name=failure_transaction,json=failureTransaction,proto3" json:"failure_transaction" validate:"omitempty,max=255"`
	//@inject_tag: json:"ip"
	//
	// The IP address of the user which updated the payout document.
	Ip string `protobuf:"bytes,7,opt,name=ip,proto3" json:"ip"`
}

func (x *UpdatePayoutDocumentRequest) Reset() {
	*x = UpdatePayoutDocumentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[205]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePayoutDocumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePayoutDocumentRequest) ProtoMessage() {}

func (x *UpdatePayoutDocumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[205]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePayoutDocumentRequest.ProtoReflect.Descriptor instead.
func (*UpdatePayoutDocumentRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{205}
}

func (x *UpdatePayoutDocumentRequest) GetPayoutDocumentId() string {
	if x != nil {
		return x.PayoutDocumentId
	}
	return ""
}

func (x *UpdatePayoutDocumentRequest) GetTransaction() string {
	if x != nil {
		return x.Transaction
	}
	return ""
}

func (x *UpdatePayoutDocumentRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *UpdatePayoutDocumentRequest) GetFailureCode() string {
	if x != nil {
		return x.FailureCode
	}
	return ""
}

func (x *UpdatePayoutDocumentRequest) GetFailureMessage() string {
	if x != nil {
		return x.FailureMessage
	}
	return ""
}

func (x *UpdatePayoutDocumentRequest) GetFailureTransaction() string {
	if x != nil {
		return x.FailureTransaction
	}
	return ""
}

func (x *UpdatePayoutDocumentRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

type GetPayoutDocumentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"required,hexadecimal,len=24" param:"payout_document_id"
	PayoutDocumentId string `protobuf:"bytes,1,opt,name=payout_document_id,json=payoutDocumentId,proto3" json:"payout_document_id,omitempty" validate:"required,hexadecimal,len=24" param:"payout_document_id"`
	//@inject_tag: validate:"omitempty,hexadecimal,len=24"
	MerchantId string `protobuf:"bytes,2,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty" validate:"omitempty,hexadecimal,len=24"`
}

func (x *GetPayoutDocumentRequest) Reset() {
	*x = GetPayoutDocumentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[206]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPayoutDocumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPayoutDocumentRequest) ProtoMessage() {}

func (x *GetPayoutDocumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[206]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPayoutDocumentRequest.ProtoReflect.Descriptor instead.
func (*GetPayoutDocumentRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{206}
}

func (x *GetPayoutDocumentRequest) GetPayoutDocumentId() string {
	if x != nil {
		return x.PayoutDocumentId
	}
	return ""
}

func (x *GetPayoutDocumentRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

type GetPayoutDocumentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: query:"payout_document_id" validate:"omitempty,hexadecimal,len=24"
	PayoutDocumentId string `protobuf:"bytes,1,opt,name=payout_document_id,json=payoutDocumentId,proto3" json:"payout_document_id,omitempty" query:"payout_document_id" validate:"omitempty,hexadecimal,len=24"`
	//@inject_tag: query:"status[]" validate:"omitempty,dive,oneof=skip pending in_progress paid canceled failed"
	Status []string `protobuf:"bytes,2,rep,name=status,proto3" json:"status,omitempty" query:"status[]" validate:"omitempty,dive,oneof=skip pending in_progress paid canceled failed"`
	//@inject_tag: validate:"omitempty,hexadecimal,len=24"
	MerchantId string `protobuf:"bytes,3,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty" validate:"omitempty,hexadecimal,len=24"`
	// @inject_tag: query:"date_from" validate:"omitempty,datetime"
	DateFrom string `protobuf:"bytes,4,opt,name=date_from,json=dateFrom,proto3" json:"date_from,omitempty" query:"date_from" validate:"omitempty,datetime"`
	// @inject_tag: query:"date_to" validate:"omitempty,datetime"
	DateTo string `protobuf:"bytes,5,opt,name=date_to,json=dateTo,proto3" json:"date_to,omitempty" query:"date_to" validate:"omitempty,datetime"`
	// @inject_tag: query:"limit" validate:"omitempty,numeric,gt=0"
	Limit int64 `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty" query:"limit" validate:"omitempty,numeric,gt=0"`
	// @inject_tag: query:"offset" validate:"omitempty,numeric,gte=0"
	Offset int64 `protobuf:"varint,7,opt,name=offset,proto3" json:"offset,omitempty" query:"offset" validate:"omitempty,numeric,gte=0"`
	//@inject_tag: validate:"omitempty,hexadecimal,len=24"
	OperatingCompanyId string `protobuf:"bytes,8,opt,name=operating_company_id,json=operatingCompanyId,proto3" json:"operating_company_id,omitempty" validate:"omitempty,hexadecimal,len=24"`
}

func (x *GetPayoutDocumentsRequest) Reset() {
	*x = GetPayoutDocumentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[207]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPayoutDocumentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPayoutDocumentsRequest) ProtoMessage() {}

func (x *GetPayoutDocumentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[207]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPayoutDocumentsRequest.ProtoReflect.Descriptor instead.
func (*GetPayoutDocumentsRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{207}
}

func (x *GetPayoutDocumentsRequest) GetPayoutDocumentId() string {
	if x != nil {
		return x.PayoutDocumentId
	}
	return ""
}

func (x *GetPayoutDocumentsRequest) GetStatus() []string {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetPayoutDocumentsRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *GetPayoutDocumentsRequest) GetDateFrom() string {
	if x != nil {
		return x.DateFrom
	}
	return ""
}

func (x *GetPayoutDocumentsRequest) GetDateTo() string {
	if x != nil {
		return x.DateTo
	}
	return ""
}

func (x *GetPayoutDocumentsRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetPayoutDocumentsRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetPayoutDocumentsRequest) GetOperatingCompanyId() string {
	if x != nil {
		return x.OperatingCompanyId
	}
	return ""
}

type PayoutDocumentsPaginate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"count"
	//
	// The total number of the payout documents.
	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count"`
	// @inject_tag: json:"items"
	//
	// The list of the payout documents.
	Items []*PayoutDocument `protobuf:"bytes,2,rep,name=items,proto3" json:"items"`
}

func (x *PayoutDocumentsPaginate) Reset() {
	*x = PayoutDocumentsPaginate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[208]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayoutDocumentsPaginate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayoutDocumentsPaginate) ProtoMessage() {}

func (x *PayoutDocumentsPaginate) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[208]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayoutDocumentsPaginate.ProtoReflect.Descriptor instead.
func (*PayoutDocumentsPaginate) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{208}
}

func (x *PayoutDocumentsPaginate) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *PayoutDocumentsPaginate) GetItems() []*PayoutDocument {
	if x != nil {
		return x.Items
	}
	return nil
}

type GetPayoutDocumentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// @inject_tag: json:"message,omitempty"
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// @inject_tag: json:"data"
	Data *PayoutDocumentsPaginate `protobuf:"bytes,3,opt,name=data,proto3" json:"data"`
}

func (x *GetPayoutDocumentsResponse) Reset() {
	*x = GetPayoutDocumentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[209]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPayoutDocumentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPayoutDocumentsResponse) ProtoMessage() {}

func (x *GetPayoutDocumentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[209]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPayoutDocumentsResponse.ProtoReflect.Descriptor instead.
func (*GetPayoutDocumentsResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{209}
}

func (x *GetPayoutDocumentsResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetPayoutDocumentsResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *GetPayoutDocumentsResponse) GetData() *PayoutDocumentsPaginate {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdatePayoutDocumentSignaturesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: query:"payout_document_id" validate:"required,hexadecimal,len=24"
	PayoutDocumentId string `protobuf:"bytes,1,opt,name=payout_document_id,json=payoutDocumentId,proto3" json:"payout_document_id,omitempty" query:"payout_document_id" validate:"required,hexadecimal,len=24"`
	// @inject_tag: json:"has_merchant_signature"
	HasMerchantSignature bool `protobuf:"varint,2,opt,name=has_merchant_signature,json=hasMerchantSignature,proto3" json:"has_merchant_signature"`
	// @inject_tag: json:"has_psp_signature"
	HasPspSignature bool `protobuf:"varint,3,opt,name=has_psp_signature,json=hasPspSignature,proto3" json:"has_psp_signature"`
	// @inject_tag: json:"signed_document_file_url"
	SignedDocumentFileUrl string `protobuf:"bytes,4,opt,name=signed_document_file_url,json=signedDocumentFileUrl,proto3" json:"signed_document_file_url"`
}

func (x *UpdatePayoutDocumentSignaturesRequest) Reset() {
	*x = UpdatePayoutDocumentSignaturesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[210]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePayoutDocumentSignaturesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePayoutDocumentSignaturesRequest) ProtoMessage() {}

func (x *UpdatePayoutDocumentSignaturesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[210]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePayoutDocumentSignaturesRequest.ProtoReflect.Descriptor instead.
func (*UpdatePayoutDocumentSignaturesRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{210}
}

func (x *UpdatePayoutDocumentSignaturesRequest) GetPayoutDocumentId() string {
	if x != nil {
		return x.PayoutDocumentId
	}
	return ""
}

func (x *UpdatePayoutDocumentSignaturesRequest) GetHasMerchantSignature() bool {
	if x != nil {
		return x.HasMerchantSignature
	}
	return false
}

func (x *UpdatePayoutDocumentSignaturesRequest) GetHasPspSignature() bool {
	if x != nil {
		return x.HasPspSignature
	}
	return false
}

func (x *UpdatePayoutDocumentSignaturesRequest) GetSignedDocumentFileUrl() string {
	if x != nil {
		return x.SignedDocumentFileUrl
	}
	return ""
}

type GetMerchantBalanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"required,hexadecimal,len=24"
	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty" validate:"required,hexadecimal,len=24"`
}

func (x *GetMerchantBalanceRequest) Reset() {
	*x = GetMerchantBalanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[211]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMerchantBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMerchantBalanceRequest) ProtoMessage() {}

func (x *GetMerchantBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[211]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMerchantBalanceRequest.ProtoReflect.Descriptor instead.
func (*GetMerchantBalanceRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{211}
}

func (x *GetMerchantBalanceRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

type GetMerchantBalanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32                 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Item    *MerchantBalance      `protobuf:"bytes,3,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *GetMerchantBalanceResponse) Reset() {
	*x = GetMerchantBalanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[212]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMerchantBalanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMerchantBalanceResponse) ProtoMessage() {}

func (x *GetMerchantBalanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[212]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMerchantBalanceResponse.ProtoReflect.Descriptor instead.
func (*GetMerchantBalanceResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{212}
}

func (x *GetMerchantBalanceResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetMerchantBalanceResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *GetMerchantBalanceResponse) GetItem() *MerchantBalance {
	if x != nil {
		return x.Item
	}
	return nil
}

type PayoutDocumentPdfUploadedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"required,hexadecimal,len=24"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" validate:"required,hexadecimal,len=24"`
	//@inject_tag: validate:"required"
	Filename string `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty" validate:"required"`
	//@inject_tag: validate:"required,numeric,gte=0"
	RetentionTime int32 `protobuf:"varint,3,opt,name=retention_time,json=retentionTime,proto3" json:"retention_time,omitempty" validate:"required,numeric,gte=0"`
	//@inject_tag: validate:"required,hexadecimal,len=24"
	PayoutId string `protobuf:"bytes,4,opt,name=payout_id,json=payoutId,proto3" json:"payout_id,omitempty" validate:"required,hexadecimal,len=24"`
	Content  []byte `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *PayoutDocumentPdfUploadedRequest) Reset() {
	*x = PayoutDocumentPdfUploadedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[213]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayoutDocumentPdfUploadedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayoutDocumentPdfUploadedRequest) ProtoMessage() {}

func (x *PayoutDocumentPdfUploadedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[213]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayoutDocumentPdfUploadedRequest.ProtoReflect.Descriptor instead.
func (*PayoutDocumentPdfUploadedRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{213}
}

func (x *PayoutDocumentPdfUploadedRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PayoutDocumentPdfUploadedRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *PayoutDocumentPdfUploadedRequest) GetRetentionTime() int32 {
	if x != nil {
		return x.RetentionTime
	}
	return 0
}

func (x *PayoutDocumentPdfUploadedRequest) GetPayoutId() string {
	if x != nil {
		return x.PayoutId
	}
	return ""
}

func (x *PayoutDocumentPdfUploadedRequest) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type PayoutDocumentPdfUploadedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32                 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *PayoutDocumentPdfUploadedResponse) Reset() {
	*x = PayoutDocumentPdfUploadedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[214]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayoutDocumentPdfUploadedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayoutDocumentPdfUploadedResponse) ProtoMessage() {}

func (x *PayoutDocumentPdfUploadedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[214]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayoutDocumentPdfUploadedResponse.ProtoReflect.Descriptor instead.
func (*PayoutDocumentPdfUploadedResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{214}
}

func (x *PayoutDocumentPdfUploadedResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *PayoutDocumentPdfUploadedResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

type OrderReceiptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: validate:"required,uuid" param:"order_id"
	OrderId string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty" validate:"required,uuid" param:"order_id"`
	// @inject_tag: validate:"required,uuid" param:"receipt_id"
	ReceiptId string `protobuf:"bytes,2,opt,name=receipt_id,json=receiptId,proto3" json:"receipt_id,omitempty" validate:"required,uuid" param:"receipt_id"`
}

func (x *OrderReceiptRequest) Reset() {
	*x = OrderReceiptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[215]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderReceiptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderReceiptRequest) ProtoMessage() {}

func (x *OrderReceiptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[215]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderReceiptRequest.ProtoReflect.Descriptor instead.
func (*OrderReceiptRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{215}
}

func (x *OrderReceiptRequest) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *OrderReceiptRequest) GetReceiptId() string {
	if x != nil {
		return x.ReceiptId
	}
	return ""
}

type OrderReceiptResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32                 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Receipt *OrderReceipt         `protobuf:"bytes,3,opt,name=receipt,proto3" json:"receipt,omitempty"`
}

func (x *OrderReceiptResponse) Reset() {
	*x = OrderReceiptResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[216]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderReceiptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderReceiptResponse) ProtoMessage() {}

func (x *OrderReceiptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[216]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderReceiptResponse.ProtoReflect.Descriptor instead.
func (*OrderReceiptResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{216}
}

func (x *OrderReceiptResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *OrderReceiptResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *OrderReceiptResponse) GetReceipt() *OrderReceipt {
	if x != nil {
		return x.Receipt
	}
	return nil
}

type GetProductResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The response status code.
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// The response error message (if any).
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// The product data.
	Item *Product `protobuf:"bytes,3,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *GetProductResponse) Reset() {
	*x = GetProductResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[217]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProductResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProductResponse) ProtoMessage() {}

func (x *GetProductResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[217]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProductResponse.ProtoReflect.Descriptor instead.
func (*GetProductResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{217}
}

func (x *GetProductResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetProductResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *GetProductResponse) GetItem() *Product {
	if x != nil {
		return x.Item
	}
	return nil
}

type GetPriceGroupByRegionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32                 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	//@inject_tag: json:"group"
	Group *PriceGroup `protobuf:"bytes,3,opt,name=Group,proto3" json:"group"`
}

func (x *GetPriceGroupByRegionResponse) Reset() {
	*x = GetPriceGroupByRegionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[218]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPriceGroupByRegionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPriceGroupByRegionResponse) ProtoMessage() {}

func (x *GetPriceGroupByRegionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[218]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPriceGroupByRegionResponse.ProtoReflect.Descriptor instead.
func (*GetPriceGroupByRegionResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{218}
}

func (x *GetPriceGroupByRegionResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetPriceGroupByRegionResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *GetPriceGroupByRegionResponse) GetGroup() *PriceGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

type GetPriceGroupByRegionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"region" validate:"required"
	Region string `protobuf:"bytes,1,opt,name=region,proto3" json:"region" validate:"required"`
}

func (x *GetPriceGroupByRegionRequest) Reset() {
	*x = GetPriceGroupByRegionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[219]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPriceGroupByRegionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPriceGroupByRegionRequest) ProtoMessage() {}

func (x *GetPriceGroupByRegionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[219]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPriceGroupByRegionRequest.ProtoReflect.Descriptor instead.
func (*GetPriceGroupByRegionRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{219}
}

func (x *GetPriceGroupByRegionRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

type ChangeMerchantManualPayoutsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: validate:"required,hexadecimal,len=24"
	MerchantId           string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty" validate:"required,hexadecimal,len=24"`
	ManualPayoutsEnabled bool   `protobuf:"varint,2,opt,name=manual_payouts_enabled,json=manualPayoutsEnabled,proto3" json:"manual_payouts_enabled,omitempty"`
}

func (x *ChangeMerchantManualPayoutsRequest) Reset() {
	*x = ChangeMerchantManualPayoutsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[220]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeMerchantManualPayoutsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeMerchantManualPayoutsRequest) ProtoMessage() {}

func (x *ChangeMerchantManualPayoutsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[220]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeMerchantManualPayoutsRequest.ProtoReflect.Descriptor instead.
func (*ChangeMerchantManualPayoutsRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{220}
}

func (x *ChangeMerchantManualPayoutsRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *ChangeMerchantManualPayoutsRequest) GetManualPayoutsEnabled() bool {
	if x != nil {
		return x.ManualPayoutsEnabled
	}
	return false
}

type ChangeMerchantManualPayoutsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32                 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Item    *Merchant             `protobuf:"bytes,3,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *ChangeMerchantManualPayoutsResponse) Reset() {
	*x = ChangeMerchantManualPayoutsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[221]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeMerchantManualPayoutsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeMerchantManualPayoutsResponse) ProtoMessage() {}

func (x *ChangeMerchantManualPayoutsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[221]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeMerchantManualPayoutsResponse.ProtoReflect.Descriptor instead.
func (*ChangeMerchantManualPayoutsResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{221}
}

func (x *ChangeMerchantManualPayoutsResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ChangeMerchantManualPayoutsResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *ChangeMerchantManualPayoutsResponse) GetItem() *Merchant {
	if x != nil {
		return x.Item
	}
	return nil
}

type GetPaylinksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"required,hexadecimal,len=24"
	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty" validate:"required,hexadecimal,len=24"`
	//@inject_tag: validate:"omitempty,hexadecimal,len=24"
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty" validate:"omitempty,hexadecimal,len=24"`
	// @inject_tag: validate:"required,numeric,gte=1"
	Limit int64 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty" validate:"required,numeric,gte=1"`
	// @inject_tag: validate:"omitempty,numeric,gte=0"
	Offset int64 `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty" validate:"omitempty,numeric,gte=0"`
}

func (x *GetPaylinksRequest) Reset() {
	*x = GetPaylinksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[222]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPaylinksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPaylinksRequest) ProtoMessage() {}

func (x *GetPaylinksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[222]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPaylinksRequest.ProtoReflect.Descriptor instead.
func (*GetPaylinksRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{222}
}

func (x *GetPaylinksRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *GetPaylinksRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *GetPaylinksRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetPaylinksRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type SendWebhookToMerchantResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The response status code.
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// The response error message (if any).
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// The unique identifier for the order.
	OrderId string `protobuf:"bytes,3,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
}

func (x *SendWebhookToMerchantResponse) Reset() {
	*x = SendWebhookToMerchantResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[223]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendWebhookToMerchantResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendWebhookToMerchantResponse) ProtoMessage() {}

func (x *SendWebhookToMerchantResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[223]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendWebhookToMerchantResponse.ProtoReflect.Descriptor instead.
func (*SendWebhookToMerchantResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{223}
}

func (x *SendWebhookToMerchantResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SendWebhookToMerchantResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *SendWebhookToMerchantResponse) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

type PaylinksPaginate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"count"
	//
	// The total number of found paylinks.
	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count"`
	// @inject_tag: json:"items"
	//
	// The list of paylinks.
	Items []*Paylink `protobuf:"bytes,2,rep,name=items,proto3" json:"items"`
}

func (x *PaylinksPaginate) Reset() {
	*x = PaylinksPaginate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[224]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaylinksPaginate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaylinksPaginate) ProtoMessage() {}

func (x *PaylinksPaginate) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[224]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaylinksPaginate.ProtoReflect.Descriptor instead.
func (*PaylinksPaginate) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{224}
}

func (x *PaylinksPaginate) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *PaylinksPaginate) GetItems() []*Paylink {
	if x != nil {
		return x.Items
	}
	return nil
}

type NotifyWebhookTestResultsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	IsPassed  bool   `protobuf:"varint,3,opt,name=is_passed,json=isPassed,proto3" json:"is_passed,omitempty"`
	TestCase  string `protobuf:"bytes,4,opt,name=test_case,json=testCase,proto3" json:"test_case,omitempty"`
}

func (x *NotifyWebhookTestResultsRequest) Reset() {
	*x = NotifyWebhookTestResultsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[225]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyWebhookTestResultsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyWebhookTestResultsRequest) ProtoMessage() {}

func (x *NotifyWebhookTestResultsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[225]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyWebhookTestResultsRequest.ProtoReflect.Descriptor instead.
func (*NotifyWebhookTestResultsRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{225}
}

func (x *NotifyWebhookTestResultsRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *NotifyWebhookTestResultsRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *NotifyWebhookTestResultsRequest) GetIsPassed() bool {
	if x != nil {
		return x.IsPassed
	}
	return false
}

func (x *NotifyWebhookTestResultsRequest) GetTestCase() string {
	if x != nil {
		return x.TestCase
	}
	return ""
}

type GetPaylinksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// @inject_tag: json:"message,omitempty"
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// @inject_tag: json:"data"
	Data *PaylinksPaginate `protobuf:"bytes,3,opt,name=data,proto3" json:"data"`
}

func (x *GetPaylinksResponse) Reset() {
	*x = GetPaylinksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[226]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPaylinksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPaylinksResponse) ProtoMessage() {}

func (x *GetPaylinksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[226]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPaylinksResponse.ProtoReflect.Descriptor instead.
func (*GetPaylinksResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{226}
}

func (x *GetPaylinksResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetPaylinksResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *GetPaylinksResponse) GetData() *PaylinksPaginate {
	if x != nil {
		return x.Data
	}
	return nil
}

type PaylinkRequestById struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"required,hexadecimal,len=24"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" validate:"required,hexadecimal,len=24"`
	// @inject_tag: query:"utm_source"
	UtmSource string `protobuf:"bytes,2,opt,name=utm_source,json=utmSource,proto3" json:"utm_source,omitempty" query:"utm_source"`
	// @inject_tag: query:"utm_medium"
	UtmMedium string `protobuf:"bytes,3,opt,name=utm_medium,json=utmMedium,proto3" json:"utm_medium,omitempty" query:"utm_medium"`
	// @inject_tag: query:"utm_campaign"
	UtmCampaign string `protobuf:"bytes,4,opt,name=utm_campaign,json=utmCampaign,proto3" json:"utm_campaign,omitempty" query:"utm_campaign"`
}

func (x *PaylinkRequestById) Reset() {
	*x = PaylinkRequestById{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[227]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaylinkRequestById) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaylinkRequestById) ProtoMessage() {}

func (x *PaylinkRequestById) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[227]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaylinkRequestById.ProtoReflect.Descriptor instead.
func (*PaylinkRequestById) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{227}
}

func (x *PaylinkRequestById) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PaylinkRequestById) GetUtmSource() string {
	if x != nil {
		return x.UtmSource
	}
	return ""
}

func (x *PaylinkRequestById) GetUtmMedium() string {
	if x != nil {
		return x.UtmMedium
	}
	return ""
}

func (x *PaylinkRequestById) GetUtmCampaign() string {
	if x != nil {
		return x.UtmCampaign
	}
	return ""
}

type PaylinkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"required,hexadecimal,len=24" param="id"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" validate:"required,hexadecimal,len=24"`
	//@inject_tag: validate:"required,hexadecimal,len=24"
	MerchantId string `protobuf:"bytes,2,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty" validate:"required,hexadecimal,len=24"`
}

func (x *PaylinkRequest) Reset() {
	*x = PaylinkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[228]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaylinkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaylinkRequest) ProtoMessage() {}

func (x *PaylinkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[228]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaylinkRequest.ProtoReflect.Descriptor instead.
func (*PaylinkRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{228}
}

func (x *PaylinkRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PaylinkRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

type GetPaylinkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// @inject_tag: json:"message,omitempty"
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// @inject_tag: json:"item"
	Item *Paylink `protobuf:"bytes,3,opt,name=item,proto3" json:"item"`
}

func (x *GetPaylinkResponse) Reset() {
	*x = GetPaylinkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[229]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPaylinkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPaylinkResponse) ProtoMessage() {}

func (x *GetPaylinkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[229]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPaylinkResponse.ProtoReflect.Descriptor instead.
func (*GetPaylinkResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{229}
}

func (x *GetPaylinkResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetPaylinkResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *GetPaylinkResponse) GetItem() *Paylink {
	if x != nil {
		return x.Item
	}
	return nil
}

type GetPaylinkUrlByShortLinkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"required,hexadecimal" param="id"
	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" validate:"required,hexadecimal"`
	UrlMask string `protobuf:"bytes,2,opt,name=url_mask,json=urlMask,proto3" json:"url_mask,omitempty"`
	// @inject_tag: query:"utm_source"
	UtmSource string `protobuf:"bytes,3,opt,name=utm_source,json=utmSource,proto3" json:"utm_source,omitempty" query:"utm_source"`
	// @inject_tag: query:"utm_medium"
	UtmMedium string `protobuf:"bytes,4,opt,name=utm_medium,json=utmMedium,proto3" json:"utm_medium,omitempty" query:"utm_medium"`
	// @inject_tag: query:"utm_campaign"
	UtmCampaign string `protobuf:"bytes,5,opt,name=utm_campaign,json=utmCampaign,proto3" json:"utm_campaign,omitempty" query:"utm_campaign"`
}

func (x *GetPaylinkUrlByShortLinkRequest) Reset() {
	*x = GetPaylinkUrlByShortLinkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[230]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPaylinkUrlByShortLinkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPaylinkUrlByShortLinkRequest) ProtoMessage() {}

func (x *GetPaylinkUrlByShortLinkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[230]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPaylinkUrlByShortLinkRequest.ProtoReflect.Descriptor instead.
func (*GetPaylinkUrlByShortLinkRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{230}
}

func (x *GetPaylinkUrlByShortLinkRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetPaylinkUrlByShortLinkRequest) GetUrlMask() string {
	if x != nil {
		return x.UrlMask
	}
	return ""
}

func (x *GetPaylinkUrlByShortLinkRequest) GetUtmSource() string {
	if x != nil {
		return x.UtmSource
	}
	return ""
}

func (x *GetPaylinkUrlByShortLinkRequest) GetUtmMedium() string {
	if x != nil {
		return x.UtmMedium
	}
	return ""
}

func (x *GetPaylinkUrlByShortLinkRequest) GetUtmCampaign() string {
	if x != nil {
		return x.UtmCampaign
	}
	return ""
}

type GetPaylinkUrlByShortLinkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// @inject_tag: json:"message,omitempty"
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// @inject_tag: json:"url"
	Url string `protobuf:"bytes,3,opt,name=url,proto3" json:"url"`
}

func (x *GetPaylinkUrlByShortLinkResponse) Reset() {
	*x = GetPaylinkUrlByShortLinkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[231]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPaylinkUrlByShortLinkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPaylinkUrlByShortLinkResponse) ProtoMessage() {}

func (x *GetPaylinkUrlByShortLinkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[231]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPaylinkUrlByShortLinkResponse.ProtoReflect.Descriptor instead.
func (*GetPaylinkUrlByShortLinkResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{231}
}

func (x *GetPaylinkUrlByShortLinkResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetPaylinkUrlByShortLinkResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *GetPaylinkUrlByShortLinkResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type GetPaylinkURLRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"required,hexadecimal,len=24"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" validate:"required,hexadecimal,len=24"`
	//@inject_tag: validate:"required,hexadecimal,len=24"
	MerchantId string `protobuf:"bytes,2,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty" validate:"required,hexadecimal,len=24"`
	UrlMask    string `protobuf:"bytes,3,opt,name=url_mask,json=urlMask,proto3" json:"url_mask,omitempty"`
	// @inject_tag: query:"utm_source"
	UtmSource string `protobuf:"bytes,4,opt,name=utm_source,json=utmSource,proto3" json:"utm_source,omitempty" query:"utm_source"`
	// @inject_tag: query:"utm_medium"
	UtmMedium string `protobuf:"bytes,5,opt,name=utm_medium,json=utmMedium,proto3" json:"utm_medium,omitempty" query:"utm_medium"`
	// @inject_tag: query:"utm_campaign"
	UtmCampaign string `protobuf:"bytes,6,opt,name=utm_campaign,json=utmCampaign,proto3" json:"utm_campaign,omitempty" query:"utm_campaign"`
}

func (x *GetPaylinkURLRequest) Reset() {
	*x = GetPaylinkURLRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[232]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPaylinkURLRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPaylinkURLRequest) ProtoMessage() {}

func (x *GetPaylinkURLRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[232]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPaylinkURLRequest.ProtoReflect.Descriptor instead.
func (*GetPaylinkURLRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{232}
}

func (x *GetPaylinkURLRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetPaylinkURLRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *GetPaylinkURLRequest) GetUrlMask() string {
	if x != nil {
		return x.UrlMask
	}
	return ""
}

func (x *GetPaylinkURLRequest) GetUtmSource() string {
	if x != nil {
		return x.UtmSource
	}
	return ""
}

func (x *GetPaylinkURLRequest) GetUtmMedium() string {
	if x != nil {
		return x.UtmMedium
	}
	return ""
}

func (x *GetPaylinkURLRequest) GetUtmCampaign() string {
	if x != nil {
		return x.UtmCampaign
	}
	return ""
}

type GetPaylinkUrlResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// @inject_tag: json:"message,omitempty"
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// @inject_tag: json:"url"
	Url string `protobuf:"bytes,4,opt,name=url,proto3" json:"url"`
}

func (x *GetPaylinkUrlResponse) Reset() {
	*x = GetPaylinkUrlResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[233]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPaylinkUrlResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPaylinkUrlResponse) ProtoMessage() {}

func (x *GetPaylinkUrlResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[233]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPaylinkUrlResponse.ProtoReflect.Descriptor instead.
func (*GetPaylinkUrlResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{233}
}

func (x *GetPaylinkUrlResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetPaylinkUrlResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *GetPaylinkUrlResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type GetPaylinkStatCommonRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"required,hexadecimal" param:"id"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" validate:"required,hexadecimal" param:"id"`
	//@inject_tag: validate:"required,hexadecimal,len=24"
	MerchantId string `protobuf:"bytes,2,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty" validate:"required,hexadecimal,len=24"`
	// @inject_tag: query:"period_from" validate:"omitempty,numeric,gte=0"
	PeriodFrom int64 `protobuf:"varint,3,opt,name=period_from,json=periodFrom,proto3" json:"period_from,omitempty" query:"period_from" validate:"omitempty,numeric,gte=0"`
	// @inject_tag: query:"period_to" validate:"omitempty,numeric,gte=0"
	PeriodTo int64 `protobuf:"varint,4,opt,name=period_to,json=periodTo,proto3" json:"period_to,omitempty" query:"period_to" validate:"omitempty,numeric,gte=0"`
}

func (x *GetPaylinkStatCommonRequest) Reset() {
	*x = GetPaylinkStatCommonRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[234]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPaylinkStatCommonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPaylinkStatCommonRequest) ProtoMessage() {}

func (x *GetPaylinkStatCommonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[234]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPaylinkStatCommonRequest.ProtoReflect.Descriptor instead.
func (*GetPaylinkStatCommonRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{234}
}

func (x *GetPaylinkStatCommonRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetPaylinkStatCommonRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *GetPaylinkStatCommonRequest) GetPeriodFrom() int64 {
	if x != nil {
		return x.PeriodFrom
	}
	return 0
}

func (x *GetPaylinkStatCommonRequest) GetPeriodTo() int64 {
	if x != nil {
		return x.PeriodTo
	}
	return 0
}

type GetPaylinkTransactionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: validate:"required,hexadecimal,len=24" param:"merchant_id"
	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty" validate:"required,hexadecimal,len=24" param:"merchant_id"`
	//@inject_tag: validate:"required,hexadecimal,len=24" param="id"
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty" validate:"required,hexadecimal,len=24"`
	// @inject_tag: query:"limit" validate:"omitempty,numeric,gt=0"
	Limit int64 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty" query:"limit" validate:"omitempty,numeric,gt=0"`
	// @inject_tag: query:"offset" validate:"omitempty,numeric,gte=0"
	Offset int64 `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty" query:"offset" validate:"omitempty,numeric,gte=0"`
}

func (x *GetPaylinkTransactionsRequest) Reset() {
	*x = GetPaylinkTransactionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[235]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPaylinkTransactionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPaylinkTransactionsRequest) ProtoMessage() {}

func (x *GetPaylinkTransactionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[235]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPaylinkTransactionsRequest.ProtoReflect.Descriptor instead.
func (*GetPaylinkTransactionsRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{235}
}

func (x *GetPaylinkTransactionsRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *GetPaylinkTransactionsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetPaylinkTransactionsRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetPaylinkTransactionsRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type GetPaylinkStatCommonResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// @inject_tag: json:"message,omitempty"
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// @inject_tag: json:"item"
	Item *StatCommon `protobuf:"bytes,3,opt,name=item,proto3" json:"item"`
}

func (x *GetPaylinkStatCommonResponse) Reset() {
	*x = GetPaylinkStatCommonResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[236]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPaylinkStatCommonResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPaylinkStatCommonResponse) ProtoMessage() {}

func (x *GetPaylinkStatCommonResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[236]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPaylinkStatCommonResponse.ProtoReflect.Descriptor instead.
func (*GetPaylinkStatCommonResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{236}
}

func (x *GetPaylinkStatCommonResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetPaylinkStatCommonResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *GetPaylinkStatCommonResponse) GetItem() *StatCommon {
	if x != nil {
		return x.Item
	}
	return nil
}

type GetPaylinkStatCommonGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// @inject_tag: json:"message,omitempty"
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// @inject_tag: json:"item"
	Item *GroupStatCommon `protobuf:"bytes,3,opt,name=item,proto3" json:"item"`
}

func (x *GetPaylinkStatCommonGroupResponse) Reset() {
	*x = GetPaylinkStatCommonGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[237]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPaylinkStatCommonGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPaylinkStatCommonGroupResponse) ProtoMessage() {}

func (x *GetPaylinkStatCommonGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[237]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPaylinkStatCommonGroupResponse.ProtoReflect.Descriptor instead.
func (*GetPaylinkStatCommonGroupResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{237}
}

func (x *GetPaylinkStatCommonGroupResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetPaylinkStatCommonGroupResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *GetPaylinkStatCommonGroupResponse) GetItem() *GroupStatCommon {
	if x != nil {
		return x.Item
	}
	return nil
}

type RoyaltyReportPdfUploadedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"required,hexadecimal,len=24"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" validate:"required,hexadecimal,len=24"`
	//@inject_tag: validate:"required"
	Filename string `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty" validate:"required"`
	//@inject_tag: validate:"required,numeric,gte=0"
	RetentionTime int32 `protobuf:"varint,3,opt,name=retention_time,json=retentionTime,proto3" json:"retention_time,omitempty" validate:"required,numeric,gte=0"`
	//@inject_tag: validate:"required,hexadecimal,len=24"
	RoyaltyReportId string `protobuf:"bytes,4,opt,name=royalty_report_id,json=royaltyReportId,proto3" json:"royalty_report_id,omitempty" validate:"required,hexadecimal,len=24"`
	Content         []byte `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *RoyaltyReportPdfUploadedRequest) Reset() {
	*x = RoyaltyReportPdfUploadedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[238]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoyaltyReportPdfUploadedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoyaltyReportPdfUploadedRequest) ProtoMessage() {}

func (x *RoyaltyReportPdfUploadedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[238]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoyaltyReportPdfUploadedRequest.ProtoReflect.Descriptor instead.
func (*RoyaltyReportPdfUploadedRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{238}
}

func (x *RoyaltyReportPdfUploadedRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RoyaltyReportPdfUploadedRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *RoyaltyReportPdfUploadedRequest) GetRetentionTime() int32 {
	if x != nil {
		return x.RetentionTime
	}
	return 0
}

func (x *RoyaltyReportPdfUploadedRequest) GetRoyaltyReportId() string {
	if x != nil {
		return x.RoyaltyReportId
	}
	return ""
}

func (x *RoyaltyReportPdfUploadedRequest) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type RoyaltyReportPdfUploadedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32                 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *RoyaltyReportPdfUploadedResponse) Reset() {
	*x = RoyaltyReportPdfUploadedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[239]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoyaltyReportPdfUploadedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoyaltyReportPdfUploadedResponse) ProtoMessage() {}

func (x *RoyaltyReportPdfUploadedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[239]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoyaltyReportPdfUploadedResponse.ProtoReflect.Descriptor instead.
func (*RoyaltyReportPdfUploadedResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{239}
}

func (x *RoyaltyReportPdfUploadedResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *RoyaltyReportPdfUploadedResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

type DeleteSavedCardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"required,hexadecimal,len=24" required:"true"
	//
	// The unique identifier for the saved card.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" validate:"required,hexadecimal,len=24" required:"true"`
	//@inject_tag: validate:"required" json:"-"
	Cookie string `protobuf:"bytes,2,opt,name=cookie,proto3" json:"-" validate:"required"`
}

func (x *DeleteSavedCardRequest) Reset() {
	*x = DeleteSavedCardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[240]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSavedCardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSavedCardRequest) ProtoMessage() {}

func (x *DeleteSavedCardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[240]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSavedCardRequest.ProtoReflect.Descriptor instead.
func (*DeleteSavedCardRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{240}
}

func (x *DeleteSavedCardRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteSavedCardRequest) GetCookie() string {
	if x != nil {
		return x.Cookie
	}
	return ""
}

type GetOperatingCompaniesListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// @inject_tag: json:"message,omitempty"
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// @inject_tag: json:"items"
	Items []*OperatingCompany `protobuf:"bytes,3,rep,name=items,proto3" json:"items"`
}

func (x *GetOperatingCompaniesListResponse) Reset() {
	*x = GetOperatingCompaniesListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[241]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOperatingCompaniesListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOperatingCompaniesListResponse) ProtoMessage() {}

func (x *GetOperatingCompaniesListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[241]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOperatingCompaniesListResponse.ProtoReflect.Descriptor instead.
func (*GetOperatingCompaniesListResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{241}
}

func (x *GetOperatingCompaniesListResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetOperatingCompaniesListResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *GetOperatingCompaniesListResponse) GetItems() []*OperatingCompany {
	if x != nil {
		return x.Items
	}
	return nil
}

type GetPaymentMinLimitsSystemResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// @inject_tag: json:"message,omitempty"
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// @inject_tag: json:"items"
	Items []*PaymentMinLimitSystem `protobuf:"bytes,3,rep,name=items,proto3" json:"items"`
}

func (x *GetPaymentMinLimitsSystemResponse) Reset() {
	*x = GetPaymentMinLimitsSystemResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[242]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPaymentMinLimitsSystemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPaymentMinLimitsSystemResponse) ProtoMessage() {}

func (x *GetPaymentMinLimitsSystemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[242]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPaymentMinLimitsSystemResponse.ProtoReflect.Descriptor instead.
func (*GetPaymentMinLimitsSystemResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{242}
}

func (x *GetPaymentMinLimitsSystemResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetPaymentMinLimitsSystemResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *GetPaymentMinLimitsSystemResponse) GetItems() []*PaymentMinLimitSystem {
	if x != nil {
		return x.Items
	}
	return nil
}

type SetMerchantOperatingCompanyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"id" validate:"required,hexadecimal,len=24" json:"-"
	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"id" validate:"required,hexadecimal,len=24" json:"-"`
	// @inject_tag: json:"operating_company_id" validate:"required,hexadecimal,len=24"
	//
	// The unique identifier for the operating company.
	OperatingCompanyId string `protobuf:"bytes,2,opt,name=operating_company_id,json=operatingCompanyId,proto3" json:"operating_company_id" validate:"required,hexadecimal,len=24"`
	// @inject_tag: json:"dont_charge_vat"
	//
	// Has a true value if the merchant doesn't pay VAT.
	DontChargeVat bool `protobuf:"varint,3,opt,name=dont_charge_vat,json=dontChargeVat,proto3" json:"dont_charge_vat"`
}

func (x *SetMerchantOperatingCompanyRequest) Reset() {
	*x = SetMerchantOperatingCompanyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[243]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMerchantOperatingCompanyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMerchantOperatingCompanyRequest) ProtoMessage() {}

func (x *SetMerchantOperatingCompanyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[243]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMerchantOperatingCompanyRequest.ProtoReflect.Descriptor instead.
func (*SetMerchantOperatingCompanyRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{243}
}

func (x *SetMerchantOperatingCompanyRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *SetMerchantOperatingCompanyRequest) GetOperatingCompanyId() string {
	if x != nil {
		return x.OperatingCompanyId
	}
	return ""
}

func (x *SetMerchantOperatingCompanyRequest) GetDontChargeVat() bool {
	if x != nil {
		return x.DontChargeVat
	}
	return false
}

type SetMerchantOperatingCompanyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32                 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Item    *Merchant             `protobuf:"bytes,3,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *SetMerchantOperatingCompanyResponse) Reset() {
	*x = SetMerchantOperatingCompanyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[244]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMerchantOperatingCompanyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMerchantOperatingCompanyResponse) ProtoMessage() {}

func (x *SetMerchantOperatingCompanyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[244]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMerchantOperatingCompanyResponse.ProtoReflect.Descriptor instead.
func (*SetMerchantOperatingCompanyResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{244}
}

func (x *SetMerchantOperatingCompanyResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SetMerchantOperatingCompanyResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *SetMerchantOperatingCompanyResponse) GetItem() *Merchant {
	if x != nil {
		return x.Item
	}
	return nil
}

type SetMerchantAcceptedStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"id" validate:"required,hexadecimal,len=24" json:"-"
	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"id" validate:"required,hexadecimal,len=24" json:"-"`
}

func (x *SetMerchantAcceptedStatusRequest) Reset() {
	*x = SetMerchantAcceptedStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[245]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMerchantAcceptedStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMerchantAcceptedStatusRequest) ProtoMessage() {}

func (x *SetMerchantAcceptedStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[245]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMerchantAcceptedStatusRequest.ProtoReflect.Descriptor instead.
func (*SetMerchantAcceptedStatusRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{245}
}

func (x *SetMerchantAcceptedStatusRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

type SetMerchantAcceptedStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32                 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Item    *Merchant             `protobuf:"bytes,3,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *SetMerchantAcceptedStatusResponse) Reset() {
	*x = SetMerchantAcceptedStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[246]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMerchantAcceptedStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMerchantAcceptedStatusResponse) ProtoMessage() {}

func (x *SetMerchantAcceptedStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[246]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMerchantAcceptedStatusResponse.ProtoReflect.Descriptor instead.
func (*SetMerchantAcceptedStatusResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{246}
}

func (x *SetMerchantAcceptedStatusResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SetMerchantAcceptedStatusResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *SetMerchantAcceptedStatusResponse) GetItem() *Merchant {
	if x != nil {
		return x.Item
	}
	return nil
}

type GetOperatingCompanyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"id" validate:"required,hexadecimal,len=24"
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id" validate:"required,hexadecimal,len=24"`
}

func (x *GetOperatingCompanyRequest) Reset() {
	*x = GetOperatingCompanyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[247]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOperatingCompanyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOperatingCompanyRequest) ProtoMessage() {}

func (x *GetOperatingCompanyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[247]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOperatingCompanyRequest.ProtoReflect.Descriptor instead.
func (*GetOperatingCompanyRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{247}
}

func (x *GetOperatingCompanyRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetOperatingCompanyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32                 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Company *OperatingCompany     `protobuf:"bytes,3,opt,name=company,proto3" json:"company,omitempty"`
}

func (x *GetOperatingCompanyResponse) Reset() {
	*x = GetOperatingCompanyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[248]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOperatingCompanyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOperatingCompanyResponse) ProtoMessage() {}

func (x *GetOperatingCompanyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[248]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOperatingCompanyResponse.ProtoReflect.Descriptor instead.
func (*GetOperatingCompanyResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{248}
}

func (x *GetOperatingCompanyResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetOperatingCompanyResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *GetOperatingCompanyResponse) GetCompany() *OperatingCompany {
	if x != nil {
		return x.Company
	}
	return nil
}

type OrderReCreateProcessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: validate:"required,uuid"
	OrderId string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty" validate:"required,uuid"`
}

func (x *OrderReCreateProcessRequest) Reset() {
	*x = OrderReCreateProcessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[249]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderReCreateProcessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderReCreateProcessRequest) ProtoMessage() {}

func (x *OrderReCreateProcessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[249]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderReCreateProcessRequest.ProtoReflect.Descriptor instead.
func (*OrderReCreateProcessRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{249}
}

func (x *OrderReCreateProcessRequest) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

type GetMerchantUsersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"merchant_id" validate:"required"
	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id" validate:"required"`
}

func (x *GetMerchantUsersRequest) Reset() {
	*x = GetMerchantUsersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[250]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMerchantUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMerchantUsersRequest) ProtoMessage() {}

func (x *GetMerchantUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[250]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMerchantUsersRequest.ProtoReflect.Descriptor instead.
func (*GetMerchantUsersRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{250}
}

func (x *GetMerchantUsersRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

type GetMerchantUsersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32                 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Users   []*UserRole           `protobuf:"bytes,3,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *GetMerchantUsersResponse) Reset() {
	*x = GetMerchantUsersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[251]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMerchantUsersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMerchantUsersResponse) ProtoMessage() {}

func (x *GetMerchantUsersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[251]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMerchantUsersResponse.ProtoReflect.Descriptor instead.
func (*GetMerchantUsersResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{251}
}

func (x *GetMerchantUsersResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetMerchantUsersResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *GetMerchantUsersResponse) GetUsers() []*UserRole {
	if x != nil {
		return x.Users
	}
	return nil
}

type InviteUserMerchantRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"required,hexadecimal,len=24" required:"true"
	//
	// The unique identifier for the merchant.
	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty" validate:"required,hexadecimal,len=24" required:"true"`
	//@inject_tag: validate:"required,email" required:"true"
	//
	// The user's email address to obtain an invitation about the merchant role.
	Email string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty" validate:"required,email" required:"true"`
	//@inject_tag: validate:"required" required:"true"
	//
	// The merchant role for the invited user. Available values: merchant_developer, merchant_accounting, merchant_support, merchant_view_only.
	Role string `protobuf:"bytes,3,opt,name=role,proto3" json:"role,omitempty" validate:"required" required:"true"`
}

func (x *InviteUserMerchantRequest) Reset() {
	*x = InviteUserMerchantRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[252]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteUserMerchantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteUserMerchantRequest) ProtoMessage() {}

func (x *InviteUserMerchantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[252]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteUserMerchantRequest.ProtoReflect.Descriptor instead.
func (*InviteUserMerchantRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{252}
}

func (x *InviteUserMerchantRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *InviteUserMerchantRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *InviteUserMerchantRequest) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

type InviteUserMerchantResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The response status code.
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// The response error message (if any).
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// The merchant role data for the invited user.
	Role *UserRole `protobuf:"bytes,3,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *InviteUserMerchantResponse) Reset() {
	*x = InviteUserMerchantResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[253]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteUserMerchantResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteUserMerchantResponse) ProtoMessage() {}

func (x *InviteUserMerchantResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[253]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteUserMerchantResponse.ProtoReflect.Descriptor instead.
func (*InviteUserMerchantResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{253}
}

func (x *InviteUserMerchantResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *InviteUserMerchantResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *InviteUserMerchantResponse) GetRole() *UserRole {
	if x != nil {
		return x.Role
	}
	return nil
}

type InviteUserAdminRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"required,email" required:"true"
	//
	// The user's email address to obtain an invitation about the admin role.
	Email string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty" validate:"required,email" required:"true"`
	//@inject_tag: validate:"required" required:"true"
	//
	// The admin role for the invited user.
	Role string `protobuf:"bytes,2,opt,name=role,proto3" json:"role,omitempty" validate:"required" required:"true"`
}

func (x *InviteUserAdminRequest) Reset() {
	*x = InviteUserAdminRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[254]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteUserAdminRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteUserAdminRequest) ProtoMessage() {}

func (x *InviteUserAdminRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[254]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteUserAdminRequest.ProtoReflect.Descriptor instead.
func (*InviteUserAdminRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{254}
}

func (x *InviteUserAdminRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *InviteUserAdminRequest) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

type InviteUserAdminResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The response status code.
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// The response error message (if any).
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// The user role data.
	Role *UserRole `protobuf:"bytes,3,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *InviteUserAdminResponse) Reset() {
	*x = InviteUserAdminResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[255]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteUserAdminResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteUserAdminResponse) ProtoMessage() {}

func (x *InviteUserAdminResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[255]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteUserAdminResponse.ProtoReflect.Descriptor instead.
func (*InviteUserAdminResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{255}
}

func (x *InviteUserAdminResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *InviteUserAdminResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *InviteUserAdminResponse) GetRole() *UserRole {
	if x != nil {
		return x.Role
	}
	return nil
}

type ResendInviteMerchantRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"required,hexadecimal,len=24" required:"true"
	//
	// The unique identifier for the merchant.
	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty" validate:"required,hexadecimal,len=24" required:"true"`
	//@inject_tag: validate:"required,email" required:"true"
	//
	// The user's email address.
	Email string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty" validate:"required,email" required:"true"`
}

func (x *ResendInviteMerchantRequest) Reset() {
	*x = ResendInviteMerchantRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[256]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResendInviteMerchantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResendInviteMerchantRequest) ProtoMessage() {}

func (x *ResendInviteMerchantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[256]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResendInviteMerchantRequest.ProtoReflect.Descriptor instead.
func (*ResendInviteMerchantRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{256}
}

func (x *ResendInviteMerchantRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *ResendInviteMerchantRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type ResendInviteAdminRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"required,email" required:"true"
	//
	// The user's email.
	Email string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty" validate:"required,email" required:"true"`
}

func (x *ResendInviteAdminRequest) Reset() {
	*x = ResendInviteAdminRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[257]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResendInviteAdminRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResendInviteAdminRequest) ProtoMessage() {}

func (x *ResendInviteAdminRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[257]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResendInviteAdminRequest.ProtoReflect.Descriptor instead.
func (*ResendInviteAdminRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{257}
}

func (x *ResendInviteAdminRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type GetMerchantUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"required,hexadecimal,len=24"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" validate:"required,hexadecimal,len=24"`
}

func (x *GetMerchantUserRequest) Reset() {
	*x = GetMerchantUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[258]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMerchantUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMerchantUserRequest) ProtoMessage() {}

func (x *GetMerchantUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[258]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMerchantUserRequest.ProtoReflect.Descriptor instead.
func (*GetMerchantUserRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{258}
}

func (x *GetMerchantUserRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetMerchantUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32                 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Role    *UserRole             `protobuf:"bytes,3,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *GetMerchantUserResponse) Reset() {
	*x = GetMerchantUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[259]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMerchantUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMerchantUserResponse) ProtoMessage() {}

func (x *GetMerchantUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[259]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMerchantUserResponse.ProtoReflect.Descriptor instead.
func (*GetMerchantUserResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{259}
}

func (x *GetMerchantUserResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetMerchantUserResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *GetMerchantUserResponse) GetRole() *UserRole {
	if x != nil {
		return x.Role
	}
	return nil
}

type GetAdminUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"required,hexadecimal,len=24"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" validate:"required,hexadecimal,len=24"`
}

func (x *GetAdminUserRequest) Reset() {
	*x = GetAdminUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[260]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAdminUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAdminUserRequest) ProtoMessage() {}

func (x *GetAdminUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[260]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAdminUserRequest.ProtoReflect.Descriptor instead.
func (*GetAdminUserRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{260}
}

func (x *GetAdminUserRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetAdminUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32                 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Role    *UserRole             `protobuf:"bytes,3,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *GetAdminUserResponse) Reset() {
	*x = GetAdminUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[261]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAdminUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAdminUserResponse) ProtoMessage() {}

func (x *GetAdminUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[261]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAdminUserResponse.ProtoReflect.Descriptor instead.
func (*GetAdminUserResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{261}
}

func (x *GetAdminUserResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetAdminUserResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *GetAdminUserResponse) GetRole() *UserRole {
	if x != nil {
		return x.Role
	}
	return nil
}

type CheckInviteTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"required" required:"true"
	//
	// The invitation token.
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty" validate:"required" required:"true"`
	//@inject_tag: validate:"required,email" required:"true"
	//
	// The user's email address.
	Email string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty" validate:"required,email" required:"true"`
}

func (x *CheckInviteTokenRequest) Reset() {
	*x = CheckInviteTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[262]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckInviteTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckInviteTokenRequest) ProtoMessage() {}

func (x *CheckInviteTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[262]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckInviteTokenRequest.ProtoReflect.Descriptor instead.
func (*CheckInviteTokenRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{262}
}

func (x *CheckInviteTokenRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *CheckInviteTokenRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type CheckInviteTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The response status code.
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// The response error message (if any).
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// The unique identifier for the role.
	RoleId string `protobuf:"bytes,3,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	// The type of the invitation. Available values: admin, merchant.
	RoleType string `protobuf:"bytes,4,opt,name=role_type,json=roleType,proto3" json:"role_type,omitempty"`
}

func (x *CheckInviteTokenResponse) Reset() {
	*x = CheckInviteTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[263]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckInviteTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckInviteTokenResponse) ProtoMessage() {}

func (x *CheckInviteTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[263]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckInviteTokenResponse.ProtoReflect.Descriptor instead.
func (*CheckInviteTokenResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{263}
}

func (x *CheckInviteTokenResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *CheckInviteTokenResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *CheckInviteTokenResponse) GetRoleId() string {
	if x != nil {
		return x.RoleId
	}
	return ""
}

func (x *CheckInviteTokenResponse) GetRoleType() string {
	if x != nil {
		return x.RoleType
	}
	return ""
}

type AcceptInviteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"required" required:"true"
	//
	// The invitation token.
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty" validate:"required" required:"true"`
	//@inject_tag: validate:"required,hexadecimal,len=24" required:"true"
	//
	// The unique identifier for the user.
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty" validate:"required,hexadecimal,len=24" required:"true"`
	//@inject_tag: validate:"required,email" required:"true"
	//
	// The user's email address.
	Email string `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty" validate:"required,email" required:"true"`
}

func (x *AcceptInviteRequest) Reset() {
	*x = AcceptInviteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[264]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcceptInviteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptInviteRequest) ProtoMessage() {}

func (x *AcceptInviteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[264]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptInviteRequest.ProtoReflect.Descriptor instead.
func (*AcceptInviteRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{264}
}

func (x *AcceptInviteRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *AcceptInviteRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AcceptInviteRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type AcceptInviteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The response status code.
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// The response error message (if any).
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// The user's role data.
	Role *UserRole `protobuf:"bytes,3,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *AcceptInviteResponse) Reset() {
	*x = AcceptInviteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[265]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcceptInviteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptInviteResponse) ProtoMessage() {}

func (x *AcceptInviteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[265]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptInviteResponse.ProtoReflect.Descriptor instead.
func (*AcceptInviteResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{265}
}

func (x *AcceptInviteResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *AcceptInviteResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *AcceptInviteResponse) GetRole() *UserRole {
	if x != nil {
		return x.Role
	}
	return nil
}

type GetAdminUsersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32                 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Users   []*UserRole           `protobuf:"bytes,3,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *GetAdminUsersResponse) Reset() {
	*x = GetAdminUsersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[266]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAdminUsersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAdminUsersResponse) ProtoMessage() {}

func (x *GetAdminUsersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[266]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAdminUsersResponse.ProtoReflect.Descriptor instead.
func (*GetAdminUsersResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{266}
}

func (x *GetAdminUsersResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetAdminUsersResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *GetAdminUsersResponse) GetUsers() []*UserRole {
	if x != nil {
		return x.Users
	}
	return nil
}

type GetMerchantsForUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"user_id" validate:"required"
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id" validate:"required"`
}

func (x *GetMerchantsForUserRequest) Reset() {
	*x = GetMerchantsForUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[267]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMerchantsForUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMerchantsForUserRequest) ProtoMessage() {}

func (x *GetMerchantsForUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[267]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMerchantsForUserRequest.ProtoReflect.Descriptor instead.
func (*GetMerchantsForUserRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{267}
}

func (x *GetMerchantsForUserRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type GetMerchantsForUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The response status code.
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// The response error message (if any).
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// The list of merchants.
	Merchants []*MerchantForUserInfo `protobuf:"bytes,3,rep,name=merchants,proto3" json:"merchants,omitempty"`
}

func (x *GetMerchantsForUserResponse) Reset() {
	*x = GetMerchantsForUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[268]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMerchantsForUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMerchantsForUserResponse) ProtoMessage() {}

func (x *GetMerchantsForUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[268]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMerchantsForUserResponse.ProtoReflect.Descriptor instead.
func (*GetMerchantsForUserResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{268}
}

func (x *GetMerchantsForUserResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetMerchantsForUserResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *GetMerchantsForUserResponse) GetMerchants() []*MerchantForUserInfo {
	if x != nil {
		return x.Merchants
	}
	return nil
}

type MerchantForUserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier for the merchant.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The merchant's name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The user's role in the merchant.
	Role string `protobuf:"bytes,3,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *MerchantForUserInfo) Reset() {
	*x = MerchantForUserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[269]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerchantForUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerchantForUserInfo) ProtoMessage() {}

func (x *MerchantForUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[269]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerchantForUserInfo.ProtoReflect.Descriptor instead.
func (*MerchantForUserInfo) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{269}
}

func (x *MerchantForUserInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MerchantForUserInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MerchantForUserInfo) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

type ChangeRoleForMerchantUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"required,hexadecimal,len=24" param:"role_id"
	RoleId string `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty" validate:"required,hexadecimal,len=24" param:"role_id"`
	//@inject_tag: validate:"required,hexadecimal,len=24"
	MerchantId string `protobuf:"bytes,2,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty" validate:"required,hexadecimal,len=24"`
	//@inject_tag: validate:"required"
	Role string `protobuf:"bytes,3,opt,name=role,proto3" json:"role,omitempty" validate:"required"`
}

func (x *ChangeRoleForMerchantUserRequest) Reset() {
	*x = ChangeRoleForMerchantUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[270]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeRoleForMerchantUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeRoleForMerchantUserRequest) ProtoMessage() {}

func (x *ChangeRoleForMerchantUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[270]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeRoleForMerchantUserRequest.ProtoReflect.Descriptor instead.
func (*ChangeRoleForMerchantUserRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{270}
}

func (x *ChangeRoleForMerchantUserRequest) GetRoleId() string {
	if x != nil {
		return x.RoleId
	}
	return ""
}

func (x *ChangeRoleForMerchantUserRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *ChangeRoleForMerchantUserRequest) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

type ChangeRoleForAdminUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"required,hexadecimal,len=24" param:"role_id" json:"-"
	RoleId string `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"-" validate:"required,hexadecimal,len=24" param:"role_id"`
	//@inject_tag: validate:"required" required:"true"
	//
	// The user role's name.
	Role string `protobuf:"bytes,3,opt,name=role,proto3" json:"role,omitempty" validate:"required" required:"true"`
}

func (x *ChangeRoleForAdminUserRequest) Reset() {
	*x = ChangeRoleForAdminUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[271]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeRoleForAdminUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeRoleForAdminUserRequest) ProtoMessage() {}

func (x *ChangeRoleForAdminUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[271]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeRoleForAdminUserRequest.ProtoReflect.Descriptor instead.
func (*ChangeRoleForAdminUserRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{271}
}

func (x *ChangeRoleForAdminUserRequest) GetRoleId() string {
	if x != nil {
		return x.RoleId
	}
	return ""
}

func (x *ChangeRoleForAdminUserRequest) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

type GetRoleListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"required,oneof=merchant system"
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty" validate:"required,oneof=merchant system"`
}

func (x *GetRoleListRequest) Reset() {
	*x = GetRoleListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[272]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRoleListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRoleListRequest) ProtoMessage() {}

func (x *GetRoleListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[272]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRoleListRequest.ProtoReflect.Descriptor instead.
func (*GetRoleListRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{272}
}

func (x *GetRoleListRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type GetRoleListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of the roles.
	Items []*RoleListItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *GetRoleListResponse) Reset() {
	*x = GetRoleListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[273]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRoleListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRoleListResponse) ProtoMessage() {}

func (x *GetRoleListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[273]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRoleListResponse.ProtoReflect.Descriptor instead.
func (*GetRoleListResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{273}
}

func (x *GetRoleListResponse) GetItems() []*RoleListItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type AdminRoleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"required,hexadecimal,len=24" param:"role_id"
	RoleId string `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty" validate:"required,hexadecimal,len=24" param:"role_id"`
}

func (x *AdminRoleRequest) Reset() {
	*x = AdminRoleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[274]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminRoleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminRoleRequest) ProtoMessage() {}

func (x *AdminRoleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[274]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminRoleRequest.ProtoReflect.Descriptor instead.
func (*AdminRoleRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{274}
}

func (x *AdminRoleRequest) GetRoleId() string {
	if x != nil {
		return x.RoleId
	}
	return ""
}

type MerchantRoleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"required,hexadecimal,len=24" param:"role_id"
	RoleId string `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty" validate:"required,hexadecimal,len=24" param:"role_id"`
	//@inject_tag: validate:"required,hexadecimal,len=24"
	MerchantId string `protobuf:"bytes,2,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty" validate:"required,hexadecimal,len=24"`
}

func (x *MerchantRoleRequest) Reset() {
	*x = MerchantRoleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[275]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerchantRoleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerchantRoleRequest) ProtoMessage() {}

func (x *MerchantRoleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[275]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerchantRoleRequest.ProtoReflect.Descriptor instead.
func (*MerchantRoleRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{275}
}

func (x *MerchantRoleRequest) GetRoleId() string {
	if x != nil {
		return x.RoleId
	}
	return ""
}

func (x *MerchantRoleRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

type Permission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The permission's name that stored in the Casbin server.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The URL that is accessable by this permission.
	Access string `protobuf:"bytes,2,opt,name=access,proto3" json:"access,omitempty"`
}

func (x *Permission) Reset() {
	*x = Permission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[276]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Permission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Permission) ProtoMessage() {}

func (x *Permission) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[276]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Permission.ProtoReflect.Descriptor instead.
func (*Permission) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{276}
}

func (x *Permission) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Permission) GetAccess() string {
	if x != nil {
		return x.Access
	}
	return ""
}

type UserRoleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The response status code.
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// The response error message (if any).
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// The user's role.
	UserRole *UserRole `protobuf:"bytes,3,opt,name=user_role,json=userRole,proto3" json:"user_role,omitempty"`
}

func (x *UserRoleResponse) Reset() {
	*x = UserRoleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[277]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRoleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRoleResponse) ProtoMessage() {}

func (x *UserRoleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[277]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRoleResponse.ProtoReflect.Descriptor instead.
func (*UserRoleResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{277}
}

func (x *UserRoleResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UserRoleResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *UserRoleResponse) GetUserRole() *UserRole {
	if x != nil {
		return x.UserRole
	}
	return nil
}

type GetCountriesListForOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"required,uuid" json:"order_id" query:"order_id" param:"order_id"
	OrderId string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id" validate:"required,uuid" query:"order_id" param:"order_id"`
}

func (x *GetCountriesListForOrderRequest) Reset() {
	*x = GetCountriesListForOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[278]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCountriesListForOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCountriesListForOrderRequest) ProtoMessage() {}

func (x *GetCountriesListForOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[278]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCountriesListForOrderRequest.ProtoReflect.Descriptor instead.
func (*GetCountriesListForOrderRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{278}
}

func (x *GetCountriesListForOrderRequest) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

type GetCountriesListForOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32                 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Item    *CountriesList        `protobuf:"bytes,3,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *GetCountriesListForOrderResponse) Reset() {
	*x = GetCountriesListForOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[279]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCountriesListForOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCountriesListForOrderResponse) ProtoMessage() {}

func (x *GetCountriesListForOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[279]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCountriesListForOrderResponse.ProtoReflect.Descriptor instead.
func (*GetCountriesListForOrderResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{279}
}

func (x *GetCountriesListForOrderResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetCountriesListForOrderResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *GetCountriesListForOrderResponse) GetItem() *CountriesList {
	if x != nil {
		return x.Item
	}
	return nil
}

type VatReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"id" validate:"required,hexadecimal,len=24"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id" validate:"required,hexadecimal,len=24"`
}

func (x *VatReportRequest) Reset() {
	*x = VatReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[280]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VatReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VatReportRequest) ProtoMessage() {}

func (x *VatReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[280]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VatReportRequest.ProtoReflect.Descriptor instead.
func (*VatReportRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{280}
}

func (x *VatReportRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type PrivateTransactionsPaginate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"count"
	//
	// The total number of transactions.
	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count"`
	// @inject_tag: json:"items"
	//
	// The transactions list.
	Items []*OrderViewPrivate `protobuf:"bytes,2,rep,name=items,proto3" json:"items"`
}

func (x *PrivateTransactionsPaginate) Reset() {
	*x = PrivateTransactionsPaginate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[281]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivateTransactionsPaginate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateTransactionsPaginate) ProtoMessage() {}

func (x *PrivateTransactionsPaginate) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[281]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivateTransactionsPaginate.ProtoReflect.Descriptor instead.
func (*PrivateTransactionsPaginate) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{281}
}

func (x *PrivateTransactionsPaginate) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *PrivateTransactionsPaginate) GetItems() []*OrderViewPrivate {
	if x != nil {
		return x.Items
	}
	return nil
}

type VatReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"status"
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status"`
	// @inject_tag: json:"message,omitempty"
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// @inject_tag: json:"vat"
	Vat *VatReport `protobuf:"bytes,3,opt,name=vat,proto3" json:"vat"`
}

func (x *VatReportResponse) Reset() {
	*x = VatReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[282]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VatReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VatReportResponse) ProtoMessage() {}

func (x *VatReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[282]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VatReportResponse.ProtoReflect.Descriptor instead.
func (*VatReportResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{282}
}

func (x *VatReportResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *VatReportResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *VatReportResponse) GetVat() *VatReport {
	if x != nil {
		return x.Vat
	}
	return nil
}

type PrivateTransactionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// @inject_tag: json:"message,omitempty"
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// @inject_tag: json:"data"
	Data *PrivateTransactionsPaginate `protobuf:"bytes,3,opt,name=data,proto3" json:"data"`
}

func (x *PrivateTransactionsResponse) Reset() {
	*x = PrivateTransactionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[283]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivateTransactionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateTransactionsResponse) ProtoMessage() {}

func (x *PrivateTransactionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[283]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivateTransactionsResponse.ProtoReflect.Descriptor instead.
func (*PrivateTransactionsResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{283}
}

func (x *PrivateTransactionsResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *PrivateTransactionsResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *PrivateTransactionsResponse) GetData() *PrivateTransactionsPaginate {
	if x != nil {
		return x.Data
	}
	return nil
}

type ReportFinanceDoneRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoyaltyReportId        string `protobuf:"bytes,1,opt,name=royalty_report_id,json=royaltyReportId,proto3" json:"royalty_report_id,omitempty"`
	MerchantId             string `protobuf:"bytes,2,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	MerchantName           string `protobuf:"bytes,3,opt,name=merchant_name,json=merchantName,proto3" json:"merchant_name,omitempty"`
	PeriodFrom             string `protobuf:"bytes,4,opt,name=period_from,json=periodFrom,proto3" json:"period_from,omitempty"`
	PeriodTo               string `protobuf:"bytes,5,opt,name=period_to,json=periodTo,proto3" json:"period_to,omitempty"`
	LicenseAgreementNumber string `protobuf:"bytes,6,opt,name=license_agreement_number,json=licenseAgreementNumber,proto3" json:"license_agreement_number,omitempty"`
	OperatingCompanyName   string `protobuf:"bytes,7,opt,name=operating_company_name,json=operatingCompanyName,proto3" json:"operating_company_name,omitempty"`
	FileName               string `protobuf:"bytes,8,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	FileContent            []byte `protobuf:"bytes,9,opt,name=file_content,json=fileContent,proto3" json:"file_content,omitempty"`
	PayoutId               string `protobuf:"bytes,10,opt,name=payout_id,json=payoutId,proto3" json:"payout_id,omitempty"`
}

func (x *ReportFinanceDoneRequest) Reset() {
	*x = ReportFinanceDoneRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[284]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportFinanceDoneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportFinanceDoneRequest) ProtoMessage() {}

func (x *ReportFinanceDoneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[284]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportFinanceDoneRequest.ProtoReflect.Descriptor instead.
func (*ReportFinanceDoneRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{284}
}

func (x *ReportFinanceDoneRequest) GetRoyaltyReportId() string {
	if x != nil {
		return x.RoyaltyReportId
	}
	return ""
}

func (x *ReportFinanceDoneRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *ReportFinanceDoneRequest) GetMerchantName() string {
	if x != nil {
		return x.MerchantName
	}
	return ""
}

func (x *ReportFinanceDoneRequest) GetPeriodFrom() string {
	if x != nil {
		return x.PeriodFrom
	}
	return ""
}

func (x *ReportFinanceDoneRequest) GetPeriodTo() string {
	if x != nil {
		return x.PeriodTo
	}
	return ""
}

func (x *ReportFinanceDoneRequest) GetLicenseAgreementNumber() string {
	if x != nil {
		return x.LicenseAgreementNumber
	}
	return ""
}

func (x *ReportFinanceDoneRequest) GetOperatingCompanyName() string {
	if x != nil {
		return x.OperatingCompanyName
	}
	return ""
}

func (x *ReportFinanceDoneRequest) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *ReportFinanceDoneRequest) GetFileContent() []byte {
	if x != nil {
		return x.FileContent
	}
	return nil
}

func (x *ReportFinanceDoneRequest) GetPayoutId() string {
	if x != nil {
		return x.PayoutId
	}
	return ""
}

type SetCustomerPaymentActivityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerId   string               `protobuf:"bytes,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	MerchantId   string               `protobuf:"bytes,2,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	Type         string               `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	ProcessingAt *timestamp.Timestamp `protobuf:"bytes,4,opt,name=processing_at,json=processingAt,proto3" json:"processing_at,omitempty"`
	Amount       float64              `protobuf:"fixed64,5,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *SetCustomerPaymentActivityRequest) Reset() {
	*x = SetCustomerPaymentActivityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[285]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetCustomerPaymentActivityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCustomerPaymentActivityRequest) ProtoMessage() {}

func (x *SetCustomerPaymentActivityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[285]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCustomerPaymentActivityRequest.ProtoReflect.Descriptor instead.
func (*SetCustomerPaymentActivityRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{285}
}

func (x *SetCustomerPaymentActivityRequest) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *SetCustomerPaymentActivityRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *SetCustomerPaymentActivityRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SetCustomerPaymentActivityRequest) GetProcessingAt() *timestamp.Timestamp {
	if x != nil {
		return x.ProcessingAt
	}
	return nil
}

func (x *SetCustomerPaymentActivityRequest) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type ActOfCompletionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"required,hexadecimal,len=24"
	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty" validate:"required,hexadecimal,len=24"`
	// @inject_tag: json:"date_from" validate:"required,date"
	DateFrom string `protobuf:"bytes,2,opt,name=date_from,json=dateFrom,proto3" json:"date_from" validate:"required,date"`
	// @inject_tag: json:"date_to" validate:"required,date"
	DateTo string `protobuf:"bytes,3,opt,name=date_to,json=dateTo,proto3" json:"date_to" validate:"required,date"`
	// @inject_tag: json:"file_type" validate:"omitempty,oneof=pdf xlsx"
	FileType string `protobuf:"bytes,4,opt,name=file_type,json=fileType,proto3" json:"file_type" validate:"omitempty,oneof=pdf xlsx"`
}

func (x *ActOfCompletionRequest) Reset() {
	*x = ActOfCompletionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[286]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActOfCompletionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActOfCompletionRequest) ProtoMessage() {}

func (x *ActOfCompletionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[286]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActOfCompletionRequest.ProtoReflect.Descriptor instead.
func (*ActOfCompletionRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{286}
}

func (x *ActOfCompletionRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *ActOfCompletionRequest) GetDateFrom() string {
	if x != nil {
		return x.DateFrom
	}
	return ""
}

func (x *ActOfCompletionRequest) GetDateTo() string {
	if x != nil {
		return x.DateTo
	}
	return ""
}

func (x *ActOfCompletionRequest) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

type ActOfCompletionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"status"
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status"`
	//@inject_tag: json:"message"
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message"`
	//@inject_tag: json:"item"
	Item *ActOfCompletionDocument `protobuf:"bytes,3,opt,name=item,proto3" json:"item"`
}

func (x *ActOfCompletionResponse) Reset() {
	*x = ActOfCompletionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[287]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActOfCompletionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActOfCompletionResponse) ProtoMessage() {}

func (x *ActOfCompletionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[287]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActOfCompletionResponse.ProtoReflect.Descriptor instead.
func (*ActOfCompletionResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{287}
}

func (x *ActOfCompletionResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ActOfCompletionResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *ActOfCompletionResponse) GetItem() *ActOfCompletionDocument {
	if x != nil {
		return x.Item
	}
	return nil
}

type ActsOfCompletionListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"required,hexadecimal,len=24"
	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty" validate:"required,hexadecimal,len=24"`
}

func (x *ActsOfCompletionListRequest) Reset() {
	*x = ActsOfCompletionListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[288]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActsOfCompletionListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActsOfCompletionListRequest) ProtoMessage() {}

func (x *ActsOfCompletionListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[288]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActsOfCompletionListRequest.ProtoReflect.Descriptor instead.
func (*ActsOfCompletionListRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{288}
}

func (x *ActsOfCompletionListRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

type ActsOfCompletionListItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"date_title"
	DateTitle string `protobuf:"bytes,1,opt,name=date_title,json=dateTitle,proto3" json:"date_title"`
	//@inject_tag: json:"date_from"
	DateFrom string `protobuf:"bytes,2,opt,name=date_from,json=dateFrom,proto3" json:"date_from"`
	//@inject_tag: json:"date_to"
	DateTo string `protobuf:"bytes,3,opt,name=date_to,json=dateTo,proto3" json:"date_to"`
}

func (x *ActsOfCompletionListItem) Reset() {
	*x = ActsOfCompletionListItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[289]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActsOfCompletionListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActsOfCompletionListItem) ProtoMessage() {}

func (x *ActsOfCompletionListItem) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[289]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActsOfCompletionListItem.ProtoReflect.Descriptor instead.
func (*ActsOfCompletionListItem) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{289}
}

func (x *ActsOfCompletionListItem) GetDateTitle() string {
	if x != nil {
		return x.DateTitle
	}
	return ""
}

func (x *ActsOfCompletionListItem) GetDateFrom() string {
	if x != nil {
		return x.DateFrom
	}
	return ""
}

func (x *ActsOfCompletionListItem) GetDateTo() string {
	if x != nil {
		return x.DateTo
	}
	return ""
}

type ActsOfCompletionListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"status"
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status"`
	//@inject_tag: json:"message"
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message"`
	//@inject_tag: json:"items"
	Items []*ActsOfCompletionListItem `protobuf:"bytes,3,rep,name=items,proto3" json:"items"`
}

func (x *ActsOfCompletionListResponse) Reset() {
	*x = ActsOfCompletionListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[290]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActsOfCompletionListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActsOfCompletionListResponse) ProtoMessage() {}

func (x *ActsOfCompletionListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[290]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActsOfCompletionListResponse.ProtoReflect.Descriptor instead.
func (*ActsOfCompletionListResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{290}
}

func (x *ActsOfCompletionListResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ActsOfCompletionListResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *ActsOfCompletionListResponse) GetItems() []*ActsOfCompletionListItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type GetDashboardCustomerReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32                    `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message *ResponseErrorMessage    `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Item    *DashboardCustomerReport `protobuf:"bytes,3,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *GetDashboardCustomerReportResponse) Reset() {
	*x = GetDashboardCustomerReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[291]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDashboardCustomerReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDashboardCustomerReportResponse) ProtoMessage() {}

func (x *GetDashboardCustomerReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[291]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDashboardCustomerReportResponse.ProtoReflect.Descriptor instead.
func (*GetDashboardCustomerReportResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{291}
}

func (x *GetDashboardCustomerReportResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetDashboardCustomerReportResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *GetDashboardCustomerReportResponse) GetItem() *DashboardCustomerReport {
	if x != nil {
		return x.Item
	}
	return nil
}

type DashboardCustomerReportArpuRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"required,hexadecimal,len=24"
	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty" validate:"required,hexadecimal,len=24"`
	//@inject_tag: validate:"required"
	CustomerId string `protobuf:"bytes,2,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty" validate:"required"`
}

func (x *DashboardCustomerReportArpuRequest) Reset() {
	*x = DashboardCustomerReportArpuRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[292]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardCustomerReportArpuRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardCustomerReportArpuRequest) ProtoMessage() {}

func (x *DashboardCustomerReportArpuRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[292]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardCustomerReportArpuRequest.ProtoReflect.Descriptor instead.
func (*DashboardCustomerReportArpuRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{292}
}

func (x *DashboardCustomerReportArpuRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *DashboardCustomerReportArpuRequest) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

type DashboardCustomerReportArpuResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32                 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	//@inject_tag: json:"item"
	Item *DashboardAmountItemWithChart `protobuf:"bytes,3,opt,name=item,proto3" json:"item"`
}

func (x *DashboardCustomerReportArpuResponse) Reset() {
	*x = DashboardCustomerReportArpuResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[293]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardCustomerReportArpuResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardCustomerReportArpuResponse) ProtoMessage() {}

func (x *DashboardCustomerReportArpuResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[293]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardCustomerReportArpuResponse.ProtoReflect.Descriptor instead.
func (*DashboardCustomerReportArpuResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{293}
}

func (x *DashboardCustomerReportArpuResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *DashboardCustomerReportArpuResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *DashboardCustomerReportArpuResponse) GetItem() *DashboardAmountItemWithChart {
	if x != nil {
		return x.Item
	}
	return nil
}

type DashboardCustomerReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"required,hexadecimal,len=24"
	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty" validate:"required,hexadecimal,len=24"`
	//@inject_tag: query:"period" validate:"required,oneof=current_day previous_day current_week previous_week current_month previous_month current_quarter previous_quarter current_year previous_year"
	Period string `protobuf:"bytes,2,opt,name=period,proto3" json:"period,omitempty" query:"period" validate:"required,oneof=current_day previous_day current_week previous_week current_month previous_month current_quarter previous_quarter current_year previous_year"`
}

func (x *DashboardCustomerReportRequest) Reset() {
	*x = DashboardCustomerReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[294]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardCustomerReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardCustomerReportRequest) ProtoMessage() {}

func (x *DashboardCustomerReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[294]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardCustomerReportRequest.ProtoReflect.Descriptor instead.
func (*DashboardCustomerReportRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{294}
}

func (x *DashboardCustomerReportRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *DashboardCustomerReportRequest) GetPeriod() string {
	if x != nil {
		return x.Period
	}
	return ""
}

type DashboardCustomerReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"dynamic"
	Dynamic *DashboardCustomerDynamic `protobuf:"bytes,1,opt,name=dynamic,proto3" json:"dynamic"`
	//@inject_tag: json:"new_customers_percentage"
	NewCustomersPercentage float32 `protobuf:"fixed32,2,opt,name=new_customers_percentage,json=newCustomersPercentage,proto3" json:"new_customers_percentage"`
	//@inject_tag: json:"new_customers_per_day"
	NewCustomersPerDay float32 `protobuf:"fixed32,3,opt,name=new_customers_per_day,json=newCustomersPerDay,proto3" json:"new_customers_per_day"`
	//@inject_tag: json:"returning_customers_percentage"
	ReturningCustomersPercentage float32 `protobuf:"fixed32,4,opt,name=returning_customers_percentage,json=returningCustomersPercentage,proto3" json:"returning_customers_percentage"`
	//@inject_tag: json:"lost_customers_percentage"
	LostCustomersPercentage float32 `protobuf:"fixed32,5,opt,name=lost_customers_percentage,json=lostCustomersPercentage,proto3" json:"lost_customers_percentage"`
	//@inject_tag: json:"arppu"
	Arppu *DashboardCustomerArppu `protobuf:"bytes,6,opt,name=arppu,proto3" json:"arppu"`
	//@inject_tag: json:"top20"
	Top20 *DashboardCustomerTop20 `protobuf:"bytes,7,opt,name=top20,proto3" json:"top20"`
	//@inject_tag: json:"chart" bson:"chart"
	Chart []*DashboardChartItemInt `protobuf:"bytes,8,rep,name=chart,proto3" json:"chart" bson:"chart"`
}

func (x *DashboardCustomerReport) Reset() {
	*x = DashboardCustomerReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[295]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardCustomerReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardCustomerReport) ProtoMessage() {}

func (x *DashboardCustomerReport) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[295]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardCustomerReport.ProtoReflect.Descriptor instead.
func (*DashboardCustomerReport) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{295}
}

func (x *DashboardCustomerReport) GetDynamic() *DashboardCustomerDynamic {
	if x != nil {
		return x.Dynamic
	}
	return nil
}

func (x *DashboardCustomerReport) GetNewCustomersPercentage() float32 {
	if x != nil {
		return x.NewCustomersPercentage
	}
	return 0
}

func (x *DashboardCustomerReport) GetNewCustomersPerDay() float32 {
	if x != nil {
		return x.NewCustomersPerDay
	}
	return 0
}

func (x *DashboardCustomerReport) GetReturningCustomersPercentage() float32 {
	if x != nil {
		return x.ReturningCustomersPercentage
	}
	return 0
}

func (x *DashboardCustomerReport) GetLostCustomersPercentage() float32 {
	if x != nil {
		return x.LostCustomersPercentage
	}
	return 0
}

func (x *DashboardCustomerReport) GetArppu() *DashboardCustomerArppu {
	if x != nil {
		return x.Arppu
	}
	return nil
}

func (x *DashboardCustomerReport) GetTop20() *DashboardCustomerTop20 {
	if x != nil {
		return x.Top20
	}
	return nil
}

func (x *DashboardCustomerReport) GetChart() []*DashboardChartItemInt {
	if x != nil {
		return x.Chart
	}
	return nil
}

type DashboardCustomerDynamic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"current"
	Current int64 `protobuf:"varint,1,opt,name=current,proto3" json:"current"`
	//@inject_tag: json:"previous"
	Previous int64 `protobuf:"varint,2,opt,name=previous,proto3" json:"previous"`
	//@inject_tag: json:"delta"
	Delta float32 `protobuf:"fixed32,3,opt,name=delta,proto3" json:"delta"`
}

func (x *DashboardCustomerDynamic) Reset() {
	*x = DashboardCustomerDynamic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[296]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardCustomerDynamic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardCustomerDynamic) ProtoMessage() {}

func (x *DashboardCustomerDynamic) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[296]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardCustomerDynamic.ProtoReflect.Descriptor instead.
func (*DashboardCustomerDynamic) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{296}
}

func (x *DashboardCustomerDynamic) GetCurrent() int64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *DashboardCustomerDynamic) GetPrevious() int64 {
	if x != nil {
		return x.Previous
	}
	return 0
}

func (x *DashboardCustomerDynamic) GetDelta() float32 {
	if x != nil {
		return x.Delta
	}
	return 0
}

type DashboardCustomerAltv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"revenue"
	Revenue float32 `protobuf:"fixed32,1,opt,name=revenue,proto3" json:"revenue"`
	//@inject_tag: json:"currency"
	Currency string `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency"`
}

func (x *DashboardCustomerAltv) Reset() {
	*x = DashboardCustomerAltv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[297]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardCustomerAltv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardCustomerAltv) ProtoMessage() {}

func (x *DashboardCustomerAltv) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[297]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardCustomerAltv.ProtoReflect.Descriptor instead.
func (*DashboardCustomerAltv) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{297}
}

func (x *DashboardCustomerAltv) GetRevenue() float32 {
	if x != nil {
		return x.Revenue
	}
	return 0
}

func (x *DashboardCustomerAltv) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

type DashboardCustomerArppu struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"revenue"
	Revenue float32 `protobuf:"fixed32,1,opt,name=revenue,proto3" json:"revenue"`
	//@inject_tag: json:"currency"
	Currency string `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency"`
	//@inject_tag: json:"avg_orders"
	AvgOrders float32 `protobuf:"fixed32,3,opt,name=avg_orders,json=avgOrders,proto3" json:"avg_orders"`
}

func (x *DashboardCustomerArppu) Reset() {
	*x = DashboardCustomerArppu{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[298]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardCustomerArppu) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardCustomerArppu) ProtoMessage() {}

func (x *DashboardCustomerArppu) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[298]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardCustomerArppu.ProtoReflect.Descriptor instead.
func (*DashboardCustomerArppu) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{298}
}

func (x *DashboardCustomerArppu) GetRevenue() float32 {
	if x != nil {
		return x.Revenue
	}
	return 0
}

func (x *DashboardCustomerArppu) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *DashboardCustomerArppu) GetAvgOrders() float32 {
	if x != nil {
		return x.AvgOrders
	}
	return 0
}

type DashboardCustomerTop20 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"revenue"
	Revenue float32 `protobuf:"fixed32,1,opt,name=revenue,proto3" json:"revenue"`
	//@inject_tag: json:"currency"
	Currency string `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency"`
	//@inject_tag: json:"customer_count"
	CustomerCount int32 `protobuf:"varint,3,opt,name=customer_count,json=customerCount,proto3" json:"customer_count"`
}

func (x *DashboardCustomerTop20) Reset() {
	*x = DashboardCustomerTop20{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[299]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardCustomerTop20) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardCustomerTop20) ProtoMessage() {}

func (x *DashboardCustomerTop20) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[299]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardCustomerTop20.ProtoReflect.Descriptor instead.
func (*DashboardCustomerTop20) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{299}
}

func (x *DashboardCustomerTop20) GetRevenue() float32 {
	if x != nil {
		return x.Revenue
	}
	return 0
}

func (x *DashboardCustomerTop20) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *DashboardCustomerTop20) GetCustomerCount() int32 {
	if x != nil {
		return x.CustomerCount
	}
	return 0
}

type ListCustomersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"merchant_id"
	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id"`
	//@inject_tag: json:"external_id"
	ExternalId string `protobuf:"bytes,2,opt,name=external_id,json=externalId,proto3" json:"external_id"`
	//@inject_tag: json:"email"
	Email string `protobuf:"bytes,3,opt,name=email,proto3" json:"email"`
	//@inject_tag: json:"phone"
	Phone string `protobuf:"bytes,4,opt,name=phone,proto3" json:"phone"`
	//@inject_tag: json:"name"
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name"`
	//@inject_tag: json:"country"
	Country string `protobuf:"bytes,6,opt,name=country,proto3" json:"country"`
	//@inject_tag: json:"language"
	Language string `protobuf:"bytes,7,opt,name=language,proto3" json:"language"`
	//@inject_tag: json:"amount"
	Amount *AmountFilter `protobuf:"bytes,8,opt,name=amount,proto3" json:"amount"`
	// @inject_tag: query:"limit" validate:"omitempty,numeric,gt=0"
	Limit int64 `protobuf:"varint,9,opt,name=limit,proto3" json:"limit,omitempty" query:"limit" validate:"omitempty,numeric,gt=0"`
	// @inject_tag: query:"offset" validate:"omitempty,numeric,gte=0"
	Offset int64 `protobuf:"varint,10,opt,name=offset,proto3" json:"offset,omitempty" query:"offset" validate:"omitempty,numeric,gte=0"`
	//@inject_tag: json:"quick_search"
	QuickSearch string `protobuf:"bytes,11,opt,name=quick_search,json=quickSearch,proto3" json:"quick_search"`
	//@inject_tag: json:"project_id"
	ProjectId string `protobuf:"bytes,12,opt,name=project_id,json=projectId,proto3" json:"project_id"`
}

func (x *ListCustomersRequest) Reset() {
	*x = ListCustomersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[300]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCustomersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCustomersRequest) ProtoMessage() {}

func (x *ListCustomersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[300]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCustomersRequest.ProtoReflect.Descriptor instead.
func (*ListCustomersRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{300}
}

func (x *ListCustomersRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *ListCustomersRequest) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

func (x *ListCustomersRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *ListCustomersRequest) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *ListCustomersRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListCustomersRequest) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *ListCustomersRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *ListCustomersRequest) GetAmount() *AmountFilter {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *ListCustomersRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListCustomersRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListCustomersRequest) GetQuickSearch() string {
	if x != nil {
		return x.QuickSearch
	}
	return ""
}

func (x *ListCustomersRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

type AmountFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"from"
	From float32 `protobuf:"fixed32,1,opt,name=from,proto3" json:"from"`
	//@inject_tag: json:"to"
	To float32 `protobuf:"fixed32,2,opt,name=to,proto3" json:"to"`
}

func (x *AmountFilter) Reset() {
	*x = AmountFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[301]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AmountFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AmountFilter) ProtoMessage() {}

func (x *AmountFilter) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[301]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AmountFilter.ProtoReflect.Descriptor instead.
func (*AmountFilter) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{301}
}

func (x *AmountFilter) GetFrom() float32 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *AmountFilter) GetTo() float32 {
	if x != nil {
		return x.To
	}
	return 0
}

type ListCustomersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32                 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	//@inject_tag: json:"items"
	Items []*ShortCustomerInfo `protobuf:"bytes,3,rep,name=items,proto3" json:"items"`
	//@inject_tag: json:"count"
	Count int64 `protobuf:"varint,4,opt,name=count,proto3" json:"count"`
}

func (x *ListCustomersResponse) Reset() {
	*x = ListCustomersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[302]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCustomersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCustomersResponse) ProtoMessage() {}

func (x *ListCustomersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[302]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCustomersResponse.ProtoReflect.Descriptor instead.
func (*ListCustomersResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{302}
}

func (x *ListCustomersResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ListCustomersResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *ListCustomersResponse) GetItems() []*ShortCustomerInfo {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListCustomersResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ShortCustomerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"id"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	//@inject_tag: json:"external_id"
	ExternalId string `protobuf:"bytes,2,opt,name=external_id,json=externalId,proto3" json:"external_id"`
	//@inject_tag: json:"country"
	Country string `protobuf:"bytes,3,opt,name=country,proto3" json:"country"`
	//@inject_tag: json:"language"
	Language string `protobuf:"bytes,4,opt,name=language,proto3" json:"language"`
	//@inject_tag: json:"last_order"
	LastOrder *timestamp.Timestamp `protobuf:"bytes,5,opt,name=last_order,json=lastOrder,proto3" json:"last_order"`
	//@inject_tag: json:"orders"
	Orders int64 `protobuf:"varint,6,opt,name=orders,proto3" json:"orders"`
	//@inject_tag: json:"revenue"
	Revenue float64 `protobuf:"fixed64,7,opt,name=revenue,proto3" json:"revenue"`
	//@inject_tag: json:"email"
	Email string `protobuf:"bytes,8,opt,name=email,proto3" json:"email"`
	//@inject_tag: json:"currency"
	Currency string `protobuf:"bytes,9,opt,name=currency,proto3" json:"currency"`
}

func (x *ShortCustomerInfo) Reset() {
	*x = ShortCustomerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[303]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShortCustomerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShortCustomerInfo) ProtoMessage() {}

func (x *ShortCustomerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[303]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShortCustomerInfo.ProtoReflect.Descriptor instead.
func (*ShortCustomerInfo) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{303}
}

func (x *ShortCustomerInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ShortCustomerInfo) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

func (x *ShortCustomerInfo) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *ShortCustomerInfo) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *ShortCustomerInfo) GetLastOrder() *timestamp.Timestamp {
	if x != nil {
		return x.LastOrder
	}
	return nil
}

func (x *ShortCustomerInfo) GetOrders() int64 {
	if x != nil {
		return x.Orders
	}
	return 0
}

func (x *ShortCustomerInfo) GetRevenue() float64 {
	if x != nil {
		return x.Revenue
	}
	return 0
}

func (x *ShortCustomerInfo) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *ShortCustomerInfo) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

type GetCustomerInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	UserId     string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *GetCustomerInfoRequest) Reset() {
	*x = GetCustomerInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[304]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomerInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomerInfoRequest) ProtoMessage() {}

func (x *GetCustomerInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[304]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomerInfoRequest.ProtoReflect.Descriptor instead.
func (*GetCustomerInfoRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{304}
}

func (x *GetCustomerInfoRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *GetCustomerInfoRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type GetCustomerInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32                 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Item    *Customer             `protobuf:"bytes,3,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *GetCustomerInfoResponse) Reset() {
	*x = GetCustomerInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[305]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomerInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomerInfoResponse) ProtoMessage() {}

func (x *GetCustomerInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[305]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomerInfoResponse.ProtoReflect.Descriptor instead.
func (*GetCustomerInfoResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{305}
}

func (x *GetCustomerInfoResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetCustomerInfoResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *GetCustomerInfoResponse) GetItem() *Customer {
	if x != nil {
		return x.Item
	}
	return nil
}

type DeserializeCookieRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cookie string `protobuf:"bytes,1,opt,name=cookie,proto3" json:"cookie,omitempty"`
}

func (x *DeserializeCookieRequest) Reset() {
	*x = DeserializeCookieRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[306]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeserializeCookieRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeserializeCookieRequest) ProtoMessage() {}

func (x *DeserializeCookieRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[306]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeserializeCookieRequest.ProtoReflect.Descriptor instead.
func (*DeserializeCookieRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{306}
}

func (x *DeserializeCookieRequest) GetCookie() string {
	if x != nil {
		return x.Cookie
	}
	return ""
}

type DeserializeCookieResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32                 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Item    *BrowserCookie        `protobuf:"bytes,3,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *DeserializeCookieResponse) Reset() {
	*x = DeserializeCookieResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[307]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeserializeCookieResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeserializeCookieResponse) ProtoMessage() {}

func (x *DeserializeCookieResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[307]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeserializeCookieResponse.ProtoReflect.Descriptor instead.
func (*DeserializeCookieResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{307}
}

func (x *DeserializeCookieResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *DeserializeCookieResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *DeserializeCookieResponse) GetItem() *BrowserCookie {
	if x != nil {
		return x.Item
	}
	return nil
}

type DeleteCustomerCardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CustomerId string `protobuf:"bytes,2,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
}

func (x *DeleteCustomerCardRequest) Reset() {
	*x = DeleteCustomerCardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[308]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCustomerCardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCustomerCardRequest) ProtoMessage() {}

func (x *DeleteCustomerCardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[308]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCustomerCardRequest.ProtoReflect.Descriptor instead.
func (*DeleteCustomerCardRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{308}
}

func (x *DeleteCustomerCardRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteCustomerCardRequest) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

type GetSubscriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: param:"id"
	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" param:"id"`
	Cookie string `protobuf:"bytes,2,opt,name=cookie,proto3" json:"cookie,omitempty"`
	// @inject_tag: param:"merchant_id"
	MerchantId string `protobuf:"bytes,4,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty" param:"merchant_id"`
	// @inject_tag: param:"project_id"
	ProjectId string `protobuf:"bytes,5,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty" param:"project_id"`
}

func (x *GetSubscriptionRequest) Reset() {
	*x = GetSubscriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[309]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubscriptionRequest) ProtoMessage() {}

func (x *GetSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[309]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*GetSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{309}
}

func (x *GetSubscriptionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetSubscriptionRequest) GetCookie() string {
	if x != nil {
		return x.Cookie
	}
	return ""
}

func (x *GetSubscriptionRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *GetSubscriptionRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

type GetSubscriptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       int32                  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message      *ResponseErrorMessage  `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Subscription *RecurringSubscription `protobuf:"bytes,3,opt,name=subscription,proto3" json:"subscription,omitempty"`
}

func (x *GetSubscriptionResponse) Reset() {
	*x = GetSubscriptionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[310]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubscriptionResponse) ProtoMessage() {}

func (x *GetSubscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[310]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubscriptionResponse.ProtoReflect.Descriptor instead.
func (*GetSubscriptionResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{310}
}

func (x *GetSubscriptionResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetSubscriptionResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *GetSubscriptionResponse) GetSubscription() *RecurringSubscription {
	if x != nil {
		return x.Subscription
	}
	return nil
}

type FindSubscriptionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cookie string `protobuf:"bytes,1,opt,name=cookie,proto3" json:"cookie,omitempty"`
	// @inject_tag: query:"limit" validate:"omitempty,numeric,gt=0"
	Limit int64 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty" query:"limit" validate:"omitempty,numeric,gt=0"`
	// @inject_tag: query:"offset" validate:"omitempty,numeric,gte=0"
	Offset int64 `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty" query:"offset" validate:"omitempty,numeric,gte=0"`
	// @inject_tag: json:"merchant_id" param:"merchant_id"
	MerchantId string `protobuf:"bytes,5,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id" param:"merchant_id"`
	// @inject_tag: query:"quick_filter"
	QuickFilter string `protobuf:"bytes,6,opt,name=quick_filter,json=quickFilter,proto3" json:"quick_filter,omitempty" query:"quick_filter"`
	// @inject_tag: query:"user_id" validate:"omitempty,hexadecimal,len=24"
	UserId string `protobuf:"bytes,7,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty" query:"user_id" validate:"omitempty,hexadecimal,len=24"`
	// @inject_tag: query:"status" validate:"omitempty,oneof=active canceled no_renewing"
	Status string `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty" query:"status" validate:"omitempty,oneof=active canceled no_renewing"`
	// @inject_tag: query:"datetime_from" validate:"omitempty,datetime"
	DatetimeFrom string `protobuf:"bytes,9,opt,name=datetime_from,json=datetimeFrom,proto3" json:"datetime_from,omitempty" query:"datetime_from" validate:"omitempty,datetime"`
	// @inject_tag: query:"datetime_to" validate:"omitempty,datetime"
	DatetimeTo string `protobuf:"bytes,10,opt,name=datetime_to,json=datetimeTo,proto3" json:"datetime_to,omitempty" query:"datetime_to" validate:"omitempty,datetime"`
	// @inject_tag: query:"plan_id"
	PlanId string `protobuf:"bytes,11,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty" query:"plan_id"`
	// @inject_tag: query:"sort[]"
	Sort []string `protobuf:"bytes,12,rep,name=sort,proto3" json:"sort,omitempty" query:"sort[]"`
	// @inject_tag: query:"locale"
	Locale string `protobuf:"bytes,13,opt,name=locale,proto3" json:"locale,omitempty" query:"locale"`
}

func (x *FindSubscriptionsRequest) Reset() {
	*x = FindSubscriptionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[311]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindSubscriptionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindSubscriptionsRequest) ProtoMessage() {}

func (x *FindSubscriptionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[311]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindSubscriptionsRequest.ProtoReflect.Descriptor instead.
func (*FindSubscriptionsRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{311}
}

func (x *FindSubscriptionsRequest) GetCookie() string {
	if x != nil {
		return x.Cookie
	}
	return ""
}

func (x *FindSubscriptionsRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *FindSubscriptionsRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *FindSubscriptionsRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *FindSubscriptionsRequest) GetQuickFilter() string {
	if x != nil {
		return x.QuickFilter
	}
	return ""
}

func (x *FindSubscriptionsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *FindSubscriptionsRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *FindSubscriptionsRequest) GetDatetimeFrom() string {
	if x != nil {
		return x.DatetimeFrom
	}
	return ""
}

func (x *FindSubscriptionsRequest) GetDatetimeTo() string {
	if x != nil {
		return x.DatetimeTo
	}
	return ""
}

func (x *FindSubscriptionsRequest) GetPlanId() string {
	if x != nil {
		return x.PlanId
	}
	return ""
}

func (x *FindSubscriptionsRequest) GetSort() []string {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *FindSubscriptionsRequest) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

type FindSubscriptionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"list"
	List    []*RecurringSubscription `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Message *ResponseErrorMessage    `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Status  int32                    `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	//@inject_tag: json:"count"
	Count int64 `protobuf:"varint,4,opt,name=count,proto3" json:"count"`
}

func (x *FindSubscriptionsResponse) Reset() {
	*x = FindSubscriptionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[312]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindSubscriptionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindSubscriptionsResponse) ProtoMessage() {}

func (x *FindSubscriptionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[312]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindSubscriptionsResponse.ProtoReflect.Descriptor instead.
func (*FindSubscriptionsResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{312}
}

func (x *FindSubscriptionsResponse) GetList() []*RecurringSubscription {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *FindSubscriptionsResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *FindSubscriptionsResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *FindSubscriptionsResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type GetRecurringPlanStatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"merchant_id" param:"merchant_id"
	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id" param:"merchant_id"`
	// @inject_tag: query:"plan_id"
	PlanId string `protobuf:"bytes,2,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty" query:"plan_id"`
	// @inject_tag: query:"datetime_from" validate:"omitempty,datetime"
	DatetimeFrom string `protobuf:"bytes,3,opt,name=datetime_from,json=datetimeFrom,proto3" json:"datetime_from,omitempty" query:"datetime_from" validate:"omitempty,datetime"`
	// @inject_tag: query:"datetime_to" validate:"omitempty,datetime"
	DatetimeTo string `protobuf:"bytes,4,opt,name=datetime_to,json=datetimeTo,proto3" json:"datetime_to,omitempty" query:"datetime_to" validate:"omitempty,datetime"`
}

func (x *GetRecurringPlanStatRequest) Reset() {
	*x = GetRecurringPlanStatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[313]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecurringPlanStatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecurringPlanStatRequest) ProtoMessage() {}

func (x *GetRecurringPlanStatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[313]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecurringPlanStatRequest.ProtoReflect.Descriptor instead.
func (*GetRecurringPlanStatRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{313}
}

func (x *GetRecurringPlanStatRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *GetRecurringPlanStatRequest) GetPlanId() string {
	if x != nil {
		return x.PlanId
	}
	return ""
}

func (x *GetRecurringPlanStatRequest) GetDatetimeFrom() string {
	if x != nil {
		return x.DatetimeFrom
	}
	return ""
}

func (x *GetRecurringPlanStatRequest) GetDatetimeTo() string {
	if x != nil {
		return x.DatetimeTo
	}
	return ""
}

type GetRecurringPlanStatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message *ResponseErrorMessage `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Status  int32                 `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	// @inject_tag: json:"active_subscriptions_count"
	ActiveSubscriptionsCount int64 `protobuf:"varint,3,opt,name=active_subscriptions_count,json=activeSubscriptionsCount,proto3" json:"active_subscriptions_count"`
	// @inject_tag: json:"canceled_subscriptions_count"
	CanceledSubscriptionsCount int64 `protobuf:"varint,4,opt,name=canceled_subscriptions_count,json=canceledSubscriptionsCount,proto3" json:"canceled_subscriptions_count"`
	// @inject_tag: json:"no_renewing_subscriptions_count"
	NoRenewingSubscriptionsCount int64 `protobuf:"varint,5,opt,name=no_renewing_subscriptions_count,json=noRenewingSubscriptionsCount,proto3" json:"no_renewing_subscriptions_count"`
	// @inject_tag: json:"reactivate_subscriptions_count"
	ReactivateSubscriptionsCount int64 `protobuf:"varint,6,opt,name=reactivate_subscriptions_count,json=reactivateSubscriptionsCount,proto3" json:"reactivate_subscriptions_count"`
}

func (x *GetRecurringPlanStatResponse) Reset() {
	*x = GetRecurringPlanStatResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[314]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecurringPlanStatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecurringPlanStatResponse) ProtoMessage() {}

func (x *GetRecurringPlanStatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[314]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecurringPlanStatResponse.ProtoReflect.Descriptor instead.
func (*GetRecurringPlanStatResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{314}
}

func (x *GetRecurringPlanStatResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *GetRecurringPlanStatResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetRecurringPlanStatResponse) GetActiveSubscriptionsCount() int64 {
	if x != nil {
		return x.ActiveSubscriptionsCount
	}
	return 0
}

func (x *GetRecurringPlanStatResponse) GetCanceledSubscriptionsCount() int64 {
	if x != nil {
		return x.CanceledSubscriptionsCount
	}
	return 0
}

func (x *GetRecurringPlanStatResponse) GetNoRenewingSubscriptionsCount() int64 {
	if x != nil {
		return x.NoRenewingSubscriptionsCount
	}
	return 0
}

func (x *GetRecurringPlanStatResponse) GetReactivateSubscriptionsCount() int64 {
	if x != nil {
		return x.ReactivateSubscriptionsCount
	}
	return 0
}

type AddRecurringPlanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32                 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Item    *RecurringPlan        `protobuf:"bytes,3,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *AddRecurringPlanResponse) Reset() {
	*x = AddRecurringPlanResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[315]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddRecurringPlanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddRecurringPlanResponse) ProtoMessage() {}

func (x *AddRecurringPlanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[315]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddRecurringPlanResponse.ProtoReflect.Descriptor instead.
func (*AddRecurringPlanResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{315}
}

func (x *AddRecurringPlanResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *AddRecurringPlanResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *AddRecurringPlanResponse) GetItem() *RecurringPlan {
	if x != nil {
		return x.Item
	}
	return nil
}

type UpdateRecurringPlanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32                 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UpdateRecurringPlanResponse) Reset() {
	*x = UpdateRecurringPlanResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[316]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRecurringPlanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRecurringPlanResponse) ProtoMessage() {}

func (x *UpdateRecurringPlanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[316]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRecurringPlanResponse.ProtoReflect.Descriptor instead.
func (*UpdateRecurringPlanResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{316}
}

func (x *UpdateRecurringPlanResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UpdateRecurringPlanResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

type EnableRecurringPlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"merchant_id"
	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id"`
	// @inject_tag: json:"project_id" validate:"required,hexadecimal,len=24" param:"project_id"
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id" validate:"required,hexadecimal,len=24" param:"project_id"`
	//@inject_tag: json:"plan_id" validate:"required,hexadecimal,len=24" param:"plan_id"
	PlanId string `protobuf:"bytes,3,opt,name=plan_id,json=planId,proto3" json:"plan_id" validate:"required,hexadecimal,len=24" param:"plan_id"`
}

func (x *EnableRecurringPlanRequest) Reset() {
	*x = EnableRecurringPlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[317]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableRecurringPlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableRecurringPlanRequest) ProtoMessage() {}

func (x *EnableRecurringPlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[317]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableRecurringPlanRequest.ProtoReflect.Descriptor instead.
func (*EnableRecurringPlanRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{317}
}

func (x *EnableRecurringPlanRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *EnableRecurringPlanRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *EnableRecurringPlanRequest) GetPlanId() string {
	if x != nil {
		return x.PlanId
	}
	return ""
}

type EnableRecurringPlanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32                 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *EnableRecurringPlanResponse) Reset() {
	*x = EnableRecurringPlanResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[318]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableRecurringPlanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableRecurringPlanResponse) ProtoMessage() {}

func (x *EnableRecurringPlanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[318]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableRecurringPlanResponse.ProtoReflect.Descriptor instead.
func (*EnableRecurringPlanResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{318}
}

func (x *EnableRecurringPlanResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *EnableRecurringPlanResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

type DisableRecurringPlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"merchant_id"
	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id"`
	// @inject_tag: json:"project_id" validate:"required,hexadecimal,len=24" param:"project_id"
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id" validate:"required,hexadecimal,len=24" param:"project_id"`
	//@inject_tag: json:"plan_id" validate:"required,hexadecimal,len=24" param:"plan_id"
	PlanId string `protobuf:"bytes,3,opt,name=plan_id,json=planId,proto3" json:"plan_id" validate:"required,hexadecimal,len=24" param:"plan_id"`
}

func (x *DisableRecurringPlanRequest) Reset() {
	*x = DisableRecurringPlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[319]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableRecurringPlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableRecurringPlanRequest) ProtoMessage() {}

func (x *DisableRecurringPlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[319]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableRecurringPlanRequest.ProtoReflect.Descriptor instead.
func (*DisableRecurringPlanRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{319}
}

func (x *DisableRecurringPlanRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *DisableRecurringPlanRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *DisableRecurringPlanRequest) GetPlanId() string {
	if x != nil {
		return x.PlanId
	}
	return ""
}

type DisableRecurringPlanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32                 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DisableRecurringPlanResponse) Reset() {
	*x = DisableRecurringPlanResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[320]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableRecurringPlanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableRecurringPlanResponse) ProtoMessage() {}

func (x *DisableRecurringPlanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[320]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableRecurringPlanResponse.ProtoReflect.Descriptor instead.
func (*DisableRecurringPlanResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{320}
}

func (x *DisableRecurringPlanResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *DisableRecurringPlanResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

type DeleteRecurringPlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"merchant_id"
	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id"`
	// @inject_tag: json:"project_id" validate:"required,hexadecimal,len=24" param:"project_id"
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id" validate:"required,hexadecimal,len=24" param:"project_id"`
	//@inject_tag: json:"plan_id" validate:"required,hexadecimal,len=24" param:"plan_id"
	PlanId string `protobuf:"bytes,3,opt,name=plan_id,json=planId,proto3" json:"plan_id" validate:"required,hexadecimal,len=24" param:"plan_id"`
}

func (x *DeleteRecurringPlanRequest) Reset() {
	*x = DeleteRecurringPlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[321]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRecurringPlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRecurringPlanRequest) ProtoMessage() {}

func (x *DeleteRecurringPlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[321]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRecurringPlanRequest.ProtoReflect.Descriptor instead.
func (*DeleteRecurringPlanRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{321}
}

func (x *DeleteRecurringPlanRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *DeleteRecurringPlanRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *DeleteRecurringPlanRequest) GetPlanId() string {
	if x != nil {
		return x.PlanId
	}
	return ""
}

type DeleteRecurringPlanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32                 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteRecurringPlanResponse) Reset() {
	*x = DeleteRecurringPlanResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[322]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRecurringPlanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRecurringPlanResponse) ProtoMessage() {}

func (x *DeleteRecurringPlanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[322]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRecurringPlanResponse.ProtoReflect.Descriptor instead.
func (*DeleteRecurringPlanResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{322}
}

func (x *DeleteRecurringPlanResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *DeleteRecurringPlanResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

type GetRecurringPlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: param:"merchant_id"
	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty" param:"merchant_id"`
	// @inject_tag: json:"project_id" validate:"omitempty,hexadecimal,len=24" param:"project_id"
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id" validate:"omitempty,hexadecimal,len=24" param:"project_id"`
	//@inject_tag: json:"plan_id" validate:"required,hexadecimal,len=24" param:"plan_id"
	PlanId string `protobuf:"bytes,3,opt,name=plan_id,json=planId,proto3" json:"plan_id" validate:"required,hexadecimal,len=24" param:"plan_id"`
}

func (x *GetRecurringPlanRequest) Reset() {
	*x = GetRecurringPlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[323]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecurringPlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecurringPlanRequest) ProtoMessage() {}

func (x *GetRecurringPlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[323]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecurringPlanRequest.ProtoReflect.Descriptor instead.
func (*GetRecurringPlanRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{323}
}

func (x *GetRecurringPlanRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *GetRecurringPlanRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *GetRecurringPlanRequest) GetPlanId() string {
	if x != nil {
		return x.PlanId
	}
	return ""
}

type GetRecurringPlanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32                 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Item    *RecurringPlan        `protobuf:"bytes,3,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *GetRecurringPlanResponse) Reset() {
	*x = GetRecurringPlanResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[324]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecurringPlanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecurringPlanResponse) ProtoMessage() {}

func (x *GetRecurringPlanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[324]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecurringPlanResponse.ProtoReflect.Descriptor instead.
func (*GetRecurringPlanResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{324}
}

func (x *GetRecurringPlanResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetRecurringPlanResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *GetRecurringPlanResponse) GetItem() *RecurringPlan {
	if x != nil {
		return x.Item
	}
	return nil
}

type GetRecurringPlansRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: param:"merchant_id"
	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty" param:"merchant_id"`
	// @inject_tag: json:"project_id" validate:"required,hexadecimal,len=24" param:"project_id"
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id" validate:"required,hexadecimal,len=24" param:"project_id"`
	// @inject_tag: json:"external_id" query:"external_id"
	ExternalId string `protobuf:"bytes,3,opt,name=external_id,json=externalId,proto3" json:"external_id" query:"external_id"`
	// @inject_tag: json:"group_id" query:"group_id"
	GroupId string `protobuf:"bytes,4,opt,name=group_id,json=groupId,proto3" json:"group_id" query:"group_id"`
	// @inject_tag: json:"query" query:"query"
	Query string `protobuf:"bytes,5,opt,name=query,proto3" json:"query" query:"query"`
	// @inject_tag: query:"limit" query:"limit" validate:"omitempty,numeric,gt=0"
	Limit int32 `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty" query:"limit" query:"limit" validate:"omitempty,numeric,gt=0"`
	// @inject_tag: query:"offset" query:"offset" validate:"omitempty,numeric,gte=0"
	Offset int32 `protobuf:"varint,7,opt,name=offset,proto3" json:"offset,omitempty" query:"offset" query:"offset" validate:"omitempty,numeric,gte=0"`
	// @inject_tag: query:"sort[]"
	Sort []string `protobuf:"bytes,8,rep,name=sort,proto3" json:"sort,omitempty" query:"sort[]"`
	// @inject_tag: query:"locale"
	Locale string `protobuf:"bytes,9,opt,name=locale,proto3" json:"locale,omitempty" query:"locale"`
}

func (x *GetRecurringPlansRequest) Reset() {
	*x = GetRecurringPlansRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[325]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecurringPlansRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecurringPlansRequest) ProtoMessage() {}

func (x *GetRecurringPlansRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[325]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecurringPlansRequest.ProtoReflect.Descriptor instead.
func (*GetRecurringPlansRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{325}
}

func (x *GetRecurringPlansRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *GetRecurringPlansRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *GetRecurringPlansRequest) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

func (x *GetRecurringPlansRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *GetRecurringPlansRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *GetRecurringPlansRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetRecurringPlansRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetRecurringPlansRequest) GetSort() []string {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *GetRecurringPlansRequest) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

type GetRecurringPlansResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32                 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// @inject_tag: json:"list"
	List []*RecurringPlan `protobuf:"bytes,3,rep,name=list,proto3" json:"list"`
	// @inject_tag: json:"count"
	Count int32 `protobuf:"varint,4,opt,name=count,proto3" json:"count"`
}

func (x *GetRecurringPlansResponse) Reset() {
	*x = GetRecurringPlansResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[326]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecurringPlansResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecurringPlansResponse) ProtoMessage() {}

func (x *GetRecurringPlansResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[326]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecurringPlansResponse.ProtoReflect.Descriptor instead.
func (*GetRecurringPlansResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{326}
}

func (x *GetRecurringPlansResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetRecurringPlansResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *GetRecurringPlansResponse) GetList() []*RecurringPlan {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetRecurringPlansResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type FindExpiredSubscriptionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExpireAt string `protobuf:"bytes,1,opt,name=expire_at,json=expireAt,proto3" json:"expire_at,omitempty"`
}

func (x *FindExpiredSubscriptionsRequest) Reset() {
	*x = FindExpiredSubscriptionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[327]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindExpiredSubscriptionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindExpiredSubscriptionsRequest) ProtoMessage() {}

func (x *FindExpiredSubscriptionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[327]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindExpiredSubscriptionsRequest.ProtoReflect.Descriptor instead.
func (*FindExpiredSubscriptionsRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{327}
}

func (x *FindExpiredSubscriptionsRequest) GetExpireAt() string {
	if x != nil {
		return x.ExpireAt
	}
	return ""
}

type FindExpiredSubscriptionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32                 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// @inject_tag: json:"list"
	List []*RecurringSubscription `protobuf:"bytes,3,rep,name=list,proto3" json:"list"`
}

func (x *FindExpiredSubscriptionsResponse) Reset() {
	*x = FindExpiredSubscriptionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[328]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindExpiredSubscriptionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindExpiredSubscriptionsResponse) ProtoMessage() {}

func (x *FindExpiredSubscriptionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[328]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindExpiredSubscriptionsResponse.ProtoReflect.Descriptor instead.
func (*FindExpiredSubscriptionsResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{328}
}

func (x *FindExpiredSubscriptionsResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *FindExpiredSubscriptionsResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *FindExpiredSubscriptionsResponse) GetList() []*RecurringSubscription {
	if x != nil {
		return x.List
	}
	return nil
}

type DeleteSubscriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteSubscriptionRequest) Reset() {
	*x = DeleteSubscriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[329]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSubscriptionRequest) ProtoMessage() {}

func (x *DeleteSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[329]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*DeleteSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{329}
}

func (x *DeleteSubscriptionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteSubscriptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteSubscriptionResponse) Reset() {
	*x = DeleteSubscriptionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[330]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSubscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSubscriptionResponse) ProtoMessage() {}

func (x *DeleteSubscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[330]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSubscriptionResponse.ProtoReflect.Descriptor instead.
func (*DeleteSubscriptionResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{330}
}

func (x *DeleteSubscriptionResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *DeleteSubscriptionResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetCustomerShortInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"required"
	Cookie string `protobuf:"bytes,1,opt,name=cookie,proto3" json:"cookie,omitempty" validate:"required"`
}

func (x *GetCustomerShortInfoRequest) Reset() {
	*x = GetCustomerShortInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[331]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomerShortInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomerShortInfoRequest) ProtoMessage() {}

func (x *GetCustomerShortInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[331]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomerShortInfoRequest.ProtoReflect.Descriptor instead.
func (*GetCustomerShortInfoRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{331}
}

func (x *GetCustomerShortInfoRequest) GetCookie() string {
	if x != nil {
		return x.Cookie
	}
	return ""
}

type GetCustomerShortInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32                 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Item    *CustomerShortInfo    `protobuf:"bytes,3,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *GetCustomerShortInfoResponse) Reset() {
	*x = GetCustomerShortInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[332]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomerShortInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomerShortInfoResponse) ProtoMessage() {}

func (x *GetCustomerShortInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[332]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomerShortInfoResponse.ProtoReflect.Descriptor instead.
func (*GetCustomerShortInfoResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{332}
}

func (x *GetCustomerShortInfoResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetCustomerShortInfoResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *GetCustomerShortInfoResponse) GetItem() *CustomerShortInfo {
	if x != nil {
		return x.Item
	}
	return nil
}

type CustomerShortInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Id    string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CustomerShortInfo) Reset() {
	*x = CustomerShortInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[333]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerShortInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerShortInfo) ProtoMessage() {}

func (x *CustomerShortInfo) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[333]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerShortInfo.ProtoReflect.Descriptor instead.
func (*CustomerShortInfo) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{333}
}

func (x *CustomerShortInfo) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *CustomerShortInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CustomerShortInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetSubscriptionsOrdersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cookie string `protobuf:"bytes,1,opt,name=cookie,proto3" json:"cookie,omitempty"`
	// @inject_tag: query:"limit" validate:"omitempty,numeric,gt=0"
	Limit int64 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty" query:"limit" validate:"omitempty,numeric,gt=0"`
	// @inject_tag: query:"offset" validate:"omitempty,numeric,gte=0"
	Offset int64 `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty" query:"offset" validate:"omitempty,numeric,gte=0"`
	// @inject_tag: param:"merchant_id"
	MerchantId string `protobuf:"bytes,6,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty" param:"merchant_id"`
	// @inject_tag: query:"project_id" validate:"omitempty,hexadecimal,len=24"
	ProjectId string `protobuf:"bytes,7,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty" query:"project_id" validate:"omitempty,hexadecimal,len=24"`
	// @inject_tag: query:"subscription_id" validate:"omitempty,hexadecimal,len=24"
	SubscriptionId string `protobuf:"bytes,8,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty" query:"subscription_id" validate:"omitempty,hexadecimal,len=24"`
	// @inject_tag: query:"user_id" validate:"omitempty,hexadecimal,len=24"
	UserId string `protobuf:"bytes,9,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty" query:"user_id" validate:"omitempty,hexadecimal,len=24"`
	// @inject_tag: query:"status" validate:"omitempty,oneof=processed canceled rejected refunded"
	Status string `protobuf:"bytes,10,opt,name=status,proto3" json:"status,omitempty" query:"status" validate:"omitempty,oneof=processed canceled rejected refunded"`
	// @inject_tag: query:"datetime_from" validate:"omitempty,datetime"
	DatetimeFrom string `protobuf:"bytes,11,opt,name=datetime_from,json=datetimeFrom,proto3" json:"datetime_from,omitempty" query:"datetime_from" validate:"omitempty,datetime"`
	// @inject_tag: query:"datetime_to" validate:"omitempty,datetime"
	DatetimeTo string `protobuf:"bytes,12,opt,name=datetime_to,json=datetimeTo,proto3" json:"datetime_to,omitempty" query:"datetime_to" validate:"omitempty,datetime"`
}

func (x *GetSubscriptionsOrdersRequest) Reset() {
	*x = GetSubscriptionsOrdersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[334]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubscriptionsOrdersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubscriptionsOrdersRequest) ProtoMessage() {}

func (x *GetSubscriptionsOrdersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[334]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubscriptionsOrdersRequest.ProtoReflect.Descriptor instead.
func (*GetSubscriptionsOrdersRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{334}
}

func (x *GetSubscriptionsOrdersRequest) GetCookie() string {
	if x != nil {
		return x.Cookie
	}
	return ""
}

func (x *GetSubscriptionsOrdersRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetSubscriptionsOrdersRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetSubscriptionsOrdersRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *GetSubscriptionsOrdersRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *GetSubscriptionsOrdersRequest) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

func (x *GetSubscriptionsOrdersRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetSubscriptionsOrdersRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetSubscriptionsOrdersRequest) GetDatetimeFrom() string {
	if x != nil {
		return x.DatetimeFrom
	}
	return ""
}

func (x *GetSubscriptionsOrdersRequest) GetDatetimeTo() string {
	if x != nil {
		return x.DatetimeTo
	}
	return ""
}

type GetSubscriptionsOrdersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32                 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// @inject_tag: json:"list"
	List []*SubscriptionOrder `protobuf:"bytes,3,rep,name=list,proto3" json:"list"`
	// @inject_tag: json:"count"
	Count int64 `protobuf:"varint,4,opt,name=count,proto3" json:"count"`
}

func (x *GetSubscriptionsOrdersResponse) Reset() {
	*x = GetSubscriptionsOrdersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[335]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubscriptionsOrdersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubscriptionsOrdersResponse) ProtoMessage() {}

func (x *GetSubscriptionsOrdersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[335]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubscriptionsOrdersResponse.ProtoReflect.Descriptor instead.
func (*GetSubscriptionsOrdersResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{335}
}

func (x *GetSubscriptionsOrdersResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetSubscriptionsOrdersResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *GetSubscriptionsOrdersResponse) GetList() []*SubscriptionOrder {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetSubscriptionsOrdersResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type DeleteRecurringSubscriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: validate:"required" param:"id"
	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" validate:"required" param:"id"`
	Cookie string `protobuf:"bytes,3,opt,name=cookie,proto3" json:"cookie,omitempty"`
	// @inject_tag: param:"merchant_id"
	MerchantId string `protobuf:"bytes,4,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty" param:"merchant_id"`
}

func (x *DeleteRecurringSubscriptionRequest) Reset() {
	*x = DeleteRecurringSubscriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[336]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRecurringSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRecurringSubscriptionRequest) ProtoMessage() {}

func (x *DeleteRecurringSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[336]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRecurringSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*DeleteRecurringSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{336}
}

func (x *DeleteRecurringSubscriptionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteRecurringSubscriptionRequest) GetCookie() string {
	if x != nil {
		return x.Cookie
	}
	return ""
}

func (x *DeleteRecurringSubscriptionRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

type SetSubscriptionRenewalPendingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cookie string `protobuf:"bytes,1,opt,name=cookie,proto3" json:"cookie,omitempty"`
	// @inject_tag: validate:"required" param:"id"
	Id     string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty" validate:"required" param:"id"`
	Status bool   `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *SetSubscriptionRenewalPendingRequest) Reset() {
	*x = SetSubscriptionRenewalPendingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[337]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSubscriptionRenewalPendingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSubscriptionRenewalPendingRequest) ProtoMessage() {}

func (x *SetSubscriptionRenewalPendingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[337]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSubscriptionRenewalPendingRequest.ProtoReflect.Descriptor instead.
func (*SetSubscriptionRenewalPendingRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{337}
}

func (x *SetSubscriptionRenewalPendingRequest) GetCookie() string {
	if x != nil {
		return x.Cookie
	}
	return ""
}

func (x *SetSubscriptionRenewalPendingRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SetSubscriptionRenewalPendingRequest) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

type AddMerchantDocumentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item    *MerchantDocument     `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Status  int32                 `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *AddMerchantDocumentResponse) Reset() {
	*x = AddMerchantDocumentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[338]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddMerchantDocumentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMerchantDocumentResponse) ProtoMessage() {}

func (x *AddMerchantDocumentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[338]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMerchantDocumentResponse.ProtoReflect.Descriptor instead.
func (*AddMerchantDocumentResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{338}
}

func (x *AddMerchantDocumentResponse) GetItem() *MerchantDocument {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *AddMerchantDocumentResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *AddMerchantDocumentResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type GetMerchantDocumentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: param:"merchant_id"
	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty" param:"merchant_id"`
	// @inject_tag: query:"limit" validate:"omitempty,numeric,gt=0"
	Limit int64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty" query:"limit" validate:"omitempty,numeric,gt=0"`
	// @inject_tag: query:"offset" validate:"omitempty,numeric,gte=0"
	Offset int64 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty" query:"offset" validate:"omitempty,numeric,gte=0"`
}

func (x *GetMerchantDocumentsRequest) Reset() {
	*x = GetMerchantDocumentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[339]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMerchantDocumentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMerchantDocumentsRequest) ProtoMessage() {}

func (x *GetMerchantDocumentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[339]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMerchantDocumentsRequest.ProtoReflect.Descriptor instead.
func (*GetMerchantDocumentsRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{339}
}

func (x *GetMerchantDocumentsRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *GetMerchantDocumentsRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetMerchantDocumentsRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type GetMerchantDocumentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"list"
	List    []*MerchantDocument   `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Status  int32                 `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	//@inject_tag: json:"count"
	Count int64 `protobuf:"varint,4,opt,name=count,proto3" json:"count"`
}

func (x *GetMerchantDocumentsResponse) Reset() {
	*x = GetMerchantDocumentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[340]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMerchantDocumentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMerchantDocumentsResponse) ProtoMessage() {}

func (x *GetMerchantDocumentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[340]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMerchantDocumentsResponse.ProtoReflect.Descriptor instead.
func (*GetMerchantDocumentsResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{340}
}

func (x *GetMerchantDocumentsResponse) GetList() []*MerchantDocument {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetMerchantDocumentsResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *GetMerchantDocumentsResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetMerchantDocumentsResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type GetMerchantDocumentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: param:"merchant_id"
	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty" param:"merchant_id"`
	// @inject_tag: param:"id"
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty" param:"id"`
}

func (x *GetMerchantDocumentRequest) Reset() {
	*x = GetMerchantDocumentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[341]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMerchantDocumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMerchantDocumentRequest) ProtoMessage() {}

func (x *GetMerchantDocumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[341]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMerchantDocumentRequest.ProtoReflect.Descriptor instead.
func (*GetMerchantDocumentRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{341}
}

func (x *GetMerchantDocumentRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *GetMerchantDocumentRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetMerchantDocumentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item    *MerchantDocument     `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Status  int32                 `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *GetMerchantDocumentResponse) Reset() {
	*x = GetMerchantDocumentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[342]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMerchantDocumentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMerchantDocumentResponse) ProtoMessage() {}

func (x *GetMerchantDocumentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[342]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMerchantDocumentResponse.ProtoReflect.Descriptor instead.
func (*GetMerchantDocumentResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{342}
}

func (x *GetMerchantDocumentResponse) GetItem() *MerchantDocument {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *GetMerchantDocumentResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *GetMerchantDocumentResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type SetAllPaymentChannelCostMerchantRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"required,hexadecimal,len=24"
	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty" validate:"required,hexadecimal,len=24"`
	//@inject_tag: validate:"required,min=1,dive" json:"costs"
	Costs []*PaymentChannelCostMerchant `protobuf:"bytes,2,rep,name=costs,proto3" json:"costs" validate:"required,min=1,dive"`
}

func (x *SetAllPaymentChannelCostMerchantRequest) Reset() {
	*x = SetAllPaymentChannelCostMerchantRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[343]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetAllPaymentChannelCostMerchantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAllPaymentChannelCostMerchantRequest) ProtoMessage() {}

func (x *SetAllPaymentChannelCostMerchantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[343]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAllPaymentChannelCostMerchantRequest.ProtoReflect.Descriptor instead.
func (*SetAllPaymentChannelCostMerchantRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{343}
}

func (x *SetAllPaymentChannelCostMerchantRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *SetAllPaymentChannelCostMerchantRequest) GetCosts() []*PaymentChannelCostMerchant {
	if x != nil {
		return x.Costs
	}
	return nil
}

type SetAllPaymentChannelCostMerchantResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"status"
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status"`
	//@inject_tag: json:"message"
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message"`
	//@inject_tag: json:"items"
	Items []*PaymentChannelCostMerchant `protobuf:"bytes,3,rep,name=items,proto3" json:"items"`
}

func (x *SetAllPaymentChannelCostMerchantResponse) Reset() {
	*x = SetAllPaymentChannelCostMerchantResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[344]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetAllPaymentChannelCostMerchantResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAllPaymentChannelCostMerchantResponse) ProtoMessage() {}

func (x *SetAllPaymentChannelCostMerchantResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[344]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAllPaymentChannelCostMerchantResponse.ProtoReflect.Descriptor instead.
func (*SetAllPaymentChannelCostMerchantResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{344}
}

func (x *SetAllPaymentChannelCostMerchantResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SetAllPaymentChannelCostMerchantResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *SetAllPaymentChannelCostMerchantResponse) GetItems() []*PaymentChannelCostMerchant {
	if x != nil {
		return x.Items
	}
	return nil
}

type RefreshMerchantApiTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"merchant_id" validate:"omitempty,hexadecimal,len=24"
	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id" validate:"omitempty,hexadecimal,len=24"`
}

func (x *RefreshMerchantApiTokenRequest) Reset() {
	*x = RefreshMerchantApiTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[345]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshMerchantApiTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshMerchantApiTokenRequest) ProtoMessage() {}

func (x *RefreshMerchantApiTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[345]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshMerchantApiTokenRequest.ProtoReflect.Descriptor instead.
func (*RefreshMerchantApiTokenRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{345}
}

func (x *RefreshMerchantApiTokenRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

type RefreshMerchantApiTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"status"
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status"`
	//@inject_tag: json:"message"
	Message *ResponseErrorMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message"`
	//@inject_tag: json:"item"
	Item *Merchant `protobuf:"bytes,3,opt,name=item,proto3" json:"item"`
}

func (x *RefreshMerchantApiTokenResponse) Reset() {
	*x = RefreshMerchantApiTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[346]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshMerchantApiTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshMerchantApiTokenResponse) ProtoMessage() {}

func (x *RefreshMerchantApiTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[346]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshMerchantApiTokenResponse.ProtoReflect.Descriptor instead.
func (*RefreshMerchantApiTokenResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{346}
}

func (x *RefreshMerchantApiTokenResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *RefreshMerchantApiTokenResponse) GetMessage() *ResponseErrorMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *RefreshMerchantApiTokenResponse) GetItem() *Merchant {
	if x != nil {
		return x.Item
	}
	return nil
}

var File_grpc_proto protoreflect.FileDescriptor

var file_grpc_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x67, 0x72,
	0x70, 0x63, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0d, 0x70, 0x61, 0x79, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x0e, 0x0a, 0x0c, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x0f, 0x0a, 0x0d, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x67, 0x0a, 0x17, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x57, 0x69, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x4f, 0x0a, 0x1c, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x53, 0x6b, 0x75, 0x41, 0x6e, 0x64, 0x4b, 0x65, 0x79, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73,
	0x6b, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x6b, 0x75, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x5b, 0x0a, 0x18,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6b, 0x65, 0x79,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x22, 0x8f, 0x01, 0x0a, 0x19, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x81, 0x01, 0x0a, 0x1b,
	0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4b, 0x65, 0x79, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x2b, 0x0a, 0x12, 0x4b, 0x65, 0x79, 0x46, 0x6f, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x22, 0x8d, 0x01, 0x0a,
	0x1d, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x46, 0x6f, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x81, 0x01, 0x0a,
	0x1a, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64,
	0x22, 0xb0, 0x01, 0x0a, 0x19, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4b, 0x65, 0x79,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24,
	0x0a, 0x0e, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6b, 0x65, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x22, 0xb0, 0x01, 0x0a, 0x18, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x4b, 0x65, 0x79, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x6b, 0x65, 0x79, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6b, 0x65, 0x79, 0x73, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x95, 0x01, 0x0a, 0x17, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x4b, 0x65, 0x79, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6b, 0x65, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x22, 0x84,
	0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4b, 0x65,
	0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a,
	0x0e, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6b, 0x65, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x49, 0x64, 0x22, 0x7f, 0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24,
	0x0a, 0x0e, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6b, 0x65, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x22, 0x8e, 0x01, 0x0a, 0x12, 0x4b, 0x65, 0x79, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x4b, 0x65, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x07,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x22, 0xd8, 0x07, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b,
	0x65, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x58, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x65, 0x0a, 0x10, 0x6c, 0x6f, 0x6e,
	0x67, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x6f, 0x6e, 0x67, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0f, 0x6c, 0x6f, 0x6e, 0x67, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x10, 0x0a, 0x03, 0x73, 0x6b, 0x75, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73,
	0x6b, 0x75, 0x12, 0x2e, 0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x4f, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4b, 0x65, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x31, 0x0a, 0x09, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x61,
	0x6c, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x1a, 0x37, 0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x42, 0x0a, 0x14, 0x4c, 0x6f, 0x6e, 0x67, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x63, 0x0a, 0x1a, 0x55, 0x6e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x4b,
	0x65, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x24, 0x0a, 0x0e, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6b, 0x65, 0x79, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x61, 0x0a, 0x18, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x4b, 0x65, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6b, 0x65, 0x79,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x44, 0x0a, 0x14, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x22, 0xd7, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x09,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52,
	0x09, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x22, 0xd9, 0x01, 0x0a, 0x17, 0x4c,
	0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x4b, 0x65, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x22, 0xc6, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x4b,
	0x65, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x6b, 0x75, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x73, 0x6b, 0x75, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22,
	0xf9, 0x01, 0x0a, 0x14, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x70, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f,
	0x6f, 0x6b, 0x69, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6f, 0x6b,
	0x69, 0x65, 0x1a, 0x37, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x95, 0x02, 0x0a, 0x15,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x72,
	0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6e,
	0x65, 0x65, 0x64, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6f,
	0x6b, 0x69, 0x65, 0x12, 0x4e, 0x0a, 0x15, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x13,
	0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x22, 0xbd, 0x03, 0x0a, 0x1a, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x46,
	0x6f, 0x72, 0x6d, 0x4a, 0x73, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x45, 0x6d, 0x62, 0x65, 0x64,
	0x64, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x5f, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x32,
	0x0a, 0x15, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x74, 0x6d, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x74, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x74, 0x6d, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x74, 0x6d, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d,
	0x12, 0x21, 0x0a, 0x0c, 0x75, 0x74, 0x6d, 0x5f, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x74, 0x6d, 0x43, 0x61, 0x6d, 0x70, 0x61,
	0x69, 0x67, 0x6e, 0x22, 0xf7, 0x01, 0x0a, 0x1a, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x46,
	0x6f, 0x72, 0x6d, 0x4a, 0x73, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x72, 0x6c, 0x5f, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x72, 0x6c,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x72, 0x6c, 0x5f, 0x66,
	0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x72, 0x6c, 0x46, 0x61,
	0x69, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x4d, 0x0a, 0x11, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x10, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x6f,
	0x72, 0x6d, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x65, 0x78, 0x74, 0x22, 0xb8, 0x09,
	0x0a, 0x13, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x4a, 0x73, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x5f, 0x76, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x68, 0x61, 0x73, 0x56, 0x61, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x61, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x76, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x3a, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x46, 0x6f, 0x72, 0x6d, 0x4a, 0x73, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x4a, 0x0a,
	0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x3b, 0x0a, 0x1a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x17, 0x75, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x0c,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x49, 0x70, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x18, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12,
	0x34, 0x0a, 0x16, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x14, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x61, 0x6c,
	0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x73, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x70, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x16,
	0x76, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x76, 0x61,
	0x74, 0x49, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x61, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x07, 0x76, 0x61, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x76, 0x61, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x76, 0x61, 0x74, 0x50, 0x61, 0x79, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e,
	0x0a, 0x12, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72,
	0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x11, 0x72, 0x65, 0x63,
	0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x38,
	0x0a, 0x18, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x16, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x72, 0x6c, 0x22, 0xb2, 0x01, 0x0a, 0x1b, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x4a, 0x73, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x4a, 0x73, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x22, 0x69, 0x0a,
	0x14, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x45, 0x0a, 0x15, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22,
	0xf0, 0x01, 0x0a, 0x11, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x12, 0x36, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x34, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x12, 0x32,
	0x0a, 0x07, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x62, 0x61, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x22, 0x21, 0x0a, 0x0f, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x88, 0x05, 0x0a, 0x16, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x12, 0x31, 0x0a, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x65,
	0x46, 0x72, 0x6f, 0x6d, 0x12, 0x2d, 0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x54, 0x6f, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x10, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x5f, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x71, 0x75, 0x69, 0x63, 0x6b,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x65, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x54, 0x6f, 0x12, 0x37, 0x0a, 0x18, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x61, 0x73, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x33, 0x0a, 0x16, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x74, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x6f,
	0x22, 0x61, 0x0a, 0x17, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x30, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x22, 0x62, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27,
	0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x1b, 0x4d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x7f, 0x0a, 0x13, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x52, 0x0a, 0x0d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xdd, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74,
	0x12, 0x26, 0x0a, 0x0f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x73, 0x5f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x49, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x22, 0x67, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x47, 0x0a, 0x0f, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x52, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x73, 0x22, 0x6e, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x49,
	0x64, 0x22, 0xa4, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x88, 0x01, 0x0a, 0x21, 0x4c, 0x69, 0x73,
	0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x2e, 0x0a, 0x13, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x73,
	0x6f, 0x72, 0x74, 0x22, 0xe2, 0x02, 0x0a, 0x1c, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x53, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x49, 0x0a, 0x0a, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xa1, 0x01, 0x0a, 0x1d, 0x4d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x8a, 0x01, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x62, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xc5, 0x01,
	0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x62, 0x61, 0x63, 0x6b,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x62, 0x61, 0x63, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x89, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x04,
	0x69, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x04, 0x69, 0x74, 0x65,
	0x6d, 0x22, 0x7e, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x22, 0x52, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25,
	0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x6b, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x49, 0x64, 0x22, 0x5d, 0x0a, 0x0f, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62,
	0x6f, 0x64, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x22, 0x68, 0x0a, 0x1d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d,
	0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e,
	0x67, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x5d, 0x0a, 0x24, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x22, 0xa9, 0x01, 0x0a, 0x20, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61,
	0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x27,
	0x0a, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x22, 0xd6, 0x01, 0x0a, 0x2a, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x22,
	0xad, 0x01, 0x0a, 0x1d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x44,
	0x61, 0x74, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x3e, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x46,
	0x6f, 0x72, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22,
	0x8d, 0x01, 0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x42, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x7a, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x7a, 0x69, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x22,
	0xa3, 0x03, 0x0a, 0x21, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x42, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x5f, 0x76, 0x61, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x61, 0x73, 0x56, 0x61, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x76, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x76, 0x61, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x33, 0x0a, 0x16, 0x76, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x13, 0x76, 0x61, 0x74, 0x49, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x61,
	0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x76, 0x61,
	0x74, 0x52, 0x61, 0x74, 0x65, 0x22, 0xc2, 0x01, 0x0a, 0x1d, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x69, 0x74,
	0x65, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x22, 0x50, 0x0a, 0x14, 0x47, 0x65,
	0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x9e, 0x01, 0x0a,
	0x19, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x68,
	0x61, 0x73, 0x5f, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x68, 0x61, 0x73,
	0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x61, 0x73, 0x5f, 0x70, 0x73, 0x70, 0x5f, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x68, 0x61,
	0x73, 0x50, 0x73, 0x70, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x91, 0x01,
	0x0a, 0x1a, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x69, 0x74,
	0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x52, 0x04, 0x69, 0x74, 0x65,
	0x6d, 0x22, 0x8d, 0x01, 0x0a, 0x16, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x69, 0x74,
	0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x52, 0x04, 0x69, 0x74, 0x65,
	0x6d, 0x22, 0x93, 0x01, 0x0a, 0x1c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x25, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x95, 0x01, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22,
	0x8e, 0x01, 0x0a, 0x1a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x04,
	0x69, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d,
	0x22, 0x6c, 0x0a, 0x1d, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x53,
	0x33, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x33, 0x5f, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73,
	0x33, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xef,
	0x01, 0x0a, 0x0e, 0x4b, 0x65, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x6c, 0x6f, 0x6e, 0x67, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x09, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73,
	0x22, 0x65, 0x0a, 0x11, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0x7f, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x66, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73,
	0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x22, 0xd8, 0x08, 0x0a, 0x0a, 0x4b, 0x65, 0x79,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x73, 0x6b, 0x75, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x6b,
	0x75, 0x12, 0x2e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4b, 0x65, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x09,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x12, 0x43, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4b, 0x65, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50,
	0x0a, 0x10, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x4b, 0x65, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x4c, 0x6f, 0x6e, 0x67, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0f, 0x6c, 0x6f, 0x6e, 0x67, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2e, 0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x3a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x4b, 0x65, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x3d,
	0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x69, 0x6e, 0x69, 0x6d,
	0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x1a, 0x37, 0x0a, 0x09, 0x4e, 0x61, 0x6d,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14, 0x4c, 0x6f, 0x6e, 0x67, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xff, 0x01, 0x0a, 0x0d, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x52, 0x06, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x75, 0x6c, 0x61,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x75, 0x6c, 0x61,
	0x55, 0x72, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x20, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4f, 0x73, 0x52, 0x02,
	0x6f, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x5f, 0x6f, 0x6e,
	0x6c, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c,
	0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0x30, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x4f, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xdb, 0x01, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x3c, 0x0a, 0x1a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x72, 0x6c,
	0x12, 0x20, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4f, 0x73, 0x52, 0x02,
	0x6f, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x5f, 0x6f, 0x6e,
	0x6c, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c,
	0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0xf3, 0x07, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x73, 0x6b, 0x75, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x6b, 0x75, 0x12,
	0x2b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x4e, 0x61, 0x6d,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x2d, 0x0a, 0x06, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x06, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73,
	0x12, 0x40, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x10, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x4c, 0x6f, 0x6e, 0x67,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0f, 0x6c, 0x6f, 0x6e, 0x67, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x12, 0x37, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x11, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x12, 0x21,
	0x0a, 0x0c, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x1a, 0x37, 0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14, 0x4c, 0x6f,
	0x6e, 0x67, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b,
	0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc3, 0x01, 0x0a, 0x13,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x6b, 0x75, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x6b, 0x75, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x22, 0x4d, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x46, 0x6f, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73,
	0x22, 0x92, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x6b, 0x65, 0x79, 0x5f, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6b, 0x65, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0xa0, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x35, 0x0a, 0x0b, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4b, 0x65,
	0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x6b, 0x65,
	0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x22, 0x50, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x4b,
	0x65, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x14, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x29, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x22, 0x41, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x4c, 0x0a, 0x19, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x4b, 0x65, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x22, 0x23, 0x0a, 0x11, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4b, 0x65,
	0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3e, 0x0a, 0x12, 0x49, 0x31, 0x38, 0x4e,
	0x54, 0x65, 0x78, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61,
	0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x15, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x24, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x53, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0xb7, 0x01, 0x0a, 0x13,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x5f, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x73, 0x6f, 0x72, 0x74, 0x22, 0x54, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x6a, 0x0a, 0x0c, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x73, 0x0a, 0x0d, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x76, 0x0a, 0x23,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x22, 0x74, 0x0a, 0x24, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xab, 0x05, 0x0a, 0x11, 0x4c,
	0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a,
	0x0c, 0x70, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12,
	0x1c, 0x0a, 0x0a, 0x70, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x12, 0x2a, 0x0a,
	0x11, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x72,
	0x6f, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x12, 0x43, 0x0a, 0x1e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x5f, 0x66, 0x6f, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x68,
	0x69, 0x64, 0x65, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x68, 0x69, 0x64, 0x65, 0x54, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a,
	0x11, 0x72, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x6f, 0x79, 0x61, 0x6c, 0x74,
	0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x55, 0x0a, 0x19, 0x49, 0x73, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x43, 0x61, 0x6e, 0x42, 0x65, 0x50, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x8e,
	0x01, 0x0a, 0x1a, 0x49, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x42, 0x65, 0x50,
	0x61, 0x79, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x69,
	0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22,
	0x7c, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x6f, 0x0a,
	0x0f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x73, 0x65, 0x72, 0x53, 0x61, 0x6c, 0x65, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0xa2,
	0x01, 0x0a, 0x13, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x65, 0x77,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x13, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x5f, 0x69, 0x73, 0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x32, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x73, 0x6f, 0x43,
	0x6f, 0x64, 0x65, 0x41, 0x32, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x22, 0xbb, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x61, 0x33, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x41, 0x33, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x63, 0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x63, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x30, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49,
	0x64, 0x22, 0x58, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x78, 0x0a, 0x1a, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x20, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x4f, 0x0a, 0x1b,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x55, 0x0a,
	0x21, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x70, 0x0a, 0x14, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x79, 0x5a, 0x69,
	0x70, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x7a, 0x69, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x7a, 0x69, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x55, 0x0a, 0x15, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x79,
	0x5a, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x5a,
	0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x5d, 0x0a,
	0x0d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x5e, 0x0a, 0x14,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x9d, 0x02, 0x0a,
	0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e,
	0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x9b, 0x01, 0x0a,
	0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e,
	0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x04,
	0x69, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x3a, 0x0a, 0x1a, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x73, 0x22, 0xd4, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x66,
	0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f,
	0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x54, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72,
	0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x22, 0x5c, 0x0a,
	0x16, 0x52, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x9c, 0x01, 0x0a, 0x1a,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x6f,
	0x79, 0x61, 0x6c, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8c, 0x01, 0x0a, 0x1e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x4f, 0x0a, 0x1d, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x57, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x52, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x49, 0x64, 0x22, 0x94, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x79, 0x61, 0x6c,
	0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a,
	0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0xc7, 0x01, 0x0a, 0x1a, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x43, 0x0a, 0x0a, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f,
	0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x70, 0x22, 0xba, 0x01, 0x0a, 0x22, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f,
	0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x69, 0x73, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69,
	0x73, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x22, 0xaf, 0x01, 0x0a, 0x24, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43,
	0x6f, 0x73, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x69,
	0x74, 0x65, 0x6d, 0x22, 0xa7, 0x01, 0x0a, 0x20, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x73,
	0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0xb3, 0x01,
	0x0a, 0x26, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x43, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x73,
	0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x69,
	0x74, 0x65, 0x6d, 0x22, 0xab, 0x01, 0x0a, 0x22, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43,
	0x6f, 0x73, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x52, 0x04, 0x69, 0x74, 0x65,
	0x6d, 0x22, 0xa5, 0x01, 0x0a, 0x1f, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x42, 0x61, 0x63, 0x6b, 0x43,
	0x6f, 0x73, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x6f, 0x6e, 0x65,
	0x79, 0x42, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x73, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x9d, 0x01, 0x0a, 0x1b, 0x4d, 0x6f,
	0x6e, 0x65, 0x79, 0x42, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x73, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x42, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x73, 0x74, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0xa9, 0x01, 0x0a, 0x21, 0x4d, 0x6f,
	0x6e, 0x65, 0x79, 0x42, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a,
	0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x42, 0x61, 0x63, 0x6b, 0x43,
	0x6f, 0x73, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0xa1, 0x01, 0x0a, 0x1d, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x42,
	0x61, 0x63, 0x6b, 0x43, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x6f,
	0x6e, 0x65, 0x79, 0x42, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x36, 0x0a, 0x1a, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x22, 0x4f, 0x0a, 0x1c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2f, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x22, 0x61, 0x0a, 0x11, 0x50, 0x72, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x30, 0x0a, 0x07, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x44, 0x0a, 0x10, 0x50, 0x72, 0x69, 0x63, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x33, 0x0a, 0x19, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x22, 0x4d, 0x0a, 0x17, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22,
	0x62, 0x0a, 0x18, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x11, 0x72,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x52, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x22, 0x3a, 0x0a, 0x1c, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22,
	0x51, 0x0a, 0x1d, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x30, 0x0a, 0x06, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x06, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x22, 0x53, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0d, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x06, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x06, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x6d, 0x0a, 0x13, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x0a,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xdb, 0x01, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x48, 0x65, 0x6c, 0x70, 0x12, 0x49, 0x0a, 0x21, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6e,
	0x64, 0x5f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x1e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x6d,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x5f,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x47, 0x61,
	0x6d, 0x65, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x13, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x61, 0x6c,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x6f, 0x74, 0x68, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6f, 0x74, 0x68,
	0x65, 0x72, 0x22, 0xe6, 0x01, 0x0a, 0x1e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4d, 0x6f, 0x6e, 0x65, 0x74, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x70, 0x61, 0x69, 0x64, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x61, 0x64,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x11, 0x69, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x69,
	0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6e, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69,
	0x6e, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x73, 0x12, 0x25,
	0x0a, 0x0e, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x22, 0xb3, 0x01, 0x0a, 0x1b,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x70,
	0x63, 0x5f, 0x6d, 0x61, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x70, 0x63, 0x4d,
	0x61, 0x63, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x6f,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x6f,
	0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x65,
	0x62, 0x5f, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x77, 0x65, 0x62, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6f,
	0x74, 0x68, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x22, 0x81, 0x03, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x77,
	0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x65,
	0x62, 0x73, 0x69, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x0d, 0x61, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x5f,
	0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x74, 0x52,
	0x0c, 0x61, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x41, 0x0a,
	0x13, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x65, 0x6d, 0x70, 0x6c, 0x6f,
	0x79, 0x65, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x74, 0x52, 0x11, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73,
	0x12, 0x28, 0x0a, 0x10, 0x6b, 0x69, 0x6e, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6b, 0x69, 0x6e, 0x64,
	0x4f, 0x66, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x48, 0x0a, 0x0c, 0x6d, 0x6f,
	0x6e, 0x65, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4d, 0x6f, 0x6e, 0x65, 0x74, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6d, 0x6f, 0x6e, 0x65, 0x74, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x73, 0x22, 0xed, 0x01, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x3d,
	0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x41, 0x74, 0x12, 0x29, 0x0a,
	0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x3b, 0x0a, 0x1a, 0x69, 0x73, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x69, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x53, 0x65, 0x6e, 0x74, 0x22, 0xd0, 0x03, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c,
	0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x35, 0x0a, 0x08,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x08, 0x70, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x61, 0x6c, 0x12, 0x29, 0x0a, 0x04, 0x68, 0x65, 0x6c, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x48, 0x65, 0x6c, 0x70, 0x52, 0x04, 0x68, 0x65, 0x6c, 0x70, 0x12, 0x32,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x74, 0x65, 0x70, 0x12,
	0x29, 0x0a, 0x10, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x66, 0x75, 0x67, 0x6f, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x65, 0x6e, 0x74, 0x72,
	0x69, 0x66, 0x75, 0x67, 0x6f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x22, 0x54, 0x0a, 0x18, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x9c,
	0x01, 0x0a, 0x19, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0xca, 0x01,
	0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x25, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c,
	0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2d, 0x0a, 0x08, 0x6d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x52, 0x08, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x22, 0x4f, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x8d, 0x01, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0xee, 0x01, 0x0a, 0x0a,
	0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x17, 0x0a,
	0x07, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x69, 0x73, 0x52, 0x65, 0x61, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x5c, 0x0a, 0x17,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x2f, 0x0a, 0x17, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x95, 0x01, 0x0a, 0x18,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x22, 0x7e, 0x0a, 0x16, 0x56, 0x61, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a,
	0x0d, 0x76, 0x61, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x61, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x73,
	0x6f, 0x72, 0x74, 0x22, 0x5c, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2e, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x56, 0x69, 0x65, 0x77, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x22, 0x94, 0x01, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x6f, 0x0a, 0x11, 0x56, 0x61, 0x74, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x22, 0x54, 0x0a, 0x12, 0x56, 0x61, 0x74,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x56,
	0x61, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22,
	0x90, 0x01, 0x0a, 0x12, 0x56, 0x61, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x61, 0x74, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x4a, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x56, 0x61, 0x74,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0x46,
	0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x61, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xb0, 0x01, 0x0a, 0x2d, 0x47, 0x65, 0x74, 0x4d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x35, 0x0a, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x53, 0x74, 0x65, 0x70, 0x73,
	0x52, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x74, 0x65, 0x70, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc2, 0x01, 0x0a, 0x29, 0x47, 0x65,
	0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x47, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0xdb,
	0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x54, 0x61,
	0x72, 0x69, 0x66, 0x66, 0x52, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x38, 0x0a, 0x18, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x22, 0xe6, 0x04, 0x0a,
	0x23, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x69,
	0x66, 0x66, 0x52, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x12, 0x3d, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x52, 0x61,
	0x74, 0x65, 0x73, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x06, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x52, 0x61, 0x74, 0x65,
	0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x72,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x48, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x62,
	0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x69,
	0x66, 0x66, 0x52, 0x61, 0x74, 0x65, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x62, 0x61, 0x63, 0x6b, 0x12,
	0x4d, 0x0a, 0x06, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x52, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x2e, 0x50, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x63,
	0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65,
	0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x52,
	0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x2e, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x50, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x63, 0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x63, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x1a, 0x63,
	0x0a, 0x0b, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x3e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x52, 0x61, 0x74, 0x65, 0x73, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x50, 0x61,
	0x79, 0x6f, 0x75, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xaf, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x52, 0x61, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3f, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74,
	0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x52, 0x61,
	0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x9b, 0x01, 0x0a, 0x1d, 0x53, 0x65, 0x74, 0x4d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x52, 0x61, 0x74,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x6f,
	0x6d, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x68, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x18, 0x6d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x6d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x22, 0x64, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x66, 0x0a, 0x1d, 0x4c,
	0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x22, 0xa0, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x36,
	0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x22, 0xa2, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x22, 0x54, 0x0a, 0x16, 0x4c,
	0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x22, 0x94, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x22, 0x94, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x2c, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56,
	0x69, 0x65, 0x77, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22,
	0x96, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x69, 0x74, 0x65,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x8c, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x52, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x44, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0x97, 0x01, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4d, 0x61, 0x69, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x4d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x58, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x44, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22,
	0x9e, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x2e, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d,
	0x22, 0xb2, 0x01, 0x0a, 0x29, 0x47, 0x65, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x73,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x04,
	0x69, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x76, 0x65, 0x6e,
	0x75, 0x65, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0xbf, 0x01, 0x0a, 0x1c, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x57, 0x69, 0x74,
	0x68, 0x43, 0x68, 0x61, 0x72, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a,
	0x0f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72,
	0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x43, 0x68, 0x61, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x52, 0x05, 0x63, 0x68, 0x61, 0x72, 0x74, 0x22, 0x45, 0x0a, 0x17, 0x44, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x43, 0x68, 0x61, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa7,
	0x01, 0x0a, 0x24, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4d, 0x61, 0x69, 0x6e,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x6f, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x43, 0x68, 0x61, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x52, 0x05, 0x63, 0x68, 0x61, 0x72, 0x74, 0x22, 0xa7, 0x02, 0x0a, 0x13, 0x44, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x47, 0x0a, 0x0d, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x57, 0x69, 0x74, 0x68, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x0c, 0x67, 0x72, 0x6f,
	0x73, 0x73, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x12, 0x34, 0x0a, 0x03, 0x76, 0x61, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x57, 0x69, 0x74, 0x68, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x03, 0x76, 0x61, 0x74, 0x12,
	0x59, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4d, 0x61, 0x69, 0x6e,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x36, 0x0a, 0x04, 0x61, 0x72,
	0x70, 0x75, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x57, 0x69, 0x74, 0x68, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x04, 0x61, 0x72,
	0x70, 0x75, 0x22, 0x7a, 0x0a, 0x1d, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52,
	0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x3d, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52,
	0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x83,
	0x01, 0x0a, 0x21, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x76, 0x65,
	0x6e, 0x75, 0x65, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x56, 0x0a, 0x22, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x42, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x6f, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x58, 0x0a, 0x28,
	0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65,
	0x42, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x8b, 0x02, 0x0a, 0x1f, 0x44, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x42, 0x79, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x3a, 0x0a, 0x03, 0x74, 0x6f, 0x70, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x42, 0x79, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x6f, 0x70, 0x52, 0x03, 0x74,
	0x6f, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x12, 0x44,
	0x0a, 0x05, 0x63, 0x68, 0x61, 0x72, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x76, 0x65, 0x6e, 0x75, 0x65, 0x42, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x43, 0x68, 0x61, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x22, 0x48, 0x0a, 0x1c, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x54, 0x6f, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x43,
	0x0a, 0x15, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x68, 0x61, 0x72, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xd0, 0x01, 0x0a, 0x19, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x34, 0x0a, 0x03, 0x74, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53,
	0x61, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54,
	0x6f, 0x70, 0x52, 0x03, 0x74, 0x6f, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x6f, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x43, 0x68, 0x61, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x74, 0x52,
	0x05, 0x63, 0x68, 0x61, 0x72, 0x74, 0x22, 0xcd, 0x01, 0x0a, 0x16, 0x44, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x34, 0x0a, 0x03, 0x74, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53,
	0x61, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54,
	0x6f, 0x70, 0x52, 0x03, 0x74, 0x6f, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x6f, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x43, 0x68, 0x61, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x74, 0x52,
	0x05, 0x63, 0x68, 0x61, 0x72, 0x74, 0x22, 0xe5, 0x01, 0x0a, 0x14, 0x44, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12,
	0x53, 0x0a, 0x12, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x62, 0x79, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x76, 0x65,
	0x6e, 0x75, 0x65, 0x42, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x10, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x42, 0x79, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x40, 0x0a, 0x0b, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x74, 0x6f,
	0x64, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x54,
	0x6f, 0x64, 0x61, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0a, 0x73, 0x61, 0x6c, 0x65,
	0x73, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x12, 0x36, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0xbc,
	0x01, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x70, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x41,
	0x75, 0x74, 0x6f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x93, 0x01,
	0x0a, 0x16, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x50,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x69,
	0x74, 0x65, 0x6d, 0x22, 0x9b, 0x01, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61,
	0x79, 0x6f, 0x75, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x22, 0x92, 0x02, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x22, 0x69, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x22, 0x98, 0x02, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2c, 0x0a, 0x12, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66,
	0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x46,
	0x72, 0x6f, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x22, 0x5e, 0x0a, 0x17,
	0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2d, 0x0a,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x9d, 0x01, 0x0a,
	0x1a, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xf0, 0x01, 0x0a,
	0x25, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x68, 0x61, 0x73, 0x5f, 0x6d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x68, 0x61, 0x73, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x61,
	0x73, 0x5f, 0x70, 0x73, 0x70, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x68, 0x61, 0x73, 0x50, 0x73, 0x70, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x22,
	0x3c, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x98, 0x01,
	0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x69, 0x74,
	0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0xac, 0x01, 0x0a, 0x20, 0x50, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x64, 0x66, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x74,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x71, 0x0a, 0x21, 0x50, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x64, 0x66, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x4f, 0x0a, 0x13, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x49, 0x64, 0x22, 0x95, 0x01, 0x0a, 0x14,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x07, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x22, 0x85, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x98, 0x01, 0x0a, 0x1d,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x36, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x22, 0x7b,
	0x0a, 0x22, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f,
	0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x50, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x9a, 0x01, 0x0a, 0x23,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4d, 0x61,
	0x6e, 0x75, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x25, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x82, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x50, 0x61, 0x79, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x88, 0x01,
	0x0a, 0x1d, 0x53, 0x65, 0x6e, 0x64, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x54, 0x6f, 0x4d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x50, 0x0a, 0x10, 0x50, 0x61, 0x79, 0x6c,
	0x69, 0x6e, 0x6b, 0x73, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x26, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x50, 0x61, 0x79, 0x6c,
	0x69, 0x6e, 0x6b, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x8e, 0x01, 0x0a, 0x1f, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x54, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x61, 0x73, 0x73, 0x65, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x85, 0x01,
	0x0a, 0x12, 0x50, 0x61, 0x79, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x42, 0x79, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x74, 0x6d, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x74, 0x6d, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x74, 0x6d, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x75,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x74, 0x6d, 0x4d, 0x65, 0x64, 0x69,
	0x75, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x74, 0x6d, 0x5f, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69,
	0x67, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x74, 0x6d, 0x43, 0x61, 0x6d,
	0x70, 0x61, 0x69, 0x67, 0x6e, 0x22, 0x41, 0x0a, 0x0e, 0x50, 0x61, 0x79, 0x6c, 0x69, 0x6e, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x88, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x50, 0x61, 0x79, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a,
	0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x61,
	0x79, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x04, 0x69,
	0x74, 0x65, 0x6d, 0x22, 0xad, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x69,
	0x6e, 0x6b, 0x55, 0x72, 0x6c, 0x42, 0x79, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x72, 0x6c, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x72, 0x6c, 0x4d, 0x61,
	0x73, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x74, 0x6d, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x74, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x74, 0x6d, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x74, 0x6d, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d,
	0x12, 0x21, 0x0a, 0x0c, 0x75, 0x74, 0x6d, 0x5f, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x74, 0x6d, 0x43, 0x61, 0x6d, 0x70, 0x61,
	0x69, 0x67, 0x6e, 0x22, 0x82, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x69,
	0x6e, 0x6b, 0x55, 0x72, 0x6c, 0x42, 0x79, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0xc3, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x50, 0x61, 0x79, 0x6c, 0x69, 0x6e, 0x6b, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x72, 0x6c, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x72, 0x6c, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x1d, 0x0a,
	0x0a, 0x75, 0x74, 0x6d, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x75, 0x74, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x75, 0x74, 0x6d, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x75, 0x74, 0x6d, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x75,
	0x74, 0x6d, 0x5f, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x75, 0x74, 0x6d, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x22, 0x77,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x69, 0x6e, 0x6b, 0x55, 0x72, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x8c, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x50,
	0x61, 0x79, 0x6c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x5f, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x54, 0x6f, 0x22, 0x7e, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79,
	0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x95, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x50, 0x61,
	0x79, 0x6c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x9f,
	0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d,
	0x22, 0xba, 0x01, 0x0a, 0x1f, 0x52, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x50, 0x64, 0x66, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x6f, 0x79, 0x61, 0x6c,
	0x74, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x72, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x70, 0x0a,
	0x20, 0x52, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x64,
	0x66, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x40, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x61, 0x76, 0x65, 0x64, 0x43, 0x61,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6f,
	0x6b, 0x69, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69,
	0x65, 0x22, 0xa2, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xa7, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x69, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x69, 0x6e, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x22, 0x9f, 0x01, 0x0a, 0x22, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x6f,
	0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x76, 0x61, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x64, 0x6f, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x56,
	0x61, 0x74, 0x22, 0x9a, 0x01, 0x0a, 0x23, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22,
	0x43, 0x0a, 0x20, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x41, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x22, 0x98, 0x01, 0x0a, 0x21, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22,
	0x2c, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xa0, 0x01,
	0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x22, 0x38, 0x0a, 0x1b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x3a, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x91, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x27, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x6f, 0x6c, 0x65, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x22, 0x66, 0x0a, 0x19, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x1a, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x25, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65,
	0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x42, 0x0a, 0x16, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x17, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x54, 0x0a, 0x1b, 0x52,
	0x65, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x22, 0x30, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x22, 0x28, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x8e, 0x01,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x25,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x8b, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x04,
	0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72,
	0x6f, 0x6c, 0x65, 0x22, 0x45, 0x0a, 0x17, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x9e, 0x01, 0x0a, 0x18, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x5a, 0x0a, 0x13, 0x41,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x8b, 0x01, 0x0a, 0x14, 0x41, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x25,
	0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52,
	0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x27, 0x0a,
	0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52,
	0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x22, 0x35, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xa4, 0x01,
	0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x73, 0x46, 0x6f,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x6d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x46, 0x6f,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x73, 0x22, 0x4d, 0x0a, 0x13, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72,
	0x6f, 0x6c, 0x65, 0x22, 0x70, 0x0a, 0x20, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x6f, 0x6c,
	0x65, 0x46, 0x6f, 0x72, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x4c, 0x0a, 0x1d, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x6f, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72,
	0x6f, 0x6c, 0x65, 0x22, 0x28, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x42, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x6f,
	0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x22, 0x2b, 0x0a, 0x10, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x4f,
	0x0a, 0x13, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22,
	0x38, 0x0a, 0x0a, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x90, 0x01, 0x0a, 0x10, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f,
	0x6c, 0x65, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x22, 0x3c, 0x0a, 0x1f,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x46, 0x6f, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x9c, 0x01, 0x0a, 0x20, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x46,
	0x6f, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a,
	0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x22, 0x0a, 0x10, 0x56, 0x61, 0x74,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x64, 0x0a,
	0x1b, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x22, 0x87, 0x01, 0x0a, 0x11, 0x56, 0x61, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x03, 0x76, 0x61, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x56,
	0x61, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x03, 0x76, 0x61, 0x74, 0x22, 0xa2, 0x01,
	0x0a, 0x1b, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x97, 0x03, 0x0a, 0x18, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2a, 0x0a, 0x11, 0x72, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x6f, 0x79, 0x61,
	0x6c, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x46, 0x72,
	0x6f, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x74, 0x6f, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x54, 0x6f, 0x12,
	0x38, 0x0a, 0x18, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x61, 0x67, 0x72, 0x65, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x16, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x16, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x49, 0x64, 0x22, 0xd2, 0x01, 0x0a,
	0x21, 0x53, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x8c, 0x01, 0x0a, 0x16, 0x41, 0x63, 0x74, 0x4f, 0x66, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x9d, 0x01, 0x0a, 0x17, 0x41, 0x63, 0x74, 0x4f, 0x66, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x69, 0x74,
	0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x41, 0x63, 0x74, 0x4f, 0x66, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d,
	0x22, 0x3e, 0x0a, 0x1b, 0x41, 0x63, 0x74, 0x73, 0x4f, 0x66, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x22, 0x6f, 0x0a, 0x18, 0x41, 0x63, 0x74, 0x73, 0x4f, 0x66, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1d, 0x0a, 0x0a,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x6f, 0x22, 0xa2, 0x01, 0x0a, 0x1c, 0x41, 0x63, 0x74, 0x73, 0x4f, 0x66, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x34, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x63, 0x74, 0x73, 0x4f, 0x66, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xa5, 0x01, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x44, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x69,
	0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x66,
	0x0a, 0x22, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x72, 0x70, 0x75, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x22, 0xab, 0x01, 0x0a, 0x23, 0x44, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x41, 0x72, 0x70, 0x75, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04,
	0x69, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x57, 0x69, 0x74, 0x68, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x04,
	0x69, 0x74, 0x65, 0x6d, 0x22, 0x59, 0x0a, 0x1e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22,
	0xdd, 0x03, 0x0a, 0x17, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x38, 0x0a, 0x07, 0x64,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x52, 0x07, 0x64, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x12, 0x38, 0x0a, 0x18, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x16, 0x6e, 0x65, 0x77, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12,
	0x31, 0x0a, 0x15, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73,
	0x5f, 0x70, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12,
	0x6e, 0x65, 0x77, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x50, 0x65, 0x72, 0x44,
	0x61, 0x79, 0x12, 0x44, 0x0a, 0x1e, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1c, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x19, 0x6c, 0x6f, 0x73, 0x74,
	0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x17, 0x6c, 0x6f, 0x73,
	0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x61, 0x72, 0x70, 0x70, 0x75, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x41, 0x72, 0x70, 0x70,
	0x75, 0x52, 0x05, 0x61, 0x72, 0x70, 0x70, 0x75, 0x12, 0x32, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x32,
	0x30, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x54, 0x6f, 0x70, 0x32, 0x30, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x32, 0x30, 0x12, 0x31, 0x0a, 0x05,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x68, 0x61, 0x72,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x74, 0x52, 0x05, 0x63, 0x68, 0x61, 0x72, 0x74, 0x22,
	0x66, 0x0a, 0x18, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x22, 0x4d, 0x0a, 0x15, 0x44, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x41, 0x6c, 0x74, 0x76,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x07, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x6d, 0x0a, 0x16, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x41, 0x72, 0x70, 0x70, 0x75,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x07, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x76, 0x67, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x61, 0x76, 0x67, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x22, 0x75, 0x0a, 0x16, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x6f, 0x70, 0x32, 0x30, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x07, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xea, 0x02, 0x0a,
	0x14, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x71, 0x75, 0x69, 0x63, 0x6b,
	0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x71,
	0x75, 0x69, 0x63, 0x6b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x32, 0x0a, 0x0c, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a,
	0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x02, 0x74, 0x6f, 0x22, 0xaa, 0x01,
	0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x68, 0x6f, 0x72,
	0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x99, 0x02, 0x0a, 0x11, 0x53,
	0x68, 0x6f, 0x72, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65,
	0x76, 0x65, 0x6e, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x72, 0x65, 0x76,
	0x65, 0x6e, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x52, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x8e, 0x01, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x32, 0x0a, 0x18, 0x44,
	0x65, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x22,
	0x95, 0x01, 0x0a, 0x19, 0x44, 0x65, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x43,
	0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x69,
	0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6f, 0x6b, 0x69,
	0x65, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x4c, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x49, 0x64, 0x22, 0x80, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0xab, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x42, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe0, 0x02, 0x0a, 0x18, 0x46, 0x69, 0x6e, 0x64, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x71, 0x75,
	0x69, 0x63, 0x6b, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x46,
	0x72, 0x6f, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x74, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x54, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6f, 0x72,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x22, 0xb3, 0x01, 0x0a, 0x19, 0x46, 0x69,
	0x6e, 0x64, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x9d, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67,
	0x50, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x61, 0x74,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x1f,
	0x0a, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x22,
	0xf9, 0x02, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67,
	0x50, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3c,
	0x0a, 0x1a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x18, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x1c,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x1a, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x45,
	0x0a, 0x1f, 0x6e, 0x6f, 0x5f, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x6e, 0x6f, 0x52, 0x65, 0x6e, 0x65, 0x77,
	0x69, 0x6e, 0x67, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x1e, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x72,
	0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x94, 0x01, 0x0a, 0x18,
	0x41, 0x64, 0x64, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x52,
	0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x04, 0x69, 0x74,
	0x65, 0x6d, 0x22, 0x6b, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x75,
	0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x75, 0x0a, 0x1a, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69,
	0x6e, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x22, 0x6b, 0x0a, 0x1b, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x76, 0x0a, 0x1b, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x22, 0x6c, 0x0a, 0x1c, 0x44,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50,
	0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x75, 0x0a, 0x1a, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64,
	0x22, 0x6b, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72,
	0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x72, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49,
	0x64, 0x22, 0x94, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69,
	0x6e, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x04,
	0x69, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x6c,
	0x61, 0x6e, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x86, 0x02, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x65, 0x22, 0xab, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69,
	0x6e, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50,
	0x6c, 0x61, 0x6e, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x3e, 0x0a, 0x1f, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x61, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x41, 0x74, 0x22,
	0xa4, 0x01, 0x0a, 0x20, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x75, 0x72,
	0x72, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x2b, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x4e, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x35, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x22, 0x99, 0x01, 0x0a, 0x1c, 0x47,
	0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x69, 0x74, 0x65,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x4d, 0x0a, 0x11, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xc5, 0x02, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a,
	0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x1f, 0x0a, 0x0b,
	0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x22, 0xb4, 0x01,
	0x0a, 0x1e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x6d, 0x0a, 0x22, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f,
	0x6f, 0x6b, 0x69, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6f, 0x6b,
	0x69, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x22, 0x66, 0x0a, 0x24, 0x53, 0x65, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x61, 0x6c, 0x50, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6f,
	0x6b, 0x69, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x9a, 0x01, 0x0a, 0x1b,
	0x41, 0x64, 0x64, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x69,
	0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x6c, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0xb1, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x4d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x4d, 0x0a, 0x1a, 0x47, 0x65,
	0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x9a, 0x01, 0x0a, 0x1b, 0x47, 0x65,
	0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x69, 0x74, 0x65,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x27, 0x53, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43,
	0x6f, 0x73, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x05, 0x63, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x4d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x52, 0x05, 0x63, 0x6f, 0x73, 0x74, 0x73, 0x22, 0xb3,
	0x01, 0x0a, 0x28, 0x53, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x43, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x52, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x22, 0x41, 0x0a, 0x1e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x4d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x41, 0x70, 0x69, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x96, 0x01, 0x0a, 0x1f, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x41, 0x70, 0x69, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x69, 0x74, 0x65,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d,
	0x32, 0xe6, 0x96, 0x01, 0x0a, 0x0e, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x59, 0x0a, 0x14, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x42, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x1d, 0x2e, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x42, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x69, 0x6e, 0x6b, 0x1a, 0x20, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x55, 0x0a, 0x12, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x20, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x1a, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x46, 0x6f, 0x72, 0x6d, 0x4a, 0x73, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x20, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x4a, 0x73, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x4a, 0x73, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x14, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1b, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53,
	0x0a, 0x16, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x12, 0x19, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x14,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x21, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x0b, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x2e, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x1a, 0x13, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x48, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x42, 0x79, 0x12, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0d, 0x4c,
	0x69, 0x73, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x1c, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x19, 0x4c,
	0x69, 0x73, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x41,
	0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x67,
	0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x49, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x12, 0x17, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x6e, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x14,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x74, 0x0a,
	0x1b, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x28, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65,
	0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x19, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x26, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x53, 0x65, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61,
	0x0a, 0x16, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x53, 0x33, 0x41,
	0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x53, 0x65, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x53, 0x33, 0x41, 0x67, 0x72,
	0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x65, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x52, 0x61, 0x74, 0x65, 0x73, 0x12, 0x23, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x54, 0x61,
	0x72, 0x69, 0x66, 0x66, 0x52, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x24, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x52, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x4d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x52, 0x61, 0x74,
	0x65, 0x73, 0x12, 0x23, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x52, 0x61, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x74, 0x0a, 0x1b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x50, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x73, 0x12, 0x28, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c,
	0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x17, 0x52,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x41, 0x70,
	0x69, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x24, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x41, 0x70, 0x69,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x4d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x41, 0x70, 0x69, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x62, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x20, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x00, 0x12, 0x4f, 0x0a, 0x16, 0x4d, 0x61, 0x72, 0x6b, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x52, 0x65, 0x61, 0x64, 0x12, 0x1c, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x73, 0x12, 0x27, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0x00,
	0x12, 0x6b, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x25, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x68, 0x0a,
	0x1b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x22, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x19, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x44, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x12,
	0x18, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x52, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x12, 0x16, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x15, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x12, 0x15, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x1a, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x26, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72,
	0x6d, 0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x20, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x46, 0x6f, 0x72, 0x6d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x30, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x44, 0x61,
	0x74, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x62, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x42, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x22, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x23, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x42, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12,
	0x0d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x1a, 0x0d,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x22, 0x00, 0x12,
	0x47, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12,
	0x19, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x14, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x1a, 0x18, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x14, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x1a,
	0x13, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x20, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x46, 0x6f, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x47, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x73, 0x12, 0x14, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x1a, 0x1b, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x12, 0x20, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x13, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x10, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x1a, 0x1b, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x17, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1b, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x47,
	0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x19,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x17, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1b, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x38, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x12, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x77, 0x0a, 0x1c, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x29, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x62, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x25, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x46, 0x6f, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x1a, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x00,
	0x12, 0x35, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x1a, 0x10, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x15, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x49, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x12, 0x15, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x1a, 0x53,
	0x65, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x57, 0x65, 0x62, 0x48, 0x6f, 0x6f,
	0x6b, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x15, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x13, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x13, 0x46, 0x69, 0x6e, 0x64, 0x41,
	0x6c, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x17,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x14, 0x46, 0x69, 0x6e,
	0x64, 0x41, 0x6c, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x12, 0x17, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x44, 0x0a,
	0x0d, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x17,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x12, 0x49, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x61,
	0x6e, 0x42, 0x65, 0x50, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x49, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x42, 0x65, 0x50, 0x61, 0x79,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x49, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x42, 0x65, 0x50, 0x61,
	0x79, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x45,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x1d, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13,
	0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x13, 0x2e, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0x13,
	0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x20, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x42, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x13, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x69, 0x65, 0x73, 0x12, 0x12, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x66, 0x0a,
	0x1d, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x79, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1f,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x42, 0x79, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x22, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x79, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x1f, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x42, 0x79, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x65, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x22, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x42, 0x79, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x23, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x12, 0x1a,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x4b, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a,
	0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x16, 0x2e,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x1a, 0x21, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x82, 0x01, 0x0a, 0x2d, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x26, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x75, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x25, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x79, 0x0a, 0x25, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x25, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x7c, 0x0a, 0x27, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x26, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x6f, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x25, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x73, 0x0a, 0x1f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x25, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0d, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x79, 0x5a,
	0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x42, 0x79, 0x5a, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x79,
	0x5a, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x62, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x12, 0x12, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x73,
	0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x12, 0x28, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x73,
	0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x1b, 0x53, 0x65, 0x74, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x73,
	0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x21, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x43, 0x6f, 0x73, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x1a, 0x26, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x43, 0x6f, 0x73, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x73, 0x74,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x21, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x00,
	0x12, 0x82, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x12, 0x2e, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f,
	0x73, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x4d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x77, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x4d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x12, 0x2a, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43,
	0x6f, 0x73, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x28, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x70,
	0x0a, 0x1d, 0x53, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x12,
	0x23, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x1a, 0x28, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x4d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x83, 0x01, 0x0a, 0x20, 0x53, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x12, 0x2d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x43, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x43, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f,
	0x73, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x12, 0x21, 0x2e, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x73, 0x74,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4d, 0x6f,
	0x6e, 0x65, 0x79, 0x42, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x73, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x12, 0x12, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x6f, 0x6e,
	0x65, 0x79, 0x42, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x73, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x62,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x42, 0x61, 0x63, 0x6b, 0x43, 0x6f,
	0x73, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x23, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x42, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x73, 0x74,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x42, 0x61, 0x63, 0x6b, 0x43, 0x6f,
	0x73, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x5b, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x42, 0x61,
	0x63, 0x6b, 0x43, 0x6f, 0x73, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x1c, 0x2e, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x42, 0x61, 0x63, 0x6b,
	0x43, 0x6f, 0x73, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x1a, 0x21, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x42, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x73, 0x74, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x55, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x42, 0x61,
	0x63, 0x6b, 0x43, 0x6f, 0x73, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x21, 0x2e, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x73, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x13, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x42, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x12, 0x29, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x42, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x27, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x42, 0x61, 0x63,
	0x6b, 0x43, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x42, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x73, 0x74, 0x4d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x12, 0x25, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x42, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x73, 0x74, 0x4d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x42, 0x61, 0x63, 0x6b, 0x43,
	0x6f, 0x73, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x65,
	0x79, 0x42, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x12, 0x1e, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x6f, 0x6e, 0x65,
	0x79, 0x42, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x1a, 0x23, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x42, 0x61,
	0x63, 0x6b, 0x43, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x42, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x73, 0x74, 0x4d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x12, 0x21, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22,
	0x00, 0x12, 0x62, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x22, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1b, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x12, 0x11, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x1a, 0x1c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x55,
	0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x10, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x1d, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x13, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x20, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x1f, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x79, 0x61, 0x6c, 0x74,
	0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x53, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65,
	0x74, 0x52, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74,
	0x52, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x20,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x6f, 0x79, 0x61,
	0x6c, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x13, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x12, 0x24, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f,
	0x79, 0x61, 0x6c, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x1b, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x28, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x6f, 0x79, 0x61, 0x6c,
	0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x13, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x18, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x12, 0x12, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6b, 0x0a,
	0x18, 0x52, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x64,
	0x66, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x12, 0x25, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x52, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x64,
	0x66, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x26, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x64, 0x66, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x56, 0x61, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x44, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x12, 0x12, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x56, 0x61, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x56, 0x61, 0x74, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x17, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x61, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x56, 0x61, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x56, 0x61, 0x74, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x1c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x61, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x56, 0x61,
	0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x1e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x56, 0x61, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x52, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x61, 0x74, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x61, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x56, 0x61, 0x74, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x61, 0x74, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x56, 0x61, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x13, 0x43, 0x61, 0x6c, 0x63, 0x41, 0x6e,
	0x6e, 0x75, 0x61, 0x6c, 0x54, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x12, 0x12, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x13, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x4d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x23, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x53, 0x33, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f,
	0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x12, 0x25, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f,
	0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x4b, 0x65, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x1c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4b, 0x65, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4b, 0x65, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x1f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x1a, 0x18, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4b,
	0x65, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65, 0x79,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x1f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x57, 0x69, 0x74,
	0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x11, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x4b, 0x65, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x1e,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x4b, 0x65, 0x79,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4b, 0x65, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x13, 0x55, 0x6e,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x4b, 0x65, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x12, 0x20, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x6e, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x4b, 0x65, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4b, 0x65, 0x79, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x5e, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x46, 0x6f, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x23, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x46,
	0x6f, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x56, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4b,
	0x65, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4b,
	0x65, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x12, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x5e, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4b, 0x65,
	0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x4b, 0x65, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x51, 0x0a, 0x0e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4b, 0x65, 0x79, 0x73,
	0x46, 0x69, 0x6c, 0x65, 0x12, 0x1d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x4b, 0x65, 0x79, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x4b, 0x65, 0x79, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x42,
	0x79, 0x49, 0x44, 0x12, 0x18, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4b, 0x65, 0x79, 0x46, 0x6f,
	0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x46, 0x6f, 0x72, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x4b,
	0x65, 0x79, 0x46, 0x6f, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1f, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4b, 0x65, 0x79, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x5a, 0x0a, 0x17, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x4b,
	0x65, 0x79, 0x46, 0x6f, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x18, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x4b, 0x65, 0x79, 0x46, 0x6f, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4b,
	0x65, 0x79, 0x46, 0x6f, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x17, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x4b, 0x65, 0x79, 0x46, 0x6f,
	0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x18, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4b, 0x65,
	0x79, 0x46, 0x6f, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x57, 0x69, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x00, 0x12, 0x56, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x49,
	0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x1d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x75, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x44, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1d, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4d, 0x61, 0x69,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x47, 0x65, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x76, 0x65,
	0x6e, 0x75, 0x65, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x23, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74,
	0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x6f, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x24, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47,
	0x65, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x41, 0x72, 0x70, 0x75, 0x12,
	0x28, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x72,
	0x70, 0x75, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x72, 0x70, 0x75, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x21,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x22, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x21, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x59, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x1e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x65, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x1e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x19, 0x50, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x64, 0x66, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x12, 0x26, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61,
	0x79, 0x6f, 0x75, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x64, 0x66, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x64, 0x66, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x19, 0x41, 0x75, 0x74,
	0x6f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x12, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x59, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47,
	0x65, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x47, 0x65, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x1a,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x2a, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a,
	0x15, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x6b, 0x75, 0x41, 0x6e, 0x64, 0x4b, 0x65, 0x79, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x22, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x53, 0x6b, 0x75, 0x41, 0x6e, 0x64, 0x4b, 0x65, 0x79, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x57,
	0x69, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0b, 0x47,
	0x65, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x18, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x61, 0x79, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x3e, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x69, 0x6e, 0x6b, 0x12,
	0x14, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x61, 0x79, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x44, 0x0a, 0x11, 0x49, 0x6e, 0x63, 0x72, 0x50, 0x61, 0x79, 0x6c, 0x69, 0x6e, 0x6b,
	0x56, 0x69, 0x73, 0x69, 0x74, 0x73, 0x12, 0x18, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61,
	0x79, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x79, 0x49, 0x64,
	0x1a, 0x13, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x50, 0x61,
	0x79, 0x6c, 0x69, 0x6e, 0x6b, 0x55, 0x52, 0x4c, 0x12, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x69, 0x6e, 0x6b, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x61, 0x79, 0x6c, 0x69, 0x6e, 0x6b, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x1d, 0x2e, 0x70,
	0x61, 0x79, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79,
	0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x50, 0x61, 0x79, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x14, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x50, 0x61, 0x79, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x57, 0x69, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12,
	0x5e, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x21, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x61, 0x79, 0x6c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x67, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x42, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x21, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x69, 0x6e, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x50,
	0x61, 0x79, 0x6c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x42, 0x79, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x65, 0x72, 0x12, 0x21, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x61, 0x79, 0x6c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47,
	0x65, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x64, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x69, 0x6e, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x42, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x21, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x69, 0x6e, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50,
	0x61, 0x79, 0x6c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x42, 0x79, 0x55, 0x74, 0x6d, 0x12,
	0x21, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x69, 0x6e,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x27, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79,
	0x6c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47,
	0x65, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x18, 0x47, 0x65,
	0x74, 0x50, 0x61, 0x79, 0x6c, 0x69, 0x6e, 0x6b, 0x55, 0x72, 0x6c, 0x42, 0x79, 0x53, 0x68, 0x6f,
	0x72, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x25, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x61, 0x79, 0x6c, 0x69, 0x6e, 0x6b, 0x55, 0x72, 0x6c, 0x42, 0x79, 0x53, 0x68, 0x6f,
	0x72, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x69, 0x6e, 0x6b, 0x55,
	0x72, 0x6c, 0x42, 0x79, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x61, 0x76, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1c, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x61, 0x76, 0x65, 0x64, 0x43, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x57, 0x69, 0x74,
	0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x19, 0x47, 0x65, 0x74,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69,
	0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x19, 0x2e, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x1a, 0x1d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x57, 0x69, 0x74, 0x68,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12,
	0x20, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x69, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x12, 0x12, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47,
	0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x69, 0x6e, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x5b, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x69, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x1e,
	0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x69, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x1a, 0x1d,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x57, 0x69, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12,
	0x53, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x12, 0x1d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x12, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x12, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x12, 0x1f,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x20, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0f, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x1c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x12, 0x21, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x57, 0x69, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x00, 0x12, 0x54, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x1e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65,
	0x73, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x57, 0x69, 0x74, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0c, 0x41, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x19, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x41,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x53, 0x0a, 0x10, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x20, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x73,
	0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x19, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x6f, 0x6c,
	0x65, 0x46, 0x6f, 0x72, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x26, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x6f,
	0x6c, 0x65, 0x46, 0x6f, 0x72, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x57, 0x69, 0x74,
	0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x16, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x23, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x6f, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x57, 0x69, 0x74,
	0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0b, 0x47, 0x65, 0x74,
	0x52, 0x6f, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x19, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x50, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x19, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x57, 0x69, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x00, 0x12, 0x4a, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x57, 0x69, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x4a, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x6f, 0x6c, 0x65, 0x12, 0x19, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x16, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x59, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x15, 0x53, 0x65, 0x6e, 0x64,
	0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x54, 0x6f, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x12, 0x1b, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f,
	0x6b, 0x54, 0x6f, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x18, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x57,
	0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x12, 0x25, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x57,
	0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x57, 0x69, 0x74,
	0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x18, 0x52, 0x6f, 0x79,
	0x61, 0x6c, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x1e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x57, 0x69, 0x74, 0x68, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x11, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x1e, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x57, 0x69, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x4f, 0x66, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x63, 0x74, 0x4f, 0x66, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x63, 0x74, 0x4f, 0x66, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x62, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x73, 0x4f, 0x66, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x41, 0x63, 0x74, 0x73, 0x4f, 0x66, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x22, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x63, 0x74, 0x73, 0x4f, 0x66, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x1a, 0x53, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x12, 0x27, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x57, 0x69, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x4c, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x72,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x72, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x56,
	0x0a, 0x11, 0x44, 0x65, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x43, 0x6f, 0x6f,
	0x6b, 0x69, 0x65, 0x12, 0x1e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1f, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x57, 0x69, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x4c,
	0x0a, 0x10, 0x41, 0x64, 0x64, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x6c,
	0x61, 0x6e, 0x12, 0x16, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63,
	0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x1a, 0x1e, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x41, 0x64, 0x64, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x6c,
	0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x13,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50,
	0x6c, 0x61, 0x6e, 0x12, 0x16, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65,
	0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x1a, 0x21, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69,
	0x6e, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x5c, 0x0a, 0x13, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72,
	0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x20, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x6c,
	0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67,
	0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f,
	0x0a, 0x14, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69,
	0x6e, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x21, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x6c,
	0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e,
	0x67, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x5c, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69,
	0x6e, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x20, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50,
	0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61,
	0x6e, 0x12, 0x1d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x75,
	0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x75, 0x72,
	0x72, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x56, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69,
	0x6e, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x12, 0x1e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x14, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x12, 0x21, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63,
	0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x18, 0x46,
	0x69, 0x6e, 0x64, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x64, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x57, 0x69, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x00, 0x12, 0x56, 0x0a, 0x11, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x23, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x1d, 0x53, 0x65, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x61, 0x6c, 0x50, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x74, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6e, 0x65, 0x77,
	0x61, 0x6c, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x57, 0x69, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x00, 0x12, 0x55, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x1a, 0x21, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x4d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x21, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x20, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12,
	0x12, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x0e, 0x5a, 0x0c, 0x2e, 0x2f,
	0x3b, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_grpc_proto_rawDescOnce sync.Once
	file_grpc_proto_rawDescData = file_grpc_proto_rawDesc
)

func file_grpc_proto_rawDescGZIP() []byte {
	file_grpc_proto_rawDescOnce.Do(func() {
		file_grpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_grpc_proto_rawDescData)
	})
	return file_grpc_proto_rawDescData
}

var file_grpc_proto_msgTypes = make([]protoimpl.MessageInfo, 362)
var file_grpc_proto_goTypes = []interface{}{
	(*EmptyRequest)(nil),                                  // 0: grpc.EmptyRequest
	(*EmptyResponse)(nil),                                 // 1: grpc.EmptyResponse
	(*EmptyResponseWithStatus)(nil),                       // 2: grpc.EmptyResponseWithStatus
	(*CheckSkuAndKeyProjectRequest)(nil),                  // 3: grpc.CheckSkuAndKeyProjectRequest
	(*ChangeCodeInOrderRequest)(nil),                      // 4: grpc.ChangeCodeInOrderRequest
	(*ChangeCodeInOrderResponse)(nil),                     // 5: grpc.ChangeCodeInOrderResponse
	(*GetPlatformKeyCountResponse)(nil),                   // 6: grpc.GetPlatformKeyCountResponse
	(*KeyForOrderRequest)(nil),                            // 7: grpc.KeyForOrderRequest
	(*GetKeyForOrderRequestResponse)(nil),                 // 8: grpc.GetKeyForOrderRequestResponse
	(*PlatformKeyReserveResponse)(nil),                    // 9: grpc.PlatformKeyReserveResponse
	(*PlatformKeyReserveRequest)(nil),                     // 10: grpc.PlatformKeyReserveRequest
	(*PlatformKeysFileResponse)(nil),                      // 11: grpc.PlatformKeysFileResponse
	(*PlatformKeysFileRequest)(nil),                       // 12: grpc.PlatformKeysFileRequest
	(*GetPlatformKeyCountRequest)(nil),                    // 13: grpc.GetPlatformKeyCountRequest
	(*RemovePlatformRequest)(nil),                         // 14: grpc.RemovePlatformRequest
	(*KeyProductResponse)(nil),                            // 15: grpc.KeyProductResponse
	(*CreateOrUpdateKeyProductRequest)(nil),               // 16: grpc.CreateOrUpdateKeyProductRequest
	(*UnPublishKeyProductRequest)(nil),                    // 17: grpc.UnPublishKeyProductRequest
	(*PublishKeyProductRequest)(nil),                      // 18: grpc.PublishKeyProductRequest
	(*ListPlatformsRequest)(nil),                          // 19: grpc.ListPlatformsRequest
	(*ListPlatformsResponse)(nil),                         // 20: grpc.ListPlatformsResponse
	(*ListKeyProductsResponse)(nil),                       // 21: grpc.ListKeyProductsResponse
	(*ListKeyProductsRequest)(nil),                        // 22: grpc.ListKeyProductsRequest
	(*PaymentCreateRequest)(nil),                          // 23: grpc.PaymentCreateRequest
	(*PaymentCreateResponse)(nil),                         // 24: grpc.PaymentCreateResponse
	(*PaymentFormJsonDataRequest)(nil),                    // 25: grpc.PaymentFormJsonDataRequest
	(*PaymentFormJsonDataProject)(nil),                    // 26: grpc.PaymentFormJsonDataProject
	(*PaymentFormJsonData)(nil),                           // 27: grpc.PaymentFormJsonData
	(*PaymentFormJsonDataResponse)(nil),                   // 28: grpc.PaymentFormJsonDataResponse
	(*PaymentNotifyRequest)(nil),                          // 29: grpc.PaymentNotifyRequest
	(*PaymentNotifyResponse)(nil),                         // 30: grpc.PaymentNotifyResponse
	(*OnboardingRequest)(nil),                             // 31: grpc.OnboardingRequest
	(*FindByIdRequest)(nil),                               // 32: grpc.FindByIdRequest
	(*MerchantListingRequest)(nil),                        // 33: grpc.MerchantListingRequest
	(*MerchantListingResponse)(nil),                       // 34: grpc.MerchantListingResponse
	(*ListMerchantsForAgreementResponse)(nil),             // 35: grpc.ListMerchantsForAgreementResponse
	(*MerchantChangeStatusRequest)(nil),                   // 36: grpc.MerchantChangeStatusRequest
	(*NotificationRequest)(nil),                           // 37: grpc.NotificationRequest
	(*Notifications)(nil),                                 // 38: grpc.Notifications
	(*ListingNotificationRequest)(nil),                    // 39: grpc.ListingNotificationRequest
	(*ListingMerchantPaymentMethod)(nil),                  // 40: grpc.ListingMerchantPaymentMethod
	(*GetMerchantPaymentMethodRequest)(nil),               // 41: grpc.GetMerchantPaymentMethodRequest
	(*GetMerchantPaymentMethodResponse)(nil),              // 42: grpc.GetMerchantPaymentMethodResponse
	(*ListMerchantPaymentMethodsRequest)(nil),             // 43: grpc.ListMerchantPaymentMethodsRequest
	(*MerchantPaymentMethodRequest)(nil),                  // 44: grpc.MerchantPaymentMethodRequest
	(*MerchantPaymentMethodResponse)(nil),                 // 45: grpc.MerchantPaymentMethodResponse
	(*GetMerchantResponse)(nil),                           // 46: grpc.GetMerchantResponse
	(*GetNotificationRequest)(nil),                        // 47: grpc.GetNotificationRequest
	(*CreateRefundRequest)(nil),                           // 48: grpc.CreateRefundRequest
	(*CreateRefundResponse)(nil),                          // 49: grpc.CreateRefundResponse
	(*ListRefundsRequest)(nil),                            // 50: grpc.ListRefundsRequest
	(*ListRefundsResponse)(nil),                           // 51: grpc.ListRefundsResponse
	(*GetRefundRequest)(nil),                              // 52: grpc.GetRefundRequest
	(*CallbackRequest)(nil),                               // 53: grpc.CallbackRequest
	(*PaymentFormDataChangedRequest)(nil),                 // 54: grpc.PaymentFormDataChangedRequest
	(*PaymentFormUserChangePlatformRequest)(nil),          // 55: grpc.PaymentFormUserChangePlatformRequest
	(*PaymentFormUserChangeLangRequest)(nil),              // 56: grpc.PaymentFormUserChangeLangRequest
	(*PaymentFormUserChangePaymentAccountRequest)(nil),    // 57: grpc.PaymentFormUserChangePaymentAccountRequest
	(*PaymentFormDataChangeResponse)(nil),                 // 58: grpc.PaymentFormDataChangeResponse
	(*ProcessBillingAddressRequest)(nil),                  // 59: grpc.ProcessBillingAddressRequest
	(*ProcessBillingAddressResponseItem)(nil),             // 60: grpc.ProcessBillingAddressResponseItem
	(*ProcessBillingAddressResponse)(nil),                 // 61: grpc.ProcessBillingAddressResponse
	(*GetMerchantByRequest)(nil),                          // 62: grpc.GetMerchantByRequest
	(*ChangeMerchantDataRequest)(nil),                     // 63: grpc.ChangeMerchantDataRequest
	(*ChangeMerchantDataResponse)(nil),                    // 64: grpc.ChangeMerchantDataResponse
	(*ChangeMerchantResponse)(nil),                        // 65: grpc.ChangeMerchantResponse
	(*ChangeMerchantStatusResponse)(nil),                  // 66: grpc.ChangeMerchantStatusResponse
	(*CreateNotificationResponse)(nil),                    // 67: grpc.CreateNotificationResponse
	(*OrderCreateProcessResponse)(nil),                    // 68: grpc.OrderCreateProcessResponse
	(*SetMerchantS3AgreementRequest)(nil),                 // 69: grpc.SetMerchantS3AgreementRequest
	(*KeyProductInfo)(nil),                                // 70: grpc.KeyProductInfo
	(*PlatformPriceInfo)(nil),                             // 71: grpc.PlatformPriceInfo
	(*ProductPriceInfo)(nil),                              // 72: grpc.ProductPriceInfo
	(*KeyProduct)(nil),                                    // 73: grpc.KeyProduct
	(*PlatformPrice)(nil),                                 // 74: grpc.PlatformPrice
	(*PlatformOs)(nil),                                    // 75: grpc.PlatformOs
	(*Platform)(nil),                                      // 76: grpc.Platform
	(*Product)(nil),                                       // 77: grpc.Product
	(*ListProductsRequest)(nil),                           // 78: grpc.ListProductsRequest
	(*GetProductsForOrderRequest)(nil),                    // 79: grpc.GetProductsForOrderRequest
	(*GetKeyProductInfoRequest)(nil),                      // 80: grpc.GetKeyProductInfoRequest
	(*GetKeyProductInfoResponse)(nil),                     // 81: grpc.GetKeyProductInfoResponse
	(*GetKeyProductsForOrderRequest)(nil),                 // 82: grpc.GetKeyProductsForOrderRequest
	(*ListProductsResponse)(nil),                          // 83: grpc.ListProductsResponse
	(*RequestProduct)(nil),                                // 84: grpc.RequestProduct
	(*RequestKeyProductMerchant)(nil),                     // 85: grpc.RequestKeyProductMerchant
	(*RequestKeyProduct)(nil),                             // 86: grpc.RequestKeyProduct
	(*I18NTextSearchable)(nil),                            // 87: grpc.I18NTextSearchable
	(*ChangeProjectResponse)(nil),                         // 88: grpc.ChangeProjectResponse
	(*GetProjectRequest)(nil),                             // 89: grpc.GetProjectRequest
	(*ListProjectsRequest)(nil),                           // 90: grpc.ListProjectsRequest
	(*ListProjectsResponse)(nil),                          // 91: grpc.ListProjectsResponse
	(*TokenRequest)(nil),                                  // 92: grpc.TokenRequest
	(*TokenResponse)(nil),                                 // 93: grpc.TokenResponse
	(*CheckProjectRequestSignatureRequest)(nil),           // 94: grpc.CheckProjectRequestSignatureRequest
	(*CheckProjectRequestSignatureResponse)(nil),          // 95: grpc.CheckProjectRequestSignatureResponse
	(*ListOrdersRequest)(nil),                             // 96: grpc.ListOrdersRequest
	(*GetOrderRequest)(nil),                               // 97: grpc.GetOrderRequest
	(*IsOrderCanBePayingRequest)(nil),                     // 98: grpc.IsOrderCanBePayingRequest
	(*IsOrderCanBePayingResponse)(nil),                    // 99: grpc.IsOrderCanBePayingResponse
	(*SetUserNotifyRequest)(nil),                          // 100: grpc.SetUserNotifyRequest
	(*NotifyUserSales)(nil),                               // 101: grpc.NotifyUserSales
	(*NotifyUserNewRegion)(nil),                           // 102: grpc.NotifyUserNewRegion
	(*GetPaymentMethodSettingsRequest)(nil),               // 103: grpc.GetPaymentMethodSettingsRequest
	(*GetPaymentMethodSettingsResponse)(nil),              // 104: grpc.GetPaymentMethodSettingsResponse
	(*ChangePaymentMethodRequest)(nil),                    // 105: grpc.ChangePaymentMethodRequest
	(*ChangePaymentMethodParamsRequest)(nil),              // 106: grpc.ChangePaymentMethodParamsRequest
	(*ChangePaymentMethodResponse)(nil),                   // 107: grpc.ChangePaymentMethodResponse
	(*ChangePaymentMethodParamsResponse)(nil),             // 108: grpc.ChangePaymentMethodParamsResponse
	(*FindByZipCodeRequest)(nil),                          // 109: grpc.FindByZipCodeRequest
	(*FindByZipCodeResponse)(nil),                         // 110: grpc.FindByZipCodeResponse
	(*ResponseError)(nil),                                 // 111: grpc.ResponseError
	(*ResponseErrorMessage)(nil),                          // 112: grpc.ResponseErrorMessage
	(*CreateAccountingEntryRequest)(nil),                  // 113: grpc.CreateAccountingEntryRequest
	(*CreateAccountingEntryResponse)(nil),                 // 114: grpc.CreateAccountingEntryResponse
	(*CreateRoyaltyReportRequest)(nil),                    // 115: grpc.CreateRoyaltyReportRequest
	(*ListRoyaltyReportsRequest)(nil),                     // 116: grpc.ListRoyaltyReportsRequest
	(*RoyaltyReportsPaginate)(nil),                        // 117: grpc.RoyaltyReportsPaginate
	(*ListRoyaltyReportsResponse)(nil),                    // 118: grpc.ListRoyaltyReportsResponse
	(*ListRoyaltyReportOrdersRequest)(nil),                // 119: grpc.ListRoyaltyReportOrdersRequest
	(*ChangeRoyaltyReportCorrection)(nil),                 // 120: grpc.ChangeRoyaltyReportCorrection
	(*GetRoyaltyReportRequest)(nil),                       // 121: grpc.GetRoyaltyReportRequest
	(*GetRoyaltyReportResponse)(nil),                      // 122: grpc.GetRoyaltyReportResponse
	(*ChangeRoyaltyReportRequest)(nil),                    // 123: grpc.ChangeRoyaltyReportRequest
	(*MerchantReviewRoyaltyReportRequest)(nil),            // 124: grpc.MerchantReviewRoyaltyReportRequest
	(*PaymentChannelCostSystemListResponse)(nil),          // 125: grpc.PaymentChannelCostSystemListResponse
	(*PaymentChannelCostSystemResponse)(nil),              // 126: grpc.PaymentChannelCostSystemResponse
	(*PaymentChannelCostMerchantListResponse)(nil),        // 127: grpc.PaymentChannelCostMerchantListResponse
	(*PaymentChannelCostMerchantResponse)(nil),            // 128: grpc.PaymentChannelCostMerchantResponse
	(*MoneyBackCostSystemListResponse)(nil),               // 129: grpc.MoneyBackCostSystemListResponse
	(*MoneyBackCostSystemResponse)(nil),                   // 130: grpc.MoneyBackCostSystemResponse
	(*MoneyBackCostMerchantListResponse)(nil),             // 131: grpc.MoneyBackCostMerchantListResponse
	(*MoneyBackCostMerchantResponse)(nil),                 // 132: grpc.MoneyBackCostMerchantResponse
	(*PriceGroupByCountryRequest)(nil),                    // 133: grpc.PriceGroupByCountryRequest
	(*PriceGroupCurrenciesResponse)(nil),                  // 134: grpc.PriceGroupCurrenciesResponse
	(*PriceGroupRegions)(nil),                             // 135: grpc.PriceGroupRegions
	(*PriceGroupRegion)(nil),                              // 136: grpc.PriceGroupRegion
	(*PriceGroupByRegionRequest)(nil),                     // 137: grpc.PriceGroupByRegionRequest
	(*RecommendedPriceRequest)(nil),                       // 138: grpc.RecommendedPriceRequest
	(*RecommendedPriceResponse)(nil),                      // 139: grpc.RecommendedPriceResponse
	(*RecommendedPriceTableRequest)(nil),                  // 140: grpc.RecommendedPriceTableRequest
	(*RecommendedPriceTableResponse)(nil),                 // 141: grpc.RecommendedPriceTableResponse
	(*ProductPricesResponse)(nil),                         // 142: grpc.ProductPricesResponse
	(*UpdateProductPricesRequest)(nil),                    // 143: grpc.UpdateProductPricesRequest
	(*UserProfilePersonal)(nil),                           // 144: grpc.UserProfilePersonal
	(*UserProfileHelp)(nil),                               // 145: grpc.UserProfileHelp
	(*UserProfileCompanyMonetization)(nil),                // 146: grpc.UserProfileCompanyMonetization
	(*UserProfileCompanyPlatforms)(nil),                   // 147: grpc.UserProfileCompanyPlatforms
	(*UserProfileCompany)(nil),                            // 148: grpc.UserProfileCompany
	(*UserProfileEmail)(nil),                              // 149: grpc.UserProfileEmail
	(*UserProfile)(nil),                                   // 150: grpc.UserProfile
	(*CommonUserProfileRequest)(nil),                      // 151: grpc.CommonUserProfileRequest
	(*CommonUserProfileResponse)(nil),                     // 152: grpc.CommonUserProfileResponse
	(*CommonUserProfile)(nil),                             // 153: grpc.CommonUserProfile
	(*GetUserProfileRequest)(nil),                         // 154: grpc.GetUserProfileRequest
	(*GetUserProfileResponse)(nil),                        // 155: grpc.GetUserProfileResponse
	(*PageReview)(nil),                                    // 156: grpc.PageReview
	(*CreatePageReviewRequest)(nil),                       // 157: grpc.CreatePageReviewRequest
	(*ConfirmUserEmailRequest)(nil),                       // 158: grpc.ConfirmUserEmailRequest
	(*ConfirmUserEmailResponse)(nil),                      // 159: grpc.ConfirmUserEmailResponse
	(*VatTransactionsRequest)(nil),                        // 160: grpc.VatTransactionsRequest
	(*TransactionsPaginate)(nil),                          // 161: grpc.TransactionsPaginate
	(*TransactionsResponse)(nil),                          // 162: grpc.TransactionsResponse
	(*VatReportsRequest)(nil),                             // 163: grpc.VatReportsRequest
	(*VatReportsPaginate)(nil),                            // 164: grpc.VatReportsPaginate
	(*VatReportsResponse)(nil),                            // 165: grpc.VatReportsResponse
	(*ProcessVatReportsRequest)(nil),                      // 166: grpc.ProcessVatReportsRequest
	(*UpdateVatReportStatusRequest)(nil),                  // 167: grpc.UpdateVatReportStatusRequest
	(*GetMerchantOnboardingCompleteDataResponseItem)(nil), // 168: grpc.GetMerchantOnboardingCompleteDataResponseItem
	(*GetMerchantOnboardingCompleteDataResponse)(nil),     // 169: grpc.GetMerchantOnboardingCompleteDataResponse
	(*GetMerchantTariffRatesRequest)(nil),                 // 170: grpc.GetMerchantTariffRatesRequest
	(*GetMerchantTariffRatesResponseItems)(nil),           // 171: grpc.GetMerchantTariffRatesResponseItems
	(*GetMerchantTariffRatesResponse)(nil),                // 172: grpc.GetMerchantTariffRatesResponse
	(*SetMerchantTariffRatesRequest)(nil),                 // 173: grpc.SetMerchantTariffRatesRequest
	(*ListOrdersPublicResponseItem)(nil),                  // 174: grpc.ListOrdersPublicResponseItem
	(*ListOrdersPrivateResponseItem)(nil),                 // 175: grpc.ListOrdersPrivateResponseItem
	(*ListOrdersPublicResponse)(nil),                      // 176: grpc.ListOrdersPublicResponse
	(*ListOrdersPrivateResponse)(nil),                     // 177: grpc.ListOrdersPrivateResponse
	(*ListOrdersResponseItem)(nil),                        // 178: grpc.ListOrdersResponseItem
	(*ListOrdersResponse)(nil),                            // 179: grpc.ListOrdersResponse
	(*GetOrderPublicResponse)(nil),                        // 180: grpc.GetOrderPublicResponse
	(*GetOrderPrivateResponse)(nil),                       // 181: grpc.GetOrderPrivateResponse
	(*GetOriginalOrderResponse)(nil),                      // 182: grpc.GetOriginalOrderResponse
	(*GetDashboardMainRequest)(nil),                       // 183: grpc.GetDashboardMainRequest
	(*GetDashboardMainResponse)(nil),                      // 184: grpc.GetDashboardMainResponse
	(*GetDashboardBaseReportRequest)(nil),                 // 185: grpc.GetDashboardBaseReportRequest
	(*GetDashboardBaseReportResponse)(nil),                // 186: grpc.GetDashboardBaseReportResponse
	(*GetDashboardRevenueDynamicsReportResponse)(nil),     // 187: grpc.GetDashboardRevenueDynamicsReportResponse
	(*DashboardAmountItemWithChart)(nil),                  // 188: grpc.DashboardAmountItemWithChart
	(*DashboardChartItemFloat)(nil),                       // 189: grpc.DashboardChartItemFloat
	(*DashboardMainReportTotalTransactions)(nil),          // 190: grpc.DashboardMainReportTotalTransactions
	(*DashboardMainReport)(nil),                           // 191: grpc.DashboardMainReport
	(*DashboardRevenueDynamicReport)(nil),                 // 192: grpc.DashboardRevenueDynamicReport
	(*DashboardRevenueDynamicReportItem)(nil),             // 193: grpc.DashboardRevenueDynamicReportItem
	(*DashboardRevenueByCountryReportTop)(nil),            // 194: grpc.DashboardRevenueByCountryReportTop
	(*DashboardRevenueByCountryReportChartItem)(nil),      // 195: grpc.DashboardRevenueByCountryReportChartItem
	(*DashboardRevenueByCountryReport)(nil),               // 196: grpc.DashboardRevenueByCountryReport
	(*DashboardSalesTodayReportTop)(nil),                  // 197: grpc.DashboardSalesTodayReportTop
	(*DashboardChartItemInt)(nil),                         // 198: grpc.DashboardChartItemInt
	(*DashboardSalesTodayReport)(nil),                     // 199: grpc.DashboardSalesTodayReport
	(*DashboardSourcesReport)(nil),                        // 200: grpc.DashboardSourcesReport
	(*DashboardBaseReports)(nil),                          // 201: grpc.DashboardBaseReports
	(*CreatePayoutDocumentRequest)(nil),                   // 202: grpc.CreatePayoutDocumentRequest
	(*PayoutDocumentResponse)(nil),                        // 203: grpc.PayoutDocumentResponse
	(*CreatePayoutDocumentResponse)(nil),                  // 204: grpc.CreatePayoutDocumentResponse
	(*UpdatePayoutDocumentRequest)(nil),                   // 205: grpc.UpdatePayoutDocumentRequest
	(*GetPayoutDocumentRequest)(nil),                      // 206: grpc.GetPayoutDocumentRequest
	(*GetPayoutDocumentsRequest)(nil),                     // 207: grpc.GetPayoutDocumentsRequest
	(*PayoutDocumentsPaginate)(nil),                       // 208: grpc.PayoutDocumentsPaginate
	(*GetPayoutDocumentsResponse)(nil),                    // 209: grpc.GetPayoutDocumentsResponse
	(*UpdatePayoutDocumentSignaturesRequest)(nil),         // 210: grpc.UpdatePayoutDocumentSignaturesRequest
	(*GetMerchantBalanceRequest)(nil),                     // 211: grpc.GetMerchantBalanceRequest
	(*GetMerchantBalanceResponse)(nil),                    // 212: grpc.GetMerchantBalanceResponse
	(*PayoutDocumentPdfUploadedRequest)(nil),              // 213: grpc.PayoutDocumentPdfUploadedRequest
	(*PayoutDocumentPdfUploadedResponse)(nil),             // 214: grpc.PayoutDocumentPdfUploadedResponse
	(*OrderReceiptRequest)(nil),                           // 215: grpc.OrderReceiptRequest
	(*OrderReceiptResponse)(nil),                          // 216: grpc.OrderReceiptResponse
	(*GetProductResponse)(nil),                            // 217: grpc.GetProductResponse
	(*GetPriceGroupByRegionResponse)(nil),                 // 218: grpc.GetPriceGroupByRegionResponse
	(*GetPriceGroupByRegionRequest)(nil),                  // 219: grpc.GetPriceGroupByRegionRequest
	(*ChangeMerchantManualPayoutsRequest)(nil),            // 220: grpc.ChangeMerchantManualPayoutsRequest
	(*ChangeMerchantManualPayoutsResponse)(nil),           // 221: grpc.ChangeMerchantManualPayoutsResponse
	(*GetPaylinksRequest)(nil),                            // 222: grpc.GetPaylinksRequest
	(*SendWebhookToMerchantResponse)(nil),                 // 223: grpc.SendWebhookToMerchantResponse
	(*PaylinksPaginate)(nil),                              // 224: grpc.PaylinksPaginate
	(*NotifyWebhookTestResultsRequest)(nil),               // 225: grpc.NotifyWebhookTestResultsRequest
	(*GetPaylinksResponse)(nil),                           // 226: grpc.GetPaylinksResponse
	(*PaylinkRequestById)(nil),                            // 227: grpc.PaylinkRequestById
	(*PaylinkRequest)(nil),                                // 228: grpc.PaylinkRequest
	(*GetPaylinkResponse)(nil),                            // 229: grpc.GetPaylinkResponse
	(*GetPaylinkUrlByShortLinkRequest)(nil),               // 230: grpc.GetPaylinkUrlByShortLinkRequest
	(*GetPaylinkUrlByShortLinkResponse)(nil),              // 231: grpc.GetPaylinkUrlByShortLinkResponse
	(*GetPaylinkURLRequest)(nil),                          // 232: grpc.GetPaylinkURLRequest
	(*GetPaylinkUrlResponse)(nil),                         // 233: grpc.GetPaylinkUrlResponse
	(*GetPaylinkStatCommonRequest)(nil),                   // 234: grpc.GetPaylinkStatCommonRequest
	(*GetPaylinkTransactionsRequest)(nil),                 // 235: grpc.GetPaylinkTransactionsRequest
	(*GetPaylinkStatCommonResponse)(nil),                  // 236: grpc.GetPaylinkStatCommonResponse
	(*GetPaylinkStatCommonGroupResponse)(nil),             // 237: grpc.GetPaylinkStatCommonGroupResponse
	(*RoyaltyReportPdfUploadedRequest)(nil),               // 238: grpc.RoyaltyReportPdfUploadedRequest
	(*RoyaltyReportPdfUploadedResponse)(nil),              // 239: grpc.RoyaltyReportPdfUploadedResponse
	(*DeleteSavedCardRequest)(nil),                        // 240: grpc.DeleteSavedCardRequest
	(*GetOperatingCompaniesListResponse)(nil),             // 241: grpc.GetOperatingCompaniesListResponse
	(*GetPaymentMinLimitsSystemResponse)(nil),             // 242: grpc.GetPaymentMinLimitsSystemResponse
	(*SetMerchantOperatingCompanyRequest)(nil),            // 243: grpc.SetMerchantOperatingCompanyRequest
	(*SetMerchantOperatingCompanyResponse)(nil),           // 244: grpc.SetMerchantOperatingCompanyResponse
	(*SetMerchantAcceptedStatusRequest)(nil),              // 245: grpc.SetMerchantAcceptedStatusRequest
	(*SetMerchantAcceptedStatusResponse)(nil),             // 246: grpc.SetMerchantAcceptedStatusResponse
	(*GetOperatingCompanyRequest)(nil),                    // 247: grpc.GetOperatingCompanyRequest
	(*GetOperatingCompanyResponse)(nil),                   // 248: grpc.GetOperatingCompanyResponse
	(*OrderReCreateProcessRequest)(nil),                   // 249: grpc.OrderReCreateProcessRequest
	(*GetMerchantUsersRequest)(nil),                       // 250: grpc.GetMerchantUsersRequest
	(*GetMerchantUsersResponse)(nil),                      // 251: grpc.GetMerchantUsersResponse
	(*InviteUserMerchantRequest)(nil),                     // 252: grpc.InviteUserMerchantRequest
	(*InviteUserMerchantResponse)(nil),                    // 253: grpc.InviteUserMerchantResponse
	(*InviteUserAdminRequest)(nil),                        // 254: grpc.InviteUserAdminRequest
	(*InviteUserAdminResponse)(nil),                       // 255: grpc.InviteUserAdminResponse
	(*ResendInviteMerchantRequest)(nil),                   // 256: grpc.ResendInviteMerchantRequest
	(*ResendInviteAdminRequest)(nil),                      // 257: grpc.ResendInviteAdminRequest
	(*GetMerchantUserRequest)(nil),                        // 258: grpc.GetMerchantUserRequest
	(*GetMerchantUserResponse)(nil),                       // 259: grpc.GetMerchantUserResponse
	(*GetAdminUserRequest)(nil),                           // 260: grpc.GetAdminUserRequest
	(*GetAdminUserResponse)(nil),                          // 261: grpc.GetAdminUserResponse
	(*CheckInviteTokenRequest)(nil),                       // 262: grpc.CheckInviteTokenRequest
	(*CheckInviteTokenResponse)(nil),                      // 263: grpc.CheckInviteTokenResponse
	(*AcceptInviteRequest)(nil),                           // 264: grpc.AcceptInviteRequest
	(*AcceptInviteResponse)(nil),                          // 265: grpc.AcceptInviteResponse
	(*GetAdminUsersResponse)(nil),                         // 266: grpc.GetAdminUsersResponse
	(*GetMerchantsForUserRequest)(nil),                    // 267: grpc.GetMerchantsForUserRequest
	(*GetMerchantsForUserResponse)(nil),                   // 268: grpc.GetMerchantsForUserResponse
	(*MerchantForUserInfo)(nil),                           // 269: grpc.MerchantForUserInfo
	(*ChangeRoleForMerchantUserRequest)(nil),              // 270: grpc.ChangeRoleForMerchantUserRequest
	(*ChangeRoleForAdminUserRequest)(nil),                 // 271: grpc.ChangeRoleForAdminUserRequest
	(*GetRoleListRequest)(nil),                            // 272: grpc.GetRoleListRequest
	(*GetRoleListResponse)(nil),                           // 273: grpc.GetRoleListResponse
	(*AdminRoleRequest)(nil),                              // 274: grpc.AdminRoleRequest
	(*MerchantRoleRequest)(nil),                           // 275: grpc.MerchantRoleRequest
	(*Permission)(nil),                                    // 276: grpc.Permission
	(*UserRoleResponse)(nil),                              // 277: grpc.UserRoleResponse
	(*GetCountriesListForOrderRequest)(nil),               // 278: grpc.GetCountriesListForOrderRequest
	(*GetCountriesListForOrderResponse)(nil),              // 279: grpc.GetCountriesListForOrderResponse
	(*VatReportRequest)(nil),                              // 280: grpc.VatReportRequest
	(*PrivateTransactionsPaginate)(nil),                   // 281: grpc.PrivateTransactionsPaginate
	(*VatReportResponse)(nil),                             // 282: grpc.VatReportResponse
	(*PrivateTransactionsResponse)(nil),                   // 283: grpc.PrivateTransactionsResponse
	(*ReportFinanceDoneRequest)(nil),                      // 284: grpc.ReportFinanceDoneRequest
	(*SetCustomerPaymentActivityRequest)(nil),             // 285: grpc.SetCustomerPaymentActivityRequest
	(*ActOfCompletionRequest)(nil),                        // 286: grpc.ActOfCompletionRequest
	(*ActOfCompletionResponse)(nil),                       // 287: grpc.ActOfCompletionResponse
	(*ActsOfCompletionListRequest)(nil),                   // 288: grpc.ActsOfCompletionListRequest
	(*ActsOfCompletionListItem)(nil),                      // 289: grpc.ActsOfCompletionListItem
	(*ActsOfCompletionListResponse)(nil),                  // 290: grpc.ActsOfCompletionListResponse
	(*GetDashboardCustomerReportResponse)(nil),            // 291: grpc.GetDashboardCustomerReportResponse
	(*DashboardCustomerReportArpuRequest)(nil),            // 292: grpc.DashboardCustomerReportArpuRequest
	(*DashboardCustomerReportArpuResponse)(nil),           // 293: grpc.DashboardCustomerReportArpuResponse
	(*DashboardCustomerReportRequest)(nil),                // 294: grpc.DashboardCustomerReportRequest
	(*DashboardCustomerReport)(nil),                       // 295: grpc.DashboardCustomerReport
	(*DashboardCustomerDynamic)(nil),                      // 296: grpc.DashboardCustomerDynamic
	(*DashboardCustomerAltv)(nil),                         // 297: grpc.DashboardCustomerAltv
	(*DashboardCustomerArppu)(nil),                        // 298: grpc.DashboardCustomerArppu
	(*DashboardCustomerTop20)(nil),                        // 299: grpc.DashboardCustomerTop20
	(*ListCustomersRequest)(nil),                          // 300: grpc.ListCustomersRequest
	(*AmountFilter)(nil),                                  // 301: grpc.AmountFilter
	(*ListCustomersResponse)(nil),                         // 302: grpc.ListCustomersResponse
	(*ShortCustomerInfo)(nil),                             // 303: grpc.ShortCustomerInfo
	(*GetCustomerInfoRequest)(nil),                        // 304: grpc.GetCustomerInfoRequest
	(*GetCustomerInfoResponse)(nil),                       // 305: grpc.GetCustomerInfoResponse
	(*DeserializeCookieRequest)(nil),                      // 306: grpc.DeserializeCookieRequest
	(*DeserializeCookieResponse)(nil),                     // 307: grpc.DeserializeCookieResponse
	(*DeleteCustomerCardRequest)(nil),                     // 308: grpc.DeleteCustomerCardRequest
	(*GetSubscriptionRequest)(nil),                        // 309: grpc.GetSubscriptionRequest
	(*GetSubscriptionResponse)(nil),                       // 310: grpc.GetSubscriptionResponse
	(*FindSubscriptionsRequest)(nil),                      // 311: grpc.FindSubscriptionsRequest
	(*FindSubscriptionsResponse)(nil),                     // 312: grpc.FindSubscriptionsResponse
	(*GetRecurringPlanStatRequest)(nil),                   // 313: grpc.GetRecurringPlanStatRequest
	(*GetRecurringPlanStatResponse)(nil),                  // 314: grpc.GetRecurringPlanStatResponse
	(*AddRecurringPlanResponse)(nil),                      // 315: grpc.AddRecurringPlanResponse
	(*UpdateRecurringPlanResponse)(nil),                   // 316: grpc.UpdateRecurringPlanResponse
	(*EnableRecurringPlanRequest)(nil),                    // 317: grpc.EnableRecurringPlanRequest
	(*EnableRecurringPlanResponse)(nil),                   // 318: grpc.EnableRecurringPlanResponse
	(*DisableRecurringPlanRequest)(nil),                   // 319: grpc.DisableRecurringPlanRequest
	(*DisableRecurringPlanResponse)(nil),                  // 320: grpc.DisableRecurringPlanResponse
	(*DeleteRecurringPlanRequest)(nil),                    // 321: grpc.DeleteRecurringPlanRequest
	(*DeleteRecurringPlanResponse)(nil),                   // 322: grpc.DeleteRecurringPlanResponse
	(*GetRecurringPlanRequest)(nil),                       // 323: grpc.GetRecurringPlanRequest
	(*GetRecurringPlanResponse)(nil),                      // 324: grpc.GetRecurringPlanResponse
	(*GetRecurringPlansRequest)(nil),                      // 325: grpc.GetRecurringPlansRequest
	(*GetRecurringPlansResponse)(nil),                     // 326: grpc.GetRecurringPlansResponse
	(*FindExpiredSubscriptionsRequest)(nil),               // 327: grpc.FindExpiredSubscriptionsRequest
	(*FindExpiredSubscriptionsResponse)(nil),              // 328: grpc.FindExpiredSubscriptionsResponse
	(*DeleteSubscriptionRequest)(nil),                     // 329: grpc.DeleteSubscriptionRequest
	(*DeleteSubscriptionResponse)(nil),                    // 330: grpc.DeleteSubscriptionResponse
	(*GetCustomerShortInfoRequest)(nil),                   // 331: grpc.GetCustomerShortInfoRequest
	(*GetCustomerShortInfoResponse)(nil),                  // 332: grpc.GetCustomerShortInfoResponse
	(*CustomerShortInfo)(nil),                             // 333: grpc.CustomerShortInfo
	(*GetSubscriptionsOrdersRequest)(nil),                 // 334: grpc.GetSubscriptionsOrdersRequest
	(*GetSubscriptionsOrdersResponse)(nil),                // 335: grpc.GetSubscriptionsOrdersResponse
	(*DeleteRecurringSubscriptionRequest)(nil),            // 336: grpc.DeleteRecurringSubscriptionRequest
	(*SetSubscriptionRenewalPendingRequest)(nil),          // 337: grpc.SetSubscriptionRenewalPendingRequest
	(*AddMerchantDocumentResponse)(nil),                   // 338: grpc.AddMerchantDocumentResponse
	(*GetMerchantDocumentsRequest)(nil),                   // 339: grpc.GetMerchantDocumentsRequest
	(*GetMerchantDocumentsResponse)(nil),                  // 340: grpc.GetMerchantDocumentsResponse
	(*GetMerchantDocumentRequest)(nil),                    // 341: grpc.GetMerchantDocumentRequest
	(*GetMerchantDocumentResponse)(nil),                   // 342: grpc.GetMerchantDocumentResponse
	(*SetAllPaymentChannelCostMerchantRequest)(nil),       // 343: grpc.SetAllPaymentChannelCostMerchantRequest
	(*SetAllPaymentChannelCostMerchantResponse)(nil),      // 344: grpc.SetAllPaymentChannelCostMerchantResponse
	(*RefreshMerchantApiTokenRequest)(nil),                // 345: grpc.RefreshMerchantApiTokenRequest
	(*RefreshMerchantApiTokenResponse)(nil),               // 346: grpc.RefreshMerchantApiTokenResponse
	nil,                                                   // 347: grpc.CreateOrUpdateKeyProductRequest.NameEntry
	nil,                                                   // 348: grpc.CreateOrUpdateKeyProductRequest.DescriptionEntry
	nil,                                                   // 349: grpc.CreateOrUpdateKeyProductRequest.LongDescriptionEntry
	nil,                                                   // 350: grpc.CreateOrUpdateKeyProductRequest.MetadataEntry
	nil,                                                   // 351: grpc.PaymentCreateRequest.DataEntry
	nil,                                                   // 352: grpc.KeyProduct.NameEntry
	nil,                                                   // 353: grpc.KeyProduct.DescriptionEntry
	nil,                                                   // 354: grpc.KeyProduct.LongDescriptionEntry
	nil,                                                   // 355: grpc.KeyProduct.MetadataEntry
	nil,                                                   // 356: grpc.Product.NameEntry
	nil,                                                   // 357: grpc.Product.DescriptionEntry
	nil,                                                   // 358: grpc.Product.LongDescriptionEntry
	nil,                                                   // 359: grpc.Product.MetadataEntry
	nil,                                                   // 360: grpc.GetMerchantTariffRatesResponseItems.PayoutEntry
	nil,                                                   // 361: grpc.GetMerchantTariffRatesResponseItems.MinimalPayoutEntry
	(*Order)(nil),                                         // 362: billing.Order
	(*Key)(nil),                                           // 363: billing.Key
	(*ImageCollection)(nil),                               // 364: billing.ImageCollection
	(*timestamp.Timestamp)(nil),                           // 365: google.protobuf.Timestamp
	(*ProjectRedirectSettings)(nil),                       // 366: billing.ProjectRedirectSettings
	(*PaymentFormPaymentMethod)(nil),                      // 367: billing.PaymentFormPaymentMethod
	(*UserIpData)(nil),                                    // 368: billing.UserIpData
	(*OrderItem)(nil),                                     // 369: billing.OrderItem
	(*OrderRecurringSettings)(nil),                        // 370: billing.OrderRecurringSettings
	(*MerchantUser)(nil),                                  // 371: billing.MerchantUser
	(*MerchantCompanyInfo)(nil),                           // 372: billing.MerchantCompanyInfo
	(*MerchantContact)(nil),                               // 373: billing.MerchantContact
	(*MerchantBanking)(nil),                               // 374: billing.MerchantBanking
	(*MerchantShortInfo)(nil),                             // 375: billing.MerchantShortInfo
	(*Merchant)(nil),                                      // 376: billing.Merchant
	(*Notification)(nil),                                  // 377: billing.Notification
	(*MerchantPaymentMethod)(nil),                         // 378: billing.MerchantPaymentMethod
	(*MerchantPaymentMethodIdentification)(nil),           // 379: billing.MerchantPaymentMethodIdentification
	(*MerchantPaymentMethodCommissions)(nil),              // 380: billing.MerchantPaymentMethodCommissions
	(*MerchantPaymentMethodIntegration)(nil),              // 381: billing.MerchantPaymentMethodIntegration
	(*Refund)(nil),                                        // 382: billing.Refund
	(*PaymentFormDataChangeResponseItem)(nil),             // 383: billing.PaymentFormDataChangeResponseItem
	(*ProductPrice)(nil),                                  // 384: billing.ProductPrice
	(*Project)(nil),                                       // 385: billing.Project
	(*TokenUser)(nil),                                     // 386: billing.TokenUser
	(*TokenSettings)(nil),                                 // 387: billing.TokenSettings
	(*PaymentMethodParams)(nil),                           // 388: billing.PaymentMethodParams
	(*PaymentMethod)(nil),                                 // 389: billing.PaymentMethod
	(*ZipCode)(nil),                                       // 390: billing.ZipCode
	(*AccountingEntry)(nil),                               // 391: billing.AccountingEntry
	(*RoyaltyReport)(nil),                                 // 392: billing.RoyaltyReport
	(*PaymentChannelCostSystemList)(nil),                  // 393: billing.PaymentChannelCostSystemList
	(*PaymentChannelCostSystem)(nil),                      // 394: billing.PaymentChannelCostSystem
	(*PaymentChannelCostMerchantList)(nil),                // 395: billing.PaymentChannelCostMerchantList
	(*PaymentChannelCostMerchant)(nil),                    // 396: billing.PaymentChannelCostMerchant
	(*MoneyBackCostSystemList)(nil),                       // 397: billing.MoneyBackCostSystemList
	(*MoneyBackCostSystem)(nil),                           // 398: billing.MoneyBackCostSystem
	(*MoneyBackCostMerchantList)(nil),                     // 399: billing.MoneyBackCostMerchantList
	(*MoneyBackCostMerchant)(nil),                         // 400: billing.MoneyBackCostMerchant
	(*RecommendedPrice)(nil),                              // 401: billing.RecommendedPrice
	(*PriceTableRange)(nil),                               // 402: billing.PriceTableRange
	(*RangeInt)(nil),                                      // 403: billing.RangeInt
	(*UserRole)(nil),                                      // 404: billing.UserRole
	(*OrderViewPublic)(nil),                               // 405: billing.OrderViewPublic
	(*VatReport)(nil),                                     // 406: billing.VatReport
	(*MerchantCompletedSteps)(nil),                        // 407: billing.MerchantCompletedSteps
	(*MerchantTariffRatesPayment)(nil),                    // 408: billing.MerchantTariffRatesPayment
	(*MerchantTariffRatesSettingsItem)(nil),               // 409: billing.MerchantTariffRatesSettingsItem
	(*OrderViewPrivate)(nil),                              // 410: billing.OrderViewPrivate
	(*PayoutDocument)(nil),                                // 411: billing.PayoutDocument
	(*MerchantBalance)(nil),                               // 412: billing.MerchantBalance
	(*OrderReceipt)(nil),                                  // 413: billing.OrderReceipt
	(*PriceGroup)(nil),                                    // 414: billing.PriceGroup
	(*Paylink)(nil),                                       // 415: paylink.Paylink
	(*StatCommon)(nil),                                    // 416: paylink.StatCommon
	(*GroupStatCommon)(nil),                               // 417: paylink.GroupStatCommon
	(*OperatingCompany)(nil),                              // 418: billing.OperatingCompany
	(*PaymentMinLimitSystem)(nil),                         // 419: billing.PaymentMinLimitSystem
	(*RoleListItem)(nil),                                  // 420: billing.RoleListItem
	(*CountriesList)(nil),                                 // 421: billing.CountriesList
	(*ActOfCompletionDocument)(nil),                       // 422: billing.ActOfCompletionDocument
	(*Customer)(nil),                                      // 423: billing.Customer
	(*BrowserCookie)(nil),                                 // 424: billing.BrowserCookie
	(*RecurringSubscription)(nil),                         // 425: billing.RecurringSubscription
	(*RecurringPlan)(nil),                                 // 426: billing.RecurringPlan
	(*SubscriptionOrder)(nil),                             // 427: billing.SubscriptionOrder
	(*MerchantDocument)(nil),                              // 428: billing.MerchantDocument
	(*OrderCreateByPaylink)(nil),                          // 429: billing.OrderCreateByPaylink
	(*OrderCreateRequest)(nil),                            // 430: billing.OrderCreateRequest
	(*GetCountryRequest)(nil),                             // 431: billing.GetCountryRequest
	(*Country)(nil),                                       // 432: billing.Country
	(*GetPriceGroupRequest)(nil),                          // 433: billing.GetPriceGroupRequest
	(*PaymentChannelCostSystemRequest)(nil),               // 434: billing.PaymentChannelCostSystemRequest
	(*PaymentCostDeleteRequest)(nil),                      // 435: billing.PaymentCostDeleteRequest
	(*PaymentChannelCostMerchantListRequest)(nil),         // 436: billing.PaymentChannelCostMerchantListRequest
	(*PaymentChannelCostMerchantRequest)(nil),             // 437: billing.PaymentChannelCostMerchantRequest
	(*MoneyBackCostSystemRequest)(nil),                    // 438: billing.MoneyBackCostSystemRequest
	(*MoneyBackCostMerchantListRequest)(nil),              // 439: billing.MoneyBackCostMerchantListRequest
	(*MoneyBackCostMerchantRequest)(nil),                  // 440: billing.MoneyBackCostMerchantRequest
	(*CreatePaylinkRequest)(nil),                          // 441: paylink.CreatePaylinkRequest
}
var file_grpc_proto_depIdxs = []int32{
	112, // 0: grpc.EmptyResponseWithStatus.message:type_name -> grpc.ResponseErrorMessage
	112, // 1: grpc.ChangeCodeInOrderResponse.message:type_name -> grpc.ResponseErrorMessage
	362, // 2: grpc.ChangeCodeInOrderResponse.order:type_name -> billing.Order
	112, // 3: grpc.GetPlatformKeyCountResponse.message:type_name -> grpc.ResponseErrorMessage
	112, // 4: grpc.GetKeyForOrderRequestResponse.message:type_name -> grpc.ResponseErrorMessage
	363, // 5: grpc.GetKeyForOrderRequestResponse.key:type_name -> billing.Key
	112, // 6: grpc.PlatformKeyReserveResponse.message:type_name -> grpc.ResponseErrorMessage
	112, // 7: grpc.PlatformKeysFileResponse.message:type_name -> grpc.ResponseErrorMessage
	112, // 8: grpc.KeyProductResponse.message:type_name -> grpc.ResponseErrorMessage
	73,  // 9: grpc.KeyProductResponse.product:type_name -> grpc.KeyProduct
	347, // 10: grpc.CreateOrUpdateKeyProductRequest.name:type_name -> grpc.CreateOrUpdateKeyProductRequest.NameEntry
	348, // 11: grpc.CreateOrUpdateKeyProductRequest.description:type_name -> grpc.CreateOrUpdateKeyProductRequest.DescriptionEntry
	349, // 12: grpc.CreateOrUpdateKeyProductRequest.long_description:type_name -> grpc.CreateOrUpdateKeyProductRequest.LongDescriptionEntry
	364, // 13: grpc.CreateOrUpdateKeyProductRequest.cover:type_name -> billing.ImageCollection
	350, // 14: grpc.CreateOrUpdateKeyProductRequest.metadata:type_name -> grpc.CreateOrUpdateKeyProductRequest.MetadataEntry
	74,  // 15: grpc.CreateOrUpdateKeyProductRequest.platforms:type_name -> grpc.PlatformPrice
	112, // 16: grpc.ListPlatformsResponse.message:type_name -> grpc.ResponseErrorMessage
	76,  // 17: grpc.ListPlatformsResponse.platforms:type_name -> grpc.Platform
	112, // 18: grpc.ListKeyProductsResponse.message:type_name -> grpc.ResponseErrorMessage
	73,  // 19: grpc.ListKeyProductsResponse.products:type_name -> grpc.KeyProduct
	351, // 20: grpc.PaymentCreateRequest.data:type_name -> grpc.PaymentCreateRequest.DataEntry
	112, // 21: grpc.PaymentCreateResponse.message:type_name -> grpc.ResponseErrorMessage
	365, // 22: grpc.PaymentCreateResponse.recurring_expire_date:type_name -> google.protobuf.Timestamp
	366, // 23: grpc.PaymentFormJsonDataProject.redirect_settings:type_name -> billing.ProjectRedirectSettings
	26,  // 24: grpc.PaymentFormJsonData.project:type_name -> grpc.PaymentFormJsonDataProject
	367, // 25: grpc.PaymentFormJsonData.payment_methods:type_name -> billing.PaymentFormPaymentMethod
	368, // 26: grpc.PaymentFormJsonData.user_ip_data:type_name -> billing.UserIpData
	369, // 27: grpc.PaymentFormJsonData.items:type_name -> billing.OrderItem
	76,  // 28: grpc.PaymentFormJsonData.platforms:type_name -> grpc.Platform
	370, // 29: grpc.PaymentFormJsonData.recurring_settings:type_name -> billing.OrderRecurringSettings
	112, // 30: grpc.PaymentFormJsonDataResponse.message:type_name -> grpc.ResponseErrorMessage
	27,  // 31: grpc.PaymentFormJsonDataResponse.item:type_name -> grpc.PaymentFormJsonData
	371, // 32: grpc.OnboardingRequest.user:type_name -> billing.MerchantUser
	372, // 33: grpc.OnboardingRequest.company:type_name -> billing.MerchantCompanyInfo
	373, // 34: grpc.OnboardingRequest.contacts:type_name -> billing.MerchantContact
	374, // 35: grpc.OnboardingRequest.banking:type_name -> billing.MerchantBanking
	375, // 36: grpc.MerchantListingResponse.items:type_name -> billing.MerchantShortInfo
	376, // 37: grpc.ListMerchantsForAgreementResponse.items:type_name -> billing.Merchant
	377, // 38: grpc.Notifications.items:type_name -> billing.Notification
	378, // 39: grpc.ListingMerchantPaymentMethod.payment_methods:type_name -> billing.MerchantPaymentMethod
	112, // 40: grpc.GetMerchantPaymentMethodResponse.message:type_name -> grpc.ResponseErrorMessage
	378, // 41: grpc.GetMerchantPaymentMethodResponse.item:type_name -> billing.MerchantPaymentMethod
	379, // 42: grpc.MerchantPaymentMethodRequest.payment_method:type_name -> billing.MerchantPaymentMethodIdentification
	380, // 43: grpc.MerchantPaymentMethodRequest.commission:type_name -> billing.MerchantPaymentMethodCommissions
	381, // 44: grpc.MerchantPaymentMethodRequest.integration:type_name -> billing.MerchantPaymentMethodIntegration
	112, // 45: grpc.MerchantPaymentMethodResponse.message:type_name -> grpc.ResponseErrorMessage
	378, // 46: grpc.MerchantPaymentMethodResponse.item:type_name -> billing.MerchantPaymentMethod
	112, // 47: grpc.GetMerchantResponse.message:type_name -> grpc.ResponseErrorMessage
	376, // 48: grpc.GetMerchantResponse.item:type_name -> billing.Merchant
	112, // 49: grpc.CreateRefundResponse.message:type_name -> grpc.ResponseErrorMessage
	382, // 50: grpc.CreateRefundResponse.item:type_name -> billing.Refund
	382, // 51: grpc.ListRefundsResponse.items:type_name -> billing.Refund
	112, // 52: grpc.PaymentFormDataChangeResponse.message:type_name -> grpc.ResponseErrorMessage
	383, // 53: grpc.PaymentFormDataChangeResponse.item:type_name -> billing.PaymentFormDataChangeResponseItem
	369, // 54: grpc.ProcessBillingAddressResponseItem.items:type_name -> billing.OrderItem
	112, // 55: grpc.ProcessBillingAddressResponse.message:type_name -> grpc.ResponseErrorMessage
	60,  // 56: grpc.ProcessBillingAddressResponse.item:type_name -> grpc.ProcessBillingAddressResponseItem
	112, // 57: grpc.ChangeMerchantDataResponse.message:type_name -> grpc.ResponseErrorMessage
	376, // 58: grpc.ChangeMerchantDataResponse.item:type_name -> billing.Merchant
	112, // 59: grpc.ChangeMerchantResponse.message:type_name -> grpc.ResponseErrorMessage
	376, // 60: grpc.ChangeMerchantResponse.item:type_name -> billing.Merchant
	112, // 61: grpc.ChangeMerchantStatusResponse.message:type_name -> grpc.ResponseErrorMessage
	376, // 62: grpc.ChangeMerchantStatusResponse.item:type_name -> billing.Merchant
	112, // 63: grpc.CreateNotificationResponse.message:type_name -> grpc.ResponseErrorMessage
	377, // 64: grpc.CreateNotificationResponse.item:type_name -> billing.Notification
	112, // 65: grpc.OrderCreateProcessResponse.message:type_name -> grpc.ResponseErrorMessage
	362, // 66: grpc.OrderCreateProcessResponse.item:type_name -> billing.Order
	71,  // 67: grpc.KeyProductInfo.platforms:type_name -> grpc.PlatformPriceInfo
	72,  // 68: grpc.PlatformPriceInfo.price:type_name -> grpc.ProductPriceInfo
	352, // 69: grpc.KeyProduct.name:type_name -> grpc.KeyProduct.NameEntry
	74,  // 70: grpc.KeyProduct.platforms:type_name -> grpc.PlatformPrice
	353, // 71: grpc.KeyProduct.description:type_name -> grpc.KeyProduct.DescriptionEntry
	354, // 72: grpc.KeyProduct.long_description:type_name -> grpc.KeyProduct.LongDescriptionEntry
	365, // 73: grpc.KeyProduct.created_at:type_name -> google.protobuf.Timestamp
	365, // 74: grpc.KeyProduct.updated_at:type_name -> google.protobuf.Timestamp
	364, // 75: grpc.KeyProduct.cover:type_name -> billing.ImageCollection
	355, // 76: grpc.KeyProduct.metadata:type_name -> grpc.KeyProduct.MetadataEntry
	365, // 77: grpc.KeyProduct.published_at:type_name -> google.protobuf.Timestamp
	384, // 78: grpc.PlatformPrice.prices:type_name -> billing.ProductPrice
	75,  // 79: grpc.PlatformPrice.os:type_name -> grpc.PlatformOs
	75,  // 80: grpc.Platform.os:type_name -> grpc.PlatformOs
	356, // 81: grpc.Product.name:type_name -> grpc.Product.NameEntry
	384, // 82: grpc.Product.prices:type_name -> billing.ProductPrice
	357, // 83: grpc.Product.description:type_name -> grpc.Product.DescriptionEntry
	358, // 84: grpc.Product.long_description:type_name -> grpc.Product.LongDescriptionEntry
	365, // 85: grpc.Product.created_at:type_name -> google.protobuf.Timestamp
	365, // 86: grpc.Product.updated_at:type_name -> google.protobuf.Timestamp
	359, // 87: grpc.Product.metadata:type_name -> grpc.Product.MetadataEntry
	112, // 88: grpc.GetKeyProductInfoResponse.message:type_name -> grpc.ResponseErrorMessage
	70,  // 89: grpc.GetKeyProductInfoResponse.key_product:type_name -> grpc.KeyProductInfo
	77,  // 90: grpc.ListProductsResponse.products:type_name -> grpc.Product
	112, // 91: grpc.ChangeProjectResponse.message:type_name -> grpc.ResponseErrorMessage
	385, // 92: grpc.ChangeProjectResponse.item:type_name -> billing.Project
	385, // 93: grpc.ListProjectsResponse.items:type_name -> billing.Project
	386, // 94: grpc.TokenRequest.user:type_name -> billing.TokenUser
	387, // 95: grpc.TokenRequest.settings:type_name -> billing.TokenSettings
	112, // 96: grpc.TokenResponse.message:type_name -> grpc.ResponseErrorMessage
	112, // 97: grpc.CheckProjectRequestSignatureResponse.message:type_name -> grpc.ResponseErrorMessage
	112, // 98: grpc.IsOrderCanBePayingResponse.message:type_name -> grpc.ResponseErrorMessage
	362, // 99: grpc.IsOrderCanBePayingResponse.item:type_name -> billing.Order
	388, // 100: grpc.GetPaymentMethodSettingsResponse.params:type_name -> billing.PaymentMethodParams
	389, // 101: grpc.ChangePaymentMethodRequest.params:type_name -> billing.PaymentMethod
	388, // 102: grpc.ChangePaymentMethodParamsRequest.params:type_name -> billing.PaymentMethodParams
	390, // 103: grpc.FindByZipCodeResponse.items:type_name -> billing.ZipCode
	112, // 104: grpc.ResponseError.message:type_name -> grpc.ResponseErrorMessage
	112, // 105: grpc.CreateAccountingEntryResponse.message:type_name -> grpc.ResponseErrorMessage
	391, // 106: grpc.CreateAccountingEntryResponse.item:type_name -> billing.AccountingEntry
	392, // 107: grpc.RoyaltyReportsPaginate.items:type_name -> billing.RoyaltyReport
	112, // 108: grpc.ListRoyaltyReportsResponse.message:type_name -> grpc.ResponseErrorMessage
	117, // 109: grpc.ListRoyaltyReportsResponse.data:type_name -> grpc.RoyaltyReportsPaginate
	112, // 110: grpc.GetRoyaltyReportResponse.message:type_name -> grpc.ResponseErrorMessage
	392, // 111: grpc.GetRoyaltyReportResponse.item:type_name -> billing.RoyaltyReport
	120, // 112: grpc.ChangeRoyaltyReportRequest.correction:type_name -> grpc.ChangeRoyaltyReportCorrection
	112, // 113: grpc.PaymentChannelCostSystemListResponse.message:type_name -> grpc.ResponseErrorMessage
	393, // 114: grpc.PaymentChannelCostSystemListResponse.item:type_name -> billing.PaymentChannelCostSystemList
	112, // 115: grpc.PaymentChannelCostSystemResponse.message:type_name -> grpc.ResponseErrorMessage
	394, // 116: grpc.PaymentChannelCostSystemResponse.item:type_name -> billing.PaymentChannelCostSystem
	112, // 117: grpc.PaymentChannelCostMerchantListResponse.message:type_name -> grpc.ResponseErrorMessage
	395, // 118: grpc.PaymentChannelCostMerchantListResponse.item:type_name -> billing.PaymentChannelCostMerchantList
	112, // 119: grpc.PaymentChannelCostMerchantResponse.message:type_name -> grpc.ResponseErrorMessage
	396, // 120: grpc.PaymentChannelCostMerchantResponse.item:type_name -> billing.PaymentChannelCostMerchant
	112, // 121: grpc.MoneyBackCostSystemListResponse.message:type_name -> grpc.ResponseErrorMessage
	397, // 122: grpc.MoneyBackCostSystemListResponse.item:type_name -> billing.MoneyBackCostSystemList
	112, // 123: grpc.MoneyBackCostSystemResponse.message:type_name -> grpc.ResponseErrorMessage
	398, // 124: grpc.MoneyBackCostSystemResponse.item:type_name -> billing.MoneyBackCostSystem
	112, // 125: grpc.MoneyBackCostMerchantListResponse.message:type_name -> grpc.ResponseErrorMessage
	399, // 126: grpc.MoneyBackCostMerchantListResponse.item:type_name -> billing.MoneyBackCostMerchantList
	112, // 127: grpc.MoneyBackCostMerchantResponse.message:type_name -> grpc.ResponseErrorMessage
	400, // 128: grpc.MoneyBackCostMerchantResponse.item:type_name -> billing.MoneyBackCostMerchant
	135, // 129: grpc.PriceGroupCurrenciesResponse.region:type_name -> grpc.PriceGroupRegions
	136, // 130: grpc.PriceGroupRegions.regions:type_name -> grpc.PriceGroupRegion
	401, // 131: grpc.RecommendedPriceResponse.recommended_price:type_name -> billing.RecommendedPrice
	402, // 132: grpc.RecommendedPriceTableResponse.ranges:type_name -> billing.PriceTableRange
	384, // 133: grpc.ProductPricesResponse.product_price:type_name -> billing.ProductPrice
	384, // 134: grpc.UpdateProductPricesRequest.prices:type_name -> billing.ProductPrice
	403, // 135: grpc.UserProfileCompany.annual_income:type_name -> billing.RangeInt
	403, // 136: grpc.UserProfileCompany.number_of_employees:type_name -> billing.RangeInt
	146, // 137: grpc.UserProfileCompany.monetization:type_name -> grpc.UserProfileCompanyMonetization
	147, // 138: grpc.UserProfileCompany.platforms:type_name -> grpc.UserProfileCompanyPlatforms
	365, // 139: grpc.UserProfileEmail.confirmed_at:type_name -> google.protobuf.Timestamp
	149, // 140: grpc.UserProfile.email:type_name -> grpc.UserProfileEmail
	144, // 141: grpc.UserProfile.personal:type_name -> grpc.UserProfilePersonal
	145, // 142: grpc.UserProfile.help:type_name -> grpc.UserProfileHelp
	148, // 143: grpc.UserProfile.company:type_name -> grpc.UserProfileCompany
	365, // 144: grpc.UserProfile.created_at:type_name -> google.protobuf.Timestamp
	365, // 145: grpc.UserProfile.updated_at:type_name -> google.protobuf.Timestamp
	112, // 146: grpc.CommonUserProfileResponse.message:type_name -> grpc.ResponseErrorMessage
	153, // 147: grpc.CommonUserProfileResponse.profile:type_name -> grpc.CommonUserProfile
	150, // 148: grpc.CommonUserProfile.profile:type_name -> grpc.UserProfile
	404, // 149: grpc.CommonUserProfile.role:type_name -> billing.UserRole
	276, // 150: grpc.CommonUserProfile.permissions:type_name -> grpc.Permission
	376, // 151: grpc.CommonUserProfile.merchant:type_name -> billing.Merchant
	112, // 152: grpc.GetUserProfileResponse.message:type_name -> grpc.ResponseErrorMessage
	150, // 153: grpc.GetUserProfileResponse.item:type_name -> grpc.UserProfile
	365, // 154: grpc.PageReview.created_at:type_name -> google.protobuf.Timestamp
	365, // 155: grpc.PageReview.updated_at:type_name -> google.protobuf.Timestamp
	112, // 156: grpc.ConfirmUserEmailResponse.message:type_name -> grpc.ResponseErrorMessage
	150, // 157: grpc.ConfirmUserEmailResponse.profile:type_name -> grpc.UserProfile
	405, // 158: grpc.TransactionsPaginate.items:type_name -> billing.OrderViewPublic
	112, // 159: grpc.TransactionsResponse.message:type_name -> grpc.ResponseErrorMessage
	161, // 160: grpc.TransactionsResponse.data:type_name -> grpc.TransactionsPaginate
	406, // 161: grpc.VatReportsPaginate.items:type_name -> billing.VatReport
	112, // 162: grpc.VatReportsResponse.message:type_name -> grpc.ResponseErrorMessage
	164, // 163: grpc.VatReportsResponse.data:type_name -> grpc.VatReportsPaginate
	365, // 164: grpc.ProcessVatReportsRequest.date:type_name -> google.protobuf.Timestamp
	407, // 165: grpc.GetMerchantOnboardingCompleteDataResponseItem.steps:type_name -> billing.MerchantCompletedSteps
	112, // 166: grpc.GetMerchantOnboardingCompleteDataResponse.message:type_name -> grpc.ResponseErrorMessage
	168, // 167: grpc.GetMerchantOnboardingCompleteDataResponse.item:type_name -> grpc.GetMerchantOnboardingCompleteDataResponseItem
	408, // 168: grpc.GetMerchantTariffRatesResponseItems.payment:type_name -> billing.MerchantTariffRatesPayment
	409, // 169: grpc.GetMerchantTariffRatesResponseItems.refund:type_name -> billing.MerchantTariffRatesSettingsItem
	409, // 170: grpc.GetMerchantTariffRatesResponseItems.chargeback:type_name -> billing.MerchantTariffRatesSettingsItem
	360, // 171: grpc.GetMerchantTariffRatesResponseItems.payout:type_name -> grpc.GetMerchantTariffRatesResponseItems.PayoutEntry
	361, // 172: grpc.GetMerchantTariffRatesResponseItems.minimal_payout:type_name -> grpc.GetMerchantTariffRatesResponseItems.MinimalPayoutEntry
	112, // 173: grpc.GetMerchantTariffRatesResponse.message:type_name -> grpc.ResponseErrorMessage
	171, // 174: grpc.GetMerchantTariffRatesResponse.items:type_name -> grpc.GetMerchantTariffRatesResponseItems
	405, // 175: grpc.ListOrdersPublicResponseItem.items:type_name -> billing.OrderViewPublic
	410, // 176: grpc.ListOrdersPrivateResponseItem.items:type_name -> billing.OrderViewPrivate
	112, // 177: grpc.ListOrdersPublicResponse.message:type_name -> grpc.ResponseErrorMessage
	174, // 178: grpc.ListOrdersPublicResponse.Item:type_name -> grpc.ListOrdersPublicResponseItem
	112, // 179: grpc.ListOrdersPrivateResponse.message:type_name -> grpc.ResponseErrorMessage
	175, // 180: grpc.ListOrdersPrivateResponse.Item:type_name -> grpc.ListOrdersPrivateResponseItem
	362, // 181: grpc.ListOrdersResponseItem.items:type_name -> billing.Order
	112, // 182: grpc.ListOrdersResponse.message:type_name -> grpc.ResponseErrorMessage
	178, // 183: grpc.ListOrdersResponse.Item:type_name -> grpc.ListOrdersResponseItem
	112, // 184: grpc.GetOrderPublicResponse.message:type_name -> grpc.ResponseErrorMessage
	405, // 185: grpc.GetOrderPublicResponse.item:type_name -> billing.OrderViewPublic
	112, // 186: grpc.GetOrderPrivateResponse.message:type_name -> grpc.ResponseErrorMessage
	410, // 187: grpc.GetOrderPrivateResponse.item:type_name -> billing.OrderViewPrivate
	112, // 188: grpc.GetOriginalOrderResponse.message:type_name -> grpc.ResponseErrorMessage
	362, // 189: grpc.GetOriginalOrderResponse.item:type_name -> billing.Order
	112, // 190: grpc.GetDashboardMainResponse.message:type_name -> grpc.ResponseErrorMessage
	191, // 191: grpc.GetDashboardMainResponse.item:type_name -> grpc.DashboardMainReport
	112, // 192: grpc.GetDashboardBaseReportResponse.message:type_name -> grpc.ResponseErrorMessage
	201, // 193: grpc.GetDashboardBaseReportResponse.item:type_name -> grpc.DashboardBaseReports
	112, // 194: grpc.GetDashboardRevenueDynamicsReportResponse.message:type_name -> grpc.ResponseErrorMessage
	192, // 195: grpc.GetDashboardRevenueDynamicsReportResponse.item:type_name -> grpc.DashboardRevenueDynamicReport
	189, // 196: grpc.DashboardAmountItemWithChart.chart:type_name -> grpc.DashboardChartItemFloat
	189, // 197: grpc.DashboardMainReportTotalTransactions.chart:type_name -> grpc.DashboardChartItemFloat
	188, // 198: grpc.DashboardMainReport.gross_revenue:type_name -> grpc.DashboardAmountItemWithChart
	188, // 199: grpc.DashboardMainReport.vat:type_name -> grpc.DashboardAmountItemWithChart
	190, // 200: grpc.DashboardMainReport.total_transactions:type_name -> grpc.DashboardMainReportTotalTransactions
	188, // 201: grpc.DashboardMainReport.arpu:type_name -> grpc.DashboardAmountItemWithChart
	193, // 202: grpc.DashboardRevenueDynamicReport.items:type_name -> grpc.DashboardRevenueDynamicReportItem
	194, // 203: grpc.DashboardRevenueByCountryReport.top:type_name -> grpc.DashboardRevenueByCountryReportTop
	195, // 204: grpc.DashboardRevenueByCountryReport.chart:type_name -> grpc.DashboardRevenueByCountryReportChartItem
	197, // 205: grpc.DashboardSalesTodayReport.top:type_name -> grpc.DashboardSalesTodayReportTop
	198, // 206: grpc.DashboardSalesTodayReport.chart:type_name -> grpc.DashboardChartItemInt
	197, // 207: grpc.DashboardSourcesReport.top:type_name -> grpc.DashboardSalesTodayReportTop
	198, // 208: grpc.DashboardSourcesReport.chart:type_name -> grpc.DashboardChartItemInt
	196, // 209: grpc.DashboardBaseReports.revenue_by_country:type_name -> grpc.DashboardRevenueByCountryReport
	199, // 210: grpc.DashboardBaseReports.sales_today:type_name -> grpc.DashboardSalesTodayReport
	200, // 211: grpc.DashboardBaseReports.sources:type_name -> grpc.DashboardSourcesReport
	112, // 212: grpc.PayoutDocumentResponse.message:type_name -> grpc.ResponseErrorMessage
	411, // 213: grpc.PayoutDocumentResponse.item:type_name -> billing.PayoutDocument
	112, // 214: grpc.CreatePayoutDocumentResponse.message:type_name -> grpc.ResponseErrorMessage
	411, // 215: grpc.CreatePayoutDocumentResponse.items:type_name -> billing.PayoutDocument
	411, // 216: grpc.PayoutDocumentsPaginate.items:type_name -> billing.PayoutDocument
	112, // 217: grpc.GetPayoutDocumentsResponse.message:type_name -> grpc.ResponseErrorMessage
	208, // 218: grpc.GetPayoutDocumentsResponse.data:type_name -> grpc.PayoutDocumentsPaginate
	112, // 219: grpc.GetMerchantBalanceResponse.message:type_name -> grpc.ResponseErrorMessage
	412, // 220: grpc.GetMerchantBalanceResponse.item:type_name -> billing.MerchantBalance
	112, // 221: grpc.PayoutDocumentPdfUploadedResponse.message:type_name -> grpc.ResponseErrorMessage
	112, // 222: grpc.OrderReceiptResponse.message:type_name -> grpc.ResponseErrorMessage
	413, // 223: grpc.OrderReceiptResponse.receipt:type_name -> billing.OrderReceipt
	112, // 224: grpc.GetProductResponse.message:type_name -> grpc.ResponseErrorMessage
	77,  // 225: grpc.GetProductResponse.item:type_name -> grpc.Product
	112, // 226: grpc.GetPriceGroupByRegionResponse.message:type_name -> grpc.ResponseErrorMessage
	414, // 227: grpc.GetPriceGroupByRegionResponse.Group:type_name -> billing.PriceGroup
	112, // 228: grpc.ChangeMerchantManualPayoutsResponse.message:type_name -> grpc.ResponseErrorMessage
	376, // 229: grpc.ChangeMerchantManualPayoutsResponse.item:type_name -> billing.Merchant
	112, // 230: grpc.SendWebhookToMerchantResponse.message:type_name -> grpc.ResponseErrorMessage
	415, // 231: grpc.PaylinksPaginate.items:type_name -> paylink.Paylink
	112, // 232: grpc.GetPaylinksResponse.message:type_name -> grpc.ResponseErrorMessage
	224, // 233: grpc.GetPaylinksResponse.data:type_name -> grpc.PaylinksPaginate
	112, // 234: grpc.GetPaylinkResponse.message:type_name -> grpc.ResponseErrorMessage
	415, // 235: grpc.GetPaylinkResponse.item:type_name -> paylink.Paylink
	112, // 236: grpc.GetPaylinkUrlByShortLinkResponse.message:type_name -> grpc.ResponseErrorMessage
	112, // 237: grpc.GetPaylinkUrlResponse.message:type_name -> grpc.ResponseErrorMessage
	112, // 238: grpc.GetPaylinkStatCommonResponse.message:type_name -> grpc.ResponseErrorMessage
	416, // 239: grpc.GetPaylinkStatCommonResponse.item:type_name -> paylink.StatCommon
	112, // 240: grpc.GetPaylinkStatCommonGroupResponse.message:type_name -> grpc.ResponseErrorMessage
	417, // 241: grpc.GetPaylinkStatCommonGroupResponse.item:type_name -> paylink.GroupStatCommon
	112, // 242: grpc.RoyaltyReportPdfUploadedResponse.message:type_name -> grpc.ResponseErrorMessage
	112, // 243: grpc.GetOperatingCompaniesListResponse.message:type_name -> grpc.ResponseErrorMessage
	418, // 244: grpc.GetOperatingCompaniesListResponse.items:type_name -> billing.OperatingCompany
	112, // 245: grpc.GetPaymentMinLimitsSystemResponse.message:type_name -> grpc.ResponseErrorMessage
	419, // 246: grpc.GetPaymentMinLimitsSystemResponse.items:type_name -> billing.PaymentMinLimitSystem
	112, // 247: grpc.SetMerchantOperatingCompanyResponse.message:type_name -> grpc.ResponseErrorMessage
	376, // 248: grpc.SetMerchantOperatingCompanyResponse.item:type_name -> billing.Merchant
	112, // 249: grpc.SetMerchantAcceptedStatusResponse.message:type_name -> grpc.ResponseErrorMessage
	376, // 250: grpc.SetMerchantAcceptedStatusResponse.item:type_name -> billing.Merchant
	112, // 251: grpc.GetOperatingCompanyResponse.message:type_name -> grpc.ResponseErrorMessage
	418, // 252: grpc.GetOperatingCompanyResponse.company:type_name -> billing.OperatingCompany
	112, // 253: grpc.GetMerchantUsersResponse.message:type_name -> grpc.ResponseErrorMessage
	404, // 254: grpc.GetMerchantUsersResponse.users:type_name -> billing.UserRole
	112, // 255: grpc.InviteUserMerchantResponse.message:type_name -> grpc.ResponseErrorMessage
	404, // 256: grpc.InviteUserMerchantResponse.role:type_name -> billing.UserRole
	112, // 257: grpc.InviteUserAdminResponse.message:type_name -> grpc.ResponseErrorMessage
	404, // 258: grpc.InviteUserAdminResponse.role:type_name -> billing.UserRole
	112, // 259: grpc.GetMerchantUserResponse.message:type_name -> grpc.ResponseErrorMessage
	404, // 260: grpc.GetMerchantUserResponse.role:type_name -> billing.UserRole
	112, // 261: grpc.GetAdminUserResponse.message:type_name -> grpc.ResponseErrorMessage
	404, // 262: grpc.GetAdminUserResponse.role:type_name -> billing.UserRole
	112, // 263: grpc.CheckInviteTokenResponse.message:type_name -> grpc.ResponseErrorMessage
	112, // 264: grpc.AcceptInviteResponse.message:type_name -> grpc.ResponseErrorMessage
	404, // 265: grpc.AcceptInviteResponse.role:type_name -> billing.UserRole
	112, // 266: grpc.GetAdminUsersResponse.message:type_name -> grpc.ResponseErrorMessage
	404, // 267: grpc.GetAdminUsersResponse.users:type_name -> billing.UserRole
	112, // 268: grpc.GetMerchantsForUserResponse.message:type_name -> grpc.ResponseErrorMessage
	269, // 269: grpc.GetMerchantsForUserResponse.merchants:type_name -> grpc.MerchantForUserInfo
	420, // 270: grpc.GetRoleListResponse.items:type_name -> billing.RoleListItem
	112, // 271: grpc.UserRoleResponse.message:type_name -> grpc.ResponseErrorMessage
	404, // 272: grpc.UserRoleResponse.user_role:type_name -> billing.UserRole
	112, // 273: grpc.GetCountriesListForOrderResponse.message:type_name -> grpc.ResponseErrorMessage
	421, // 274: grpc.GetCountriesListForOrderResponse.item:type_name -> billing.CountriesList
	410, // 275: grpc.PrivateTransactionsPaginate.items:type_name -> billing.OrderViewPrivate
	112, // 276: grpc.VatReportResponse.message:type_name -> grpc.ResponseErrorMessage
	406, // 277: grpc.VatReportResponse.vat:type_name -> billing.VatReport
	112, // 278: grpc.PrivateTransactionsResponse.message:type_name -> grpc.ResponseErrorMessage
	281, // 279: grpc.PrivateTransactionsResponse.data:type_name -> grpc.PrivateTransactionsPaginate
	365, // 280: grpc.SetCustomerPaymentActivityRequest.processing_at:type_name -> google.protobuf.Timestamp
	112, // 281: grpc.ActOfCompletionResponse.message:type_name -> grpc.ResponseErrorMessage
	422, // 282: grpc.ActOfCompletionResponse.item:type_name -> billing.ActOfCompletionDocument
	112, // 283: grpc.ActsOfCompletionListResponse.message:type_name -> grpc.ResponseErrorMessage
	289, // 284: grpc.ActsOfCompletionListResponse.items:type_name -> grpc.ActsOfCompletionListItem
	112, // 285: grpc.GetDashboardCustomerReportResponse.message:type_name -> grpc.ResponseErrorMessage
	295, // 286: grpc.GetDashboardCustomerReportResponse.item:type_name -> grpc.DashboardCustomerReport
	112, // 287: grpc.DashboardCustomerReportArpuResponse.message:type_name -> grpc.ResponseErrorMessage
	188, // 288: grpc.DashboardCustomerReportArpuResponse.item:type_name -> grpc.DashboardAmountItemWithChart
	296, // 289: grpc.DashboardCustomerReport.dynamic:type_name -> grpc.DashboardCustomerDynamic
	298, // 290: grpc.DashboardCustomerReport.arppu:type_name -> grpc.DashboardCustomerArppu
	299, // 291: grpc.DashboardCustomerReport.top20:type_name -> grpc.DashboardCustomerTop20
	198, // 292: grpc.DashboardCustomerReport.chart:type_name -> grpc.DashboardChartItemInt
	301, // 293: grpc.ListCustomersRequest.amount:type_name -> grpc.AmountFilter
	112, // 294: grpc.ListCustomersResponse.message:type_name -> grpc.ResponseErrorMessage
	303, // 295: grpc.ListCustomersResponse.items:type_name -> grpc.ShortCustomerInfo
	365, // 296: grpc.ShortCustomerInfo.last_order:type_name -> google.protobuf.Timestamp
	112, // 297: grpc.GetCustomerInfoResponse.message:type_name -> grpc.ResponseErrorMessage
	423, // 298: grpc.GetCustomerInfoResponse.item:type_name -> billing.Customer
	112, // 299: grpc.DeserializeCookieResponse.message:type_name -> grpc.ResponseErrorMessage
	424, // 300: grpc.DeserializeCookieResponse.item:type_name -> billing.BrowserCookie
	112, // 301: grpc.GetSubscriptionResponse.message:type_name -> grpc.ResponseErrorMessage
	425, // 302: grpc.GetSubscriptionResponse.subscription:type_name -> billing.RecurringSubscription
	425, // 303: grpc.FindSubscriptionsResponse.list:type_name -> billing.RecurringSubscription
	112, // 304: grpc.FindSubscriptionsResponse.message:type_name -> grpc.ResponseErrorMessage
	112, // 305: grpc.GetRecurringPlanStatResponse.message:type_name -> grpc.ResponseErrorMessage
	112, // 306: grpc.AddRecurringPlanResponse.message:type_name -> grpc.ResponseErrorMessage
	426, // 307: grpc.AddRecurringPlanResponse.item:type_name -> billing.RecurringPlan
	112, // 308: grpc.UpdateRecurringPlanResponse.message:type_name -> grpc.ResponseErrorMessage
	112, // 309: grpc.EnableRecurringPlanResponse.message:type_name -> grpc.ResponseErrorMessage
	112, // 310: grpc.DisableRecurringPlanResponse.message:type_name -> grpc.ResponseErrorMessage
	112, // 311: grpc.DeleteRecurringPlanResponse.message:type_name -> grpc.ResponseErrorMessage
	112, // 312: grpc.GetRecurringPlanResponse.message:type_name -> grpc.ResponseErrorMessage
	426, // 313: grpc.GetRecurringPlanResponse.item:type_name -> billing.RecurringPlan
	112, // 314: grpc.GetRecurringPlansResponse.message:type_name -> grpc.ResponseErrorMessage
	426, // 315: grpc.GetRecurringPlansResponse.list:type_name -> billing.RecurringPlan
	112, // 316: grpc.FindExpiredSubscriptionsResponse.message:type_name -> grpc.ResponseErrorMessage
	425, // 317: grpc.FindExpiredSubscriptionsResponse.list:type_name -> billing.RecurringSubscription
	112, // 318: grpc.GetCustomerShortInfoResponse.message:type_name -> grpc.ResponseErrorMessage
	333, // 319: grpc.GetCustomerShortInfoResponse.item:type_name -> grpc.CustomerShortInfo
	112, // 320: grpc.GetSubscriptionsOrdersResponse.message:type_name -> grpc.ResponseErrorMessage
	427, // 321: grpc.GetSubscriptionsOrdersResponse.list:type_name -> billing.SubscriptionOrder
	428, // 322: grpc.AddMerchantDocumentResponse.item:type_name -> billing.MerchantDocument
	112, // 323: grpc.AddMerchantDocumentResponse.message:type_name -> grpc.ResponseErrorMessage
	428, // 324: grpc.GetMerchantDocumentsResponse.list:type_name -> billing.MerchantDocument
	112, // 325: grpc.GetMerchantDocumentsResponse.message:type_name -> grpc.ResponseErrorMessage
	428, // 326: grpc.GetMerchantDocumentResponse.item:type_name -> billing.MerchantDocument
	112, // 327: grpc.GetMerchantDocumentResponse.message:type_name -> grpc.ResponseErrorMessage
	396, // 328: grpc.SetAllPaymentChannelCostMerchantRequest.costs:type_name -> billing.PaymentChannelCostMerchant
	112, // 329: grpc.SetAllPaymentChannelCostMerchantResponse.message:type_name -> grpc.ResponseErrorMessage
	396, // 330: grpc.SetAllPaymentChannelCostMerchantResponse.items:type_name -> billing.PaymentChannelCostMerchant
	112, // 331: grpc.RefreshMerchantApiTokenResponse.message:type_name -> grpc.ResponseErrorMessage
	376, // 332: grpc.RefreshMerchantApiTokenResponse.item:type_name -> billing.Merchant
	409, // 333: grpc.GetMerchantTariffRatesResponseItems.PayoutEntry.value:type_name -> billing.MerchantTariffRatesSettingsItem
	429, // 334: grpc.BillingService.OrderCreateByPaylink:input_type -> billing.OrderCreateByPaylink
	430, // 335: grpc.BillingService.OrderCreateProcess:input_type -> billing.OrderCreateRequest
	25,  // 336: grpc.BillingService.PaymentFormJsonDataProcess:input_type -> grpc.PaymentFormJsonDataRequest
	23,  // 337: grpc.BillingService.PaymentCreateProcess:input_type -> grpc.PaymentCreateRequest
	29,  // 338: grpc.BillingService.PaymentCallbackProcess:input_type -> grpc.PaymentNotifyRequest
	215, // 339: grpc.BillingService.OrderReceipt:input_type -> grpc.OrderReceiptRequest
	249, // 340: grpc.BillingService.OrderReCreateProcess:input_type -> grpc.OrderReCreateProcessRequest
	362, // 341: grpc.BillingService.UpdateOrder:input_type -> billing.Order
	62,  // 342: grpc.BillingService.GetMerchantBy:input_type -> grpc.GetMerchantByRequest
	33,  // 343: grpc.BillingService.ListMerchants:input_type -> grpc.MerchantListingRequest
	33,  // 344: grpc.BillingService.ListMerchantsForAgreement:input_type -> grpc.MerchantListingRequest
	31,  // 345: grpc.BillingService.ChangeMerchant:input_type -> grpc.OnboardingRequest
	36,  // 346: grpc.BillingService.ChangeMerchantStatus:input_type -> grpc.MerchantChangeStatusRequest
	243, // 347: grpc.BillingService.SetMerchantOperatingCompany:input_type -> grpc.SetMerchantOperatingCompanyRequest
	245, // 348: grpc.BillingService.SetMerchantAcceptedStatus:input_type -> grpc.SetMerchantAcceptedStatusRequest
	63,  // 349: grpc.BillingService.ChangeMerchantData:input_type -> grpc.ChangeMerchantDataRequest
	69,  // 350: grpc.BillingService.SetMerchantS3Agreement:input_type -> grpc.SetMerchantS3AgreementRequest
	170, // 351: grpc.BillingService.GetMerchantTariffRates:input_type -> grpc.GetMerchantTariffRatesRequest
	173, // 352: grpc.BillingService.SetMerchantTariffRates:input_type -> grpc.SetMerchantTariffRatesRequest
	220, // 353: grpc.BillingService.ChangeMerchantManualPayouts:input_type -> grpc.ChangeMerchantManualPayoutsRequest
	345, // 354: grpc.BillingService.RefreshMerchantApiToken:input_type -> grpc.RefreshMerchantApiTokenRequest
	37,  // 355: grpc.BillingService.CreateNotification:input_type -> grpc.NotificationRequest
	47,  // 356: grpc.BillingService.GetNotification:input_type -> grpc.GetNotificationRequest
	39,  // 357: grpc.BillingService.ListNotifications:input_type -> grpc.ListingNotificationRequest
	47,  // 358: grpc.BillingService.MarkNotificationAsRead:input_type -> grpc.GetNotificationRequest
	43,  // 359: grpc.BillingService.ListMerchantPaymentMethods:input_type -> grpc.ListMerchantPaymentMethodsRequest
	41,  // 360: grpc.BillingService.GetMerchantPaymentMethod:input_type -> grpc.GetMerchantPaymentMethodRequest
	44,  // 361: grpc.BillingService.ChangeMerchantPaymentMethod:input_type -> grpc.MerchantPaymentMethodRequest
	48,  // 362: grpc.BillingService.CreateRefund:input_type -> grpc.CreateRefundRequest
	50,  // 363: grpc.BillingService.ListRefunds:input_type -> grpc.ListRefundsRequest
	52,  // 364: grpc.BillingService.GetRefund:input_type -> grpc.GetRefundRequest
	53,  // 365: grpc.BillingService.ProcessRefundCallback:input_type -> grpc.CallbackRequest
	56,  // 366: grpc.BillingService.PaymentFormLanguageChanged:input_type -> grpc.PaymentFormUserChangeLangRequest
	57,  // 367: grpc.BillingService.PaymentFormPaymentAccountChanged:input_type -> grpc.PaymentFormUserChangePaymentAccountRequest
	59,  // 368: grpc.BillingService.ProcessBillingAddress:input_type -> grpc.ProcessBillingAddressRequest
	77,  // 369: grpc.BillingService.CreateOrUpdateProduct:input_type -> grpc.Product
	78,  // 370: grpc.BillingService.ListProducts:input_type -> grpc.ListProductsRequest
	84,  // 371: grpc.BillingService.GetProduct:input_type -> grpc.RequestProduct
	84,  // 372: grpc.BillingService.DeleteProduct:input_type -> grpc.RequestProduct
	79,  // 373: grpc.BillingService.GetProductsForOrder:input_type -> grpc.GetProductsForOrderRequest
	84,  // 374: grpc.BillingService.GetProductPrices:input_type -> grpc.RequestProduct
	143, // 375: grpc.BillingService.UpdateProductPrices:input_type -> grpc.UpdateProductPricesRequest
	385, // 376: grpc.BillingService.ChangeProject:input_type -> billing.Project
	89,  // 377: grpc.BillingService.GetProject:input_type -> grpc.GetProjectRequest
	90,  // 378: grpc.BillingService.ListProjects:input_type -> grpc.ListProjectsRequest
	89,  // 379: grpc.BillingService.DeleteProject:input_type -> grpc.GetProjectRequest
	92,  // 380: grpc.BillingService.CreateToken:input_type -> grpc.TokenRequest
	94,  // 381: grpc.BillingService.CheckProjectRequestSignature:input_type -> grpc.CheckProjectRequestSignatureRequest
	0,   // 382: grpc.BillingService.GetCountriesList:input_type -> grpc.EmptyRequest
	278, // 383: grpc.BillingService.GetCountriesListForOrder:input_type -> grpc.GetCountriesListForOrderRequest
	431, // 384: grpc.BillingService.GetCountry:input_type -> billing.GetCountryRequest
	432, // 385: grpc.BillingService.UpdateCountry:input_type -> billing.Country
	97,  // 386: grpc.BillingService.GetOrderPublic:input_type -> grpc.GetOrderRequest
	97,  // 387: grpc.BillingService.GetOrderPrivate:input_type -> grpc.GetOrderRequest
	97,  // 388: grpc.BillingService.SendOrderToWebHookNotifier:input_type -> grpc.GetOrderRequest
	96,  // 389: grpc.BillingService.FindAllOrdersPublic:input_type -> grpc.ListOrdersRequest
	96,  // 390: grpc.BillingService.FindAllOrdersPrivate:input_type -> grpc.ListOrdersRequest
	96,  // 391: grpc.BillingService.FindAllOrders:input_type -> grpc.ListOrdersRequest
	98,  // 392: grpc.BillingService.IsOrderCanBePaying:input_type -> grpc.IsOrderCanBePayingRequest
	433, // 393: grpc.BillingService.GetPriceGroup:input_type -> billing.GetPriceGroupRequest
	414, // 394: grpc.BillingService.UpdatePriceGroup:input_type -> billing.PriceGroup
	133, // 395: grpc.BillingService.GetPriceGroupByCountry:input_type -> grpc.PriceGroupByCountryRequest
	0,   // 396: grpc.BillingService.GetPriceGroupCurrencies:input_type -> grpc.EmptyRequest
	137, // 397: grpc.BillingService.GetPriceGroupCurrencyByRegion:input_type -> grpc.PriceGroupByRegionRequest
	138, // 398: grpc.BillingService.GetRecommendedPriceByPriceGroup:input_type -> grpc.RecommendedPriceRequest
	138, // 399: grpc.BillingService.GetRecommendedPriceByConversion:input_type -> grpc.RecommendedPriceRequest
	140, // 400: grpc.BillingService.GetRecommendedPriceTable:input_type -> grpc.RecommendedPriceTableRequest
	219, // 401: grpc.BillingService.GetPriceGroupByRegion:input_type -> grpc.GetPriceGroupByRegionRequest
	100, // 402: grpc.BillingService.SetUserNotifySales:input_type -> grpc.SetUserNotifyRequest
	100, // 403: grpc.BillingService.SetUserNotifyNewRegion:input_type -> grpc.SetUserNotifyRequest
	389, // 404: grpc.BillingService.CreateOrUpdatePaymentMethod:input_type -> billing.PaymentMethod
	106, // 405: grpc.BillingService.CreateOrUpdatePaymentMethodProductionSettings:input_type -> grpc.ChangePaymentMethodParamsRequest
	103, // 406: grpc.BillingService.GetPaymentMethodProductionSettings:input_type -> grpc.GetPaymentMethodSettingsRequest
	103, // 407: grpc.BillingService.DeletePaymentMethodProductionSettings:input_type -> grpc.GetPaymentMethodSettingsRequest
	106, // 408: grpc.BillingService.CreateOrUpdatePaymentMethodTestSettings:input_type -> grpc.ChangePaymentMethodParamsRequest
	103, // 409: grpc.BillingService.GetPaymentMethodTestSettings:input_type -> grpc.GetPaymentMethodSettingsRequest
	103, // 410: grpc.BillingService.DeletePaymentMethodTestSettings:input_type -> grpc.GetPaymentMethodSettingsRequest
	109, // 411: grpc.BillingService.FindByZipCode:input_type -> grpc.FindByZipCodeRequest
	0,   // 412: grpc.BillingService.GetAllPaymentChannelCostSystem:input_type -> grpc.EmptyRequest
	434, // 413: grpc.BillingService.GetPaymentChannelCostSystem:input_type -> billing.PaymentChannelCostSystemRequest
	394, // 414: grpc.BillingService.SetPaymentChannelCostSystem:input_type -> billing.PaymentChannelCostSystem
	435, // 415: grpc.BillingService.DeletePaymentChannelCostSystem:input_type -> billing.PaymentCostDeleteRequest
	436, // 416: grpc.BillingService.GetAllPaymentChannelCostMerchant:input_type -> billing.PaymentChannelCostMerchantListRequest
	437, // 417: grpc.BillingService.GetPaymentChannelCostMerchant:input_type -> billing.PaymentChannelCostMerchantRequest
	396, // 418: grpc.BillingService.SetPaymentChannelCostMerchant:input_type -> billing.PaymentChannelCostMerchant
	343, // 419: grpc.BillingService.SetAllPaymentChannelCostMerchant:input_type -> grpc.SetAllPaymentChannelCostMerchantRequest
	435, // 420: grpc.BillingService.DeletePaymentChannelCostMerchant:input_type -> billing.PaymentCostDeleteRequest
	0,   // 421: grpc.BillingService.GetAllMoneyBackCostSystem:input_type -> grpc.EmptyRequest
	438, // 422: grpc.BillingService.GetMoneyBackCostSystem:input_type -> billing.MoneyBackCostSystemRequest
	398, // 423: grpc.BillingService.SetMoneyBackCostSystem:input_type -> billing.MoneyBackCostSystem
	435, // 424: grpc.BillingService.DeleteMoneyBackCostSystem:input_type -> billing.PaymentCostDeleteRequest
	439, // 425: grpc.BillingService.GetAllMoneyBackCostMerchant:input_type -> billing.MoneyBackCostMerchantListRequest
	440, // 426: grpc.BillingService.GetMoneyBackCostMerchant:input_type -> billing.MoneyBackCostMerchantRequest
	400, // 427: grpc.BillingService.SetMoneyBackCostMerchant:input_type -> billing.MoneyBackCostMerchant
	435, // 428: grpc.BillingService.DeleteMoneyBackCostMerchant:input_type -> billing.PaymentCostDeleteRequest
	113, // 429: grpc.BillingService.CreateAccountingEntry:input_type -> grpc.CreateAccountingEntryRequest
	154, // 430: grpc.BillingService.GetUserProfile:input_type -> grpc.GetUserProfileRequest
	150, // 431: grpc.BillingService.CreateOrUpdateUserProfile:input_type -> grpc.UserProfile
	158, // 432: grpc.BillingService.ConfirmUserEmail:input_type -> grpc.ConfirmUserEmailRequest
	157, // 433: grpc.BillingService.CreatePageReview:input_type -> grpc.CreatePageReviewRequest
	115, // 434: grpc.BillingService.CreateRoyaltyReport:input_type -> grpc.CreateRoyaltyReportRequest
	116, // 435: grpc.BillingService.ListRoyaltyReports:input_type -> grpc.ListRoyaltyReportsRequest
	121, // 436: grpc.BillingService.GetRoyaltyReport:input_type -> grpc.GetRoyaltyReportRequest
	123, // 437: grpc.BillingService.ChangeRoyaltyReport:input_type -> grpc.ChangeRoyaltyReportRequest
	119, // 438: grpc.BillingService.ListRoyaltyReportOrders:input_type -> grpc.ListRoyaltyReportOrdersRequest
	124, // 439: grpc.BillingService.MerchantReviewRoyaltyReport:input_type -> grpc.MerchantReviewRoyaltyReportRequest
	0,   // 440: grpc.BillingService.AutoAcceptRoyaltyReports:input_type -> grpc.EmptyRequest
	238, // 441: grpc.BillingService.RoyaltyReportPdfUploaded:input_type -> grpc.RoyaltyReportPdfUploadedRequest
	0,   // 442: grpc.BillingService.GetVatReportsDashboard:input_type -> grpc.EmptyRequest
	163, // 443: grpc.BillingService.GetVatReportsForCountry:input_type -> grpc.VatReportsRequest
	160, // 444: grpc.BillingService.GetVatReportTransactions:input_type -> grpc.VatTransactionsRequest
	166, // 445: grpc.BillingService.ProcessVatReports:input_type -> grpc.ProcessVatReportsRequest
	167, // 446: grpc.BillingService.UpdateVatReportStatus:input_type -> grpc.UpdateVatReportStatusRequest
	280, // 447: grpc.BillingService.GetVatReport:input_type -> grpc.VatReportRequest
	0,   // 448: grpc.BillingService.CalcAnnualTurnovers:input_type -> grpc.EmptyRequest
	69,  // 449: grpc.BillingService.GetMerchantOnboardingCompleteData:input_type -> grpc.SetMerchantS3AgreementRequest
	16,  // 450: grpc.BillingService.CreateOrUpdateKeyProduct:input_type -> grpc.CreateOrUpdateKeyProductRequest
	22,  // 451: grpc.BillingService.GetKeyProducts:input_type -> grpc.ListKeyProductsRequest
	85,  // 452: grpc.BillingService.GetKeyProduct:input_type -> grpc.RequestKeyProductMerchant
	85,  // 453: grpc.BillingService.DeleteKeyProduct:input_type -> grpc.RequestKeyProductMerchant
	18,  // 454: grpc.BillingService.PublishKeyProduct:input_type -> grpc.PublishKeyProductRequest
	17,  // 455: grpc.BillingService.UnPublishKeyProduct:input_type -> grpc.UnPublishKeyProductRequest
	82,  // 456: grpc.BillingService.GetKeyProductsForOrder:input_type -> grpc.GetKeyProductsForOrderRequest
	80,  // 457: grpc.BillingService.GetKeyProductInfo:input_type -> grpc.GetKeyProductInfoRequest
	19,  // 458: grpc.BillingService.GetPlatforms:input_type -> grpc.ListPlatformsRequest
	13,  // 459: grpc.BillingService.GetAvailableKeysCount:input_type -> grpc.GetPlatformKeyCountRequest
	12,  // 460: grpc.BillingService.UploadKeysFile:input_type -> grpc.PlatformKeysFileRequest
	7,   // 461: grpc.BillingService.GetKeyByID:input_type -> grpc.KeyForOrderRequest
	10,  // 462: grpc.BillingService.ReserveKeyForOrder:input_type -> grpc.PlatformKeyReserveRequest
	7,   // 463: grpc.BillingService.FinishRedeemKeyForOrder:input_type -> grpc.KeyForOrderRequest
	7,   // 464: grpc.BillingService.CancelRedeemKeyForOrder:input_type -> grpc.KeyForOrderRequest
	4,   // 465: grpc.BillingService.ChangeCodeInOrder:input_type -> grpc.ChangeCodeInOrderRequest
	183, // 466: grpc.BillingService.GetDashboardMainReport:input_type -> grpc.GetDashboardMainRequest
	183, // 467: grpc.BillingService.GetDashboardRevenueDynamicsReport:input_type -> grpc.GetDashboardMainRequest
	185, // 468: grpc.BillingService.GetDashboardBaseReport:input_type -> grpc.GetDashboardBaseReportRequest
	294, // 469: grpc.BillingService.GetDashboardCustomersReport:input_type -> grpc.DashboardCustomerReportRequest
	292, // 470: grpc.BillingService.GetDashboardCustomerArpu:input_type -> grpc.DashboardCustomerReportArpuRequest
	202, // 471: grpc.BillingService.CreatePayoutDocument:input_type -> grpc.CreatePayoutDocumentRequest
	205, // 472: grpc.BillingService.UpdatePayoutDocument:input_type -> grpc.UpdatePayoutDocumentRequest
	207, // 473: grpc.BillingService.GetPayoutDocuments:input_type -> grpc.GetPayoutDocumentsRequest
	206, // 474: grpc.BillingService.GetPayoutDocument:input_type -> grpc.GetPayoutDocumentRequest
	206, // 475: grpc.BillingService.GetPayoutDocumentRoyaltyReports:input_type -> grpc.GetPayoutDocumentRequest
	213, // 476: grpc.BillingService.PayoutDocumentPdfUploaded:input_type -> grpc.PayoutDocumentPdfUploadedRequest
	0,   // 477: grpc.BillingService.AutoCreatePayoutDocuments:input_type -> grpc.EmptyRequest
	211, // 478: grpc.BillingService.GetMerchantBalance:input_type -> grpc.GetMerchantBalanceRequest
	55,  // 479: grpc.BillingService.PaymentFormPlatformChanged:input_type -> grpc.PaymentFormUserChangePlatformRequest
	3,   // 480: grpc.BillingService.CheckSkuAndKeyProject:input_type -> grpc.CheckSkuAndKeyProjectRequest
	222, // 481: grpc.BillingService.GetPaylinks:input_type -> grpc.GetPaylinksRequest
	228, // 482: grpc.BillingService.GetPaylink:input_type -> grpc.PaylinkRequest
	227, // 483: grpc.BillingService.IncrPaylinkVisits:input_type -> grpc.PaylinkRequestById
	232, // 484: grpc.BillingService.GetPaylinkURL:input_type -> grpc.GetPaylinkURLRequest
	441, // 485: grpc.BillingService.CreateOrUpdatePaylink:input_type -> paylink.CreatePaylinkRequest
	228, // 486: grpc.BillingService.DeletePaylink:input_type -> grpc.PaylinkRequest
	234, // 487: grpc.BillingService.GetPaylinkStatTotal:input_type -> grpc.GetPaylinkStatCommonRequest
	234, // 488: grpc.BillingService.GetPaylinkStatByCountry:input_type -> grpc.GetPaylinkStatCommonRequest
	234, // 489: grpc.BillingService.GetPaylinkStatByReferrer:input_type -> grpc.GetPaylinkStatCommonRequest
	234, // 490: grpc.BillingService.GetPaylinkStatByDate:input_type -> grpc.GetPaylinkStatCommonRequest
	234, // 491: grpc.BillingService.GetPaylinkStatByUtm:input_type -> grpc.GetPaylinkStatCommonRequest
	235, // 492: grpc.BillingService.GetPaylinkTransactions:input_type -> grpc.GetPaylinkTransactionsRequest
	230, // 493: grpc.BillingService.GetPaylinkUrlByShortLink:input_type -> grpc.GetPaylinkUrlByShortLinkRequest
	240, // 494: grpc.BillingService.DeleteSavedCard:input_type -> grpc.DeleteSavedCardRequest
	0,   // 495: grpc.BillingService.GetOperatingCompaniesList:input_type -> grpc.EmptyRequest
	418, // 496: grpc.BillingService.AddOperatingCompany:input_type -> billing.OperatingCompany
	247, // 497: grpc.BillingService.GetOperatingCompany:input_type -> grpc.GetOperatingCompanyRequest
	0,   // 498: grpc.BillingService.GetPaymentMinLimitsSystem:input_type -> grpc.EmptyRequest
	419, // 499: grpc.BillingService.SetPaymentMinLimitSystem:input_type -> billing.PaymentMinLimitSystem
	250, // 500: grpc.BillingService.GetMerchantUsers:input_type -> grpc.GetMerchantUsersRequest
	0,   // 501: grpc.BillingService.GetAdminUsers:input_type -> grpc.EmptyRequest
	252, // 502: grpc.BillingService.InviteUserMerchant:input_type -> grpc.InviteUserMerchantRequest
	254, // 503: grpc.BillingService.InviteUserAdmin:input_type -> grpc.InviteUserAdminRequest
	256, // 504: grpc.BillingService.ResendInviteMerchant:input_type -> grpc.ResendInviteMerchantRequest
	257, // 505: grpc.BillingService.ResendInviteAdmin:input_type -> grpc.ResendInviteAdminRequest
	264, // 506: grpc.BillingService.AcceptInvite:input_type -> grpc.AcceptInviteRequest
	262, // 507: grpc.BillingService.CheckInviteToken:input_type -> grpc.CheckInviteTokenRequest
	267, // 508: grpc.BillingService.GetMerchantsForUser:input_type -> grpc.GetMerchantsForUserRequest
	270, // 509: grpc.BillingService.ChangeRoleForMerchantUser:input_type -> grpc.ChangeRoleForMerchantUserRequest
	271, // 510: grpc.BillingService.ChangeRoleForAdminUser:input_type -> grpc.ChangeRoleForAdminUserRequest
	272, // 511: grpc.BillingService.GetRoleList:input_type -> grpc.GetRoleListRequest
	275, // 512: grpc.BillingService.DeleteMerchantUser:input_type -> grpc.MerchantRoleRequest
	274, // 513: grpc.BillingService.DeleteAdminUser:input_type -> grpc.AdminRoleRequest
	275, // 514: grpc.BillingService.GetMerchantUserRole:input_type -> grpc.MerchantRoleRequest
	274, // 515: grpc.BillingService.GetAdminUserRole:input_type -> grpc.AdminRoleRequest
	151, // 516: grpc.BillingService.GetCommonUserProfile:input_type -> grpc.CommonUserProfileRequest
	151, // 517: grpc.BillingService.GetAdminByUserId:input_type -> grpc.CommonUserProfileRequest
	430, // 518: grpc.BillingService.SendWebhookToMerchant:input_type -> billing.OrderCreateRequest
	225, // 519: grpc.BillingService.NotifyWebhookTestResults:input_type -> grpc.NotifyWebhookTestResultsRequest
	284, // 520: grpc.BillingService.RoyaltyReportFinanceDone:input_type -> grpc.ReportFinanceDoneRequest
	284, // 521: grpc.BillingService.PayoutFinanceDone:input_type -> grpc.ReportFinanceDoneRequest
	286, // 522: grpc.BillingService.GetActOfCompletion:input_type -> grpc.ActOfCompletionRequest
	288, // 523: grpc.BillingService.GetActsOfCompletionList:input_type -> grpc.ActsOfCompletionListRequest
	285, // 524: grpc.BillingService.SetCustomerPaymentActivity:input_type -> grpc.SetCustomerPaymentActivityRequest
	300, // 525: grpc.BillingService.GetCustomerList:input_type -> grpc.ListCustomersRequest
	304, // 526: grpc.BillingService.GetCustomerInfo:input_type -> grpc.GetCustomerInfoRequest
	331, // 527: grpc.BillingService.GetCustomerShortInfo:input_type -> grpc.GetCustomerShortInfoRequest
	306, // 528: grpc.BillingService.DeserializeCookie:input_type -> grpc.DeserializeCookieRequest
	308, // 529: grpc.BillingService.DeleteCustomerCard:input_type -> grpc.DeleteCustomerCardRequest
	426, // 530: grpc.BillingService.AddRecurringPlan:input_type -> billing.RecurringPlan
	426, // 531: grpc.BillingService.UpdateRecurringPlan:input_type -> billing.RecurringPlan
	317, // 532: grpc.BillingService.EnableRecurringPlan:input_type -> grpc.EnableRecurringPlanRequest
	319, // 533: grpc.BillingService.DisableRecurringPlan:input_type -> grpc.DisableRecurringPlanRequest
	321, // 534: grpc.BillingService.DeleteRecurringPlan:input_type -> grpc.DeleteRecurringPlanRequest
	323, // 535: grpc.BillingService.GetRecurringPlan:input_type -> grpc.GetRecurringPlanRequest
	325, // 536: grpc.BillingService.GetRecurringPlans:input_type -> grpc.GetRecurringPlansRequest
	313, // 537: grpc.BillingService.GetRecurringPlanStat:input_type -> grpc.GetRecurringPlanStatRequest
	327, // 538: grpc.BillingService.FindExpiredSubscriptions:input_type -> grpc.FindExpiredSubscriptionsRequest
	336, // 539: grpc.BillingService.DeleteRecurringSubscription:input_type -> grpc.DeleteRecurringSubscriptionRequest
	311, // 540: grpc.BillingService.FindSubscriptions:input_type -> grpc.FindSubscriptionsRequest
	309, // 541: grpc.BillingService.GetSubscription:input_type -> grpc.GetSubscriptionRequest
	334, // 542: grpc.BillingService.GetSubscriptionsOrders:input_type -> grpc.GetSubscriptionsOrdersRequest
	337, // 543: grpc.BillingService.SetSubscriptionRenewalPending:input_type -> grpc.SetSubscriptionRenewalPendingRequest
	428, // 544: grpc.BillingService.AddMerchantDocument:input_type -> billing.MerchantDocument
	339, // 545: grpc.BillingService.GetMerchantDocuments:input_type -> grpc.GetMerchantDocumentsRequest
	341, // 546: grpc.BillingService.GetMerchantDocument:input_type -> grpc.GetMerchantDocumentRequest
	0,   // 547: grpc.BillingService.Ping:input_type -> grpc.EmptyRequest
	68,  // 548: grpc.BillingService.OrderCreateByPaylink:output_type -> grpc.OrderCreateProcessResponse
	68,  // 549: grpc.BillingService.OrderCreateProcess:output_type -> grpc.OrderCreateProcessResponse
	28,  // 550: grpc.BillingService.PaymentFormJsonDataProcess:output_type -> grpc.PaymentFormJsonDataResponse
	24,  // 551: grpc.BillingService.PaymentCreateProcess:output_type -> grpc.PaymentCreateResponse
	30,  // 552: grpc.BillingService.PaymentCallbackProcess:output_type -> grpc.PaymentNotifyResponse
	216, // 553: grpc.BillingService.OrderReceipt:output_type -> grpc.OrderReceiptResponse
	68,  // 554: grpc.BillingService.OrderReCreateProcess:output_type -> grpc.OrderCreateProcessResponse
	1,   // 555: grpc.BillingService.UpdateOrder:output_type -> grpc.EmptyResponse
	46,  // 556: grpc.BillingService.GetMerchantBy:output_type -> grpc.GetMerchantResponse
	34,  // 557: grpc.BillingService.ListMerchants:output_type -> grpc.MerchantListingResponse
	35,  // 558: grpc.BillingService.ListMerchantsForAgreement:output_type -> grpc.ListMerchantsForAgreementResponse
	65,  // 559: grpc.BillingService.ChangeMerchant:output_type -> grpc.ChangeMerchantResponse
	66,  // 560: grpc.BillingService.ChangeMerchantStatus:output_type -> grpc.ChangeMerchantStatusResponse
	244, // 561: grpc.BillingService.SetMerchantOperatingCompany:output_type -> grpc.SetMerchantOperatingCompanyResponse
	246, // 562: grpc.BillingService.SetMerchantAcceptedStatus:output_type -> grpc.SetMerchantAcceptedStatusResponse
	64,  // 563: grpc.BillingService.ChangeMerchantData:output_type -> grpc.ChangeMerchantDataResponse
	64,  // 564: grpc.BillingService.SetMerchantS3Agreement:output_type -> grpc.ChangeMerchantDataResponse
	172, // 565: grpc.BillingService.GetMerchantTariffRates:output_type -> grpc.GetMerchantTariffRatesResponse
	95,  // 566: grpc.BillingService.SetMerchantTariffRates:output_type -> grpc.CheckProjectRequestSignatureResponse
	221, // 567: grpc.BillingService.ChangeMerchantManualPayouts:output_type -> grpc.ChangeMerchantManualPayoutsResponse
	346, // 568: grpc.BillingService.RefreshMerchantApiToken:output_type -> grpc.RefreshMerchantApiTokenResponse
	67,  // 569: grpc.BillingService.CreateNotification:output_type -> grpc.CreateNotificationResponse
	377, // 570: grpc.BillingService.GetNotification:output_type -> billing.Notification
	38,  // 571: grpc.BillingService.ListNotifications:output_type -> grpc.Notifications
	377, // 572: grpc.BillingService.MarkNotificationAsRead:output_type -> billing.Notification
	40,  // 573: grpc.BillingService.ListMerchantPaymentMethods:output_type -> grpc.ListingMerchantPaymentMethod
	42,  // 574: grpc.BillingService.GetMerchantPaymentMethod:output_type -> grpc.GetMerchantPaymentMethodResponse
	45,  // 575: grpc.BillingService.ChangeMerchantPaymentMethod:output_type -> grpc.MerchantPaymentMethodResponse
	49,  // 576: grpc.BillingService.CreateRefund:output_type -> grpc.CreateRefundResponse
	51,  // 577: grpc.BillingService.ListRefunds:output_type -> grpc.ListRefundsResponse
	49,  // 578: grpc.BillingService.GetRefund:output_type -> grpc.CreateRefundResponse
	30,  // 579: grpc.BillingService.ProcessRefundCallback:output_type -> grpc.PaymentNotifyResponse
	58,  // 580: grpc.BillingService.PaymentFormLanguageChanged:output_type -> grpc.PaymentFormDataChangeResponse
	58,  // 581: grpc.BillingService.PaymentFormPaymentAccountChanged:output_type -> grpc.PaymentFormDataChangeResponse
	61,  // 582: grpc.BillingService.ProcessBillingAddress:output_type -> grpc.ProcessBillingAddressResponse
	77,  // 583: grpc.BillingService.CreateOrUpdateProduct:output_type -> grpc.Product
	83,  // 584: grpc.BillingService.ListProducts:output_type -> grpc.ListProductsResponse
	217, // 585: grpc.BillingService.GetProduct:output_type -> grpc.GetProductResponse
	1,   // 586: grpc.BillingService.DeleteProduct:output_type -> grpc.EmptyResponse
	83,  // 587: grpc.BillingService.GetProductsForOrder:output_type -> grpc.ListProductsResponse
	142, // 588: grpc.BillingService.GetProductPrices:output_type -> grpc.ProductPricesResponse
	111, // 589: grpc.BillingService.UpdateProductPrices:output_type -> grpc.ResponseError
	88,  // 590: grpc.BillingService.ChangeProject:output_type -> grpc.ChangeProjectResponse
	88,  // 591: grpc.BillingService.GetProject:output_type -> grpc.ChangeProjectResponse
	91,  // 592: grpc.BillingService.ListProjects:output_type -> grpc.ListProjectsResponse
	88,  // 593: grpc.BillingService.DeleteProject:output_type -> grpc.ChangeProjectResponse
	93,  // 594: grpc.BillingService.CreateToken:output_type -> grpc.TokenResponse
	95,  // 595: grpc.BillingService.CheckProjectRequestSignature:output_type -> grpc.CheckProjectRequestSignatureResponse
	421, // 596: grpc.BillingService.GetCountriesList:output_type -> billing.CountriesList
	279, // 597: grpc.BillingService.GetCountriesListForOrder:output_type -> grpc.GetCountriesListForOrderResponse
	432, // 598: grpc.BillingService.GetCountry:output_type -> billing.Country
	432, // 599: grpc.BillingService.UpdateCountry:output_type -> billing.Country
	180, // 600: grpc.BillingService.GetOrderPublic:output_type -> grpc.GetOrderPublicResponse
	181, // 601: grpc.BillingService.GetOrderPrivate:output_type -> grpc.GetOrderPrivateResponse
	111, // 602: grpc.BillingService.SendOrderToWebHookNotifier:output_type -> grpc.ResponseError
	176, // 603: grpc.BillingService.FindAllOrdersPublic:output_type -> grpc.ListOrdersPublicResponse
	177, // 604: grpc.BillingService.FindAllOrdersPrivate:output_type -> grpc.ListOrdersPrivateResponse
	179, // 605: grpc.BillingService.FindAllOrders:output_type -> grpc.ListOrdersResponse
	99,  // 606: grpc.BillingService.IsOrderCanBePaying:output_type -> grpc.IsOrderCanBePayingResponse
	414, // 607: grpc.BillingService.GetPriceGroup:output_type -> billing.PriceGroup
	414, // 608: grpc.BillingService.UpdatePriceGroup:output_type -> billing.PriceGroup
	414, // 609: grpc.BillingService.GetPriceGroupByCountry:output_type -> billing.PriceGroup
	134, // 610: grpc.BillingService.GetPriceGroupCurrencies:output_type -> grpc.PriceGroupCurrenciesResponse
	134, // 611: grpc.BillingService.GetPriceGroupCurrencyByRegion:output_type -> grpc.PriceGroupCurrenciesResponse
	139, // 612: grpc.BillingService.GetRecommendedPriceByPriceGroup:output_type -> grpc.RecommendedPriceResponse
	139, // 613: grpc.BillingService.GetRecommendedPriceByConversion:output_type -> grpc.RecommendedPriceResponse
	141, // 614: grpc.BillingService.GetRecommendedPriceTable:output_type -> grpc.RecommendedPriceTableResponse
	218, // 615: grpc.BillingService.GetPriceGroupByRegion:output_type -> grpc.GetPriceGroupByRegionResponse
	1,   // 616: grpc.BillingService.SetUserNotifySales:output_type -> grpc.EmptyResponse
	1,   // 617: grpc.BillingService.SetUserNotifyNewRegion:output_type -> grpc.EmptyResponse
	107, // 618: grpc.BillingService.CreateOrUpdatePaymentMethod:output_type -> grpc.ChangePaymentMethodResponse
	108, // 619: grpc.BillingService.CreateOrUpdatePaymentMethodProductionSettings:output_type -> grpc.ChangePaymentMethodParamsResponse
	104, // 620: grpc.BillingService.GetPaymentMethodProductionSettings:output_type -> grpc.GetPaymentMethodSettingsResponse
	108, // 621: grpc.BillingService.DeletePaymentMethodProductionSettings:output_type -> grpc.ChangePaymentMethodParamsResponse
	108, // 622: grpc.BillingService.CreateOrUpdatePaymentMethodTestSettings:output_type -> grpc.ChangePaymentMethodParamsResponse
	104, // 623: grpc.BillingService.GetPaymentMethodTestSettings:output_type -> grpc.GetPaymentMethodSettingsResponse
	108, // 624: grpc.BillingService.DeletePaymentMethodTestSettings:output_type -> grpc.ChangePaymentMethodParamsResponse
	110, // 625: grpc.BillingService.FindByZipCode:output_type -> grpc.FindByZipCodeResponse
	125, // 626: grpc.BillingService.GetAllPaymentChannelCostSystem:output_type -> grpc.PaymentChannelCostSystemListResponse
	126, // 627: grpc.BillingService.GetPaymentChannelCostSystem:output_type -> grpc.PaymentChannelCostSystemResponse
	126, // 628: grpc.BillingService.SetPaymentChannelCostSystem:output_type -> grpc.PaymentChannelCostSystemResponse
	111, // 629: grpc.BillingService.DeletePaymentChannelCostSystem:output_type -> grpc.ResponseError
	127, // 630: grpc.BillingService.GetAllPaymentChannelCostMerchant:output_type -> grpc.PaymentChannelCostMerchantListResponse
	128, // 631: grpc.BillingService.GetPaymentChannelCostMerchant:output_type -> grpc.PaymentChannelCostMerchantResponse
	128, // 632: grpc.BillingService.SetPaymentChannelCostMerchant:output_type -> grpc.PaymentChannelCostMerchantResponse
	344, // 633: grpc.BillingService.SetAllPaymentChannelCostMerchant:output_type -> grpc.SetAllPaymentChannelCostMerchantResponse
	111, // 634: grpc.BillingService.DeletePaymentChannelCostMerchant:output_type -> grpc.ResponseError
	129, // 635: grpc.BillingService.GetAllMoneyBackCostSystem:output_type -> grpc.MoneyBackCostSystemListResponse
	130, // 636: grpc.BillingService.GetMoneyBackCostSystem:output_type -> grpc.MoneyBackCostSystemResponse
	130, // 637: grpc.BillingService.SetMoneyBackCostSystem:output_type -> grpc.MoneyBackCostSystemResponse
	111, // 638: grpc.BillingService.DeleteMoneyBackCostSystem:output_type -> grpc.ResponseError
	131, // 639: grpc.BillingService.GetAllMoneyBackCostMerchant:output_type -> grpc.MoneyBackCostMerchantListResponse
	132, // 640: grpc.BillingService.GetMoneyBackCostMerchant:output_type -> grpc.MoneyBackCostMerchantResponse
	132, // 641: grpc.BillingService.SetMoneyBackCostMerchant:output_type -> grpc.MoneyBackCostMerchantResponse
	111, // 642: grpc.BillingService.DeleteMoneyBackCostMerchant:output_type -> grpc.ResponseError
	114, // 643: grpc.BillingService.CreateAccountingEntry:output_type -> grpc.CreateAccountingEntryResponse
	155, // 644: grpc.BillingService.GetUserProfile:output_type -> grpc.GetUserProfileResponse
	155, // 645: grpc.BillingService.CreateOrUpdateUserProfile:output_type -> grpc.GetUserProfileResponse
	159, // 646: grpc.BillingService.ConfirmUserEmail:output_type -> grpc.ConfirmUserEmailResponse
	95,  // 647: grpc.BillingService.CreatePageReview:output_type -> grpc.CheckProjectRequestSignatureResponse
	115, // 648: grpc.BillingService.CreateRoyaltyReport:output_type -> grpc.CreateRoyaltyReportRequest
	118, // 649: grpc.BillingService.ListRoyaltyReports:output_type -> grpc.ListRoyaltyReportsResponse
	122, // 650: grpc.BillingService.GetRoyaltyReport:output_type -> grpc.GetRoyaltyReportResponse
	111, // 651: grpc.BillingService.ChangeRoyaltyReport:output_type -> grpc.ResponseError
	162, // 652: grpc.BillingService.ListRoyaltyReportOrders:output_type -> grpc.TransactionsResponse
	111, // 653: grpc.BillingService.MerchantReviewRoyaltyReport:output_type -> grpc.ResponseError
	1,   // 654: grpc.BillingService.AutoAcceptRoyaltyReports:output_type -> grpc.EmptyResponse
	239, // 655: grpc.BillingService.RoyaltyReportPdfUploaded:output_type -> grpc.RoyaltyReportPdfUploadedResponse
	165, // 656: grpc.BillingService.GetVatReportsDashboard:output_type -> grpc.VatReportsResponse
	165, // 657: grpc.BillingService.GetVatReportsForCountry:output_type -> grpc.VatReportsResponse
	283, // 658: grpc.BillingService.GetVatReportTransactions:output_type -> grpc.PrivateTransactionsResponse
	1,   // 659: grpc.BillingService.ProcessVatReports:output_type -> grpc.EmptyResponse
	111, // 660: grpc.BillingService.UpdateVatReportStatus:output_type -> grpc.ResponseError
	282, // 661: grpc.BillingService.GetVatReport:output_type -> grpc.VatReportResponse
	1,   // 662: grpc.BillingService.CalcAnnualTurnovers:output_type -> grpc.EmptyResponse
	169, // 663: grpc.BillingService.GetMerchantOnboardingCompleteData:output_type -> grpc.GetMerchantOnboardingCompleteDataResponse
	15,  // 664: grpc.BillingService.CreateOrUpdateKeyProduct:output_type -> grpc.KeyProductResponse
	21,  // 665: grpc.BillingService.GetKeyProducts:output_type -> grpc.ListKeyProductsResponse
	15,  // 666: grpc.BillingService.GetKeyProduct:output_type -> grpc.KeyProductResponse
	2,   // 667: grpc.BillingService.DeleteKeyProduct:output_type -> grpc.EmptyResponseWithStatus
	15,  // 668: grpc.BillingService.PublishKeyProduct:output_type -> grpc.KeyProductResponse
	15,  // 669: grpc.BillingService.UnPublishKeyProduct:output_type -> grpc.KeyProductResponse
	21,  // 670: grpc.BillingService.GetKeyProductsForOrder:output_type -> grpc.ListKeyProductsResponse
	81,  // 671: grpc.BillingService.GetKeyProductInfo:output_type -> grpc.GetKeyProductInfoResponse
	20,  // 672: grpc.BillingService.GetPlatforms:output_type -> grpc.ListPlatformsResponse
	6,   // 673: grpc.BillingService.GetAvailableKeysCount:output_type -> grpc.GetPlatformKeyCountResponse
	11,  // 674: grpc.BillingService.UploadKeysFile:output_type -> grpc.PlatformKeysFileResponse
	8,   // 675: grpc.BillingService.GetKeyByID:output_type -> grpc.GetKeyForOrderRequestResponse
	9,   // 676: grpc.BillingService.ReserveKeyForOrder:output_type -> grpc.PlatformKeyReserveResponse
	8,   // 677: grpc.BillingService.FinishRedeemKeyForOrder:output_type -> grpc.GetKeyForOrderRequestResponse
	2,   // 678: grpc.BillingService.CancelRedeemKeyForOrder:output_type -> grpc.EmptyResponseWithStatus
	5,   // 679: grpc.BillingService.ChangeCodeInOrder:output_type -> grpc.ChangeCodeInOrderResponse
	184, // 680: grpc.BillingService.GetDashboardMainReport:output_type -> grpc.GetDashboardMainResponse
	187, // 681: grpc.BillingService.GetDashboardRevenueDynamicsReport:output_type -> grpc.GetDashboardRevenueDynamicsReportResponse
	186, // 682: grpc.BillingService.GetDashboardBaseReport:output_type -> grpc.GetDashboardBaseReportResponse
	291, // 683: grpc.BillingService.GetDashboardCustomersReport:output_type -> grpc.GetDashboardCustomerReportResponse
	293, // 684: grpc.BillingService.GetDashboardCustomerArpu:output_type -> grpc.DashboardCustomerReportArpuResponse
	204, // 685: grpc.BillingService.CreatePayoutDocument:output_type -> grpc.CreatePayoutDocumentResponse
	203, // 686: grpc.BillingService.UpdatePayoutDocument:output_type -> grpc.PayoutDocumentResponse
	209, // 687: grpc.BillingService.GetPayoutDocuments:output_type -> grpc.GetPayoutDocumentsResponse
	203, // 688: grpc.BillingService.GetPayoutDocument:output_type -> grpc.PayoutDocumentResponse
	118, // 689: grpc.BillingService.GetPayoutDocumentRoyaltyReports:output_type -> grpc.ListRoyaltyReportsResponse
	214, // 690: grpc.BillingService.PayoutDocumentPdfUploaded:output_type -> grpc.PayoutDocumentPdfUploadedResponse
	1,   // 691: grpc.BillingService.AutoCreatePayoutDocuments:output_type -> grpc.EmptyResponse
	212, // 692: grpc.BillingService.GetMerchantBalance:output_type -> grpc.GetMerchantBalanceResponse
	58,  // 693: grpc.BillingService.PaymentFormPlatformChanged:output_type -> grpc.PaymentFormDataChangeResponse
	2,   // 694: grpc.BillingService.CheckSkuAndKeyProject:output_type -> grpc.EmptyResponseWithStatus
	226, // 695: grpc.BillingService.GetPaylinks:output_type -> grpc.GetPaylinksResponse
	229, // 696: grpc.BillingService.GetPaylink:output_type -> grpc.GetPaylinkResponse
	1,   // 697: grpc.BillingService.IncrPaylinkVisits:output_type -> grpc.EmptyResponse
	233, // 698: grpc.BillingService.GetPaylinkURL:output_type -> grpc.GetPaylinkUrlResponse
	229, // 699: grpc.BillingService.CreateOrUpdatePaylink:output_type -> grpc.GetPaylinkResponse
	2,   // 700: grpc.BillingService.DeletePaylink:output_type -> grpc.EmptyResponseWithStatus
	236, // 701: grpc.BillingService.GetPaylinkStatTotal:output_type -> grpc.GetPaylinkStatCommonResponse
	237, // 702: grpc.BillingService.GetPaylinkStatByCountry:output_type -> grpc.GetPaylinkStatCommonGroupResponse
	237, // 703: grpc.BillingService.GetPaylinkStatByReferrer:output_type -> grpc.GetPaylinkStatCommonGroupResponse
	237, // 704: grpc.BillingService.GetPaylinkStatByDate:output_type -> grpc.GetPaylinkStatCommonGroupResponse
	237, // 705: grpc.BillingService.GetPaylinkStatByUtm:output_type -> grpc.GetPaylinkStatCommonGroupResponse
	162, // 706: grpc.BillingService.GetPaylinkTransactions:output_type -> grpc.TransactionsResponse
	231, // 707: grpc.BillingService.GetPaylinkUrlByShortLink:output_type -> grpc.GetPaylinkUrlByShortLinkResponse
	2,   // 708: grpc.BillingService.DeleteSavedCard:output_type -> grpc.EmptyResponseWithStatus
	241, // 709: grpc.BillingService.GetOperatingCompaniesList:output_type -> grpc.GetOperatingCompaniesListResponse
	2,   // 710: grpc.BillingService.AddOperatingCompany:output_type -> grpc.EmptyResponseWithStatus
	248, // 711: grpc.BillingService.GetOperatingCompany:output_type -> grpc.GetOperatingCompanyResponse
	242, // 712: grpc.BillingService.GetPaymentMinLimitsSystem:output_type -> grpc.GetPaymentMinLimitsSystemResponse
	2,   // 713: grpc.BillingService.SetPaymentMinLimitSystem:output_type -> grpc.EmptyResponseWithStatus
	251, // 714: grpc.BillingService.GetMerchantUsers:output_type -> grpc.GetMerchantUsersResponse
	266, // 715: grpc.BillingService.GetAdminUsers:output_type -> grpc.GetAdminUsersResponse
	253, // 716: grpc.BillingService.InviteUserMerchant:output_type -> grpc.InviteUserMerchantResponse
	255, // 717: grpc.BillingService.InviteUserAdmin:output_type -> grpc.InviteUserAdminResponse
	2,   // 718: grpc.BillingService.ResendInviteMerchant:output_type -> grpc.EmptyResponseWithStatus
	2,   // 719: grpc.BillingService.ResendInviteAdmin:output_type -> grpc.EmptyResponseWithStatus
	265, // 720: grpc.BillingService.AcceptInvite:output_type -> grpc.AcceptInviteResponse
	263, // 721: grpc.BillingService.CheckInviteToken:output_type -> grpc.CheckInviteTokenResponse
	268, // 722: grpc.BillingService.GetMerchantsForUser:output_type -> grpc.GetMerchantsForUserResponse
	2,   // 723: grpc.BillingService.ChangeRoleForMerchantUser:output_type -> grpc.EmptyResponseWithStatus
	2,   // 724: grpc.BillingService.ChangeRoleForAdminUser:output_type -> grpc.EmptyResponseWithStatus
	273, // 725: grpc.BillingService.GetRoleList:output_type -> grpc.GetRoleListResponse
	2,   // 726: grpc.BillingService.DeleteMerchantUser:output_type -> grpc.EmptyResponseWithStatus
	2,   // 727: grpc.BillingService.DeleteAdminUser:output_type -> grpc.EmptyResponseWithStatus
	277, // 728: grpc.BillingService.GetMerchantUserRole:output_type -> grpc.UserRoleResponse
	277, // 729: grpc.BillingService.GetAdminUserRole:output_type -> grpc.UserRoleResponse
	152, // 730: grpc.BillingService.GetCommonUserProfile:output_type -> grpc.CommonUserProfileResponse
	277, // 731: grpc.BillingService.GetAdminByUserId:output_type -> grpc.UserRoleResponse
	223, // 732: grpc.BillingService.SendWebhookToMerchant:output_type -> grpc.SendWebhookToMerchantResponse
	2,   // 733: grpc.BillingService.NotifyWebhookTestResults:output_type -> grpc.EmptyResponseWithStatus
	2,   // 734: grpc.BillingService.RoyaltyReportFinanceDone:output_type -> grpc.EmptyResponseWithStatus
	2,   // 735: grpc.BillingService.PayoutFinanceDone:output_type -> grpc.EmptyResponseWithStatus
	287, // 736: grpc.BillingService.GetActOfCompletion:output_type -> grpc.ActOfCompletionResponse
	290, // 737: grpc.BillingService.GetActsOfCompletionList:output_type -> grpc.ActsOfCompletionListResponse
	2,   // 738: grpc.BillingService.SetCustomerPaymentActivity:output_type -> grpc.EmptyResponseWithStatus
	302, // 739: grpc.BillingService.GetCustomerList:output_type -> grpc.ListCustomersResponse
	305, // 740: grpc.BillingService.GetCustomerInfo:output_type -> grpc.GetCustomerInfoResponse
	332, // 741: grpc.BillingService.GetCustomerShortInfo:output_type -> grpc.GetCustomerShortInfoResponse
	307, // 742: grpc.BillingService.DeserializeCookie:output_type -> grpc.DeserializeCookieResponse
	2,   // 743: grpc.BillingService.DeleteCustomerCard:output_type -> grpc.EmptyResponseWithStatus
	315, // 744: grpc.BillingService.AddRecurringPlan:output_type -> grpc.AddRecurringPlanResponse
	316, // 745: grpc.BillingService.UpdateRecurringPlan:output_type -> grpc.UpdateRecurringPlanResponse
	318, // 746: grpc.BillingService.EnableRecurringPlan:output_type -> grpc.EnableRecurringPlanResponse
	320, // 747: grpc.BillingService.DisableRecurringPlan:output_type -> grpc.DisableRecurringPlanResponse
	322, // 748: grpc.BillingService.DeleteRecurringPlan:output_type -> grpc.DeleteRecurringPlanResponse
	324, // 749: grpc.BillingService.GetRecurringPlan:output_type -> grpc.GetRecurringPlanResponse
	326, // 750: grpc.BillingService.GetRecurringPlans:output_type -> grpc.GetRecurringPlansResponse
	314, // 751: grpc.BillingService.GetRecurringPlanStat:output_type -> grpc.GetRecurringPlanStatResponse
	328, // 752: grpc.BillingService.FindExpiredSubscriptions:output_type -> grpc.FindExpiredSubscriptionsResponse
	2,   // 753: grpc.BillingService.DeleteRecurringSubscription:output_type -> grpc.EmptyResponseWithStatus
	312, // 754: grpc.BillingService.FindSubscriptions:output_type -> grpc.FindSubscriptionsResponse
	310, // 755: grpc.BillingService.GetSubscription:output_type -> grpc.GetSubscriptionResponse
	335, // 756: grpc.BillingService.GetSubscriptionsOrders:output_type -> grpc.GetSubscriptionsOrdersResponse
	2,   // 757: grpc.BillingService.SetSubscriptionRenewalPending:output_type -> grpc.EmptyResponseWithStatus
	338, // 758: grpc.BillingService.AddMerchantDocument:output_type -> grpc.AddMerchantDocumentResponse
	340, // 759: grpc.BillingService.GetMerchantDocuments:output_type -> grpc.GetMerchantDocumentsResponse
	342, // 760: grpc.BillingService.GetMerchantDocument:output_type -> grpc.GetMerchantDocumentResponse
	1,   // 761: grpc.BillingService.Ping:output_type -> grpc.EmptyResponse
	548, // [548:762] is the sub-list for method output_type
	334, // [334:548] is the sub-list for method input_type
	334, // [334:334] is the sub-list for extension type_name
	334, // [334:334] is the sub-list for extension extendee
	0,   // [0:334] is the sub-list for field type_name
}

func init() { file_grpc_proto_init() }
func file_grpc_proto_init() {
	if File_grpc_proto != nil {
		return
	}
	file_billing_proto_init()
	file_paylink_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_grpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyResponseWithStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckSkuAndKeyProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeCodeInOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeCodeInOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlatformKeyCountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyForOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKeyForOrderRequestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlatformKeyReserveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlatformKeyReserveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlatformKeysFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlatformKeysFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlatformKeyCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemovePlatformRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyProductResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrUpdateKeyProductRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnPublishKeyProductRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishKeyProductRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPlatformsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPlatformsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListKeyProductsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListKeyProductsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentFormJsonDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentFormJsonDataProject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentFormJsonData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentFormJsonDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentNotifyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentNotifyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnboardingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerchantListingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerchantListingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMerchantsForAgreementResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerchantChangeStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Notifications); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListingNotificationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListingMerchantPaymentMethod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMerchantPaymentMethodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMerchantPaymentMethodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMerchantPaymentMethodsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerchantPaymentMethodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerchantPaymentMethodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMerchantResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNotificationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRefundRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRefundResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRefundsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRefundsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRefundRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallbackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentFormDataChangedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentFormUserChangePlatformRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentFormUserChangeLangRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentFormUserChangePaymentAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentFormDataChangeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessBillingAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessBillingAddressResponseItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessBillingAddressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMerchantByRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeMerchantDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeMerchantDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeMerchantResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeMerchantStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNotificationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderCreateProcessResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMerchantS3AgreementRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyProductInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlatformPriceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductPriceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyProduct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlatformPrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlatformOs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Platform); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Product); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProductsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProductsForOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKeyProductInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKeyProductInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKeyProductsForOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProductsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestProduct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestKeyProductMerchant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestKeyProduct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*I18NTextSearchable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeProjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProjectsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProjectsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckProjectRequestSignatureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckProjectRequestSignatureResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrdersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsOrderCanBePayingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsOrderCanBePayingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetUserNotifyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyUserSales); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyUserNewRegion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPaymentMethodSettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPaymentMethodSettingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangePaymentMethodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangePaymentMethodParamsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangePaymentMethodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangePaymentMethodParamsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindByZipCodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindByZipCodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseErrorMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAccountingEntryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAccountingEntryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRoyaltyReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRoyaltyReportsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoyaltyReportsPaginate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRoyaltyReportsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRoyaltyReportOrdersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeRoyaltyReportCorrection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRoyaltyReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRoyaltyReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeRoyaltyReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerchantReviewRoyaltyReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentChannelCostSystemListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentChannelCostSystemResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentChannelCostMerchantListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentChannelCostMerchantResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoneyBackCostSystemListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoneyBackCostSystemResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoneyBackCostMerchantListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoneyBackCostMerchantResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriceGroupByCountryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriceGroupCurrenciesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriceGroupRegions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriceGroupRegion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriceGroupByRegionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecommendedPriceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecommendedPriceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecommendedPriceTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecommendedPriceTableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductPricesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProductPricesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserProfilePersonal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserProfileHelp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserProfileCompanyMonetization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserProfileCompanyPlatforms); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserProfileCompany); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserProfileEmail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonUserProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonUserProfileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonUserProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserProfileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageReview); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePageReviewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfirmUserEmailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfirmUserEmailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VatTransactionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionsPaginate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VatReportsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VatReportsPaginate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VatReportsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessVatReportsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateVatReportStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMerchantOnboardingCompleteDataResponseItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMerchantOnboardingCompleteDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMerchantTariffRatesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMerchantTariffRatesResponseItems); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMerchantTariffRatesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMerchantTariffRatesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrdersPublicResponseItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrdersPrivateResponseItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrdersPublicResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrdersPrivateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrdersResponseItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrdersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrderPublicResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrderPrivateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOriginalOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDashboardMainRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDashboardMainResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDashboardBaseReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDashboardBaseReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDashboardRevenueDynamicsReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashboardAmountItemWithChart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashboardChartItemFloat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashboardMainReportTotalTransactions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashboardMainReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[192].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashboardRevenueDynamicReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[193].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashboardRevenueDynamicReportItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[194].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashboardRevenueByCountryReportTop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[195].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashboardRevenueByCountryReportChartItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[196].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashboardRevenueByCountryReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[197].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashboardSalesTodayReportTop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[198].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashboardChartItemInt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[199].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashboardSalesTodayReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[200].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashboardSourcesReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[201].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashboardBaseReports); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[202].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePayoutDocumentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[203].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayoutDocumentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[204].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePayoutDocumentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[205].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePayoutDocumentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[206].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPayoutDocumentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[207].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPayoutDocumentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[208].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayoutDocumentsPaginate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[209].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPayoutDocumentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[210].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePayoutDocumentSignaturesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[211].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMerchantBalanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[212].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMerchantBalanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[213].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayoutDocumentPdfUploadedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[214].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayoutDocumentPdfUploadedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[215].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderReceiptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[216].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderReceiptResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[217].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProductResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[218].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPriceGroupByRegionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[219].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPriceGroupByRegionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[220].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeMerchantManualPayoutsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[221].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeMerchantManualPayoutsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[222].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPaylinksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[223].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendWebhookToMerchantResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[224].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaylinksPaginate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[225].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyWebhookTestResultsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[226].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPaylinksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[227].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaylinkRequestById); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[228].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaylinkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[229].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPaylinkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[230].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPaylinkUrlByShortLinkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[231].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPaylinkUrlByShortLinkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[232].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPaylinkURLRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[233].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPaylinkUrlResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[234].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPaylinkStatCommonRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[235].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPaylinkTransactionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[236].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPaylinkStatCommonResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[237].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPaylinkStatCommonGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[238].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoyaltyReportPdfUploadedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[239].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoyaltyReportPdfUploadedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[240].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSavedCardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[241].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOperatingCompaniesListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[242].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPaymentMinLimitsSystemResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[243].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMerchantOperatingCompanyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[244].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMerchantOperatingCompanyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[245].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMerchantAcceptedStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[246].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMerchantAcceptedStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[247].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOperatingCompanyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[248].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOperatingCompanyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[249].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderReCreateProcessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[250].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMerchantUsersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[251].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMerchantUsersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[252].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InviteUserMerchantRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[253].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InviteUserMerchantResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[254].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InviteUserAdminRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[255].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InviteUserAdminResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[256].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResendInviteMerchantRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[257].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResendInviteAdminRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[258].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMerchantUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[259].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMerchantUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[260].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAdminUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[261].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAdminUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[262].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckInviteTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[263].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckInviteTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[264].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceptInviteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[265].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceptInviteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[266].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAdminUsersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[267].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMerchantsForUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[268].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMerchantsForUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[269].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerchantForUserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[270].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeRoleForMerchantUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[271].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeRoleForAdminUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[272].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRoleListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[273].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRoleListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[274].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminRoleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[275].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerchantRoleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[276].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Permission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[277].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRoleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[278].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCountriesListForOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[279].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCountriesListForOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[280].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VatReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[281].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrivateTransactionsPaginate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[282].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VatReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[283].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrivateTransactionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[284].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportFinanceDoneRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[285].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetCustomerPaymentActivityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[286].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActOfCompletionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[287].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActOfCompletionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[288].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActsOfCompletionListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[289].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActsOfCompletionListItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[290].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActsOfCompletionListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[291].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDashboardCustomerReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[292].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashboardCustomerReportArpuRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[293].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashboardCustomerReportArpuResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[294].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashboardCustomerReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[295].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashboardCustomerReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[296].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashboardCustomerDynamic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[297].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashboardCustomerAltv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[298].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashboardCustomerArppu); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[299].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashboardCustomerTop20); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[300].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCustomersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[301].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AmountFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[302].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCustomersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[303].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShortCustomerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[304].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomerInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[305].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomerInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[306].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeserializeCookieRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[307].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeserializeCookieResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[308].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCustomerCardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[309].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubscriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[310].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubscriptionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[311].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindSubscriptionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[312].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindSubscriptionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[313].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecurringPlanStatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[314].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecurringPlanStatResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[315].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddRecurringPlanResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[316].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRecurringPlanResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[317].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableRecurringPlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[318].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableRecurringPlanResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[319].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableRecurringPlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[320].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableRecurringPlanResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[321].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRecurringPlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[322].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRecurringPlanResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[323].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecurringPlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[324].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecurringPlanResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[325].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecurringPlansRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[326].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecurringPlansResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[327].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindExpiredSubscriptionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[328].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindExpiredSubscriptionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[329].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSubscriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[330].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSubscriptionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[331].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomerShortInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[332].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomerShortInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[333].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerShortInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[334].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubscriptionsOrdersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[335].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubscriptionsOrdersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[336].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRecurringSubscriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[337].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSubscriptionRenewalPendingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[338].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddMerchantDocumentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[339].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMerchantDocumentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[340].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMerchantDocumentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[341].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMerchantDocumentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[342].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMerchantDocumentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[343].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetAllPaymentChannelCostMerchantRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[344].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetAllPaymentChannelCostMerchantResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[345].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshMerchantApiTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[346].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshMerchantApiTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_grpc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   362,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_grpc_proto_goTypes,
		DependencyIndexes: file_grpc_proto_depIdxs,
		MessageInfos:      file_grpc_proto_msgTypes,
	}.Build()
	File_grpc_proto = out.File
	file_grpc_proto_rawDesc = nil
	file_grpc_proto_goTypes = nil
	file_grpc_proto_depIdxs = nil
}
