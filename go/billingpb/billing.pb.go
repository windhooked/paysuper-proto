// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.13.0
// source: billing.proto

package billingpb

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Name struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: bson:"EN" json:"EN" structure:"EN"
	En string `protobuf:"bytes,1,opt,name=en,proto3" json:"EN" bson:"EN" structure:"EN"`
	// @inject_tag: bson:"RU" json:"RU" structure:"RU"
	Ru string `protobuf:"bytes,2,opt,name=ru,proto3" json:"RU" bson:"RU" structure:"RU"`
}

func (x *Name) Reset() {
	*x = Name{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Name) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Name) ProtoMessage() {}

func (x *Name) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Name.ProtoReflect.Descriptor instead.
func (*Name) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{0}
}

func (x *Name) GetEn() string {
	if x != nil {
		return x.En
	}
	return ""
}

func (x *Name) GetRu() string {
	if x != nil {
		return x.Ru
	}
	return ""
}

// @summary A payment order data about a customer and payment
type OrderCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: query:"PO_PROJECT_ID" form:"PO_PROJECT_ID" json:"project"  validate:"omitempty,hexadecimal" required:"true"
	//
	// The unique identifier for the Project found in the merchant account in the PaySuper Dashboard.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project" query:"PO_PROJECT_ID" form:"PO_PROJECT_ID" validate:"omitempty,hexadecimal" required:"true"`
	// @inject_tag: query:"PO_SIGNATURE" form:"PO_SIGNATURE" json:"-" validate:"omitempty,alphanum"
	Signature string `protobuf:"bytes,2,opt,name=signature,proto3" json:"-" query:"PO_SIGNATURE" form:"PO_SIGNATURE" validate:"omitempty,alphanum"`
	// @inject_tag: query:"PO_AMOUNT" form:"PO_AMOUNT" json:"amount" validate:"omitempty,numeric,gte=0"
	//
	// The order amount as a positive number. It is required for a simple checkout payment.
	Amount float64 `protobuf:"fixed64,3,opt,name=amount,proto3" json:"amount" query:"PO_AMOUNT" form:"PO_AMOUNT" validate:"omitempty,numeric,gte=0"`
	// @inject_tag: query:"PO_CURRENCY" form:"PO_CURRENCY" json:"currency" validate:"omitempty,alpha,len=3"
	//
	// The currency of the order. Three-letter Currency Code ISO 4217, in uppercase. If provided, the amount will be processed in this currency. It is required for a payment when the type equals to simple.
	Currency string `protobuf:"bytes,4,opt,name=currency,proto3" json:"currency" query:"PO_CURRENCY" form:"PO_CURRENCY" validate:"omitempty,alpha,len=3"`
	// @inject_tag: "PO_ACCOUNT" form:"PO_ACCOUNT" json:"account"`
	//
	// The customer account in the merchant project.
	Account string `protobuf:"bytes,5,opt,name=account,proto3" json:"account" form:"PO_ACCOUNT"`
	// @inject_tag: query:"PO_DESCRIPTION" form:"PO_DESCRIPTION" json:"description" validate:"omitempty,max=255"
	//
	// The arbitrary order description.
	Description string `protobuf:"bytes,7,opt,name=description,proto3" json:"description" query:"PO_DESCRIPTION" form:"PO_DESCRIPTION" validate:"omitempty,max=255"`
	// @inject_tag: query:"PO_PAYMENT_METHOD" form:"PO_PAYMENT_METHOD" json:"payment_method" validate:"omitempty,max=255"
	PaymentMethod string `protobuf:"bytes,8,opt,name=payment_method,json=paymentMethod,proto3" json:"payment_method" query:"PO_PAYMENT_METHOD" form:"PO_PAYMENT_METHOD" validate:"omitempty,max=255"`
	// @inject_tag: query:"PO_URL_VERIFY" form:"PO_URL_VERIFY" json:"-" validate:"omitempty,url"
	UrlVerify string `protobuf:"bytes,9,opt,name=url_verify,json=urlVerify,proto3" json:"-" query:"PO_URL_VERIFY" form:"PO_URL_VERIFY" validate:"omitempty,url"`
	// @inject_tag: query:"PO_URL_NOTIFY" form:"PO_URL_NOTIFY" json:"-" validate:"omitempty,url"
	UrlNotify string `protobuf:"bytes,10,opt,name=url_notify,json=urlNotify,proto3" json:"-" query:"PO_URL_NOTIFY" form:"PO_URL_NOTIFY" validate:"omitempty,url"`
	// @inject_tag: query:"PO_URL_SUCCESS" form:"PO_URL_SUCCESS" json:"url_success" validate:"omitempty,url"
	//
	// The redirect URL for the successful payment. You need to enable the dynamic notify URLs option in the Project Settings to use this field.
	UrlSuccess string `protobuf:"bytes,11,opt,name=url_success,json=urlSuccess,proto3" json:"url_success" query:"PO_URL_SUCCESS" form:"PO_URL_SUCCESS" validate:"omitempty,url"`
	// @inject_tag: query:"PO_URL_FAIL" form:"PO_URL_FAIL" json:"url_fail" validate:"omitempty,url"
	//
	// The redirect URL for the failed payment. You need to enable the dynamic notify URLs option in the Project Settings to use this field.
	UrlFail string `protobuf:"bytes,12,opt,name=url_fail,json=urlFail,proto3" json:"url_fail" query:"PO_URL_FAIL" form:"PO_URL_FAIL" validate:"omitempty,url"`
	// @inject_tag: query:"PO_PAYER_EMAIL" form:"PO_PAYER_EMAIL" json:"-" validate:"omitempty,email"
	PayerEmail string `protobuf:"bytes,13,opt,name=payer_email,json=payerEmail,proto3" json:"-" query:"PO_PAYER_EMAIL" form:"PO_PAYER_EMAIL" validate:"omitempty,email"`
	// @inject_tag: query:"PO_PAYER_PHONE" form:"PO_PAYER_PHONE" json:"-" validate:"omitempty,max=255"
	PayerPhone string `protobuf:"bytes,14,opt,name=payer_phone,json=payerPhone,proto3" json:"-" query:"PO_PAYER_PHONE" form:"PO_PAYER_PHONE" validate:"omitempty,max=255"`
	// @inject_tag: query:"PO_REGION" form:"PO_REGION" json:"-" validate:"omitempty,alpha,len=2"
	Region string `protobuf:"bytes,15,opt,name=region,proto3" json:"-" query:"PO_REGION" form:"PO_REGION" validate:"omitempty,alpha,len=2"`
	// @inject_tag: json:"-"
	RawParams map[string]string `protobuf:"bytes,18,rep,name=raw_params,json=rawParams,proto3" json:"-" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// @inject_tag: json:"-"
	RawBody string `protobuf:"bytes,19,opt,name=raw_body,json=rawBody,proto3" json:"-"`
	// @inject_tag: json:"-"
	IsJson bool `protobuf:"varint,20,opt,name=is_json,json=isJson,proto3" json:"-"`
	// @inject_tag: json:"-"
	Language string `protobuf:"bytes,21,opt,name=language,proto3" json:"-"`
	// @inject_tag: json:"products" validate:"omitempty,eq=1,dive,hexadecimal,len=24"
	//
	// The list of unique identifiers of Products being in the Project. It is required if a payment type is equal to product or key.
	Products []string `protobuf:"bytes,22,rep,name=products,proto3" json:"products" validate:"omitempty,eq=1,dive,hexadecimal,len=24"`
	// @inject_tag: json:"metadata" validate:"omitempty,dive,keys,max=255,endkeys,max=255"
	//
	// A string-value description that you can attach to the order object. It can be useful for storing additional information about your customer payment.
	Metadata map[string]string `protobuf:"bytes,23,rep,name=metadata,proto3" json:"metadata" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" validate:"omitempty,dive,keys,max=255,endkeys,max=255"`
	// @inject_tag: json:"-"
	PrivateMetadata map[string]string `protobuf:"bytes,24,rep,name=private_metadata,json=privateMetadata,proto3" json:"-" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// @inject_tag: json:"-"
	ReceiptNumber string `protobuf:"bytes,25,opt,name=receipt_number,json=receiptNumber,proto3" json:"-"` // payer receipt number from create order request
	// @inject_tag: json:"-"
	ReceiptUrl string `protobuf:"bytes,26,opt,name=receipt_url,json=receiptUrl,proto3" json:"-"` // payer receipt url from create order request
	// @inject_tag: json:"-"
	IssuerUrl string `protobuf:"bytes,27,opt,name=issuer_url,json=issuerUrl,proto3" json:"-"`
	// @inject_tag: json:"-"
	IsEmbedded bool `protobuf:"varint,28,opt,name=is_embedded,json=isEmbedded,proto3" json:"-"`
	// An encrypted string that represents certain details of your customer (such as the customer ID, email and others), a game and purchase parameters. The token overrides the corresponding parameters (including required parameters) in an order object.
	Token string `protobuf:"bytes,29,opt,name=token,proto3" json:"token,omitempty"`
	// The customer data.
	User *OrderUser `protobuf:"bytes,30,opt,name=user,proto3" json:"user,omitempty"`
	// @inject_tag: json:"order" validate:"omitempty,uuid"
	//
	// The PaySuper unique identifier for the order.
	PspOrderUuid string `protobuf:"bytes,31,opt,name=psp_order_uuid,json=pspOrderUuid,proto3" json:"order" validate:"omitempty,uuid"`
	// @inject_tag: validate="required,oneof=simple product key virtual_currency" json:"type" required:"true"
	//
	// The order type. It depends on your sales option (Game Keys, Virtual Items, Virtual Currency the simple checkout). For products created as Game Keys use the key type, as Virtual Items - the product type, as Virtual Currency - the virtual_currency type, for a simple checkout - the simple type. Enum values: key, product, virtual_currency, simple.
	Type string `protobuf:"bytes,32,opt,name=type,proto3" json:"type" required:"true"`
	// The default platform's name for which the customer buys a key. This field is used only for the key type. Enum values: steam, gog, uplay, origin, psn, xbox, nintendo, itch, egs.
	PlatformId string `protobuf:"bytes,33,opt,name=platform_id,json=platformId,proto3" json:"platform_id,omitempty"`
	//@inject_tag: bson:"issuer_reference" json:"-"
	IssuerReference string `protobuf:"bytes,34,opt,name=issuer_reference,json=issuerReference,proto3" json:"-" bson:"issuer_reference"`
	//@inject_tag: bson:"issuer_reference_type" json:"-"
	IssuerReferenceType string `protobuf:"bytes,35,opt,name=issuer_reference_type,json=issuerReferenceType,proto3" json:"-" bson:"issuer_reference_type"`
	//@inject_tag: bson:"utm_source" json:"-"
	UtmSource string `protobuf:"bytes,36,opt,name=utm_source,json=utmSource,proto3" json:"-" bson:"utm_source"`
	//@inject_tag: bson:"utm_medium" json:"-"
	UtmMedium string `protobuf:"bytes,37,opt,name=utm_medium,json=utmMedium,proto3" json:"-" bson:"utm_medium"`
	//@inject_tag: bson:"utm_campaign" json:"-"
	UtmCampaign string `protobuf:"bytes,38,opt,name=utm_campaign,json=utmCampaign,proto3" json:"-" bson:"utm_campaign"`
	//@inject_tag: bson:"-" json:"-"
	IsBuyForVirtualCurrency bool `protobuf:"varint,39,opt,name=is_buy_for_virtual_currency,json=isBuyForVirtualCurrency,proto3" json:"-" bson:"-"`
	// @inject_tag: json:"-"
	Cookie string `protobuf:"bytes,40,opt,name=cookie,proto3" json:"-"`
	//@inject_tag: json:"-" bson:"-"
	//
	//The redirect button messages after the successful or failed payment. If it has an empty value the redirect message will be set at OK.
	ButtonCaption string `protobuf:"bytes,41,opt,name=button_caption,json=buttonCaption,proto3" json:"-" bson:"-"`
	//@inject_tag: bson:"testing_case" json:"testing_case" validate:"omitempty,oneof=correct_payment non_existing_user existing_user invalid_signature"
	//
	// The webhook testing mode. Available values: correct_payment, non_existing_user, existing_user, invalid_signature.
	TestingCase string `protobuf:"bytes,42,opt,name=testing_case,json=testingCase,proto3" json:"testing_case" bson:"testing_case" validate:"omitempty,oneof=correct_payment non_existing_user existing_user invalid_signature"`
	//@inject_tag: json:"form_mode"
	//
	//The opening mode of the payment form on the project side. Available values: embed, iframe, standalone. Default value: embed.
	FormMode string `protobuf:"bytes,43,opt,name=form_mode,json=formMode,proto3" json:"form_mode"`
	//@inject_tag: json:"recurring_plan_id" query:"PO_RECURRING_PLAN_ID" form:"PO_RECURRING_PLAN_ID" validate:"omitempty"
	//
	// Identifier of recurring plan.
	RecurringPlanId string `protobuf:"bytes,44,opt,name=recurring_plan_id,json=recurringPlanId,proto3" json:"recurring_plan_id" query:"PO_RECURRING_PLAN_ID" form:"PO_RECURRING_PLAN_ID" validate:"omitempty"`
}

func (x *OrderCreateRequest) Reset() {
	*x = OrderCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderCreateRequest) ProtoMessage() {}

func (x *OrderCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderCreateRequest.ProtoReflect.Descriptor instead.
func (*OrderCreateRequest) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{1}
}

func (x *OrderCreateRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *OrderCreateRequest) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *OrderCreateRequest) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *OrderCreateRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *OrderCreateRequest) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *OrderCreateRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *OrderCreateRequest) GetPaymentMethod() string {
	if x != nil {
		return x.PaymentMethod
	}
	return ""
}

func (x *OrderCreateRequest) GetUrlVerify() string {
	if x != nil {
		return x.UrlVerify
	}
	return ""
}

func (x *OrderCreateRequest) GetUrlNotify() string {
	if x != nil {
		return x.UrlNotify
	}
	return ""
}

func (x *OrderCreateRequest) GetUrlSuccess() string {
	if x != nil {
		return x.UrlSuccess
	}
	return ""
}

func (x *OrderCreateRequest) GetUrlFail() string {
	if x != nil {
		return x.UrlFail
	}
	return ""
}

func (x *OrderCreateRequest) GetPayerEmail() string {
	if x != nil {
		return x.PayerEmail
	}
	return ""
}

func (x *OrderCreateRequest) GetPayerPhone() string {
	if x != nil {
		return x.PayerPhone
	}
	return ""
}

func (x *OrderCreateRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *OrderCreateRequest) GetRawParams() map[string]string {
	if x != nil {
		return x.RawParams
	}
	return nil
}

func (x *OrderCreateRequest) GetRawBody() string {
	if x != nil {
		return x.RawBody
	}
	return ""
}

func (x *OrderCreateRequest) GetIsJson() bool {
	if x != nil {
		return x.IsJson
	}
	return false
}

func (x *OrderCreateRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *OrderCreateRequest) GetProducts() []string {
	if x != nil {
		return x.Products
	}
	return nil
}

func (x *OrderCreateRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *OrderCreateRequest) GetPrivateMetadata() map[string]string {
	if x != nil {
		return x.PrivateMetadata
	}
	return nil
}

func (x *OrderCreateRequest) GetReceiptNumber() string {
	if x != nil {
		return x.ReceiptNumber
	}
	return ""
}

func (x *OrderCreateRequest) GetReceiptUrl() string {
	if x != nil {
		return x.ReceiptUrl
	}
	return ""
}

func (x *OrderCreateRequest) GetIssuerUrl() string {
	if x != nil {
		return x.IssuerUrl
	}
	return ""
}

func (x *OrderCreateRequest) GetIsEmbedded() bool {
	if x != nil {
		return x.IsEmbedded
	}
	return false
}

func (x *OrderCreateRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *OrderCreateRequest) GetUser() *OrderUser {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *OrderCreateRequest) GetPspOrderUuid() string {
	if x != nil {
		return x.PspOrderUuid
	}
	return ""
}

func (x *OrderCreateRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *OrderCreateRequest) GetPlatformId() string {
	if x != nil {
		return x.PlatformId
	}
	return ""
}

func (x *OrderCreateRequest) GetIssuerReference() string {
	if x != nil {
		return x.IssuerReference
	}
	return ""
}

func (x *OrderCreateRequest) GetIssuerReferenceType() string {
	if x != nil {
		return x.IssuerReferenceType
	}
	return ""
}

func (x *OrderCreateRequest) GetUtmSource() string {
	if x != nil {
		return x.UtmSource
	}
	return ""
}

func (x *OrderCreateRequest) GetUtmMedium() string {
	if x != nil {
		return x.UtmMedium
	}
	return ""
}

func (x *OrderCreateRequest) GetUtmCampaign() string {
	if x != nil {
		return x.UtmCampaign
	}
	return ""
}

func (x *OrderCreateRequest) GetIsBuyForVirtualCurrency() bool {
	if x != nil {
		return x.IsBuyForVirtualCurrency
	}
	return false
}

func (x *OrderCreateRequest) GetCookie() string {
	if x != nil {
		return x.Cookie
	}
	return ""
}

func (x *OrderCreateRequest) GetButtonCaption() string {
	if x != nil {
		return x.ButtonCaption
	}
	return ""
}

func (x *OrderCreateRequest) GetTestingCase() string {
	if x != nil {
		return x.TestingCase
	}
	return ""
}

func (x *OrderCreateRequest) GetFormMode() string {
	if x != nil {
		return x.FormMode
	}
	return ""
}

func (x *OrderCreateRequest) GetRecurringPlanId() string {
	if x != nil {
		return x.RecurringPlanId
	}
	return ""
}

type ProjectRedirectSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"mode" bson:"mode" validate:"required,oneof=disable successful fail any"
	//
	//The mode to redirect the customer from the payment form after the payment. Available values: disable, successful, fail, any.
	Mode string `protobuf:"bytes,1,opt,name=mode,proto3" json:"mode" bson:"mode" validate:"required,oneof=disable successful fail any"`
	//@inject_tag: json:"delay" bson:"delay" validate:"omitempty,numeric,gte=0"
	//
	//The delay before the customer's redirection to the return URL. Default value is 0.
	Delay int32 `protobuf:"varint,2,opt,name=delay,proto3" json:"delay" bson:"delay" validate:"omitempty,numeric,gte=0"`
	//@inject_tag: json:"usage" bson:"usage" validate:"required,oneof=standalone iframe embed any"
	//
	//The redirection feature could be used in different representations of the payment form. Default value is any. Available values: standalone, iframe, embed, any.
	Usage string `protobuf:"bytes,3,opt,name=usage,proto3" json:"usage" bson:"usage" validate:"required,oneof=standalone iframe embed any"`
	//@inject_tag: json:"button_caption" bson:"button_caption" validate:"omitempty,max=18"
	//
	//The redirect button messages after the successful or failed payment. If it has an empty value the redirect message will be set at OK.
	ButtonCaption string `protobuf:"bytes,4,opt,name=button_caption,json=buttonCaption,proto3" json:"button_caption" bson:"button_caption" validate:"omitempty,max=18"`
}

func (x *ProjectRedirectSettings) Reset() {
	*x = ProjectRedirectSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectRedirectSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectRedirectSettings) ProtoMessage() {}

func (x *ProjectRedirectSettings) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectRedirectSettings.ProtoReflect.Descriptor instead.
func (*ProjectRedirectSettings) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{2}
}

func (x *ProjectRedirectSettings) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *ProjectRedirectSettings) GetDelay() int32 {
	if x != nil {
		return x.Delay
	}
	return 0
}

func (x *ProjectRedirectSettings) GetUsage() string {
	if x != nil {
		return x.Usage
	}
	return ""
}

func (x *ProjectRedirectSettings) GetButtonCaption() string {
	if x != nil {
		return x.ButtonCaption
	}
	return ""
}

type Project struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"id" validate:"omitempty,hexadecimal,len=24" faker:"objectIdString"
	//
	// The unique identifier for the project.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id" validate:"omitempty,hexadecimal,len=24" faker:"objectIdString"`
	// @inject_tag: json:"merchant_id" validate:"required,hexadecimal,len=24" required:"true" faker:"objectIdString" param:"merchant_id"
	//
	// The unique identifier for the project's merchant.
	MerchantId string `protobuf:"bytes,2,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id" validate:"required,hexadecimal,len=24" required:"true" faker:"objectIdString" param:"merchant_id"`
	// @inject_tag: json:"name" validate:"required" required:"true"
	//
	// The list of the project's localized names.
	Name map[string]string `protobuf:"bytes,3,rep,name=name,proto3" json:"name" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" validate:"required" required:"true"`
	//@inject_tag: json:"-"
	Reserved_4 string `protobuf:"bytes,4,opt,name=reserved_4,json=reserved4,proto3" json:"-"`
	//@inject_tag: json:"-" validate:"omitempty,len=3"
	CallbackCurrency string `protobuf:"bytes,5,opt,name=callback_currency,json=callbackCurrency,proto3" json:"-" validate:"omitempty,len=3"`
	//@inject_tag: json:"callback_protocol" validate:"omitempty,oneof=default empty"
	//
	// The protocol of the payment notification. Available values: default - the webhook protocol that is set in the Project notification settings, empty - the webhook is not sent and the payment is immediately marked as successful in the PaySuper system.
	CallbackProtocol string `protobuf:"bytes,6,opt,name=callback_protocol,json=callbackProtocol,proto3" json:"callback_protocol" validate:"omitempty,oneof=default empty"`
	//@inject_tag: json:"-" validate:"omitempty,dive,url"
	CreateOrderAllowedUrls []string `protobuf:"bytes,7,rep,name=create_order_allowed_urls,json=createOrderAllowedUrls,proto3" json:"-" validate:"omitempty,dive,url"`
	//@inject_tag: json:"-"
	AllowDynamicNotifyUrls bool `protobuf:"varint,8,opt,name=allow_dynamic_notify_urls,json=allowDynamicNotifyUrls,proto3" json:"-"`
	//@inject_tag: json:"-"
	AllowDynamicRedirectUrls bool `protobuf:"varint,9,opt,name=allow_dynamic_redirect_urls,json=allowDynamicRedirectUrls,proto3" json:"-"`
	//@inject_tag: json:"limits_currency" validate:"omitempty,len=3"
	//
	// The currency of the limit amount.
	LimitsCurrency string `protobuf:"bytes,10,opt,name=limits_currency,json=limitsCurrency,proto3" json:"limits_currency" validate:"omitempty,len=3"`
	// @inject_tag: json:"min_payment_amount" validate:"omitempty,numeric,gte=0"
	//
	// The minimum order amount.
	MinPaymentAmount float64 `protobuf:"fixed64,11,opt,name=min_payment_amount,json=minPaymentAmount,proto3" json:"min_payment_amount" validate:"omitempty,numeric,gte=0"`
	// @inject_tag: json:"max_payment_amount" validate:"omitempty,numeric,gte=0"
	//
	// The maximum order amount.
	MaxPaymentAmount float64 `protobuf:"fixed64,12,opt,name=max_payment_amount,json=maxPaymentAmount,proto3" json:"max_payment_amount" validate:"omitempty,numeric,gte=0"`
	// @inject_tag: json:"-" validate:"omitempty,dive,email"
	NotifyEmails []string `protobuf:"bytes,13,rep,name=notify_emails,json=notifyEmails,proto3" json:"-" validate:"omitempty,dive,email"`
	// @inject_tag: json:"-"
	IsProductsCheckout bool `protobuf:"varint,14,opt,name=is_products_checkout,json=isProductsCheckout,proto3" json:"-"`
	// @inject_tag: json:"secret_key" validate:"omitempty,max=255"
	//
	// The project's secret key for sign notification requests
	SecretKey string `protobuf:"bytes,15,opt,name=secret_key,json=secretKey,proto3" json:"secret_key" validate:"omitempty,max=255"`
	// @inject_tag: json:"-"
	SignatureRequired bool `protobuf:"varint,16,opt,name=signature_required,json=signatureRequired,proto3" json:"-"`
	// @inject_tag: json:"-"
	SendNotifyEmail bool `protobuf:"varint,17,opt,name=send_notify_email,json=sendNotifyEmail,proto3" json:"-"`
	// @inject_tag: json:"-" validate:"omitempty,url"
	UrlCheckAccount string `protobuf:"bytes,18,opt,name=url_check_account,json=urlCheckAccount,proto3" json:"-" validate:"omitempty,url"`
	// @inject_tag: json:"url_process_payment" validate:"omitempty,url"
	//
	// The URL configured on the merchant project to get webhooks from PaySuper.
	UrlProcessPayment string `protobuf:"bytes,19,opt,name=url_process_payment,json=urlProcessPayment,proto3" json:"url_process_payment" validate:"omitempty,url"`
	// @inject_tag: json:"url_redirect_fail" validate:"omitempty,url"
	//
	// The default URL to redirect a customer after the failed payment.
	UrlRedirectFail string `protobuf:"bytes,20,opt,name=url_redirect_fail,json=urlRedirectFail,proto3" json:"url_redirect_fail" validate:"omitempty,url"`
	// @inject_tag: json:"url_redirect_success" validate:"omitempty,url"
	//
	// The default URL to redirect a customer after the successful payment.
	UrlRedirectSuccess string `protobuf:"bytes,21,opt,name=url_redirect_success,json=urlRedirectSuccess,proto3" json:"url_redirect_success" validate:"omitempty,url"`
	// @inject_tag: json:"status" validate:"omitempty,numeric,oneof=0 1 2 3 4"
	//
	// The project's status. Available values: 0 - the new project,
	//1 - the project successfully completed integration tests,
	//2 - the project failed some integration tests,
	//3 - the project is on production,
	//4 - the project is removed.
	Status int32 `protobuf:"varint,22,opt,name=status,proto3" json:"status" validate:"omitempty,numeric,oneof=0 1 2 3 4"`
	// @inject_tag: json:"created_at"
	//
	// The date of the project creation.
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,23,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	// @inject_tag: json:"updated_at"
	//
	// The date of the project last update.
	UpdatedAt *timestamp.Timestamp `protobuf:"bytes,24,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	// @inject_tag: json:"products_count"
	//
	// The number of products in the project.
	ProductsCount int64 `protobuf:"varint,25,opt,name=products_count,json=productsCount,proto3" json:"products_count"`
	// @inject_tag: json:"-" validate:"omitempty,url"
	UrlChargebackPayment string `protobuf:"bytes,26,opt,name=url_chargeback_payment,json=urlChargebackPayment,proto3" json:"-" validate:"omitempty,url"`
	// @inject_tag: json:"-" validate:"omitempty,url"
	UrlCancelPayment string `protobuf:"bytes,27,opt,name=url_cancel_payment,json=urlCancelPayment,proto3" json:"-" validate:"omitempty,url"`
	// @inject_tag: json:"-" validate:"omitempty,url"
	UrlFraudPayment string `protobuf:"bytes,28,opt,name=url_fraud_payment,json=urlFraudPayment,proto3" json:"-" validate:"omitempty,url"`
	// @inject_tag: json:"-" validate:"omitempty,url"
	UrlRefundPayment string `protobuf:"bytes,29,opt,name=url_refund_payment,json=urlRefundPayment,proto3" json:"-" validate:"omitempty,url"`
	//@inject_tag: json:"localizations"
	//
	// The list of languages for the project's and its products descriptions localization.
	Localizations []string `protobuf:"bytes,30,rep,name=localizations,proto3" json:"localizations"`
	//@inject_tag: json:"full_description"
	//
	// The localized extended descriptions of the project.
	FullDescription map[string]string `protobuf:"bytes,31,rep,name=full_description,json=fullDescription,proto3" json:"full_description" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	//@inject_tag: json:"short_description"
	//
	// The localized concise descriptions of the project.
	ShortDescription map[string]string `protobuf:"bytes,32,rep,name=short_description,json=shortDescription,proto3" json:"short_description" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	//@inject_tag: json:"currencies" validate:"omitempty,dive"
	//
	//The list of the project's currencies.
	Currencies []*HasCurrencyItem `protobuf:"bytes,33,rep,name=currencies,proto3" json:"currencies" validate:"omitempty,dive"`
	//@inject_tag: json:"cover"
	//
	// The project's covers for each localization.
	Cover *ImageCollection `protobuf:"bytes,34,opt,name=cover,proto3" json:"cover"`
	//@inject_tag: json:"virtual_currency" validate:"omitempty,dive"
	//
	// The virtual currency settings.
	VirtualCurrency *ProjectVirtualCurrency `protobuf:"bytes,35,opt,name=virtual_currency,json=virtualCurrency,proto3" json:"virtual_currency" validate:"omitempty,dive"`
	// @inject_tag: json:"vat_payer" bson:"vat_payer" validate:"oneof=buyer seller nobody"
	//
	// The responsible for VAT. Available values: buyer (VAT is added to the order charge), seller (VAT is included in the order charge), nobody (VAT exempt).
	VatPayer string `protobuf:"bytes,36,opt,name=vat_payer,json=vatPayer,proto3" json:"vat_payer" bson:"vat_payer" validate:"oneof=buyer seller nobody"`
	//@inject_tag: json:"redirect_settings" bson:"redirect_settings" validate:"omitempty,dive"
	//
	//The customer's redirection settings for the successful or failed payment.
	RedirectSettings *ProjectRedirectSettings `protobuf:"bytes,37,opt,name=redirect_settings,json=redirectSettings,proto3" json:"redirect_settings" bson:"redirect_settings" validate:"omitempty,dive"`
	//@inject_tag: json:"webhook_testing"
	//
	// The object contains webhooks' tests results of various test cases.
	WebhookTesting *WebHookTesting `protobuf:"bytes,38,opt,name=webhook_testing,json=webhookTesting,proto3" json:"webhook_testing"`
	//@inject_tag: json:"webhook_mode" validate:"omitempty,oneof=default pre_approval"
	//
	// The webhooks mode. Available values: default, pre_approval.
	WebhookMode string `protobuf:"bytes,39,opt,name=webhook_mode,json=webhookMode,proto3" json:"webhook_mode" validate:"omitempty,oneof=default pre_approval"`
	//@inject_tag: json:"form_default_text"
	//
	// The localized default text on payment form ("In-game purchase").
	FormDefaultText map[string]string `protobuf:"bytes,40,rep,name=form_default_text,json=formDefaultText,proto3" json:"form_default_text" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Project) Reset() {
	*x = Project{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Project) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Project) ProtoMessage() {}

func (x *Project) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Project.ProtoReflect.Descriptor instead.
func (*Project) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{3}
}

func (x *Project) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Project) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *Project) GetName() map[string]string {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Project) GetReserved_4() string {
	if x != nil {
		return x.Reserved_4
	}
	return ""
}

func (x *Project) GetCallbackCurrency() string {
	if x != nil {
		return x.CallbackCurrency
	}
	return ""
}

func (x *Project) GetCallbackProtocol() string {
	if x != nil {
		return x.CallbackProtocol
	}
	return ""
}

func (x *Project) GetCreateOrderAllowedUrls() []string {
	if x != nil {
		return x.CreateOrderAllowedUrls
	}
	return nil
}

func (x *Project) GetAllowDynamicNotifyUrls() bool {
	if x != nil {
		return x.AllowDynamicNotifyUrls
	}
	return false
}

func (x *Project) GetAllowDynamicRedirectUrls() bool {
	if x != nil {
		return x.AllowDynamicRedirectUrls
	}
	return false
}

func (x *Project) GetLimitsCurrency() string {
	if x != nil {
		return x.LimitsCurrency
	}
	return ""
}

func (x *Project) GetMinPaymentAmount() float64 {
	if x != nil {
		return x.MinPaymentAmount
	}
	return 0
}

func (x *Project) GetMaxPaymentAmount() float64 {
	if x != nil {
		return x.MaxPaymentAmount
	}
	return 0
}

func (x *Project) GetNotifyEmails() []string {
	if x != nil {
		return x.NotifyEmails
	}
	return nil
}

func (x *Project) GetIsProductsCheckout() bool {
	if x != nil {
		return x.IsProductsCheckout
	}
	return false
}

func (x *Project) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

func (x *Project) GetSignatureRequired() bool {
	if x != nil {
		return x.SignatureRequired
	}
	return false
}

func (x *Project) GetSendNotifyEmail() bool {
	if x != nil {
		return x.SendNotifyEmail
	}
	return false
}

func (x *Project) GetUrlCheckAccount() string {
	if x != nil {
		return x.UrlCheckAccount
	}
	return ""
}

func (x *Project) GetUrlProcessPayment() string {
	if x != nil {
		return x.UrlProcessPayment
	}
	return ""
}

func (x *Project) GetUrlRedirectFail() string {
	if x != nil {
		return x.UrlRedirectFail
	}
	return ""
}

func (x *Project) GetUrlRedirectSuccess() string {
	if x != nil {
		return x.UrlRedirectSuccess
	}
	return ""
}

func (x *Project) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Project) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Project) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Project) GetProductsCount() int64 {
	if x != nil {
		return x.ProductsCount
	}
	return 0
}

func (x *Project) GetUrlChargebackPayment() string {
	if x != nil {
		return x.UrlChargebackPayment
	}
	return ""
}

func (x *Project) GetUrlCancelPayment() string {
	if x != nil {
		return x.UrlCancelPayment
	}
	return ""
}

func (x *Project) GetUrlFraudPayment() string {
	if x != nil {
		return x.UrlFraudPayment
	}
	return ""
}

func (x *Project) GetUrlRefundPayment() string {
	if x != nil {
		return x.UrlRefundPayment
	}
	return ""
}

func (x *Project) GetLocalizations() []string {
	if x != nil {
		return x.Localizations
	}
	return nil
}

func (x *Project) GetFullDescription() map[string]string {
	if x != nil {
		return x.FullDescription
	}
	return nil
}

func (x *Project) GetShortDescription() map[string]string {
	if x != nil {
		return x.ShortDescription
	}
	return nil
}

func (x *Project) GetCurrencies() []*HasCurrencyItem {
	if x != nil {
		return x.Currencies
	}
	return nil
}

func (x *Project) GetCover() *ImageCollection {
	if x != nil {
		return x.Cover
	}
	return nil
}

func (x *Project) GetVirtualCurrency() *ProjectVirtualCurrency {
	if x != nil {
		return x.VirtualCurrency
	}
	return nil
}

func (x *Project) GetVatPayer() string {
	if x != nil {
		return x.VatPayer
	}
	return ""
}

func (x *Project) GetRedirectSettings() *ProjectRedirectSettings {
	if x != nil {
		return x.RedirectSettings
	}
	return nil
}

func (x *Project) GetWebhookTesting() *WebHookTesting {
	if x != nil {
		return x.WebhookTesting
	}
	return nil
}

func (x *Project) GetWebhookMode() string {
	if x != nil {
		return x.WebhookMode
	}
	return ""
}

func (x *Project) GetFormDefaultText() map[string]string {
	if x != nil {
		return x.FormDefaultText
	}
	return nil
}

type WebHookTesting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"products" bson:"products"
	//
	// The webhooks' testing results for the product.
	Products *ProductsTesting `protobuf:"bytes,1,opt,name=products,proto3" json:"products" bson:"products"`
	//@inject_tag: json:"virtual_currency" bson:"virtual_currency"
	//
	// The webhooks' testing results for the virtual currency.
	VirtualCurrency *VirtualCurrencyTesting `protobuf:"bytes,2,opt,name=virtual_currency,json=virtualCurrency,proto3" json:"virtual_currency" bson:"virtual_currency"`
	//@inject_tag: json:"keys" bson:"keys"
	//
	// The webhooks' testing results for the key.
	Keys *KeysTesting `protobuf:"bytes,3,opt,name=keys,proto3" json:"keys" bson:"keys"`
}

func (x *WebHookTesting) Reset() {
	*x = WebHookTesting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebHookTesting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebHookTesting) ProtoMessage() {}

func (x *WebHookTesting) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebHookTesting.ProtoReflect.Descriptor instead.
func (*WebHookTesting) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{4}
}

func (x *WebHookTesting) GetProducts() *ProductsTesting {
	if x != nil {
		return x.Products
	}
	return nil
}

func (x *WebHookTesting) GetVirtualCurrency() *VirtualCurrencyTesting {
	if x != nil {
		return x.VirtualCurrency
	}
	return nil
}

func (x *WebHookTesting) GetKeys() *KeysTesting {
	if x != nil {
		return x.Keys
	}
	return nil
}

type ProductsTesting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"non_existing_user" bson:"non_existing_user"
	//
	// Has a true value if the webhook's test case for the user that does not exist in the merchant's storage has passed.
	NonExistingUser bool `protobuf:"varint,1,opt,name=non_existing_user,json=nonExistingUser,proto3" json:"non_existing_user" bson:"non_existing_user"`
	//@inject_tag: json:"existing_user" bson:"existing_user"
	//
	// Has a true value if the webhook's test case for the user that exists in the merchant's storage has passed.
	ExistingUser bool `protobuf:"varint,2,opt,name=existing_user,json=existingUser,proto3" json:"existing_user" bson:"existing_user"`
	//@inject_tag: json:"correct_payment" bson:"correct_payment"
	//
	// Has a true value if the webhook's test case for the correctly completed payment has passed.
	CorrectPayment bool `protobuf:"varint,3,opt,name=correct_payment,json=correctPayment,proto3" json:"correct_payment" bson:"correct_payment"`
	//@inject_tag: json:"incorrect_payment" bson:"incorrect_payment"
	//
	// Has a true value if the webhook's test case for the incorrectly completed payment has passed.
	IncorrectPayment bool `protobuf:"varint,4,opt,name=incorrect_payment,json=incorrectPayment,proto3" json:"incorrect_payment" bson:"incorrect_payment"`
}

func (x *ProductsTesting) Reset() {
	*x = ProductsTesting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductsTesting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductsTesting) ProtoMessage() {}

func (x *ProductsTesting) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductsTesting.ProtoReflect.Descriptor instead.
func (*ProductsTesting) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{5}
}

func (x *ProductsTesting) GetNonExistingUser() bool {
	if x != nil {
		return x.NonExistingUser
	}
	return false
}

func (x *ProductsTesting) GetExistingUser() bool {
	if x != nil {
		return x.ExistingUser
	}
	return false
}

func (x *ProductsTesting) GetCorrectPayment() bool {
	if x != nil {
		return x.CorrectPayment
	}
	return false
}

func (x *ProductsTesting) GetIncorrectPayment() bool {
	if x != nil {
		return x.IncorrectPayment
	}
	return false
}

type VirtualCurrencyTesting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"non_existing_user" bson:"non_existing_user"
	//
	// Has a true value if the webhook's test case for the user that does not exist in the merchant's storage has passed.
	NonExistingUser bool `protobuf:"varint,1,opt,name=non_existing_user,json=nonExistingUser,proto3" json:"non_existing_user" bson:"non_existing_user"`
	//@inject_tag: json:"existing_user" bson:"existing_user"
	//
	// Has a true value if the webhook's test case for the user that exists in the merchant's storage has passed.
	ExistingUser bool `protobuf:"varint,2,opt,name=existing_user,json=existingUser,proto3" json:"existing_user" bson:"existing_user"`
	//@inject_tag: json:"correct_payment" bson:"correct_payment"
	//
	// Has a true value if the webhook's test case for the correctly completed payment has passed.
	CorrectPayment bool `protobuf:"varint,3,opt,name=correct_payment,json=correctPayment,proto3" json:"correct_payment" bson:"correct_payment"`
	//@inject_tag: json:"incorrect_payment" bson:"incorrect_payment"
	//
	// Has a true value if the webhook's test case for the incorrectly completed payment has passed.
	IncorrectPayment bool `protobuf:"varint,4,opt,name=incorrect_payment,json=incorrectPayment,proto3" json:"incorrect_payment" bson:"incorrect_payment"`
}

func (x *VirtualCurrencyTesting) Reset() {
	*x = VirtualCurrencyTesting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualCurrencyTesting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualCurrencyTesting) ProtoMessage() {}

func (x *VirtualCurrencyTesting) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualCurrencyTesting.ProtoReflect.Descriptor instead.
func (*VirtualCurrencyTesting) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{6}
}

func (x *VirtualCurrencyTesting) GetNonExistingUser() bool {
	if x != nil {
		return x.NonExistingUser
	}
	return false
}

func (x *VirtualCurrencyTesting) GetExistingUser() bool {
	if x != nil {
		return x.ExistingUser
	}
	return false
}

func (x *VirtualCurrencyTesting) GetCorrectPayment() bool {
	if x != nil {
		return x.CorrectPayment
	}
	return false
}

func (x *VirtualCurrencyTesting) GetIncorrectPayment() bool {
	if x != nil {
		return x.IncorrectPayment
	}
	return false
}

type KeysTesting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"is_passed" bson:"is_passed"
	//
	// Has a true value if the webhook's test case for the key has passed.
	IsPassed bool `protobuf:"varint,1,opt,name=is_passed,json=isPassed,proto3" json:"is_passed" bson:"is_passed"`
}

func (x *KeysTesting) Reset() {
	*x = KeysTesting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeysTesting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeysTesting) ProtoMessage() {}

func (x *KeysTesting) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeysTesting.ProtoReflect.Descriptor instead.
func (*KeysTesting) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{7}
}

func (x *KeysTesting) GetIsPassed() bool {
	if x != nil {
		return x.IsPassed
	}
	return false
}

type ProjectOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"id" faker:"objectIdString"
	//
	// The unique identifier for the project.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id" faker:"objectIdString"`
	// @inject_tag: json:"merchant_id" faker:"objectIdString"
	//
	// The unique identifier for the merchant.
	MerchantId string `protobuf:"bytes,2,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id" faker:"objectIdString"`
	// The list of the project's localized names.
	Name map[string]string `protobuf:"bytes,3,rep,name=name,proto3" json:"name,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The redirect URL for the successful payment.
	UrlSuccess string `protobuf:"bytes,4,opt,name=url_success,json=urlSuccess,proto3" json:"url_success,omitempty"`
	// The redirect URL for the failed payment.
	UrlFail string `protobuf:"bytes,5,opt,name=url_fail,json=urlFail,proto3" json:"url_fail,omitempty"`
	// @inject_tag: json:"-"
	NotifyEmails []string `protobuf:"bytes,6,rep,name=notify_emails,json=notifyEmails,proto3" json:"-"`
	// @inject_tag: json:"-"
	SecretKey string `protobuf:"bytes,7,opt,name=secret_key,json=secretKey,proto3" json:"-"`
	// @inject_tag: json:"-"
	SendNotifyEmail bool `protobuf:"varint,8,opt,name=send_notify_email,json=sendNotifyEmail,proto3" json:"-"`
	// The default URL to send a request to the merchant project for the payment data verification.
	UrlCheckAccount string `protobuf:"bytes,9,opt,name=url_check_account,json=urlCheckAccount,proto3" json:"url_check_account,omitempty"`
	// The default URL to send a notification request to the merchant project.
	UrlProcessPayment string `protobuf:"bytes,10,opt,name=url_process_payment,json=urlProcessPayment,proto3" json:"url_process_payment,omitempty"`
	// The protocol of the payment notification. Available values: default - the webhook protocol that is set in the Project notification settings, empty - the webhook is not sent and the payment is immediately marked as successful in the PaySuper system.
	CallbackProtocol string `protobuf:"bytes,11,opt,name=callback_protocol,json=callbackProtocol,proto3" json:"callback_protocol,omitempty"`
	// @inject_tag: json:"-"
	UrlChargebackPayment string `protobuf:"bytes,12,opt,name=url_chargeback_payment,json=urlChargebackPayment,proto3" json:"-"`
	// @inject_tag: json:"-"
	UrlCancelPayment string `protobuf:"bytes,13,opt,name=url_cancel_payment,json=urlCancelPayment,proto3" json:"-"`
	// @inject_tag: json:"-"
	UrlFraudPayment string `protobuf:"bytes,14,opt,name=url_fraud_payment,json=urlFraudPayment,proto3" json:"-"`
	// @inject_tag: json:"-"
	UrlRefundPayment string `protobuf:"bytes,15,opt,name=url_refund_payment,json=urlRefundPayment,proto3" json:"-"`
	// The project's status. Available values: 0 - the new project,
	//1 - the project successfully completed integration tests,
	//2 - the project failed some integration tests,
	//3 - the project is on production,
	//4 - the project is removed.
	Status int32 `protobuf:"varint,16,opt,name=status,proto3" json:"status,omitempty"`
	// @inject_tag: json:"-"
	MerchantRoyaltyCurrency string `protobuf:"bytes,17,opt,name=merchant_royalty_currency,json=merchantRoyaltyCurrency,proto3" json:"-"`
	//@inject_tag: json:"redirect_settings" bson:"redirect_settings" validate:"required,dive"
	//
	//The customer's redirection settings for the successful or failed payment.
	RedirectSettings *ProjectRedirectSettings `protobuf:"bytes,18,opt,name=redirect_settings,json=redirectSettings,proto3" json:"redirect_settings" bson:"redirect_settings" validate:"required,dive"`
	//@inject_tag: json:"first_payment_at" bson:"first_payment_at"
	//
	// Date of first payment for merchant.
	FirstPaymentAt *timestamp.Timestamp `protobuf:"bytes,19,opt,name=first_payment_at,json=firstPaymentAt,proto3" json:"first_payment_at" bson:"first_payment_at"`
	//@inject_tag: json:"form_default_text"
	//
	// The localized default text on payment form ("In-game purchase").
	FormDefaultText map[string]string `protobuf:"bytes,20,rep,name=form_default_text,json=formDefaultText,proto3" json:"form_default_text" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ProjectOrder) Reset() {
	*x = ProjectOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectOrder) ProtoMessage() {}

func (x *ProjectOrder) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectOrder.ProtoReflect.Descriptor instead.
func (*ProjectOrder) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{8}
}

func (x *ProjectOrder) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProjectOrder) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *ProjectOrder) GetName() map[string]string {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ProjectOrder) GetUrlSuccess() string {
	if x != nil {
		return x.UrlSuccess
	}
	return ""
}

func (x *ProjectOrder) GetUrlFail() string {
	if x != nil {
		return x.UrlFail
	}
	return ""
}

func (x *ProjectOrder) GetNotifyEmails() []string {
	if x != nil {
		return x.NotifyEmails
	}
	return nil
}

func (x *ProjectOrder) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

func (x *ProjectOrder) GetSendNotifyEmail() bool {
	if x != nil {
		return x.SendNotifyEmail
	}
	return false
}

func (x *ProjectOrder) GetUrlCheckAccount() string {
	if x != nil {
		return x.UrlCheckAccount
	}
	return ""
}

func (x *ProjectOrder) GetUrlProcessPayment() string {
	if x != nil {
		return x.UrlProcessPayment
	}
	return ""
}

func (x *ProjectOrder) GetCallbackProtocol() string {
	if x != nil {
		return x.CallbackProtocol
	}
	return ""
}

func (x *ProjectOrder) GetUrlChargebackPayment() string {
	if x != nil {
		return x.UrlChargebackPayment
	}
	return ""
}

func (x *ProjectOrder) GetUrlCancelPayment() string {
	if x != nil {
		return x.UrlCancelPayment
	}
	return ""
}

func (x *ProjectOrder) GetUrlFraudPayment() string {
	if x != nil {
		return x.UrlFraudPayment
	}
	return ""
}

func (x *ProjectOrder) GetUrlRefundPayment() string {
	if x != nil {
		return x.UrlRefundPayment
	}
	return ""
}

func (x *ProjectOrder) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ProjectOrder) GetMerchantRoyaltyCurrency() string {
	if x != nil {
		return x.MerchantRoyaltyCurrency
	}
	return ""
}

func (x *ProjectOrder) GetRedirectSettings() *ProjectRedirectSettings {
	if x != nil {
		return x.RedirectSettings
	}
	return nil
}

func (x *ProjectOrder) GetFirstPaymentAt() *timestamp.Timestamp {
	if x != nil {
		return x.FirstPaymentAt
	}
	return nil
}

func (x *ProjectOrder) GetFormDefaultText() map[string]string {
	if x != nil {
		return x.FormDefaultText
	}
	return nil
}

type MerchantContact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: validate:"required" json:"authorized" required:"true"
	//
	// Information about contacts of the merchant's authorised person.
	Authorized *MerchantContactAuthorized `protobuf:"bytes,1,opt,name=authorized,proto3" json:"authorized" validate:"required" required:"true"`
	// @inject_tag: validate:"required" json:"technical" required:"true"
	//
	// Information about contacts of the merchant's technical person.
	Technical *MerchantContactTechnical `protobuf:"bytes,2,opt,name=technical,proto3" json:"technical" validate:"required" required:"true"`
}

func (x *MerchantContact) Reset() {
	*x = MerchantContact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerchantContact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerchantContact) ProtoMessage() {}

func (x *MerchantContact) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerchantContact.ProtoReflect.Descriptor instead.
func (*MerchantContact) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{9}
}

func (x *MerchantContact) GetAuthorized() *MerchantContactAuthorized {
	if x != nil {
		return x.Authorized
	}
	return nil
}

func (x *MerchantContact) GetTechnical() *MerchantContactTechnical {
	if x != nil {
		return x.Technical
	}
	return nil
}

type MerchantContactTechnical struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"name" validate:"required,company_name,max=60" required:"true"
	//
	// The technical person's full name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name" validate:"required,company_name,max=60" required:"true"`
	// @inject_tag: json:"email" validate:"required,email,max=100" required:"true"
	//
	// The technical person's email address.
	Email string `protobuf:"bytes,2,opt,name=email,proto3" json:"email" validate:"required,email,max=100" required:"true"`
	// @inject_tag: json:"phone" validate:"required,numeric,max=20" required:"true"
	//
	// The technical person's phone.
	Phone string `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone" validate:"required,numeric,max=20" required:"true"`
}

func (x *MerchantContactTechnical) Reset() {
	*x = MerchantContactTechnical{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerchantContactTechnical) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerchantContactTechnical) ProtoMessage() {}

func (x *MerchantContactTechnical) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerchantContactTechnical.ProtoReflect.Descriptor instead.
func (*MerchantContactTechnical) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{10}
}

func (x *MerchantContactTechnical) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MerchantContactTechnical) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *MerchantContactTechnical) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

type MerchantContactAuthorized struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"name" validate:"required,company_name,max=60" required:"true"
	//
	// The authorised person's full name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name" validate:"required,company_name,max=60" required:"true"`
	// @inject_tag: json:"email" validate:"required,email,max=100" required:"true"
	//
	// The authorised person's email address.
	Email string `protobuf:"bytes,2,opt,name=email,proto3" json:"email" validate:"required,email,max=100" required:"true"`
	// @inject_tag: json:"phone" validate:"required,numeric,max=20" required:"true"
	//
	// The authorised person's phone.
	Phone string `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone" validate:"required,numeric,max=20" required:"true"`
	// @inject_tag: json:"position" validate:"required,company_name,max=30"
	//
	// The authorised person's position in the company.
	Position string `protobuf:"bytes,4,opt,name=position,proto3" json:"position" validate:"required,company_name,max=30"`
}

func (x *MerchantContactAuthorized) Reset() {
	*x = MerchantContactAuthorized{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerchantContactAuthorized) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerchantContactAuthorized) ProtoMessage() {}

func (x *MerchantContactAuthorized) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerchantContactAuthorized.ProtoReflect.Descriptor instead.
func (*MerchantContactAuthorized) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{11}
}

func (x *MerchantContactAuthorized) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MerchantContactAuthorized) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *MerchantContactAuthorized) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *MerchantContactAuthorized) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

type MerchantBanking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"currency" validate:"required,alpha,len=3" required:"true"
	//
	// The merchant's bank account currency.
	Currency string `protobuf:"bytes,1,opt,name=currency,proto3" json:"currency" validate:"required,alpha,len=3" required:"true"`
	// @inject_tag: json:"name" validate:"required,city,max=60" required:"true"
	//
	// The merchant's bank name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name" validate:"required,city,max=60" required:"true"`
	// @inject_tag: json:"address" validate:"required,max=120" required:"true"
	//
	// The merchant's bank address.
	Address string `protobuf:"bytes,3,opt,name=address,proto3" json:"address" validate:"required,max=120" required:"true"`
	// @inject_tag: json:"account_number" bson:"account_number" validate:"required,iban" required:"true"
	//
	// The merchant's bank account number.
	AccountNumber string `protobuf:"bytes,4,opt,name=account_number,json=accountNumber,proto3" json:"account_number" bson:"account_number" validate:"required,iban" required:"true"`
	// @inject_tag: json:"swift" validate:"required,swift" required:"true"
	//
	// The merchant's bank SWIFT code.
	Swift string `protobuf:"bytes,5,opt,name=swift,proto3" json:"swift" validate:"required,swift" required:"true"`
	// @inject_tag: json:"details"
	//
	// Additional details about the merchant's bank account.
	Details string `protobuf:"bytes,6,opt,name=details,proto3" json:"details"`
	// @inject_tag: json:"correspondent_account" bson:"correspondent_account" validate:"omitempty,numeric,max=30"
	//
	// The merchant's bank's correspondent account number.
	CorrespondentAccount string `protobuf:"bytes,7,opt,name=correspondent_account,json=correspondentAccount,proto3" json:"correspondent_account" bson:"correspondent_account" validate:"omitempty,numeric,max=30"`
	// @inject_tag: json:"-" bson:"-"
	//
	// DONT USE, DEPRECATED!
	// The merchant's default processing currency, used as fallback currency for prices in virtual item, virtual currency, game key and other.
	ProcessingDefaultCurrency string `protobuf:"bytes,8,opt,name=processing_default_currency,json=processingDefaultCurrency,proto3" json:"-" bson:"-"`
}

func (x *MerchantBanking) Reset() {
	*x = MerchantBanking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerchantBanking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerchantBanking) ProtoMessage() {}

func (x *MerchantBanking) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerchantBanking.ProtoReflect.Descriptor instead.
func (*MerchantBanking) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{12}
}

func (x *MerchantBanking) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *MerchantBanking) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MerchantBanking) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *MerchantBanking) GetAccountNumber() string {
	if x != nil {
		return x.AccountNumber
	}
	return ""
}

func (x *MerchantBanking) GetSwift() string {
	if x != nil {
		return x.Swift
	}
	return ""
}

func (x *MerchantBanking) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

func (x *MerchantBanking) GetCorrespondentAccount() string {
	if x != nil {
		return x.CorrespondentAccount
	}
	return ""
}

func (x *MerchantBanking) GetProcessingDefaultCurrency() string {
	if x != nil {
		return x.ProcessingDefaultCurrency
	}
	return ""
}

type MerchantLastPayout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"date"
	//
	// The date of the last payout to the merchant.
	Date *timestamp.Timestamp `protobuf:"bytes,1,opt,name=date,proto3" json:"date"`
	// @inject_tag: json:"amount"
	//
	// The amount of the last payout to the merchant.
	Amount float64 `protobuf:"fixed64,2,opt,name=amount,proto3" json:"amount"`
}

func (x *MerchantLastPayout) Reset() {
	*x = MerchantLastPayout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerchantLastPayout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerchantLastPayout) ProtoMessage() {}

func (x *MerchantLastPayout) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerchantLastPayout.ProtoReflect.Descriptor instead.
func (*MerchantLastPayout) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{13}
}

func (x *MerchantLastPayout) GetDate() *timestamp.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *MerchantLastPayout) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type MerchantUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"id" validate:"required" required:"true"
	//
	// The unique identifier for the merchant's owner.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id" validate:"required" required:"true"`
	// @inject_tag: json:"email" validate:"required,email" required:"true"
	//
	// The merchant's owner email address.
	Email string `protobuf:"bytes,2,opt,name=email,proto3" json:"email" validate:"required,email" required:"true"`
	// @inject_tag: json:"first_name"
	//
	// The merchant's owner first name.
	FirstName string `protobuf:"bytes,3,opt,name=first_name,json=firstName,proto3" json:"first_name"`
	// @inject_tag: json:"last_name"
	//
	// The merchant's owner last name.
	LastName string `protobuf:"bytes,4,opt,name=last_name,json=lastName,proto3" json:"last_name"`
	// @inject_tag: json:"profile_id"
	//
	// The primary onboarding profile identifier for the merchant's owner.
	ProfileId string `protobuf:"bytes,5,opt,name=profile_id,json=profileId,proto3" json:"profile_id"`
	// @inject_tag: json:"registration_date"
	//
	// The confirmation date of the merchant's owner email.
	RegistrationDate *timestamp.Timestamp `protobuf:"bytes,6,opt,name=registration_date,json=registrationDate,proto3" json:"registration_date"`
}

func (x *MerchantUser) Reset() {
	*x = MerchantUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerchantUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerchantUser) ProtoMessage() {}

func (x *MerchantUser) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerchantUser.ProtoReflect.Descriptor instead.
func (*MerchantUser) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{14}
}

func (x *MerchantUser) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MerchantUser) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *MerchantUser) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *MerchantUser) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *MerchantUser) GetProfileId() string {
	if x != nil {
		return x.ProfileId
	}
	return ""
}

func (x *MerchantUser) GetRegistrationDate() *timestamp.Timestamp {
	if x != nil {
		return x.RegistrationDate
	}
	return nil
}

type MerchantCompanyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"name" validate:"required,company_name,max=60" required:"true"
	//
	// The merchant's company name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name" validate:"required,company_name,max=60" required:"true"`
	// @inject_tag: json:"alternative_name" bson:"alternative_name" validate:"required,company_name,max=60" required:"true"
	//
	// The merchant's company alternative name.
	AlternativeName string `protobuf:"bytes,2,opt,name=alternative_name,json=alternativeName,proto3" json:"alternative_name" bson:"alternative_name" validate:"required,company_name,max=60" required:"true"`
	// @inject_tag: json:"website" validate:"required,url" required:"true"
	//
	// The merchant's company website.
	Website string `protobuf:"bytes,3,opt,name=website,proto3" json:"website" validate:"required,url" required:"true"`
	// @inject_tag: json:"country" validate:"required,alpha,len=2" required:"true"
	//
	// The merchant's company country. Two-letter country code in ISO 3166-1, in uppercase (for instance US).
	Country string `protobuf:"bytes,4,opt,name=country,proto3" json:"country" validate:"required,alpha,len=2" required:"true"`
	// @inject_tag: json:"state"
	//
	// The merchant's company state.
	State string `protobuf:"bytes,5,opt,name=state,proto3" json:"state"`
	// @inject_tag: json:"zip" validate:"required,max=30" required:"true"
	//
	// The merchant's company ZIP code.
	Zip string `protobuf:"bytes,6,opt,name=zip,proto3" json:"zip" validate:"required,max=30" required:"true"`
	// @inject_tag: json:"city" validate:"required,city,max=60"
	//
	// The merchant's company city.
	City string `protobuf:"bytes,7,opt,name=city,proto3" json:"city" validate:"required,city,max=60"`
	// @inject_tag: json:"address" validate:"required,max=100"
	//
	// The merchant's company address.
	Address string `protobuf:"bytes,8,opt,name=address,proto3" json:"address" validate:"required,max=100"`
	// @inject_tag: json:"address_additional" bson:"address_additional" validate:"omitempty,max=100"
	//
	// The merchant's company additional address.
	AddressAdditional string `protobuf:"bytes,9,opt,name=address_additional,json=addressAdditional,proto3" json:"address_additional" bson:"address_additional" validate:"omitempty,max=100"`
	// @inject_tag: json:"registration_number" bson:"registration_number" validate:"required,max=100" required:"true"
	//
	// The merchant's company registration number.
	RegistrationNumber string `protobuf:"bytes,10,opt,name=registration_number,json=registrationNumber,proto3" json:"registration_number" bson:"registration_number" validate:"required,max=100" required:"true"`
	// @inject_tag: json:"tax_id" bson:"tax_id"
	//
	// The merchant's company tax number.
	TaxId string `protobuf:"bytes,11,opt,name=tax_id,json=taxId,proto3" json:"tax_id" bson:"tax_id"`
	// @inject_tag: json:"trademark" bson:"trademark"
	//
	// The merchant's trade mark.
	Trademark string `protobuf:"bytes,12,opt,name=trademark,proto3" json:"trademark" bson:"trademark"`
}

func (x *MerchantCompanyInfo) Reset() {
	*x = MerchantCompanyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerchantCompanyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerchantCompanyInfo) ProtoMessage() {}

func (x *MerchantCompanyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerchantCompanyInfo.ProtoReflect.Descriptor instead.
func (*MerchantCompanyInfo) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{15}
}

func (x *MerchantCompanyInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MerchantCompanyInfo) GetAlternativeName() string {
	if x != nil {
		return x.AlternativeName
	}
	return ""
}

func (x *MerchantCompanyInfo) GetWebsite() string {
	if x != nil {
		return x.Website
	}
	return ""
}

func (x *MerchantCompanyInfo) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *MerchantCompanyInfo) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *MerchantCompanyInfo) GetZip() string {
	if x != nil {
		return x.Zip
	}
	return ""
}

func (x *MerchantCompanyInfo) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *MerchantCompanyInfo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *MerchantCompanyInfo) GetAddressAdditional() string {
	if x != nil {
		return x.AddressAdditional
	}
	return ""
}

func (x *MerchantCompanyInfo) GetRegistrationNumber() string {
	if x != nil {
		return x.RegistrationNumber
	}
	return ""
}

func (x *MerchantCompanyInfo) GetTaxId() string {
	if x != nil {
		return x.TaxId
	}
	return ""
}

func (x *MerchantCompanyInfo) GetTrademark() string {
	if x != nil {
		return x.Trademark
	}
	return ""
}

type MerchantCompletedSteps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Has a true value if the company data is filled out.
	Company bool `protobuf:"varint,1,opt,name=company,proto3" json:"company,omitempty"`
	// Has a true value if the contacts data is filled out.
	Contacts bool `protobuf:"varint,2,opt,name=contacts,proto3" json:"contacts,omitempty"`
	// Has a true value if the banking data is filled out.
	Banking bool `protobuf:"varint,3,opt,name=banking,proto3" json:"banking,omitempty"`
	// Has a true value if the tariff data is filled out.
	Tariff bool `protobuf:"varint,4,opt,name=tariff,proto3" json:"tariff,omitempty"`
}

func (x *MerchantCompletedSteps) Reset() {
	*x = MerchantCompletedSteps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerchantCompletedSteps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerchantCompletedSteps) ProtoMessage() {}

func (x *MerchantCompletedSteps) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerchantCompletedSteps.ProtoReflect.Descriptor instead.
func (*MerchantCompletedSteps) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{16}
}

func (x *MerchantCompletedSteps) GetCompany() bool {
	if x != nil {
		return x.Company
	}
	return false
}

func (x *MerchantCompletedSteps) GetContacts() bool {
	if x != nil {
		return x.Contacts
	}
	return false
}

func (x *MerchantCompletedSteps) GetBanking() bool {
	if x != nil {
		return x.Banking
	}
	return false
}

func (x *MerchantCompletedSteps) GetTariff() bool {
	if x != nil {
		return x.Tariff
	}
	return false
}

type MerchantAgreementSignatureDataSignUrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignUrl   string               `protobuf:"bytes,1,opt,name=sign_url,json=signUrl,proto3" json:"sign_url,omitempty"`
	ExpiresAt *timestamp.Timestamp `protobuf:"bytes,2,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
}

func (x *MerchantAgreementSignatureDataSignUrl) Reset() {
	*x = MerchantAgreementSignatureDataSignUrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerchantAgreementSignatureDataSignUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerchantAgreementSignatureDataSignUrl) ProtoMessage() {}

func (x *MerchantAgreementSignatureDataSignUrl) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerchantAgreementSignatureDataSignUrl.ProtoReflect.Descriptor instead.
func (*MerchantAgreementSignatureDataSignUrl) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{17}
}

func (x *MerchantAgreementSignatureDataSignUrl) GetSignUrl() string {
	if x != nil {
		return x.SignUrl
	}
	return ""
}

func (x *MerchantAgreementSignatureDataSignUrl) GetExpiresAt() *timestamp.Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

type MerchantAgreementSignatureData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DetailsUrl          string                                 `protobuf:"bytes,1,opt,name=details_url,json=detailsUrl,proto3" json:"details_url,omitempty"`
	FilesUrl            string                                 `protobuf:"bytes,2,opt,name=files_url,json=filesUrl,proto3" json:"files_url,omitempty"`
	SignatureRequestId  string                                 `protobuf:"bytes,3,opt,name=signature_request_id,json=signatureRequestId,proto3" json:"signature_request_id,omitempty"`
	MerchantSignatureId string                                 `protobuf:"bytes,4,opt,name=merchant_signature_id,json=merchantSignatureId,proto3" json:"merchant_signature_id,omitempty"`
	PsSignatureId       string                                 `protobuf:"bytes,5,opt,name=ps_signature_id,json=psSignatureId,proto3" json:"ps_signature_id,omitempty"`
	MerchantSignUrl     *MerchantAgreementSignatureDataSignUrl `protobuf:"bytes,6,opt,name=merchant_sign_url,json=merchantSignUrl,proto3" json:"merchant_sign_url,omitempty"`
	PsSignUrl           *MerchantAgreementSignatureDataSignUrl `protobuf:"bytes,7,opt,name=ps_sign_url,json=psSignUrl,proto3" json:"ps_sign_url,omitempty"`
}

func (x *MerchantAgreementSignatureData) Reset() {
	*x = MerchantAgreementSignatureData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerchantAgreementSignatureData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerchantAgreementSignatureData) ProtoMessage() {}

func (x *MerchantAgreementSignatureData) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerchantAgreementSignatureData.ProtoReflect.Descriptor instead.
func (*MerchantAgreementSignatureData) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{18}
}

func (x *MerchantAgreementSignatureData) GetDetailsUrl() string {
	if x != nil {
		return x.DetailsUrl
	}
	return ""
}

func (x *MerchantAgreementSignatureData) GetFilesUrl() string {
	if x != nil {
		return x.FilesUrl
	}
	return ""
}

func (x *MerchantAgreementSignatureData) GetSignatureRequestId() string {
	if x != nil {
		return x.SignatureRequestId
	}
	return ""
}

func (x *MerchantAgreementSignatureData) GetMerchantSignatureId() string {
	if x != nil {
		return x.MerchantSignatureId
	}
	return ""
}

func (x *MerchantAgreementSignatureData) GetPsSignatureId() string {
	if x != nil {
		return x.PsSignatureId
	}
	return ""
}

func (x *MerchantAgreementSignatureData) GetMerchantSignUrl() *MerchantAgreementSignatureDataSignUrl {
	if x != nil {
		return x.MerchantSignUrl
	}
	return nil
}

func (x *MerchantAgreementSignatureData) GetPsSignUrl() *MerchantAgreementSignatureDataSignUrl {
	if x != nil {
		return x.PsSignUrl
	}
	return nil
}

type MerchantTariff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"payment"
	//
	// The merchant's tariffs for payments.
	Payment []*MerchantTariffRatesPayment `protobuf:"bytes,1,rep,name=payment,proto3" json:"payment"`
	// @inject_tag: json:"payout"
	//
	// The merchant's tariffs for payout.
	Payout *MerchantTariffRatesSettingsItem `protobuf:"bytes,2,opt,name=payout,proto3" json:"payout"`
	// @inject_tag: json:"home_region"
	//
	// The merchant's region name.
	HomeRegion string `protobuf:"bytes,3,opt,name=home_region,json=homeRegion,proto3" json:"home_region"`
	// @inject_tag: json:"chargeback" bson:"chargeback"
	//
	// The merchant's tariffs for chargeback.
	Chargeback []*MerchantTariffRatesSettingsItem `protobuf:"bytes,4,rep,name=chargeback,proto3" json:"chargeback" bson:"chargeback"`
	// @inject_tag: json:"-" bson:"refund"
	Refund []*MerchantTariffRatesSettingsItem `protobuf:"bytes,5,rep,name=refund,proto3" json:"-" bson:"refund"`
	//@inject_tag: json:"minimal_payout" bson:"minimal_payout"
	//
	// The merchant's minimal payout amounts.
	MinimalPayout map[string]float32 `protobuf:"bytes,6,rep,name=minimal_payout,json=minimalPayout,proto3" json:"minimal_payout" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3" bson:"minimal_payout"`
}

func (x *MerchantTariff) Reset() {
	*x = MerchantTariff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerchantTariff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerchantTariff) ProtoMessage() {}

func (x *MerchantTariff) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerchantTariff.ProtoReflect.Descriptor instead.
func (*MerchantTariff) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{19}
}

func (x *MerchantTariff) GetPayment() []*MerchantTariffRatesPayment {
	if x != nil {
		return x.Payment
	}
	return nil
}

func (x *MerchantTariff) GetPayout() *MerchantTariffRatesSettingsItem {
	if x != nil {
		return x.Payout
	}
	return nil
}

func (x *MerchantTariff) GetHomeRegion() string {
	if x != nil {
		return x.HomeRegion
	}
	return ""
}

func (x *MerchantTariff) GetChargeback() []*MerchantTariffRatesSettingsItem {
	if x != nil {
		return x.Chargeback
	}
	return nil
}

func (x *MerchantTariff) GetRefund() []*MerchantTariffRatesSettingsItem {
	if x != nil {
		return x.Refund
	}
	return nil
}

func (x *MerchantTariff) GetMinimalPayout() map[string]float32 {
	if x != nil {
		return x.MinimalPayout
	}
	return nil
}

type Merchant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: bson:"_id" faker:"objectIdString"
	//
	// The unique identifier for the merchant.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id" faker:"objectIdString"`
	// @inject_tag: json:"user"
	//
	// Information about the merchant owner from the primary onboarding profile.
	User *MerchantUser `protobuf:"bytes,2,opt,name=user,proto3" json:"user"`
	// @inject_tag: json:"company"
	//
	// Information about the merchant's company.
	Company *MerchantCompanyInfo `protobuf:"bytes,3,opt,name=company,proto3" json:"company"`
	// @inject_tag: json:"contacts"
	//
	// The merchant's contacts.
	Contacts *MerchantContact `protobuf:"bytes,15,opt,name=contacts,proto3" json:"contacts"`
	// @inject_tag: json:"banking"
	//
	// The merchant's banking data.
	Banking *MerchantBanking `protobuf:"bytes,16,opt,name=banking,proto3" json:"banking"`
	// @inject_tag: json:"status"
	//
	// The merchant's status. Available values: 0 - The merchant've just been created and the merchant profile have not been filled yet.
	//3 - The agreement with the merchant is signed by the merchant owner.
	//4 - The agreement with the merchant is signed by PaySuper.
	//5 - The merchant is removed.
	//6 - The merchant is marked as a fraud and will be removed.
	//7 - The merchant must fill the onboarding.
	//8 - The merchant has passed the onboarding and is waiting the agreement to be signed.
	Status int32 `protobuf:"varint,17,opt,name=status,proto3" json:"status"`
	// @inject_tag: json:"created_at"
	//
	// The date of the merchant creation.
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,18,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	// @inject_tag: json:"updated_at"
	//
	// The date of the merchant last update.
	UpdatedAt *timestamp.Timestamp `protobuf:"bytes,19,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	// @inject_tag: json:"first_payment_at"
	FirstPaymentAt *timestamp.Timestamp `protobuf:"bytes,20,opt,name=first_payment_at,json=firstPaymentAt,proto3" json:"first_payment_at"`
	// @inject_tag: json:"-"
	IsVatEnabled bool `protobuf:"varint,21,opt,name=is_vat_enabled,json=isVatEnabled,proto3" json:"-"`
	// @inject_tag: json:"-"
	IsCommissionToUserEnabled bool `protobuf:"varint,22,opt,name=is_commission_to_user_enabled,json=isCommissionToUserEnabled,proto3" json:"-"`
	// @inject_tag: json:"has_merchant_signature"
	//
	// Has a true value if the merchant has signed the license agreement.
	HasMerchantSignature bool `protobuf:"varint,23,opt,name=has_merchant_signature,json=hasMerchantSignature,proto3" json:"has_merchant_signature"`
	// @inject_tag: json:"has_psp_signature"
	//
	// Has a true value if PaySuper has signed the license agreement.
	HasPspSignature bool `protobuf:"varint,24,opt,name=has_psp_signature,json=hasPspSignature,proto3" json:"has_psp_signature"`
	// @inject_tag: json:"-"
	LastPayout *MerchantLastPayout `protobuf:"bytes,25,opt,name=last_payout,json=lastPayout,proto3" json:"-"`
	// @inject_tag: json:"is_signed"
	//
	// Has a true value if the license agreement is completely signed.
	IsSigned bool `protobuf:"varint,26,opt,name=is_signed,json=isSigned,proto3" json:"is_signed"`
	// @inject_tag: json:"-"
	PaymentMethods map[string]*MerchantPaymentMethod `protobuf:"bytes,28,rep,name=payment_methods,json=paymentMethods,proto3" json:"-" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// @inject_tag: json:"-"
	AgreementType int32 `protobuf:"varint,29,opt,name=agreement_type,json=agreementType,proto3" json:"-"`
	// @inject_tag: json:"-"
	AgreementSentViaMail bool `protobuf:"varint,30,opt,name=agreement_sent_via_mail,json=agreementSentViaMail,proto3" json:"-"`
	// @inject_tag: json:"-"
	MailTrackingLink string `protobuf:"bytes,31,opt,name=mail_tracking_link,json=mailTrackingLink,proto3" json:"-"`
	// @inject_tag: json:"-"
	S3AgreementName string `protobuf:"bytes,32,opt,name=s3_agreement_name,json=s3AgreementName,proto3" json:"-"`
	// @inject_tag: json:"payout_cost_amount" bson:"payout_cost_amount" validate:"numeric,gte=0"
	//
	// The payout cost.
	PayoutCostAmount float64 `protobuf:"fixed64,33,opt,name=payout_cost_amount,json=payoutCostAmount,proto3" json:"payout_cost_amount" bson:"payout_cost_amount" validate:"numeric,gte=0"`
	//@inject_tag: json:"payout_cost_currency" bson:"payout_cost_currency" validate:"required,alpha,len=3" required:"true"
	//
	// The currency of the payout cost.
	PayoutCostCurrency string `protobuf:"bytes,34,opt,name=payout_cost_currency,json=payoutCostCurrency,proto3" json:"payout_cost_currency" bson:"payout_cost_currency" validate:"required,alpha,len=3" required:"true"`
	// @inject_tag: json:"min_payout_amount" bson:"min_payout_amount" validate:"numeric,gte=0"
	//
	// The minimum payout amount.
	MinPayoutAmount float64 `protobuf:"fixed64,35,opt,name=min_payout_amount,json=minPayoutAmount,proto3" json:"min_payout_amount" bson:"min_payout_amount" validate:"numeric,gte=0"`
	// @inject_tag: json:"rolling_reserve_amount" bson:"rolling_reserve_amount" validate:"numeric,gte=0,lte=100"
	//
	// The rolling reserve threshold.
	RollingReserveThreshold float64 `protobuf:"fixed64,36,opt,name=rolling_reserve_threshold,json=rollingReserveThreshold,proto3" json:"rolling_reserve_amount" bson:"rolling_reserve_amount" validate:"numeric,gte=0,lte=100"`
	// @inject_tag: json:"rolling_reserve_days" bson:"rolling_reserve_days" validate:"numeric,gte=0"
	//
	// The rolling reserve period.
	RollingReserveDays int32 `protobuf:"varint,37,opt,name=rolling_reserve_days,json=rollingReserveDays,proto3" json:"rolling_reserve_days" bson:"rolling_reserve_days" validate:"numeric,gte=0"`
	// @inject_tag: json:"rolling_reserve_chargeback_transactions_threshold" bson:"rolling_reserve_chargeback_transactions_threshold" validate:"numeric,gte=0,lte=100"
	//
	// The rolling reserve threshold for the chargeback transactions.
	RollingReserveChargebackTransactionsThreshold float64 `protobuf:"fixed64,38,opt,name=rolling_reserve_chargeback_transactions_threshold,json=rollingReserveChargebackTransactionsThreshold,proto3" json:"rolling_reserve_chargeback_transactions_threshold" bson:"rolling_reserve_chargeback_transactions_threshold" validate:"numeric,gte=0,lte=100"`
	// @inject_tag: json:"item_min_cost_amount" bson:"item_min_cost_amount" validate:"numeric,gte=0"
	//
	// The minimum cost of the item.
	ItemMinCostAmount float64 `protobuf:"fixed64,39,opt,name=item_min_cost_amount,json=itemMinCostAmount,proto3" json:"item_min_cost_amount" bson:"item_min_cost_amount" validate:"numeric,gte=0"`
	//@inject_tag: json:"item_min_cost_currency" bson:"item_min_cost_currency" validate:"required,alpha,len=3" required:"true"
	//
	// The currency of the minimum cost of the item.
	ItemMinCostCurrency string `protobuf:"bytes,40,opt,name=item_min_cost_currency,json=itemMinCostCurrency,proto3" json:"item_min_cost_currency" bson:"item_min_cost_currency" validate:"required,alpha,len=3" required:"true"`
	// The merchant authorisation token to connect to the Centrifugo channel.
	CentrifugoToken string `protobuf:"bytes,41,opt,name=centrifugo_token,json=centrifugoToken,proto3" json:"centrifugo_token,omitempty"`
	//@inject_tag: json:"-"
	AgreementSignatureData *MerchantAgreementSignatureData `protobuf:"bytes,43,opt,name=agreement_signature_data,json=agreementSignatureData,proto3" json:"-"`
	//@inject_tag: json:"-"
	Steps *MerchantCompletedSteps `protobuf:"bytes,46,opt,name=steps,proto3" json:"-"`
	//@inject_tag: json:"agreement_template"
	//
	// The unique identifier for the HelloSign template of the license agreement.
	AgreementTemplate string `protobuf:"bytes,47,opt,name=agreement_template,json=agreementTemplate,proto3" json:"agreement_template"`
	// @inject_tag: json:"received_date"
	//
	// The date when the merchant owner has signed the license agreement.
	ReceivedDate *timestamp.Timestamp `protobuf:"bytes,48,opt,name=received_date,json=receivedDate,proto3" json:"received_date"`
	// @inject_tag: json:"status_last_updated_at"
	//
	// The date when the merchant's status has been last updated.
	StatusLastUpdatedAt *timestamp.Timestamp `protobuf:"bytes,49,opt,name=status_last_updated_at,json=statusLastUpdatedAt,proto3" json:"status_last_updated_at"`
	// @inject_tag: json:"has_projects"
	//
	// Has a true value if the merchant has created projects.
	HasProjects bool `protobuf:"varint,50,opt,name=has_projects,json=hasProjects,proto3" json:"has_projects"`
	// @inject_tag: json:"agreement_number"
	//
	// The license agreement number.
	AgreementNumber string `protobuf:"bytes,51,opt,name=agreement_number,json=agreementNumber,proto3" json:"agreement_number"`
	// @inject_tag: json:"minimal_payout_limit"
	//
	// The minimum payout limit.
	MinimalPayoutLimit float32 `protobuf:"fixed32,52,opt,name=minimal_payout_limit,json=minimalPayoutLimit,proto3" json:"minimal_payout_limit"`
	// @inject_tag: json:"tariff"
	//
	// The merchant's tariff data selected in the Onboarding.
	Tariff *MerchantTariff `protobuf:"bytes,53,opt,name=tariff,proto3" json:"tariff"`
	// @inject_tag: json:"manual_payouts_enabled"
	//
	// Has a true value if the merchant can manually make a payout.
	ManualPayoutsEnabled bool `protobuf:"varint,54,opt,name=manual_payouts_enabled,json=manualPayoutsEnabled,proto3" json:"manual_payouts_enabled"`
	// @inject_tag: json:"mcc_code"
	//
	// The Merchant Category Code (MCC) is a four-digit number listed in ISO 18245.
	MccCode string `protobuf:"bytes,55,opt,name=mcc_code,json=mccCode,proto3" json:"mcc_code"`
	// @inject_tag: json:"operating_company_id" faker:"objectIdString"
	//
	// The unique identifier for the operating company.
	OperatingCompanyId string `protobuf:"bytes,56,opt,name=operating_company_id,json=operatingCompanyId,proto3" json:"operating_company_id" faker:"objectIdString"`
	// @inject_tag: json:"merchant_operations_type" validate:"oneof=high-risk low-risk"
	//
	// The merchant's operations type. Available values: low-risk, high-risk.
	MerchantOperationsType string `protobuf:"bytes,57,opt,name=merchant_operations_type,json=merchantOperationsType,proto3" json:"merchant_operations_type" validate:"oneof=high-risk low-risk"`
	// @inject_tag: json:"dont_charge_vat"
	//
	// Has a true value if the merchant doesn't pay any taxes.
	DontChargeVat bool `protobuf:"varint,58,opt,name=dont_charge_vat,json=dontChargeVat,proto3" json:"dont_charge_vat"`
	// @inject_tag: json:"api_token"
	//
	// The merchant token for making S2S API requests.
	ApiToken string `protobuf:"bytes,59,opt,name=api_token,json=apiToken,proto3" json:"api_token"`
}

func (x *Merchant) Reset() {
	*x = Merchant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Merchant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Merchant) ProtoMessage() {}

func (x *Merchant) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Merchant.ProtoReflect.Descriptor instead.
func (*Merchant) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{20}
}

func (x *Merchant) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Merchant) GetUser() *MerchantUser {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Merchant) GetCompany() *MerchantCompanyInfo {
	if x != nil {
		return x.Company
	}
	return nil
}

func (x *Merchant) GetContacts() *MerchantContact {
	if x != nil {
		return x.Contacts
	}
	return nil
}

func (x *Merchant) GetBanking() *MerchantBanking {
	if x != nil {
		return x.Banking
	}
	return nil
}

func (x *Merchant) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Merchant) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Merchant) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Merchant) GetFirstPaymentAt() *timestamp.Timestamp {
	if x != nil {
		return x.FirstPaymentAt
	}
	return nil
}

func (x *Merchant) GetIsVatEnabled() bool {
	if x != nil {
		return x.IsVatEnabled
	}
	return false
}

func (x *Merchant) GetIsCommissionToUserEnabled() bool {
	if x != nil {
		return x.IsCommissionToUserEnabled
	}
	return false
}

func (x *Merchant) GetHasMerchantSignature() bool {
	if x != nil {
		return x.HasMerchantSignature
	}
	return false
}

func (x *Merchant) GetHasPspSignature() bool {
	if x != nil {
		return x.HasPspSignature
	}
	return false
}

func (x *Merchant) GetLastPayout() *MerchantLastPayout {
	if x != nil {
		return x.LastPayout
	}
	return nil
}

func (x *Merchant) GetIsSigned() bool {
	if x != nil {
		return x.IsSigned
	}
	return false
}

func (x *Merchant) GetPaymentMethods() map[string]*MerchantPaymentMethod {
	if x != nil {
		return x.PaymentMethods
	}
	return nil
}

func (x *Merchant) GetAgreementType() int32 {
	if x != nil {
		return x.AgreementType
	}
	return 0
}

func (x *Merchant) GetAgreementSentViaMail() bool {
	if x != nil {
		return x.AgreementSentViaMail
	}
	return false
}

func (x *Merchant) GetMailTrackingLink() string {
	if x != nil {
		return x.MailTrackingLink
	}
	return ""
}

func (x *Merchant) GetS3AgreementName() string {
	if x != nil {
		return x.S3AgreementName
	}
	return ""
}

func (x *Merchant) GetPayoutCostAmount() float64 {
	if x != nil {
		return x.PayoutCostAmount
	}
	return 0
}

func (x *Merchant) GetPayoutCostCurrency() string {
	if x != nil {
		return x.PayoutCostCurrency
	}
	return ""
}

func (x *Merchant) GetMinPayoutAmount() float64 {
	if x != nil {
		return x.MinPayoutAmount
	}
	return 0
}

func (x *Merchant) GetRollingReserveThreshold() float64 {
	if x != nil {
		return x.RollingReserveThreshold
	}
	return 0
}

func (x *Merchant) GetRollingReserveDays() int32 {
	if x != nil {
		return x.RollingReserveDays
	}
	return 0
}

func (x *Merchant) GetRollingReserveChargebackTransactionsThreshold() float64 {
	if x != nil {
		return x.RollingReserveChargebackTransactionsThreshold
	}
	return 0
}

func (x *Merchant) GetItemMinCostAmount() float64 {
	if x != nil {
		return x.ItemMinCostAmount
	}
	return 0
}

func (x *Merchant) GetItemMinCostCurrency() string {
	if x != nil {
		return x.ItemMinCostCurrency
	}
	return ""
}

func (x *Merchant) GetCentrifugoToken() string {
	if x != nil {
		return x.CentrifugoToken
	}
	return ""
}

func (x *Merchant) GetAgreementSignatureData() *MerchantAgreementSignatureData {
	if x != nil {
		return x.AgreementSignatureData
	}
	return nil
}

func (x *Merchant) GetSteps() *MerchantCompletedSteps {
	if x != nil {
		return x.Steps
	}
	return nil
}

func (x *Merchant) GetAgreementTemplate() string {
	if x != nil {
		return x.AgreementTemplate
	}
	return ""
}

func (x *Merchant) GetReceivedDate() *timestamp.Timestamp {
	if x != nil {
		return x.ReceivedDate
	}
	return nil
}

func (x *Merchant) GetStatusLastUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.StatusLastUpdatedAt
	}
	return nil
}

func (x *Merchant) GetHasProjects() bool {
	if x != nil {
		return x.HasProjects
	}
	return false
}

func (x *Merchant) GetAgreementNumber() string {
	if x != nil {
		return x.AgreementNumber
	}
	return ""
}

func (x *Merchant) GetMinimalPayoutLimit() float32 {
	if x != nil {
		return x.MinimalPayoutLimit
	}
	return 0
}

func (x *Merchant) GetTariff() *MerchantTariff {
	if x != nil {
		return x.Tariff
	}
	return nil
}

func (x *Merchant) GetManualPayoutsEnabled() bool {
	if x != nil {
		return x.ManualPayoutsEnabled
	}
	return false
}

func (x *Merchant) GetMccCode() string {
	if x != nil {
		return x.MccCode
	}
	return ""
}

func (x *Merchant) GetOperatingCompanyId() string {
	if x != nil {
		return x.OperatingCompanyId
	}
	return ""
}

func (x *Merchant) GetMerchantOperationsType() string {
	if x != nil {
		return x.MerchantOperationsType
	}
	return ""
}

func (x *Merchant) GetDontChargeVat() bool {
	if x != nil {
		return x.DontChargeVat
	}
	return false
}

func (x *Merchant) GetApiToken() string {
	if x != nil {
		return x.ApiToken
	}
	return ""
}

type MerchantShortInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: bson:"_id" faker:"objectIdString"
	//
	// The unique identifier for the merchant.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id" faker:"objectIdString"`
	// @inject_tag: json:"user"
	//
	// Information about the merchant owner from the primary onboarding profile.
	User *MerchantUser `protobuf:"bytes,2,opt,name=user,proto3" json:"user"`
	// @inject_tag: json:"company"
	//
	// Information about the merchant's company.
	Company *MerchantCompanyInfo `protobuf:"bytes,3,opt,name=company,proto3" json:"company"`
	// @inject_tag: json:"contacts"
	//
	// The merchant's contacts.
	Contacts *MerchantContact `protobuf:"bytes,4,opt,name=contacts,proto3" json:"contacts"`
	// @inject_tag: json:"banking"
	//
	// The merchant's banking data.
	Banking *MerchantBanking `protobuf:"bytes,5,opt,name=banking,proto3" json:"banking"`
	// @inject_tag: json:"status"
	//
	// The merchant's status. Available values: 0 - The merchant've just been created and the merchant profile have not been filled yet.
	//3 - The agreement with the merchant is signed by the merchant owner.
	//4 - The agreement with the merchant is signed by PaySuper.
	//5 - The merchant is removed.
	//6 - The merchant is marked as a fraud and will be removed.
	//7 - The merchant must fill the onboarding.
	//8 - The merchant has passed the onboarding and is waiting the agreement to be signed.
	Status int32 `protobuf:"varint,6,opt,name=status,proto3" json:"status"`
	// @inject_tag: json:"created_at"
	//
	// The date of the merchant creation.
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	// @inject_tag: json:"balance"
	//
	// The balance of merchant for payout.
	Balance *MerchantBalance `protobuf:"bytes,8,opt,name=balance,proto3" json:"balance"`
	// @inject_tag: json:"status_last_updated_at"
	//
	// The date when the merchant's status has been last updated.
	StatusLastUpdatedAt *timestamp.Timestamp `protobuf:"bytes,9,opt,name=status_last_updated_at,json=statusLastUpdatedAt,proto3" json:"status_last_updated_at"`
	//@inject_tag: json:"first_payment_at"
	//
	// Date of first payment for merchant.
	FirstPaymentAt *timestamp.Timestamp `protobuf:"bytes,10,opt,name=first_payment_at,json=firstPaymentAt,proto3" json:"first_payment_at"`
}

func (x *MerchantShortInfo) Reset() {
	*x = MerchantShortInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerchantShortInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerchantShortInfo) ProtoMessage() {}

func (x *MerchantShortInfo) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerchantShortInfo.ProtoReflect.Descriptor instead.
func (*MerchantShortInfo) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{21}
}

func (x *MerchantShortInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MerchantShortInfo) GetUser() *MerchantUser {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *MerchantShortInfo) GetCompany() *MerchantCompanyInfo {
	if x != nil {
		return x.Company
	}
	return nil
}

func (x *MerchantShortInfo) GetContacts() *MerchantContact {
	if x != nil {
		return x.Contacts
	}
	return nil
}

func (x *MerchantShortInfo) GetBanking() *MerchantBanking {
	if x != nil {
		return x.Banking
	}
	return nil
}

func (x *MerchantShortInfo) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *MerchantShortInfo) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *MerchantShortInfo) GetBalance() *MerchantBalance {
	if x != nil {
		return x.Balance
	}
	return nil
}

func (x *MerchantShortInfo) GetStatusLastUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.StatusLastUpdatedAt
	}
	return nil
}

func (x *MerchantShortInfo) GetFirstPaymentAt() *timestamp.Timestamp {
	if x != nil {
		return x.FirstPaymentAt
	}
	return nil
}

type MerchantCommon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: bson:"_id"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id"`
	// @inject_tag: json:"name"
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	// @inject_tag: json:"currency"
	Currency string `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency"`
	// @inject_tag: json:"status"
	Status int32 `protobuf:"varint,4,opt,name=status,proto3" json:"status"`
	// @inject_tag: json:"has_projects"
	HasProjects bool `protobuf:"varint,5,opt,name=has_projects,json=hasProjects,proto3" json:"has_projects"`
}

func (x *MerchantCommon) Reset() {
	*x = MerchantCommon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerchantCommon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerchantCommon) ProtoMessage() {}

func (x *MerchantCommon) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerchantCommon.ProtoReflect.Descriptor instead.
func (*MerchantCommon) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{22}
}

func (x *MerchantCommon) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MerchantCommon) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MerchantCommon) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *MerchantCommon) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *MerchantCommon) GetHasProjects() bool {
	if x != nil {
		return x.HasProjects
	}
	return false
}

type SystemNotificationStatuses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"from"
	//
	// The before changes status.
	From int32 `protobuf:"varint,1,opt,name=from,proto3" json:"from"`
	// @inject_tag: json:"to"
	//
	// The after changes status.
	To int32 `protobuf:"varint,2,opt,name=to,proto3" json:"to"`
}

func (x *SystemNotificationStatuses) Reset() {
	*x = SystemNotificationStatuses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemNotificationStatuses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemNotificationStatuses) ProtoMessage() {}

func (x *SystemNotificationStatuses) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemNotificationStatuses.ProtoReflect.Descriptor instead.
func (*SystemNotificationStatuses) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{23}
}

func (x *SystemNotificationStatuses) GetFrom() int32 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *SystemNotificationStatuses) GetTo() int32 {
	if x != nil {
		return x.To
	}
	return 0
}

type Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"id" faker:"objectIdString"
	//
	// The unique identifier for the notification.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id" faker:"objectIdString"`
	// @inject_tag: json:"message"
	//
	// The notification message.
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message"`
	// @inject_tag: json:"merchant_id" faker:"objectIdString"
	//
	// The unique identifier for the merchant who is the recipient of the notification.
	MerchantId string `protobuf:"bytes,4,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id" faker:"objectIdString"`
	// @inject_tag: json:"user_id" faker:"objectIdString"
	//
	// The unique identifier for the user who is the sender of the notification.
	UserId string `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id" faker:"objectIdString"`
	// @inject_tag: json:"is_system"
	//
	// Has a true value if the notification is generated automatically.
	IsSystem bool `protobuf:"varint,6,opt,name=is_system,json=isSystem,proto3" json:"is_system"`
	// @inject_tag: json:"is_read"
	//
	// Has a true value if the recipient has read the notification.
	IsRead bool `protobuf:"varint,7,opt,name=is_read,json=isRead,proto3" json:"is_read"`
	// @inject_tag: json:"statuses"
	//
	// The system notification statuses. Has a null value if it's not the system notification.
	Statuses *SystemNotificationStatuses `protobuf:"bytes,8,opt,name=statuses,proto3" json:"statuses"`
	// @inject_tag: json:"created_at"
	//
	// The date of the notification creation.
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	// @inject_tag: json:"updated_at"
	//
	// The date of the notification last update.
	UpdatedAt *timestamp.Timestamp `protobuf:"bytes,10,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
}

func (x *Notification) Reset() {
	*x = Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notification) ProtoMessage() {}

func (x *Notification) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notification.ProtoReflect.Descriptor instead.
func (*Notification) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{24}
}

func (x *Notification) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Notification) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Notification) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *Notification) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Notification) GetIsSystem() bool {
	if x != nil {
		return x.IsSystem
	}
	return false
}

func (x *Notification) GetIsRead() bool {
	if x != nil {
		return x.IsRead
	}
	return false
}

func (x *Notification) GetStatuses() *SystemNotificationStatuses {
	if x != nil {
		return x.Statuses
	}
	return nil
}

func (x *Notification) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Notification) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type OrderPlatformFee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount        float32 `protobuf:"fixed32,1,opt,name=amount,proto3" json:"amount,omitempty"`
	Currency      string  `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
	EffectiveRate float32 `protobuf:"fixed32,3,opt,name=effective_rate,json=effectiveRate,proto3" json:"effective_rate,omitempty"`
}

func (x *OrderPlatformFee) Reset() {
	*x = OrderPlatformFee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderPlatformFee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderPlatformFee) ProtoMessage() {}

func (x *OrderPlatformFee) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderPlatformFee.ProtoReflect.Descriptor instead.
func (*OrderPlatformFee) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{25}
}

func (x *OrderPlatformFee) GetAmount() float32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *OrderPlatformFee) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *OrderPlatformFee) GetEffectiveRate() float32 {
	if x != nil {
		return x.EffectiveRate
	}
	return 0
}

type OrderTax struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"type"
	//
	// The type of the tax.
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type"`
	// @inject_tag: json:"rate"
	//
	// The tax rate.
	Rate float64 `protobuf:"fixed64,2,opt,name=rate,proto3" json:"rate"`
	// @inject_tag: json:"amount"
	//
	// The tax amount.
	Amount float64 `protobuf:"fixed64,3,opt,name=amount,proto3" json:"amount"`
	// @inject_tag: json:"currency"
	//
	// The tax currency. Three-letter currency code ISO 4217, in uppercase.
	Currency string `protobuf:"bytes,4,opt,name=currency,proto3" json:"currency"`
}

func (x *OrderTax) Reset() {
	*x = OrderTax{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderTax) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderTax) ProtoMessage() {}

func (x *OrderTax) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderTax.ProtoReflect.Descriptor instead.
func (*OrderTax) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{26}
}

func (x *OrderTax) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *OrderTax) GetRate() float64 {
	if x != nil {
		return x.Rate
	}
	return 0
}

func (x *OrderTax) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *OrderTax) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

type OrderBillingAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: validate:"omitempty,alpha,len=2"
	//
	// The customer's country. Two-letter country code in ISO 3166-1, in uppercase (for instance US).
	Country string `protobuf:"bytes,1,opt,name=country,proto3" json:"country,omitempty" validate:"omitempty,alpha,len=2"`
	// The customer’s city.
	City string `protobuf:"bytes,2,opt,name=city,proto3" json:"city,omitempty"`
	// @inject_tag: bson:"postal_code"
	//
	// The customer's postal code.
	PostalCode string `protobuf:"bytes,3,opt,name=postal_code,json=postalCode,proto3" json:"postal_code,omitempty" bson:"postal_code"`
	// The customer's state code in ISO 3166-2.
	State string `protobuf:"bytes,4,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *OrderBillingAddress) Reset() {
	*x = OrderBillingAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderBillingAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderBillingAddress) ProtoMessage() {}

func (x *OrderBillingAddress) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderBillingAddress.ProtoReflect.Descriptor instead.
func (*OrderBillingAddress) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{27}
}

func (x *OrderBillingAddress) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *OrderBillingAddress) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *OrderBillingAddress) GetPostalCode() string {
	if x != nil {
		return x.PostalCode
	}
	return ""
}

func (x *OrderBillingAddress) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

type OrderUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"-" faker:"objectIdString"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"-" faker:"objectIdString"`
	// @inject_tag: json:"-"
	Object string `protobuf:"bytes,2,opt,name=object,proto3" json:"-"`
	// @inject_tag: json:"external_id" bson:"external_id"
	//
	// The unique identifier for the customer in the merchant project.
	ExternalId string `protobuf:"bytes,3,opt,name=external_id,json=externalId,proto3" json:"external_id" bson:"external_id"`
	// @inject_tag: json:"name"
	//
	// The customer's name.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name"`
	// @inject_tag: json:"email" validate:"omitempty,email"
	//
	// The customer's email address.
	Email string `protobuf:"bytes,5,opt,name=email,proto3" json:"email" validate:"omitempty,email"`
	// @inject_tag: json:"email_verified" bson:"email_verified"
	//
	// Whether the customer's email address has been verified on the merchant side.
	EmailVerified bool `protobuf:"varint,6,opt,name=email_verified,json=emailVerified,proto3" json:"email_verified" bson:"email_verified"`
	// @inject_tag: json:"phone" validate:"omitempty,phone"
	//
	// The customer's phone number.
	Phone string `protobuf:"bytes,7,opt,name=phone,proto3" json:"phone" validate:"omitempty,phone"`
	// @inject_tag: json:"phone_verified" bson:"phone_verified"
	//
	// Whether the customer's phone number has been verified on the merchant side.
	PhoneVerified bool `protobuf:"varint,8,opt,name=phone_verified,json=phoneVerified,proto3" json:"phone_verified" bson:"phone_verified"`
	// @inject_tag: json:"ip" validate:"omitempty,ip"
	//
	// The customer's IP address.
	Ip string `protobuf:"bytes,9,opt,name=ip,proto3" json:"ip" validate:"omitempty,ip"`
	// @inject_tag: json:"locale" validate:"omitempty,alpha,len=2"
	//
	// The customer's locale name. The language code in ISO 639-1 (for instance en-US).
	Locale string `protobuf:"bytes,10,opt,name=locale,proto3" json:"locale" validate:"omitempty,alpha,len=2"`
	// @inject_tag: json:"address"
	//
	// The customer's address details.
	Address *OrderBillingAddress `protobuf:"bytes,11,opt,name=address,proto3" json:"address"`
	// @inject_tag: json:"metadata"
	//
	// A string-value description that you can attach to the customer's object. It can be useful for storing additional information about your customer's payment.
	Metadata map[string]string `protobuf:"bytes,12,rep,name=metadata,proto3" json:"metadata" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// @inject_tag: json:"-"
	TechEmail string `protobuf:"bytes,13,opt,name=tech_email,json=techEmail,proto3" json:"-"`
	//@inject_tag: json:"-" bson:"notify_new_region"
	NotifyNewRegion bool `protobuf:"varint,14,opt,name=notify_new_region,json=notifyNewRegion,proto3" json:"-" bson:"notify_new_region"`
	//@inject_tag: json:"-" bson:"notify_new_region_email"
	NotifyNewRegionEmail string `protobuf:"bytes,15,opt,name=notify_new_region_email,json=notifyNewRegionEmail,proto3" json:"-" bson:"notify_new_region_email"`
	// @inject_tag: json:"id" bson:"uuid"
	Uuid string `protobuf:"bytes,16,opt,name=uuid,proto3" json:"id" bson:"uuid"`
}

func (x *OrderUser) Reset() {
	*x = OrderUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderUser) ProtoMessage() {}

func (x *OrderUser) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderUser.ProtoReflect.Descriptor instead.
func (*OrderUser) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{28}
}

func (x *OrderUser) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *OrderUser) GetObject() string {
	if x != nil {
		return x.Object
	}
	return ""
}

func (x *OrderUser) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

func (x *OrderUser) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OrderUser) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *OrderUser) GetEmailVerified() bool {
	if x != nil {
		return x.EmailVerified
	}
	return false
}

func (x *OrderUser) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *OrderUser) GetPhoneVerified() bool {
	if x != nil {
		return x.PhoneVerified
	}
	return false
}

func (x *OrderUser) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *OrderUser) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

func (x *OrderUser) GetAddress() *OrderBillingAddress {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *OrderUser) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *OrderUser) GetTechEmail() string {
	if x != nil {
		return x.TechEmail
	}
	return ""
}

func (x *OrderUser) GetNotifyNewRegion() bool {
	if x != nil {
		return x.NotifyNewRegion
	}
	return false
}

func (x *OrderUser) GetNotifyNewRegionEmail() string {
	if x != nil {
		return x.NotifyNewRegionEmail
	}
	return ""
}

func (x *OrderUser) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type OrderNotificationCancellation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"code" bson:"code"
	//
	// The internal identity for the cancellation reason in PaySuper.
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code" bson:"code"`
	//@inject_tag: json:"reason" bson:"reason"
	//
	// The cancellation reason.
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason" bson:"reason"`
}

func (x *OrderNotificationCancellation) Reset() {
	*x = OrderNotificationCancellation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderNotificationCancellation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderNotificationCancellation) ProtoMessage() {}

func (x *OrderNotificationCancellation) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderNotificationCancellation.ProtoReflect.Descriptor instead.
func (*OrderNotificationCancellation) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{29}
}

func (x *OrderNotificationCancellation) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *OrderNotificationCancellation) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type Order struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"-" bson:"_id" faker:"objectIdString"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"-" bson:"_id" faker:"objectIdString"` // unique internal order identifier in Protocol One
	// @inject_tag: json:"id" bson:"uuid"
	//
	// The public unique identifier for the order in PaySuper.
	Uuid string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"id" bson:"uuid"`
	// @inject_tag: json:"transaction" bson:"pm_order_id"
	//
	// The unique identifier for the order in the payment system.
	Transaction string `protobuf:"bytes,3,opt,name=transaction,proto3" json:"transaction" bson:"pm_order_id"`
	// @inject_tag: json:"object" bson:"object"
	//
	// The system constant that contains the returned object's type.
	Object string `protobuf:"bytes,4,opt,name=object,proto3" json:"object" bson:"object"`
	// @inject_tag: json:"status" bson:"status"
	//
	// The current status of the order. Available values: created, processed, canceled, rejected, refunded, chargeback, pending.
	Status string `protobuf:"bytes,5,opt,name=status,proto3" json:"status" bson:"status"`
	// @inject_tag: json:"-" bson:"private_status"
	PrivateStatus int32 `protobuf:"varint,6,opt,name=private_status,json=privateStatus,proto3" json:"-" bson:"private_status"` // order status
	// @inject_tag: json:"description" bson:"description"
	//
	// The order's description.
	Description string `protobuf:"bytes,7,opt,name=description,proto3" json:"description" bson:"description"`
	// @inject_tag: bson:"created_at" bson:"created_at"
	//
	// The date of the order creation.
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty" bson:"created_at" bson:"created_at"`
	// @inject_tag: json:"-" bson:"updated_at"
	UpdatedAt *timestamp.Timestamp `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt,proto3" json:"-" bson:"updated_at"` // date of last update order data
	//@inject_tag: json:"canceled_at" bson:"canceled_at"
	//
	// The date of the order cancellation.
	CanceledAt *timestamp.Timestamp `protobuf:"bytes,10,opt,name=canceled_at,json=canceledAt,proto3" json:"canceled_at" bson:"canceled_at"`
	//@inject_tag: json:"canceled" bson:"canceled"
	//
	// Has a true value if the order is cancelled.
	Canceled bool `protobuf:"varint,11,opt,name=canceled,proto3" json:"canceled" bson:"canceled"`
	//@inject_tag: json:"cancellation" bson:"cancellation"
	//
	// The notification of cancellation.
	Cancellation *OrderNotificationCancellation `protobuf:"bytes,12,opt,name=cancellation,proto3" json:"cancellation" bson:"cancellation"`
	//@inject_tag: json:"refunded" bson:"refunded"
	//
	// Has a true value if the order is refunded.
	Refunded bool `protobuf:"varint,13,opt,name=refunded,proto3" json:"refunded" bson:"refunded"`
	//@inject_tag: json:"refunded_at" bson:"refunded_at"
	//
	// The date of the order refund.
	RefundedAt *timestamp.Timestamp `protobuf:"bytes,14,opt,name=refunded_at,json=refundedAt,proto3" json:"refunded_at" bson:"refunded_at"`
	// @inject_tag: json:"receipt_email" bson:"receipt_email"
	//
	// The customer's email that is used for the payment receipt.
	ReceiptEmail string `protobuf:"bytes,15,opt,name=receipt_email,json=receiptEmail,proto3" json:"receipt_email" bson:"receipt_email"`
	// @inject_tag: json:"receipt_phone" bson:"receipt_phone"
	//
	// The customer's phone who receives the payment receipt.
	ReceiptPhone string `protobuf:"bytes,16,opt,name=receipt_phone,json=receiptPhone,proto3" json:"receipt_phone" bson:"receipt_phone"`
	// @inject_tag: json:"receipt_number" bson:"receipt_number"
	//
	// The unique identifier for the order's receipt.
	ReceiptNumber string `protobuf:"bytes,17,opt,name=receipt_number,json=receiptNumber,proto3" json:"receipt_number" bson:"receipt_number"`
	// @inject_tag: json:"receipt_url" bson:"receipt_url"
	//
	// The URL in PaySuper service for online access to the receipt.
	ReceiptUrl string `protobuf:"bytes,18,opt,name=receipt_url,json=receiptUrl,proto3" json:"receipt_url" bson:"receipt_url"`
	//@inject_tag: json:"agreement_version" bson:"agreement_version" validate:"required"
	//
	// The license agreement version.
	AgreementVersion string `protobuf:"bytes,19,opt,name=agreement_version,json=agreementVersion,proto3" json:"agreement_version" bson:"agreement_version" validate:"required"`
	//@inject_tag: json:"agreement_accepted" bson:"agreement_accepted" validate:"required"
	//
	// Has a true value if the customer has accepted the license agreement.
	AgreementAccepted bool `protobuf:"varint,20,opt,name=agreement_accepted,json=agreementAccepted,proto3" json:"agreement_accepted" bson:"agreement_accepted" validate:"required"`
	//@inject_tag: json:"notify_sale" bson:"notify_sale" validate:"required"
	//
	// Has a true value if the customer has agreed to receive the sales notifications.
	NotifySale bool `protobuf:"varint,21,opt,name=notify_sale,json=notifySale,proto3" json:"notify_sale" bson:"notify_sale" validate:"required"`
	//@inject_tag: json:"notify_sale_email" bson:"notify_sale_email"
	//
	// The customer's email for the sales notifications.
	NotifySaleEmail string `protobuf:"bytes,22,opt,name=notify_sale_email,json=notifySaleEmail,proto3" json:"notify_sale_email" bson:"notify_sale_email"`
	//@inject_tag: json:"issuer" bson:"issuer" validate:"required"
	//
	// The order issuer data.
	Issuer *OrderIssuer `protobuf:"bytes,23,opt,name=issuer,proto3" json:"issuer" bson:"issuer" validate:"required"`
	//@inject_tag: json:"amount" bson:"total_payment_amount"
	//
	// The total payment amount including all commissions.
	TotalPaymentAmount float64 `protobuf:"fixed64,24,opt,name=total_payment_amount,json=totalPaymentAmount,proto3" json:"amount" bson:"total_payment_amount"`
	//@inject_tag: json:"currency" bson:"currency" validate:"required,alpha,len=3"
	//
	// The order currency. Three-letter Currency Code ISO 4217, in uppercase.
	Currency string `protobuf:"bytes,25,opt,name=currency,proto3" json:"currency" bson:"currency" validate:"required,alpha,len=3"`
	//@inject_tag: json:"user" bson:"user"
	//
	// The customer data.
	User *OrderUser `protobuf:"bytes,26,opt,name=user,proto3" json:"user" bson:"user"`
	//@inject_tag: json:"billing_address" bson:"billing_address"
	//
	// The customer's billing address entered in payment form.
	BillingAddress *OrderBillingAddress `protobuf:"bytes,27,opt,name=billing_address,json=billingAddress,proto3" json:"billing_address" bson:"billing_address"`
	//@inject_tag: json:"tax" bson:"tax"
	//
	// The tax in the order.
	Tax *OrderTax `protobuf:"bytes,28,opt,name=tax,proto3" json:"tax" bson:"tax"`
	// @inject_tag: json:"method" bson:"payment_method"
	//
	// The payment method data.
	PaymentMethod *PaymentMethodOrder `protobuf:"bytes,29,opt,name=payment_method,json=paymentMethod,proto3" json:"method" bson:"payment_method"`
	// @inject_tag: json:"items" bson:"items" validate="omitempty,gte=1,dive"
	//
	// The list of products in the order.
	Items []*OrderItem `protobuf:"bytes,30,rep,name=items,proto3" json:"items" bson:"items"`
	//@inject_tag: json:"refund" bson:"refund" validate:"omitempty,dive"
	//
	// The notification of the refund. Has a null value if the order is not refunded.
	Refund *OrderNotificationRefund `protobuf:"bytes,31,opt,name=refund,proto3" json:"refund" bson:"refund" validate:"omitempty,dive"`
	// @inject_tag: json:"metadata" bson:"metadata"
	//
	// Additional information that was sent as a string-value description from the merchant's project while the payment order creation.
	Metadata map[string]string `protobuf:"bytes,32,rep,name=metadata,proto3" json:"metadata" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" bson:"metadata"`
	// @inject_tag: json:"-" bson:"private_metadata"
	PrivateMetadata map[string]string `protobuf:"bytes,33,rep,name=private_metadata,json=privateMetadata,proto3" json:"-" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" bson:"private_metadata"`
	// @inject_tag: json:"-" bson:"project"
	Project *ProjectOrder `protobuf:"bytes,34,opt,name=project,proto3" json:"-" bson:"project"` // object described main entities of project in Protocol One payment solution
	// @inject_tag: json:"-" bson:"project_last_requested_at"
	ProjectLastRequestedAt *timestamp.Timestamp `protobuf:"bytes,37,opt,name=project_last_requested_at,json=projectLastRequestedAt,proto3" json:"-" bson:"project_last_requested_at"` // date of last notification request to project
	// @inject_tag: json:"-" bson:"project_params"
	ProjectParams map[string]string `protobuf:"bytes,38,rep,name=project_params,json=projectParams,proto3" json:"-" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" bson:"project_params"` // any project params which received from project in request of create of order
	// @inject_tag: json:"-" bson:"pm_order_close_date"
	PaymentMethodOrderClosedAt *timestamp.Timestamp `protobuf:"bytes,39,opt,name=payment_method_order_closed_at,json=paymentMethodOrderClosedAt,proto3" json:"-" bson:"pm_order_close_date"` // date of ended payment operation in payment system
	// @inject_tag: json:"-" bson:"created_by_json"
	IsJsonRequest bool `protobuf:"varint,40,opt,name=is_json_request,json=isJsonRequest,proto3" json:"-" bson:"created_by_json"` // is order create by json request
	// @inject_tag: json:"original_amount" bson:"private_amount" validate:"required,numeric,gt=0"
	//
	// The order amount excluding commissions.
	OrderAmount float64 `protobuf:"fixed64,41,opt,name=order_amount,json=orderAmount,proto3" json:"original_amount" bson:"private_amount" validate:"required,numeric,gt=0"`
	// @inject_tag: json:"-" bson:"pm_account"
	PaymentMethodPayerAccount string `protobuf:"bytes,42,opt,name=payment_method_payer_account,json=paymentMethodPayerAccount,proto3" json:"-" bson:"pm_account"` // account of payer in payment system
	// @inject_tag: json:"-" bson:"pm_txn_params"
	PaymentMethodTxnParams map[string]string `protobuf:"bytes,43,rep,name=payment_method_txn_params,json=paymentMethodTxnParams,proto3" json:"-" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" bson:"pm_txn_params"` // any params received in request of payment system about payment
	// @inject_tag: json:"-" bson:"payment_requisites"
	PaymentRequisites map[string]string `protobuf:"bytes,44,rep,name=payment_requisites,json=paymentRequisites,proto3" json:"-" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" bson:"payment_requisites"`
	// @inject_tag: json:"-" bson:"expire_date_to_form_input"
	ExpireDateToFormInput *timestamp.Timestamp `protobuf:"bytes,45,opt,name=expire_date_to_form_input,json=expireDateToFormInput,proto3" json:"-" bson:"expire_date_to_form_input"`
	// @inject_tag: json:"-" bson:"user_address_data_required"
	UserAddressDataRequired bool `protobuf:"varint,46,opt,name=user_address_data_required,json=userAddressDataRequired,proto3" json:"-" bson:"user_address_data_required"`
	// @inject_tag: json:"-" bson:"products" validate:"omitempty,gte=1,dive,hexadecimal,len=24"
	Products []string `protobuf:"bytes,47,rep,name=products,proto3" json:"-" bson:"products" validate:"omitempty,gte=1,dive,hexadecimal,len=24"`
	// @inject_tag: json:"-" bson:"is_notifications_sent"
	IsNotificationsSent map[string]bool `protobuf:"bytes,48,rep,name=is_notifications_sent,json=isNotificationsSent,proto3" json:"-" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3" bson:"is_notifications_sent"`
	// @inject_tag: json:"-" bson:"country_restriction"
	CountryRestriction *CountryRestriction `protobuf:"bytes,49,opt,name=country_restriction,json=countryRestriction,proto3" json:"-" bson:"country_restriction"`
	//@inject_tag: json:"country" bson:"country" validate:"omitempty,alpha,len=2"
	//
	// The customer's country code. Two-letter country code in ISO 3166-1, in uppercase.
	CountryCode string `protobuf:"bytes,50,opt,name=country_code,json=countryCode,proto3" json:"country" bson:"country" validate:"omitempty,alpha,len=2"`
	// @inject_tag: json:"-"
	ParentOrder *ParentOrder `protobuf:"bytes,51,opt,name=parent_order,json=parentOrder,proto3" json:"-"`
	// @inject_tag: json:"-"
	ParentPaymentAt *timestamp.Timestamp `protobuf:"bytes,52,opt,name=parent_payment_at,json=parentPaymentAt,proto3" json:"-"`
	// @inject_tag: json:"-"
	Type string `protobuf:"bytes,53,opt,name=type,proto3" json:"-"`
	// @inject_tag: json:"-"
	IsVatDeduction bool `protobuf:"varint,54,opt,name=is_vat_deduction,json=isVatDeduction,proto3" json:"-"`
	// @inject_tag: validate="oneof=simple product key virtual_currency" json:"type"
	//
	// The type of the order's product. Available values: simple, product, key, virtual_currency.
	ProductType string `protobuf:"bytes,69,opt,name=product_type,json=productType,proto3" json:"type"`
	// @inject_tag: json:"platform_id"
	//
	// The default platform's name for which the customer buys a key. This field is used only for the key type. Available values: steam, gog, uplay, origin, psn, xbox, nintendo, itch, egs.
	PlatformId string `protobuf:"bytes,70,opt,name=platform_id,json=platformId,proto3" json:"platform_id"`
	// @inject_tag: json:"-" bson:"keys"
	Keys []string `protobuf:"bytes,71,rep,name=keys,proto3" json:"-" bson:"keys"`
	// @inject_tag: json:"-"
	IsKeyProductNotified bool `protobuf:"varint,72,opt,name=is_key_product_notified,json=isKeyProductNotified,proto3" json:"-"`
	// @inject_tag: json:"receipt_id" bson:"receipt_id"
	//
	// The public unique identifier for the receipt.
	ReceiptId string `protobuf:"bytes,73,opt,name=receipt_id,json=receiptId,proto3" json:"receipt_id" bson:"receipt_id"`
	// @inject_tag: json:"virtual_currency_amount" bson:"virtual_currency_amount"
	//
	// The amount in the project's virtual currency.
	VirtualCurrencyAmount float64 `protobuf:"fixed64,74,opt,name=virtual_currency_amount,json=virtualCurrencyAmount,proto3" json:"virtual_currency_amount" bson:"virtual_currency_amount"`
	// @inject_tag: json:"is_buy_for_virtual_currency" bson:"is_buy_for_virtual_currency"
	//
	// Has a true value if the order amount was in the project's virtual currency.
	IsBuyForVirtualCurrency bool `protobuf:"varint,75,opt,name=is_buy_for_virtual_currency,json=isBuyForVirtualCurrency,proto3" json:"is_buy_for_virtual_currency" bson:"is_buy_for_virtual_currency"`
	// @inject_tag: json:"-"
	MccCode string `protobuf:"bytes,76,opt,name=mcc_code,json=mccCode,proto3" json:"-"`
	// @inject_tag: json:"-"
	OperatingCompanyId string `protobuf:"bytes,77,opt,name=operating_company_id,json=operatingCompanyId,proto3" json:"-"`
	// @inject_tag: json:"-"
	IsHighRisk bool `protobuf:"varint,78,opt,name=is_high_risk,json=isHighRisk,proto3" json:"-"`
	// @inject_tag: json:"-"
	IsCurrencyPredefined bool `protobuf:"varint,79,opt,name=is_currency_predefined,json=isCurrencyPredefined,proto3" json:"-"`
	// @inject_tag: json:"charge_currency"
	//
	// The currency of the order charge. It can differ from the order currency because it also depends on the customer's card currency.
	ChargeCurrency string `protobuf:"bytes,80,opt,name=charge_currency,json=chargeCurrency,proto3" json:"charge_currency"`
	// @inject_tag: json:"charge_amount"
	//
	// The total amount of the order charge.
	ChargeAmount float64 `protobuf:"fixed64,81,opt,name=charge_amount,json=chargeAmount,proto3" json:"charge_amount"`
	// @inject_tag: json:"-"
	PaymentIpCountry string `protobuf:"bytes,82,opt,name=payment_ip_country,json=paymentIpCountry,proto3" json:"-"`
	// @inject_tag: json:"-"
	IsIpCountryMismatchBin bool `protobuf:"varint,83,opt,name=is_ip_country_mismatch_bin,json=isIpCountryMismatchBin,proto3" json:"-"`
	// @inject_tag: json:"-"
	BillingCountryChangedByUser bool `protobuf:"varint,84,opt,name=billing_country_changed_by_user,json=billingCountryChangedByUser,proto3" json:"-"`
	// @inject_tag: json:"-"
	IsRefundAllowed bool `protobuf:"varint,85,opt,name=is_refund_allowed,json=isRefundAllowed,proto3" json:"-"`
	// @inject_tag: json:"vat_payer" bson:"vat_payer" validate:"oneof=buyer seller nobody"
	//
	// The responsible for VAT. Available values: buyer (VAT is added to the order charge), seller (VAT is included in the order charge), nobody (VAT exempt).
	VatPayer string `protobuf:"bytes,86,opt,name=vat_payer,json=vatPayer,proto3" json:"vat_payer" bson:"vat_payer" validate:"oneof=buyer seller nobody"`
	// @inject_tag: json:"is_production"
	//
	// Has a true value for a production payment and false for a test payment that goes through a test sandbox.
	IsProduction bool `protobuf:"varint,87,opt,name=is_production,json=isProduction,proto3" json:"is_production"`
	// @inject_tag: json:"testing_case"
	//
	// The webhook testing mode. Available values: correct_payment, non_existing_user, existing_user, invalid_signature.
	TestingCase string `protobuf:"bytes,88,opt,name=testing_case,json=testingCase,proto3" json:"testing_case"`
	//@inject_tag: json:"form_mode"
	//
	//The opening mode of the payment form on the project side. Available values: embed, iframe, standalone. Default value: embed.
	FormMode string `protobuf:"bytes,89,opt,name=form_mode,json=formMode,proto3" json:"form_mode"`
	// @inject_tag: json:"merchant_info" bson:"merchant_info"
	//
	// The merchant's company data.
	MerchantInfo *OrderViewMerchantInfo `protobuf:"bytes,90,opt,name=merchant_info,json=merchantInfo,proto3" json:"merchant_info" bson:"merchant_info"`
	// @inject_tag: json:"-"
	//
	// The royalty report's identifier which include this order
	RoyaltyReportId string `protobuf:"bytes,91,opt,name=royalty_report_id,json=royaltyReportId,proto3" json:"-"`
	// @inject_tag: json:"net_revenue"
	//
	// Net revenue for order
	NetRevenue *OrderViewMoney `protobuf:"bytes,92,opt,name=net_revenue,json=netRevenue,proto3" json:"net_revenue"`
	// @inject_tag: json:"fee"
	//
	// Fee for order
	Fee *OrderViewMoney `protobuf:"bytes,93,opt,name=fee,proto3" json:"fee"`
	// @inject_tag: json:"-" faker:"-"
	//
	// DEPRECATED! Use the recurring_plan_id property
	// Recurring settings for order
	RecurringSettings *OrderRecurringSettings `protobuf:"bytes,94,opt,name=recurring_settings,json=recurringSettings,proto3" json:"-" faker:"-"`
	// @inject_tag: json:"recurring" faker:"-"
	//
	// DEPRECATED! Use the recurring_subscription_id property
	// Exists recurring for order
	Recurring bool `protobuf:"varint,95,opt,name=recurring,proto3" json:"recurring" faker:"-"`
	// @inject_tag: json:"recurring_id" faker:"-"
	//
	// DEPRECATED! Use the recurring_subscription_id property
	// Recurring identity for order
	RecurringId string `protobuf:"bytes,96,opt,name=recurring_id,json=recurringId,proto3" json:"recurring_id" faker:"-"`
	// @inject_tag: json:"recurring_subscription_id"
	//
	// Identity of recurring subscription for order
	RecurringSubscriptionId string `protobuf:"bytes,97,opt,name=recurring_subscription_id,json=recurringSubscriptionId,proto3" json:"recurring_subscription_id"`
	// @inject_tag: json:"recurring_plan_id"
	//
	// Identity of recurring plan for order
	RecurringPlanId string `protobuf:"bytes,98,opt,name=recurring_plan_id,json=recurringPlanId,proto3" json:"recurring_plan_id"`
}

func (x *Order) Reset() {
	*x = Order{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order) ProtoMessage() {}

func (x *Order) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order.ProtoReflect.Descriptor instead.
func (*Order) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{30}
}

func (x *Order) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Order) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Order) GetTransaction() string {
	if x != nil {
		return x.Transaction
	}
	return ""
}

func (x *Order) GetObject() string {
	if x != nil {
		return x.Object
	}
	return ""
}

func (x *Order) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Order) GetPrivateStatus() int32 {
	if x != nil {
		return x.PrivateStatus
	}
	return 0
}

func (x *Order) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Order) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Order) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Order) GetCanceledAt() *timestamp.Timestamp {
	if x != nil {
		return x.CanceledAt
	}
	return nil
}

func (x *Order) GetCanceled() bool {
	if x != nil {
		return x.Canceled
	}
	return false
}

func (x *Order) GetCancellation() *OrderNotificationCancellation {
	if x != nil {
		return x.Cancellation
	}
	return nil
}

func (x *Order) GetRefunded() bool {
	if x != nil {
		return x.Refunded
	}
	return false
}

func (x *Order) GetRefundedAt() *timestamp.Timestamp {
	if x != nil {
		return x.RefundedAt
	}
	return nil
}

func (x *Order) GetReceiptEmail() string {
	if x != nil {
		return x.ReceiptEmail
	}
	return ""
}

func (x *Order) GetReceiptPhone() string {
	if x != nil {
		return x.ReceiptPhone
	}
	return ""
}

func (x *Order) GetReceiptNumber() string {
	if x != nil {
		return x.ReceiptNumber
	}
	return ""
}

func (x *Order) GetReceiptUrl() string {
	if x != nil {
		return x.ReceiptUrl
	}
	return ""
}

func (x *Order) GetAgreementVersion() string {
	if x != nil {
		return x.AgreementVersion
	}
	return ""
}

func (x *Order) GetAgreementAccepted() bool {
	if x != nil {
		return x.AgreementAccepted
	}
	return false
}

func (x *Order) GetNotifySale() bool {
	if x != nil {
		return x.NotifySale
	}
	return false
}

func (x *Order) GetNotifySaleEmail() string {
	if x != nil {
		return x.NotifySaleEmail
	}
	return ""
}

func (x *Order) GetIssuer() *OrderIssuer {
	if x != nil {
		return x.Issuer
	}
	return nil
}

func (x *Order) GetTotalPaymentAmount() float64 {
	if x != nil {
		return x.TotalPaymentAmount
	}
	return 0
}

func (x *Order) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *Order) GetUser() *OrderUser {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Order) GetBillingAddress() *OrderBillingAddress {
	if x != nil {
		return x.BillingAddress
	}
	return nil
}

func (x *Order) GetTax() *OrderTax {
	if x != nil {
		return x.Tax
	}
	return nil
}

func (x *Order) GetPaymentMethod() *PaymentMethodOrder {
	if x != nil {
		return x.PaymentMethod
	}
	return nil
}

func (x *Order) GetItems() []*OrderItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *Order) GetRefund() *OrderNotificationRefund {
	if x != nil {
		return x.Refund
	}
	return nil
}

func (x *Order) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Order) GetPrivateMetadata() map[string]string {
	if x != nil {
		return x.PrivateMetadata
	}
	return nil
}

func (x *Order) GetProject() *ProjectOrder {
	if x != nil {
		return x.Project
	}
	return nil
}

func (x *Order) GetProjectLastRequestedAt() *timestamp.Timestamp {
	if x != nil {
		return x.ProjectLastRequestedAt
	}
	return nil
}

func (x *Order) GetProjectParams() map[string]string {
	if x != nil {
		return x.ProjectParams
	}
	return nil
}

func (x *Order) GetPaymentMethodOrderClosedAt() *timestamp.Timestamp {
	if x != nil {
		return x.PaymentMethodOrderClosedAt
	}
	return nil
}

func (x *Order) GetIsJsonRequest() bool {
	if x != nil {
		return x.IsJsonRequest
	}
	return false
}

func (x *Order) GetOrderAmount() float64 {
	if x != nil {
		return x.OrderAmount
	}
	return 0
}

func (x *Order) GetPaymentMethodPayerAccount() string {
	if x != nil {
		return x.PaymentMethodPayerAccount
	}
	return ""
}

func (x *Order) GetPaymentMethodTxnParams() map[string]string {
	if x != nil {
		return x.PaymentMethodTxnParams
	}
	return nil
}

func (x *Order) GetPaymentRequisites() map[string]string {
	if x != nil {
		return x.PaymentRequisites
	}
	return nil
}

func (x *Order) GetExpireDateToFormInput() *timestamp.Timestamp {
	if x != nil {
		return x.ExpireDateToFormInput
	}
	return nil
}

func (x *Order) GetUserAddressDataRequired() bool {
	if x != nil {
		return x.UserAddressDataRequired
	}
	return false
}

func (x *Order) GetProducts() []string {
	if x != nil {
		return x.Products
	}
	return nil
}

func (x *Order) GetIsNotificationsSent() map[string]bool {
	if x != nil {
		return x.IsNotificationsSent
	}
	return nil
}

func (x *Order) GetCountryRestriction() *CountryRestriction {
	if x != nil {
		return x.CountryRestriction
	}
	return nil
}

func (x *Order) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *Order) GetParentOrder() *ParentOrder {
	if x != nil {
		return x.ParentOrder
	}
	return nil
}

func (x *Order) GetParentPaymentAt() *timestamp.Timestamp {
	if x != nil {
		return x.ParentPaymentAt
	}
	return nil
}

func (x *Order) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Order) GetIsVatDeduction() bool {
	if x != nil {
		return x.IsVatDeduction
	}
	return false
}

func (x *Order) GetProductType() string {
	if x != nil {
		return x.ProductType
	}
	return ""
}

func (x *Order) GetPlatformId() string {
	if x != nil {
		return x.PlatformId
	}
	return ""
}

func (x *Order) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *Order) GetIsKeyProductNotified() bool {
	if x != nil {
		return x.IsKeyProductNotified
	}
	return false
}

func (x *Order) GetReceiptId() string {
	if x != nil {
		return x.ReceiptId
	}
	return ""
}

func (x *Order) GetVirtualCurrencyAmount() float64 {
	if x != nil {
		return x.VirtualCurrencyAmount
	}
	return 0
}

func (x *Order) GetIsBuyForVirtualCurrency() bool {
	if x != nil {
		return x.IsBuyForVirtualCurrency
	}
	return false
}

func (x *Order) GetMccCode() string {
	if x != nil {
		return x.MccCode
	}
	return ""
}

func (x *Order) GetOperatingCompanyId() string {
	if x != nil {
		return x.OperatingCompanyId
	}
	return ""
}

func (x *Order) GetIsHighRisk() bool {
	if x != nil {
		return x.IsHighRisk
	}
	return false
}

func (x *Order) GetIsCurrencyPredefined() bool {
	if x != nil {
		return x.IsCurrencyPredefined
	}
	return false
}

func (x *Order) GetChargeCurrency() string {
	if x != nil {
		return x.ChargeCurrency
	}
	return ""
}

func (x *Order) GetChargeAmount() float64 {
	if x != nil {
		return x.ChargeAmount
	}
	return 0
}

func (x *Order) GetPaymentIpCountry() string {
	if x != nil {
		return x.PaymentIpCountry
	}
	return ""
}

func (x *Order) GetIsIpCountryMismatchBin() bool {
	if x != nil {
		return x.IsIpCountryMismatchBin
	}
	return false
}

func (x *Order) GetBillingCountryChangedByUser() bool {
	if x != nil {
		return x.BillingCountryChangedByUser
	}
	return false
}

func (x *Order) GetIsRefundAllowed() bool {
	if x != nil {
		return x.IsRefundAllowed
	}
	return false
}

func (x *Order) GetVatPayer() string {
	if x != nil {
		return x.VatPayer
	}
	return ""
}

func (x *Order) GetIsProduction() bool {
	if x != nil {
		return x.IsProduction
	}
	return false
}

func (x *Order) GetTestingCase() string {
	if x != nil {
		return x.TestingCase
	}
	return ""
}

func (x *Order) GetFormMode() string {
	if x != nil {
		return x.FormMode
	}
	return ""
}

func (x *Order) GetMerchantInfo() *OrderViewMerchantInfo {
	if x != nil {
		return x.MerchantInfo
	}
	return nil
}

func (x *Order) GetRoyaltyReportId() string {
	if x != nil {
		return x.RoyaltyReportId
	}
	return ""
}

func (x *Order) GetNetRevenue() *OrderViewMoney {
	if x != nil {
		return x.NetRevenue
	}
	return nil
}

func (x *Order) GetFee() *OrderViewMoney {
	if x != nil {
		return x.Fee
	}
	return nil
}

func (x *Order) GetRecurringSettings() *OrderRecurringSettings {
	if x != nil {
		return x.RecurringSettings
	}
	return nil
}

func (x *Order) GetRecurring() bool {
	if x != nil {
		return x.Recurring
	}
	return false
}

func (x *Order) GetRecurringId() string {
	if x != nil {
		return x.RecurringId
	}
	return ""
}

func (x *Order) GetRecurringSubscriptionId() string {
	if x != nil {
		return x.RecurringSubscriptionId
	}
	return ""
}

func (x *Order) GetRecurringPlanId() string {
	if x != nil {
		return x.RecurringPlanId
	}
	return ""
}

// Use for order receipt
type OrderRecurringSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"period" validate:"required,oneof=day week month" required:"true" bson:"period"
	//
	// Recurring period of order. Available values: day, week, month.
	Period string `protobuf:"bytes,1,opt,name=period,proto3" json:"period" validate:"required,oneof=day week month" required:"true" bson:"period"`
	//@inject_tag: json:"date_end" validate:"omitempty,date" bson:"date_end"
	//
	// End date of recurring period for order.
	DateEnd string `protobuf:"bytes,2,opt,name=date_end,json=dateEnd,proto3" json:"date_end" validate:"omitempty,date" bson:"date_end"`
	//@inject_tag: json:"interval" bson:"interval"
	//
	// he frequency interval of recurring period.
	Interval int32 `protobuf:"varint,3,opt,name=interval,proto3" json:"interval" bson:"interval"`
}

func (x *OrderRecurringSettings) Reset() {
	*x = OrderRecurringSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderRecurringSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderRecurringSettings) ProtoMessage() {}

func (x *OrderRecurringSettings) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderRecurringSettings.ProtoReflect.Descriptor instead.
func (*OrderRecurringSettings) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{31}
}

func (x *OrderRecurringSettings) GetPeriod() string {
	if x != nil {
		return x.Period
	}
	return ""
}

func (x *OrderRecurringSettings) GetDateEnd() string {
	if x != nil {
		return x.DateEnd
	}
	return ""
}

func (x *OrderRecurringSettings) GetInterval() int32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

type ParentOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"id" faker:"objectIdString"
	//
	// The internal unique identifier for the order in PaySuper.
	Id string `protobuf:"bytes,51,opt,name=id,proto3" json:"id" faker:"objectIdString"`
	// @inject_tag: json:"uuid"
	//
	// The public unique identifier for the order in PaySuper.
	Uuid string `protobuf:"bytes,52,opt,name=uuid,proto3" json:"uuid"`
}

func (x *ParentOrder) Reset() {
	*x = ParentOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParentOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParentOrder) ProtoMessage() {}

func (x *ParentOrder) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParentOrder.ProtoReflect.Descriptor instead.
func (*ParentOrder) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{32}
}

func (x *ParentOrder) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ParentOrder) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type CountryRestriction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"iso_code_a2" bson:"iso_code_a2" validate:"alpha,len=2"
	IsoCodeA2 string `protobuf:"bytes,1,opt,name=iso_code_a2,json=isoCodeA2,proto3" json:"iso_code_a2" bson:"iso_code_a2" validate:"alpha,len=2"`
	//@inject_tag: json:"payments_allowed" bson:"payments_allowed"
	PaymentsAllowed bool `protobuf:"varint,2,opt,name=payments_allowed,json=paymentsAllowed,proto3" json:"payments_allowed" bson:"payments_allowed"`
	//@inject_tag: json:"change_allowed" bson:"change_allowed"
	ChangeAllowed bool `protobuf:"varint,3,opt,name=change_allowed,json=changeAllowed,proto3" json:"change_allowed" bson:"change_allowed"`
}

func (x *CountryRestriction) Reset() {
	*x = CountryRestriction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountryRestriction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountryRestriction) ProtoMessage() {}

func (x *CountryRestriction) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountryRestriction.ProtoReflect.Descriptor instead.
func (*CountryRestriction) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{33}
}

func (x *CountryRestriction) GetIsoCodeA2() string {
	if x != nil {
		return x.IsoCodeA2
	}
	return ""
}

func (x *CountryRestriction) GetPaymentsAllowed() bool {
	if x != nil {
		return x.PaymentsAllowed
	}
	return false
}

func (x *CountryRestriction) GetChangeAllowed() bool {
	if x != nil {
		return x.ChangeAllowed
	}
	return false
}

type OrderItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"required,hexadecimal,len=24" json:"id" bson:"_id" required:"true" faker:"objectIdString"
	//
	// The unique identifier for the item.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id" validate:"required,hexadecimal,len=24" bson:"_id" required:"true" faker:"objectIdString"`
	//@inject_tag: validate:"required" json:"object" bson:"object" required:"true"
	//
	// String representing the item’s type.
	Object string `protobuf:"bytes,2,opt,name=object,proto3" json:"object" validate:"required" bson:"object" required:"true"`
	//@inject_tag: validate:"required" json:"sku" bson:"sku" required:"true"
	//
	// The SKU of the product.
	Sku string `protobuf:"bytes,3,opt,name=sku,proto3" json:"sku" validate:"required" bson:"sku" required:"true"`
	//@inject_tag: validate:"required" json:"name" bson:"name" required:"true"
	//
	// The item's name.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name" validate:"required" bson:"name" required:"true"`
	//@inject_tag: validate:"required" json:"description" bson:"description" required:"true"
	//
	// The item's description.
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description" validate:"required" bson:"description" required:"true"`
	// @inject_tag: validate:"required,numeric,gt=0" json:"amount" bson:"amount" required:"true"
	//
	// The item's price.
	Amount float64 `protobuf:"fixed64,6,opt,name=amount,proto3" json:"amount" validate:"required,numeric,gt=0" bson:"amount" required:"true"`
	//@inject_tag: validate:"required,alpha,len=3" json:"currency" bson:"currency" required:"true"
	//
	// The item's price currency. Three-letter Currency Code ISO 4217, in uppercase.
	Currency string `protobuf:"bytes,7,opt,name=currency,proto3" json:"currency" validate:"required,alpha,len=3" bson:"currency" required:"true"`
	//@inject_tag: validate:"dive,omitempty,uri" json:"images" bson:"images"
	//
	// The item's images URL list.
	Images []string `protobuf:"bytes,8,rep,name=images,proto3" json:"images" validate:"dive,omitempty,uri" bson:"images"`
	//@inject_tag: validate:"omitempty,url" json:"url" bson:"url"
	//
	// The item's URL in the merchant project.
	Url string `protobuf:"bytes,9,opt,name=url,proto3" json:"url" validate:"omitempty,url" bson:"url"`
	//@inject_tag: json:"metadata" bson:"metadata"
	//
	// The string-value description for the item.
	Metadata map[string]string `protobuf:"bytes,10,rep,name=metadata,proto3" json:"metadata" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" bson:"metadata"`
	//@inject_tag: json:"created_at" bson:"created_at"
	//
	// The date of the product creation.
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,11,opt,name=created_at,json=createdAt,proto3" json:"created_at" bson:"created_at"`
	//@inject_tag: json:"updated_at" bson:"updated_at"
	//
	// The date of the product last update.
	UpdatedAt *timestamp.Timestamp `protobuf:"bytes,12,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at" bson:"updated_at"`
	//@inject_tag: validate:"omitempty,min=3" json:"platform_id" bson:"platform_id"
	//
	// The unique identifier for the platform.
	PlatformId string `protobuf:"bytes,13,opt,name=platform_id,json=platformId,proto3" json:"platform_id" validate:"omitempty,min=3" bson:"platform_id"`
	//@inject_tag: validate:"omitempty,min=5" json:"code" bson:"code"
	//
	// The activation code.
	Code string `protobuf:"bytes,14,opt,name=code,proto3" json:"code" validate:"omitempty,min=5" bson:"code"`
}

func (x *OrderItem) Reset() {
	*x = OrderItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderItem) ProtoMessage() {}

func (x *OrderItem) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderItem.ProtoReflect.Descriptor instead.
func (*OrderItem) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{34}
}

func (x *OrderItem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *OrderItem) GetObject() string {
	if x != nil {
		return x.Object
	}
	return ""
}

func (x *OrderItem) GetSku() string {
	if x != nil {
		return x.Sku
	}
	return ""
}

func (x *OrderItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OrderItem) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *OrderItem) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *OrderItem) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *OrderItem) GetImages() []string {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *OrderItem) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *OrderItem) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *OrderItem) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *OrderItem) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *OrderItem) GetPlatformId() string {
	if x != nil {
		return x.PlatformId
	}
	return ""
}

func (x *OrderItem) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type OrderPaginate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"count"
	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count"` // total count of selected orders
	// @inject_tag: json:"items"
	Items []*Order `protobuf:"bytes,2,rep,name=items,proto3" json:"items"` // array of selected orders
}

func (x *OrderPaginate) Reset() {
	*x = OrderPaginate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderPaginate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderPaginate) ProtoMessage() {}

func (x *OrderPaginate) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderPaginate.ProtoReflect.Descriptor instead.
func (*OrderPaginate) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{35}
}

func (x *OrderPaginate) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *OrderPaginate) GetItems() []*Order {
	if x != nil {
		return x.Items
	}
	return nil
}

type PaymentMethodOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"-" bson:"_id" faker:"objectIdString"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"-" bson:"_id" faker:"objectIdString"`
	// @inject_tag: json:"title" bson:"name"
	//
	// The payment method's name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"title" bson:"name"`
	// @inject_tag: bson:"external_id" json:"external_id"
	//
	// The unique identifier for the payment method in the payment system.
	ExternalId string `protobuf:"bytes,3,opt,name=external_id,json=externalId,proto3" json:"external_id" bson:"external_id"`
	// @inject_tag: json:"-" bson:"params"
	Params *PaymentMethodParams `protobuf:"bytes,4,opt,name=params,proto3" json:"-" bson:"params"`
	// @inject_tag: bson:"payment_system_id" json:"payment_system_id" faker:"objectIdString"
	//
	// The unique identifier for the payment system in PaySuper.
	PaymentSystemId string `protobuf:"bytes,5,opt,name=payment_system_id,json=paymentSystemId,proto3" json:"payment_system_id" bson:"payment_system_id" faker:"objectIdString"`
	// @inject_tag: json:"type" bson:"group_alias"
	//
	// The payment method's group alias.
	Group string `protobuf:"bytes,6,opt,name=group,proto3" json:"type" bson:"group_alias"`
	// @inject_tag: json:"saved" bson:"saved"
	//
	// Has a true value if contains a saved card as a payment method.
	Saved bool `protobuf:"varint,7,opt,name=saved,proto3" json:"saved" bson:"saved"`
	//@inject_tag: json:"card" bson:"card"
	//
	// Information about the card payment method.
	Card *PaymentMethodCard `protobuf:"bytes,8,opt,name=card,proto3" json:"card" bson:"card"`
	//@inject_tag: json:"wallet" bson:"wallet"
	//
	// Information about the wallet payment method.
	Wallet *PaymentMethodWallet `protobuf:"bytes,9,opt,name=wallet,proto3" json:"wallet" bson:"wallet"`
	//@inject_tag: json:"crypto_currency" bson:"crypto_currency"
	//
	// Information about the crypto payment method.
	CryptoCurrency *PaymentMethodCrypto `protobuf:"bytes,10,opt,name=crypto_currency,json=cryptoCurrency,proto3" json:"crypto_currency" bson:"crypto_currency"`
	// @inject_tag: json:"handler" bson:"handler"
	//
	// The unique identifier for handler of the payment system in PaySuper.
	Handler string `protobuf:"bytes,11,opt,name=handler,proto3" json:"handler" bson:"handler"`
	// @inject_tag: json:"refund_allowed" bson:"refund_allowed"
	//
	// Has a true value if the payment method allows a refund.
	RefundAllowed bool `protobuf:"varint,12,opt,name=refund_allowed,json=refundAllowed,proto3" json:"refund_allowed" bson:"refund_allowed"`
	// @inject_tag: json:"recurring_allowed" bson:"recurring_allowed"
	//
	// Has a true value if the payment method allows a recurring.
	RecurringAllowed bool `protobuf:"varint,13,opt,name=recurring_allowed,json=recurringAllowed,proto3" json:"recurring_allowed" bson:"recurring_allowed"`
}

func (x *PaymentMethodOrder) Reset() {
	*x = PaymentMethodOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentMethodOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentMethodOrder) ProtoMessage() {}

func (x *PaymentMethodOrder) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentMethodOrder.ProtoReflect.Descriptor instead.
func (*PaymentMethodOrder) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{36}
}

func (x *PaymentMethodOrder) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PaymentMethodOrder) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PaymentMethodOrder) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

func (x *PaymentMethodOrder) GetParams() *PaymentMethodParams {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *PaymentMethodOrder) GetPaymentSystemId() string {
	if x != nil {
		return x.PaymentSystemId
	}
	return ""
}

func (x *PaymentMethodOrder) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *PaymentMethodOrder) GetSaved() bool {
	if x != nil {
		return x.Saved
	}
	return false
}

func (x *PaymentMethodOrder) GetCard() *PaymentMethodCard {
	if x != nil {
		return x.Card
	}
	return nil
}

func (x *PaymentMethodOrder) GetWallet() *PaymentMethodWallet {
	if x != nil {
		return x.Wallet
	}
	return nil
}

func (x *PaymentMethodOrder) GetCryptoCurrency() *PaymentMethodCrypto {
	if x != nil {
		return x.CryptoCurrency
	}
	return nil
}

func (x *PaymentMethodOrder) GetHandler() string {
	if x != nil {
		return x.Handler
	}
	return ""
}

func (x *PaymentMethodOrder) GetRefundAllowed() bool {
	if x != nil {
		return x.RefundAllowed
	}
	return false
}

func (x *PaymentMethodOrder) GetRecurringAllowed() bool {
	if x != nil {
		return x.RecurringAllowed
	}
	return false
}

type PaymentMethodParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: bson:"currency" json:"currency" validate:"required,alpha,len=3"
	//
	// The currency of the payment method. Three-letter Currency Code ISO 4217, in uppercase.
	Currency string `protobuf:"bytes,1,opt,name=currency,proto3" json:"currency" bson:"currency" validate:"required,alpha,len=3"`
	// @inject_tag: bson:"terminal_id" json:"-" validate:"omitempty,alphanum"
	TerminalId string `protobuf:"bytes,2,opt,name=terminal_id,json=terminalId,proto3" json:"-" bson:"terminal_id" validate:"omitempty,alphanum"`
	// @inject_tag: bson:"secret" json:"-" validate:"omitempty"
	Secret string `protobuf:"bytes,3,opt,name=secret,proto3" json:"-" bson:"secret" validate:"omitempty"`
	// @inject_tag: bson:"secret_callback" json:"-" validate:"omitempty"
	SecretCallback string `protobuf:"bytes,5,opt,name=secret_callback,json=secretCallback,proto3" json:"-" bson:"secret_callback" validate:"omitempty"`
	// @inject_tag: bson:"api_url" json:"-"
	ApiUrl string `protobuf:"bytes,6,opt,name=api_url,json=apiUrl,proto3" json:"-" bson:"api_url"`
	// @inject_tag: bson:"mcc_code" json:"mcc_code" validate:"required,numeric,len=4"
	//
	// The Merchant Category Code (MCC) is a four-digit number listed in ISO 18245.
	MccCode string `protobuf:"bytes,7,opt,name=mcc_code,json=mccCode,proto3" json:"mcc_code" bson:"mcc_code" validate:"required,numeric,len=4"`
	// @inject_tag: bson:"operating_company_id" json:"operating_company_id" validate:"required,hexadecimal,len=24"
	//
	// The unique identifier for the operating company.
	OperatingCompanyId string `protobuf:"bytes,8,opt,name=operating_company_id,json=operatingCompanyId,proto3" json:"operating_company_id" bson:"operating_company_id" validate:"required,hexadecimal,len=24"`
	// @inject_tag: bson:"brand" json:"brand" validate:"required"
	//
	// The list of the card issuer brands.
	Brand []string `protobuf:"bytes,9,rep,name=brand,proto3" json:"brand" bson:"brand" validate:"required"`
}

func (x *PaymentMethodParams) Reset() {
	*x = PaymentMethodParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentMethodParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentMethodParams) ProtoMessage() {}

func (x *PaymentMethodParams) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentMethodParams.ProtoReflect.Descriptor instead.
func (*PaymentMethodParams) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{37}
}

func (x *PaymentMethodParams) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *PaymentMethodParams) GetTerminalId() string {
	if x != nil {
		return x.TerminalId
	}
	return ""
}

func (x *PaymentMethodParams) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *PaymentMethodParams) GetSecretCallback() string {
	if x != nil {
		return x.SecretCallback
	}
	return ""
}

func (x *PaymentMethodParams) GetApiUrl() string {
	if x != nil {
		return x.ApiUrl
	}
	return ""
}

func (x *PaymentMethodParams) GetMccCode() string {
	if x != nil {
		return x.MccCode
	}
	return ""
}

func (x *PaymentMethodParams) GetOperatingCompanyId() string {
	if x != nil {
		return x.OperatingCompanyId
	}
	return ""
}

func (x *PaymentMethodParams) GetBrand() []string {
	if x != nil {
		return x.Brand
	}
	return nil
}

type PaymentSystem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: bson:"_id" structure:"_id,bsonobjectid" faker:"objectIdString"
	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id" structure:"_id,bsonobjectid" faker:"objectIdString"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// @inject_tag: bson:"country" structure:"country"
	Country string `protobuf:"bytes,3,opt,name=Country,proto3" json:"Country,omitempty" bson:"country" structure:"country"`
	// @inject_tag: bson:"accounting_currency" structure:"accounting_currency"
	AccountingCurrency string `protobuf:"bytes,4,opt,name=accounting_currency,json=accountingCurrency,proto3" json:"accounting_currency,omitempty" bson:"accounting_currency" structure:"accounting_currency"`
	// @inject_tag: bson:"accounting_period" structure:"accounting_period"
	AccountingPeriod string `protobuf:"bytes,5,opt,name=accounting_period,json=accountingPeriod,proto3" json:"accounting_period,omitempty" bson:"accounting_period" structure:"accounting_period"`
	// @inject_tag: bson:"is_active" structure:"is_active"
	IsActive bool `protobuf:"varint,6,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty" bson:"is_active" structure:"is_active"`
	// @inject_tag: bson:"created_at" structure:"created_at,timestamp"
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty" bson:"created_at" structure:"created_at,timestamp"`
	// @inject_tag: bson:"updated_at" structure:"updated_at,timestamp"
	UpdatedAt *timestamp.Timestamp `protobuf:"bytes,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty" bson:"updated_at" structure:"updated_at,timestamp"`
	// @inject_tag: bson:"handler" json:"handler" validate:"omitempty,alphanum"
	Handler string `protobuf:"bytes,9,opt,name=handler,proto3" json:"handler" bson:"handler" validate:"omitempty,alphanum"`
}

func (x *PaymentSystem) Reset() {
	*x = PaymentSystem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentSystem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentSystem) ProtoMessage() {}

func (x *PaymentSystem) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentSystem.ProtoReflect.Descriptor instead.
func (*PaymentSystem) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{38}
}

func (x *PaymentSystem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PaymentSystem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PaymentSystem) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *PaymentSystem) GetAccountingCurrency() string {
	if x != nil {
		return x.AccountingCurrency
	}
	return ""
}

func (x *PaymentSystem) GetAccountingPeriod() string {
	if x != nil {
		return x.AccountingPeriod
	}
	return ""
}

func (x *PaymentSystem) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *PaymentSystem) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PaymentSystem) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *PaymentSystem) GetHandler() string {
	if x != nil {
		return x.Handler
	}
	return ""
}

type PaymentMethodCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"first6" bson:"first6"
	//
	// The first 6 digits of the card number.
	First6 string `protobuf:"bytes,1,opt,name=first6,proto3" json:"first6" bson:"first6"`
	//@inject_tag: json:"last4" bson:"last4"
	//
	// The last 4 digits of the card number.
	Last4 string `protobuf:"bytes,2,opt,name=last4,proto3" json:"last4" bson:"last4"`
	//@inject_tag: json:"masked" bson:"masked"
	//
	// The mask for a customer’s card number.
	Masked string `protobuf:"bytes,3,opt,name=masked,proto3" json:"masked" bson:"masked"`
	//@inject_tag: json:"expiry_month" bson:"expiry_month"
	//
	// The validity month of the card.
	ExpiryMonth string `protobuf:"bytes,4,opt,name=expiry_month,json=expiryMonth,proto3" json:"expiry_month" bson:"expiry_month"`
	//@inject_tag: json:"expiry_year" bson:"expiry_year"
	//
	// The validity year of the card.
	ExpiryYear string `protobuf:"bytes,5,opt,name=expiry_year,json=expiryYear,proto3" json:"expiry_year" bson:"expiry_year"`
	//@inject_tag: json:"brand" bson:"brand"
	//
	// The brand of the card issuer.
	Brand string `protobuf:"bytes,6,opt,name=brand,proto3" json:"brand" bson:"brand"`
	//@inject_tag: json:"fingerprint" bson:"fingerprint"
	//
	// The internal fingerprint for given card.
	Fingerprint string `protobuf:"bytes,7,opt,name=fingerprint,proto3" json:"fingerprint" bson:"fingerprint"`
	//@inject_tag: json:"secure3d" bson:"secure3d"
	//
	// Has a true value if 3D-secure is used for the payment.
	Secure3D bool `protobuf:"varint,8,opt,name=secure3d,proto3" json:"secure3d" bson:"secure3d"`
}

func (x *PaymentMethodCard) Reset() {
	*x = PaymentMethodCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentMethodCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentMethodCard) ProtoMessage() {}

func (x *PaymentMethodCard) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentMethodCard.ProtoReflect.Descriptor instead.
func (*PaymentMethodCard) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{39}
}

func (x *PaymentMethodCard) GetFirst6() string {
	if x != nil {
		return x.First6
	}
	return ""
}

func (x *PaymentMethodCard) GetLast4() string {
	if x != nil {
		return x.Last4
	}
	return ""
}

func (x *PaymentMethodCard) GetMasked() string {
	if x != nil {
		return x.Masked
	}
	return ""
}

func (x *PaymentMethodCard) GetExpiryMonth() string {
	if x != nil {
		return x.ExpiryMonth
	}
	return ""
}

func (x *PaymentMethodCard) GetExpiryYear() string {
	if x != nil {
		return x.ExpiryYear
	}
	return ""
}

func (x *PaymentMethodCard) GetBrand() string {
	if x != nil {
		return x.Brand
	}
	return ""
}

func (x *PaymentMethodCard) GetFingerprint() string {
	if x != nil {
		return x.Fingerprint
	}
	return ""
}

func (x *PaymentMethodCard) GetSecure3D() bool {
	if x != nil {
		return x.Secure3D
	}
	return false
}

type PaymentMethodWallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"brand" bson:"brand"
	//
	// The name of the wallet.
	Brand string `protobuf:"bytes,1,opt,name=brand,proto3" json:"brand" bson:"brand"`
	//@inject_tag: json:"account" bson:"account"
	//
	// The customer identity in the wallet.
	Account string `protobuf:"bytes,2,opt,name=account,proto3" json:"account" bson:"account"`
}

func (x *PaymentMethodWallet) Reset() {
	*x = PaymentMethodWallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentMethodWallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentMethodWallet) ProtoMessage() {}

func (x *PaymentMethodWallet) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentMethodWallet.ProtoReflect.Descriptor instead.
func (*PaymentMethodWallet) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{40}
}

func (x *PaymentMethodWallet) GetBrand() string {
	if x != nil {
		return x.Brand
	}
	return ""
}

func (x *PaymentMethodWallet) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

type PaymentMethodCrypto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"brand" bson:"brand"
	//
	// The name of the crypto currency.
	Brand string `protobuf:"bytes,1,opt,name=brand,proto3" json:"brand" bson:"brand"`
	//@inject_tag: json:"address" bson:"address"
	//
	// The customer’s address in the crypto currency.
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address" bson:"address"`
}

func (x *PaymentMethodCrypto) Reset() {
	*x = PaymentMethodCrypto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentMethodCrypto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentMethodCrypto) ProtoMessage() {}

func (x *PaymentMethodCrypto) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentMethodCrypto.ProtoReflect.Descriptor instead.
func (*PaymentMethodCrypto) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{41}
}

func (x *PaymentMethodCrypto) GetBrand() string {
	if x != nil {
		return x.Brand
	}
	return ""
}

func (x *PaymentMethodCrypto) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type ProjectPaymentMethod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: bson:"_id" faker:"objectIdString"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id" faker:"objectIdString"`
	// @inject_tag: bson:"terminal"
	Terminal string `protobuf:"bytes,2,opt,name=terminal,proto3" json:"terminal,omitempty" bson:"terminal"`
	// @inject_tag: bson:"password"
	Password string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty" bson:"password"`
	// @inject_tag: bson:"callback_password"
	CallbackPassword string `protobuf:"bytes,4,opt,name=callback_password,json=callbackPassword,proto3" json:"callback_password,omitempty" bson:"callback_password"`
	// @inject_tag: bson:"created_at"
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty" bson:"created_at"`
}

func (x *ProjectPaymentMethod) Reset() {
	*x = ProjectPaymentMethod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectPaymentMethod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectPaymentMethod) ProtoMessage() {}

func (x *ProjectPaymentMethod) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectPaymentMethod.ProtoReflect.Descriptor instead.
func (*ProjectPaymentMethod) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{42}
}

func (x *ProjectPaymentMethod) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProjectPaymentMethod) GetTerminal() string {
	if x != nil {
		return x.Terminal
	}
	return ""
}

func (x *ProjectPaymentMethod) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ProjectPaymentMethod) GetCallbackPassword() string {
	if x != nil {
		return x.CallbackPassword
	}
	return ""
}

func (x *ProjectPaymentMethod) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type PaymentMethod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: bson:"_id" json:"id" validate:"omitempty,hexadecimal,len=24" faker:"objectIdString"
	//
	// The unique identifier for the payment method.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id" bson:"_id" validate:"omitempty,hexadecimal,len=24" faker:"objectIdString"`
	// @inject_tag: bson:"name" json:"name" validate:"required,omitempty,alphanum"
	//
	// The payment method's name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name" bson:"name" validate:"required,omitempty,alphanum"`
	// @inject_tag: bson:"group_alias" json:"group_alias" validate:"omitempty,alphanum"
	//
	// The payment method's group alias.
	Group string `protobuf:"bytes,3,opt,name=group,proto3" json:"group_alias" bson:"group_alias" validate:"omitempty,alphanum"`
	// @inject_tag: bson:"external_id" json:"external_id" validate:"omitempty,alphanum"
	//
	// The unique identifier for the payment method in the payment system.
	ExternalId string `protobuf:"bytes,5,opt,name=external_id,json=externalId,proto3" json:"external_id" bson:"external_id" validate:"omitempty,alphanum"`
	// @inject_tag: bson:"min_payment_amount" json:"min_payment_amount" validate:"omitempty,numeric,gte=0"
	//
	// The minimum payment amount.
	MinPaymentAmount float64 `protobuf:"fixed64,7,opt,name=min_payment_amount,json=minPaymentAmount,proto3" json:"min_payment_amount" bson:"min_payment_amount" validate:"omitempty,numeric,gte=0"`
	// @inject_tag: bson:"max_payment_amount" json:"max_payment_amount" validate:"omitempty,numeric,gte=0"
	//
	// The maximum payment amount.
	MaxPaymentAmount float64 `protobuf:"fixed64,8,opt,name=max_payment_amount,json=maxPaymentAmount,proto3" json:"max_payment_amount" bson:"max_payment_amount" validate:"omitempty,numeric,gte=0"`
	// @inject_tag: bson:"type" json:"type" validate:"omitempty,alpha,gte=0"
	//
	// The payment method's type. Available values: bank_card, ewallet, crypto.
	Type string `protobuf:"bytes,9,opt,name=type,proto3" json:"type" bson:"type" validate:"omitempty,alpha,gte=0"`
	// @inject_tag: bson:"account_regexp" json:"account_regexp" validate:"omitempty"
	//
	// The regexp mask for checking the main requisite of the payment method.
	AccountRegexp string `protobuf:"bytes,10,opt,name=account_regexp,json=accountRegexp,proto3" json:"account_regexp" bson:"account_regexp" validate:"omitempty"`
	// @inject_tag: bson:"is_active" json:"is_active" validate:"omitempty"
	//
	// Has a true value if the payment method is active.
	IsActive bool `protobuf:"varint,11,opt,name=is_active,json=isActive,proto3" json:"is_active" bson:"is_active" validate:"omitempty"`
	// @inject_tag: bson:"payment_system_id" json:"payment_system_id" validate:"required,hexadecimal,len=24" faker:"objectIdString"
	//
	// The unique identifier for the payment method in PaySuper.
	PaymentSystemId string `protobuf:"bytes,12,opt,name=payment_system_id,json=paymentSystemId,proto3" json:"payment_system_id" bson:"payment_system_id" validate:"required,hexadecimal,len=24" faker:"objectIdString"`
	// @inject_tag: bson:"test_settings" json:"test_settings" validate:"omitempty"
	//
	// The payment method's parameters for projects with payments in the test mode.
	TestSettings map[string]*PaymentMethodParams `protobuf:"bytes,13,rep,name=test_settings,json=testSettings,proto3" json:"test_settings" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" bson:"test_settings" validate:"omitempty"`
	// @inject_tag: bson:"production_settings" json:"production_settings" validate:"omitempty"
	//
	// The payment method's parameters for projects with payments in the production mode.
	ProductionSettings map[string]*PaymentMethodParams `protobuf:"bytes,14,rep,name=production_settings,json=productionSettings,proto3" json:"production_settings" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" bson:"production_settings" validate:"omitempty"`
	// @inject_tag: bson:"created_at" json:"created_at" validate:"omitempty"
	//
	// The date of the payment method creation.
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,15,opt,name=created_at,json=createdAt,proto3" json:"created_at" bson:"created_at" validate:"omitempty"`
	// @inject_tag: bson:"updated_at" json:"updated_at" validate:"omitempty"
	//
	// The date of the payment method last update.
	UpdatedAt *timestamp.Timestamp `protobuf:"bytes,16,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at" bson:"updated_at" validate:"omitempty"`
	// @inject_tag: json:"refund_allowed" bson:"refund_allowed"
	//
	// Has a true value if the payment method allows a refund.
	RefundAllowed bool `protobuf:"varint,17,opt,name=refund_allowed,json=refundAllowed,proto3" json:"refund_allowed" bson:"refund_allowed"`
	// @inject_tag: json:"recurring_allowed" bson:"recurring_allowed"
	//
	// Has a true value if the payment method allows a recurring.
	RecurringAllowed bool `protobuf:"varint,18,opt,name=recurring_allowed,json=recurringAllowed,proto3" json:"recurring_allowed" bson:"recurring_allowed"`
	//@inject_tag: json:"limits_currency" validate:"omitempty,len=3"
	//
	// The currency of the limit amount.
	LimitsCurrency string `protobuf:"bytes,19,opt,name=limits_currency,json=limitsCurrency,proto3" json:"limits_currency" validate:"omitempty,len=3"`
}

func (x *PaymentMethod) Reset() {
	*x = PaymentMethod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentMethod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentMethod) ProtoMessage() {}

func (x *PaymentMethod) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentMethod.ProtoReflect.Descriptor instead.
func (*PaymentMethod) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{43}
}

func (x *PaymentMethod) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PaymentMethod) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PaymentMethod) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *PaymentMethod) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

func (x *PaymentMethod) GetMinPaymentAmount() float64 {
	if x != nil {
		return x.MinPaymentAmount
	}
	return 0
}

func (x *PaymentMethod) GetMaxPaymentAmount() float64 {
	if x != nil {
		return x.MaxPaymentAmount
	}
	return 0
}

func (x *PaymentMethod) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PaymentMethod) GetAccountRegexp() string {
	if x != nil {
		return x.AccountRegexp
	}
	return ""
}

func (x *PaymentMethod) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *PaymentMethod) GetPaymentSystemId() string {
	if x != nil {
		return x.PaymentSystemId
	}
	return ""
}

func (x *PaymentMethod) GetTestSettings() map[string]*PaymentMethodParams {
	if x != nil {
		return x.TestSettings
	}
	return nil
}

func (x *PaymentMethod) GetProductionSettings() map[string]*PaymentMethodParams {
	if x != nil {
		return x.ProductionSettings
	}
	return nil
}

func (x *PaymentMethod) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PaymentMethod) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *PaymentMethod) GetRefundAllowed() bool {
	if x != nil {
		return x.RefundAllowed
	}
	return false
}

func (x *PaymentMethod) GetRecurringAllowed() bool {
	if x != nil {
		return x.RecurringAllowed
	}
	return false
}

func (x *PaymentMethod) GetLimitsCurrency() string {
	if x != nil {
		return x.LimitsCurrency
	}
	return ""
}

type CardExpire struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: bson:"month"
	//
	// The card expiration month.
	Month string `protobuf:"bytes,1,opt,name=month,proto3" json:"month,omitempty" bson:"month"`
	// @inject_tag: bson:"year"
	//
	// The card expiration year.
	Year string `protobuf:"bytes,2,opt,name=year,proto3" json:"year,omitempty" bson:"year"`
}

func (x *CardExpire) Reset() {
	*x = CardExpire{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardExpire) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardExpire) ProtoMessage() {}

func (x *CardExpire) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardExpire.ProtoReflect.Descriptor instead.
func (*CardExpire) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{44}
}

func (x *CardExpire) GetMonth() string {
	if x != nil {
		return x.Month
	}
	return ""
}

func (x *CardExpire) GetYear() string {
	if x != nil {
		return x.Year
	}
	return ""
}

type SavedCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of the saved card.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The card number.
	Pan string `protobuf:"bytes,2,opt,name=pan,proto3" json:"pan,omitempty"`
	// The cardholder’s name.
	CardHolder string `protobuf:"bytes,3,opt,name=card_holder,json=cardHolder,proto3" json:"card_holder,omitempty"`
	// The card expiration.
	Expire *CardExpire `protobuf:"bytes,4,opt,name=expire,proto3" json:"expire,omitempty"`
}

func (x *SavedCard) Reset() {
	*x = SavedCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SavedCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SavedCard) ProtoMessage() {}

func (x *SavedCard) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SavedCard.ProtoReflect.Descriptor instead.
func (*SavedCard) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{45}
}

func (x *SavedCard) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SavedCard) GetPan() string {
	if x != nil {
		return x.Pan
	}
	return ""
}

func (x *SavedCard) GetCardHolder() string {
	if x != nil {
		return x.CardHolder
	}
	return ""
}

func (x *SavedCard) GetExpire() *CardExpire {
	if x != nil {
		return x.Expire
	}
	return nil
}

type PaymentFormPaymentMethod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier for the payment method.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The payment method's name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The payment method's type. Available values: bank_card, ewallet, crypto.
	Type string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// @inject_tag: json:"group_alias"
	//
	// The payment method's group alias.
	Group string `protobuf:"bytes,4,opt,name=group,proto3" json:"group_alias"`
	// The regexp mask for checking the main requisite of a payment method.
	AccountRegexp string `protobuf:"bytes,5,opt,name=account_regexp,json=accountRegexp,proto3" json:"account_regexp,omitempty"`
	// @inject_tag: json:"has_saved_cards"
	//
	// Has a true value if contains a saved card as a payment method.
	HasSavedCards bool `protobuf:"varint,6,opt,name=has_saved_cards,json=hasSavedCards,proto3" json:"has_saved_cards"`
	// @inject_tag: json:"saved_cards,omitempty"
	//
	// The saved cards' data.
	SavedCards []*SavedCard `protobuf:"bytes,7,rep,name=saved_cards,json=savedCards,proto3" json:"saved_cards,omitempty"`
}

func (x *PaymentFormPaymentMethod) Reset() {
	*x = PaymentFormPaymentMethod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentFormPaymentMethod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentFormPaymentMethod) ProtoMessage() {}

func (x *PaymentFormPaymentMethod) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentFormPaymentMethod.ProtoReflect.Descriptor instead.
func (*PaymentFormPaymentMethod) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{46}
}

func (x *PaymentFormPaymentMethod) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PaymentFormPaymentMethod) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PaymentFormPaymentMethod) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PaymentFormPaymentMethod) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *PaymentFormPaymentMethod) GetAccountRegexp() string {
	if x != nil {
		return x.AccountRegexp
	}
	return ""
}

func (x *PaymentFormPaymentMethod) GetHasSavedCards() bool {
	if x != nil {
		return x.HasSavedCards
	}
	return false
}

func (x *PaymentFormPaymentMethod) GetSavedCards() []*SavedCard {
	if x != nil {
		return x.SavedCards
	}
	return nil
}

type MerchantPaymentMethodPerTransactionCommission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: validate:"omitempty,numeric,gte=0" json:"-"
	Fee float64 `protobuf:"fixed64,1,opt,name=fee,proto3" json:"-" validate:"omitempty,numeric,gte=0"`
	// @inject_tag: json:"-"
	Currency string `protobuf:"bytes,2,opt,name=currency,proto3" json:"-"`
}

func (x *MerchantPaymentMethodPerTransactionCommission) Reset() {
	*x = MerchantPaymentMethodPerTransactionCommission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerchantPaymentMethodPerTransactionCommission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerchantPaymentMethodPerTransactionCommission) ProtoMessage() {}

func (x *MerchantPaymentMethodPerTransactionCommission) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerchantPaymentMethodPerTransactionCommission.ProtoReflect.Descriptor instead.
func (*MerchantPaymentMethodPerTransactionCommission) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{47}
}

func (x *MerchantPaymentMethodPerTransactionCommission) GetFee() float64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *MerchantPaymentMethodPerTransactionCommission) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

type MerchantPaymentMethodCommissions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: validate:"omitempty,numeric,gte=0,lte=100" json:"-"
	Fee float64 `protobuf:"fixed64,1,opt,name=fee,proto3" json:"-" validate:"omitempty,numeric,gte=0,lte=100"`
	// @inject_tag: validate:"required" json:"-"
	PerTransaction *MerchantPaymentMethodPerTransactionCommission `protobuf:"bytes,2,opt,name=per_transaction,json=perTransaction,proto3" json:"-" validate:"required"`
}

func (x *MerchantPaymentMethodCommissions) Reset() {
	*x = MerchantPaymentMethodCommissions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerchantPaymentMethodCommissions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerchantPaymentMethodCommissions) ProtoMessage() {}

func (x *MerchantPaymentMethodCommissions) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerchantPaymentMethodCommissions.ProtoReflect.Descriptor instead.
func (*MerchantPaymentMethodCommissions) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{48}
}

func (x *MerchantPaymentMethodCommissions) GetFee() float64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *MerchantPaymentMethodCommissions) GetPerTransaction() *MerchantPaymentMethodPerTransactionCommission {
	if x != nil {
		return x.PerTransaction
	}
	return nil
}

type MerchantPaymentMethodIntegration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"terminal_id"
	TerminalId string `protobuf:"bytes,1,opt,name=terminal_id,json=terminalId,proto3" json:"terminal_id"`
	// @inject_tag: json:"terminal_password"
	TerminalPassword string `protobuf:"bytes,2,opt,name=terminal_password,json=terminalPassword,proto3" json:"terminal_password"`
	// @inject_tag: json:"terminal_callback_password"
	TerminalCallbackPassword string `protobuf:"bytes,3,opt,name=terminal_callback_password,json=terminalCallbackPassword,proto3" json:"terminal_callback_password"`
	// @inject_tag: json:"integrated"
	Integrated bool `protobuf:"varint,4,opt,name=integrated,proto3" json:"integrated"`
}

func (x *MerchantPaymentMethodIntegration) Reset() {
	*x = MerchantPaymentMethodIntegration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerchantPaymentMethodIntegration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerchantPaymentMethodIntegration) ProtoMessage() {}

func (x *MerchantPaymentMethodIntegration) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerchantPaymentMethodIntegration.ProtoReflect.Descriptor instead.
func (*MerchantPaymentMethodIntegration) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{49}
}

func (x *MerchantPaymentMethodIntegration) GetTerminalId() string {
	if x != nil {
		return x.TerminalId
	}
	return ""
}

func (x *MerchantPaymentMethodIntegration) GetTerminalPassword() string {
	if x != nil {
		return x.TerminalPassword
	}
	return ""
}

func (x *MerchantPaymentMethodIntegration) GetTerminalCallbackPassword() string {
	if x != nil {
		return x.TerminalCallbackPassword
	}
	return ""
}

func (x *MerchantPaymentMethodIntegration) GetIntegrated() bool {
	if x != nil {
		return x.Integrated
	}
	return false
}

type MerchantPaymentMethodIdentification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: validate:"required,hexadecimal,len=24" json:"-" faker:"objectIdString"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"-" validate:"required,hexadecimal,len=24" faker:"objectIdString"`
	// @inject_tag: validate:"required" json:"-"
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"-" validate:"required"`
}

func (x *MerchantPaymentMethodIdentification) Reset() {
	*x = MerchantPaymentMethodIdentification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerchantPaymentMethodIdentification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerchantPaymentMethodIdentification) ProtoMessage() {}

func (x *MerchantPaymentMethodIdentification) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerchantPaymentMethodIdentification.ProtoReflect.Descriptor instead.
func (*MerchantPaymentMethodIdentification) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{50}
}

func (x *MerchantPaymentMethodIdentification) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MerchantPaymentMethodIdentification) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type MerchantPaymentMethod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentMethod *MerchantPaymentMethodIdentification `protobuf:"bytes,3,opt,name=payment_method,json=paymentMethod,proto3" json:"payment_method,omitempty"`
	Commission    *MerchantPaymentMethodCommissions    `protobuf:"bytes,4,opt,name=commission,proto3" json:"commission,omitempty"`
	Integration   *MerchantPaymentMethodIntegration    `protobuf:"bytes,5,opt,name=integration,proto3" json:"integration,omitempty"`
	IsActive      bool                                 `protobuf:"varint,6,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
}

func (x *MerchantPaymentMethod) Reset() {
	*x = MerchantPaymentMethod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerchantPaymentMethod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerchantPaymentMethod) ProtoMessage() {}

func (x *MerchantPaymentMethod) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerchantPaymentMethod.ProtoReflect.Descriptor instead.
func (*MerchantPaymentMethod) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{51}
}

func (x *MerchantPaymentMethod) GetPaymentMethod() *MerchantPaymentMethodIdentification {
	if x != nil {
		return x.PaymentMethod
	}
	return nil
}

func (x *MerchantPaymentMethod) GetCommission() *MerchantPaymentMethodCommissions {
	if x != nil {
		return x.Commission
	}
	return nil
}

func (x *MerchantPaymentMethod) GetIntegration() *MerchantPaymentMethodIntegration {
	if x != nil {
		return x.Integration
	}
	return nil
}

func (x *MerchantPaymentMethod) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

type RefundPayerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The customer's country.
	Country string `protobuf:"bytes,1,opt,name=country,proto3" json:"country,omitempty"`
	// The customer's ZIP code.
	Zip string `protobuf:"bytes,2,opt,name=zip,proto3" json:"zip,omitempty"`
	// The customer's state.
	State string `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *RefundPayerData) Reset() {
	*x = RefundPayerData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefundPayerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefundPayerData) ProtoMessage() {}

func (x *RefundPayerData) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefundPayerData.ProtoReflect.Descriptor instead.
func (*RefundPayerData) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{52}
}

func (x *RefundPayerData) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *RefundPayerData) GetZip() string {
	if x != nil {
		return x.Zip
	}
	return ""
}

func (x *RefundPayerData) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

type RefundOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: faker:"objectIdString"
	//
	// The unique identifier for the refund in PaySuper.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" faker:"objectIdString"`
	// The public unique identifier for the refund in PaySuper.
	Uuid string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *RefundOrder) Reset() {
	*x = RefundOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefundOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefundOrder) ProtoMessage() {}

func (x *RefundOrder) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefundOrder.ProtoReflect.Descriptor instead.
func (*RefundOrder) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{53}
}

func (x *RefundOrder) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RefundOrder) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type Refund struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: faker:"objectIdString"
	//
	// The unique identifier for the refund in PaySuper.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" faker:"objectIdString"`
	// The initial order data.
	OriginalOrder *RefundOrder `protobuf:"bytes,2,opt,name=original_order,json=originalOrder,proto3" json:"original_order,omitempty"`
	// The unique identifier for the refund in the payment system.
	ExternalId string `protobuf:"bytes,3,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
	// The refund amount.
	Amount float64 `protobuf:"fixed64,4,opt,name=amount,proto3" json:"amount,omitempty"`
	// @inject_tag: faker:"objectIdString"
	//
	// The unique identifier for the user initiated an action on the return.
	CreatorId string `protobuf:"bytes,5,opt,name=creatorId,proto3" json:"creatorId,omitempty" faker:"objectIdString"`
	// The refund reason. Available values: Customer's request, Redeem chargeback, Purchase not provided, Card data was stolen.
	Reason string `protobuf:"bytes,6,opt,name=reason,proto3" json:"reason,omitempty"`
	// The refund's currency. Three-letter currency code ISO 4217, in uppercase.
	Currency string `protobuf:"bytes,7,opt,name=currency,proto3" json:"currency,omitempty"`
	// The refund status. Available values: 0 - created, 1 - rejected on the payment system side, 2 - in process on the payment system side, 3 - successfully completed.
	Status int32 `protobuf:"varint,8,opt,name=status,proto3" json:"status,omitempty"`
	// The date of the refund creation.
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// The date of the refund last update.
	UpdatedAt *timestamp.Timestamp `protobuf:"bytes,10,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// The customer data.
	PayerData *RefundPayerData `protobuf:"bytes,11,opt,name=payer_data,json=payerData,proto3" json:"payer_data,omitempty"`
	// The refund tax fee.
	SalesTax float32 `protobuf:"fixed32,12,opt,name=sales_tax,json=salesTax,proto3" json:"sales_tax,omitempty"`
	// Has a true value if this refund is a chargeback.
	IsChargeback bool `protobuf:"varint,13,opt,name=is_chargeback,json=isChargeback,proto3" json:"is_chargeback,omitempty"`
	// @inject_tag: faker:"objectIdString"
	//
	// The unique identifier for the original order for which the refund was made.
	CreatedOrderId string `protobuf:"bytes,14,opt,name=created_order_id,json=createdOrderId,proto3" json:"created_order_id,omitempty" faker:"objectIdString"`
}

func (x *Refund) Reset() {
	*x = Refund{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Refund) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Refund) ProtoMessage() {}

func (x *Refund) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Refund.ProtoReflect.Descriptor instead.
func (*Refund) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{54}
}

func (x *Refund) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Refund) GetOriginalOrder() *RefundOrder {
	if x != nil {
		return x.OriginalOrder
	}
	return nil
}

func (x *Refund) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

func (x *Refund) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Refund) GetCreatorId() string {
	if x != nil {
		return x.CreatorId
	}
	return ""
}

func (x *Refund) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *Refund) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *Refund) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Refund) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Refund) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Refund) GetPayerData() *RefundPayerData {
	if x != nil {
		return x.PayerData
	}
	return nil
}

func (x *Refund) GetSalesTax() float32 {
	if x != nil {
		return x.SalesTax
	}
	return 0
}

func (x *Refund) GetIsChargeback() bool {
	if x != nil {
		return x.IsChargeback
	}
	return false
}

func (x *Refund) GetCreatedOrderId() string {
	if x != nil {
		return x.CreatedOrderId
	}
	return ""
}

type MerchantPaymentMethodHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: validate:"required,hexadecimal,len=24" faker:"objectIdString"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" validate:"required,hexadecimal,len=24" faker:"objectIdString"`
	// @inject_tag: validate:"required,hexadecimal,len=24" faker:"objectIdString"
	MerchantId string `protobuf:"bytes,2,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty" validate:"required,hexadecimal,len=24" faker:"objectIdString"`
	// @inject_tag: validate:"required" json:"-"
	PaymentMethod *MerchantPaymentMethod `protobuf:"bytes,3,opt,name=paymentMethod,proto3" json:"-" validate:"required"`
	// @inject_tag: json:"created_at" validate:"required"
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at" validate:"required"`
	// @inject_tag: validate:"required,hexadecimal,len=24" faker:"objectIdString"
	UserId string `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty" validate:"required,hexadecimal,len=24" faker:"objectIdString"`
}

func (x *MerchantPaymentMethodHistory) Reset() {
	*x = MerchantPaymentMethodHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerchantPaymentMethodHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerchantPaymentMethodHistory) ProtoMessage() {}

func (x *MerchantPaymentMethodHistory) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerchantPaymentMethodHistory.ProtoReflect.Descriptor instead.
func (*MerchantPaymentMethodHistory) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{55}
}

func (x *MerchantPaymentMethodHistory) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MerchantPaymentMethodHistory) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *MerchantPaymentMethodHistory) GetPaymentMethod() *MerchantPaymentMethod {
	if x != nil {
		return x.PaymentMethod
	}
	return nil
}

func (x *MerchantPaymentMethodHistory) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *MerchantPaymentMethodHistory) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type CustomerIdentity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: faker:"objectIdString"
	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty" faker:"objectIdString"`
	// @inject_tag: faker:"objectIdString"
	ProjectId string               `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty" faker:"objectIdString"`
	Type      string               `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Value     string               `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	Verified  bool                 `protobuf:"varint,5,opt,name=verified,proto3" json:"verified,omitempty"`
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *CustomerIdentity) Reset() {
	*x = CustomerIdentity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerIdentity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerIdentity) ProtoMessage() {}

func (x *CustomerIdentity) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerIdentity.ProtoReflect.Descriptor instead.
func (*CustomerIdentity) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{56}
}

func (x *CustomerIdentity) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *CustomerIdentity) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *CustomerIdentity) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CustomerIdentity) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *CustomerIdentity) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *CustomerIdentity) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type CustomerIpHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"-"
	Ip        []byte               `protobuf:"bytes,1,opt,name=ip,proto3" json:"-"`
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	//@inject_tag: json:"ip" bson:"ip_string"
	IpString string `protobuf:"bytes,3,opt,name=ip_string,json=ipString,proto3" json:"ip" bson:"ip_string"`
	//@inject_tag: json:"address" bson:"address"
	Address *OrderBillingAddress `protobuf:"bytes,4,opt,name=address,proto3" json:"address" bson:"address"`
}

func (x *CustomerIpHistory) Reset() {
	*x = CustomerIpHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerIpHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerIpHistory) ProtoMessage() {}

func (x *CustomerIpHistory) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerIpHistory.ProtoReflect.Descriptor instead.
func (*CustomerIpHistory) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{57}
}

func (x *CustomerIpHistory) GetIp() []byte {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *CustomerIpHistory) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *CustomerIpHistory) GetIpString() string {
	if x != nil {
		return x.IpString
	}
	return ""
}

func (x *CustomerIpHistory) GetAddress() *OrderBillingAddress {
	if x != nil {
		return x.Address
	}
	return nil
}

type CustomerAddressHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Country    string               `protobuf:"bytes,1,opt,name=country,proto3" json:"country,omitempty"`
	City       string               `protobuf:"bytes,2,opt,name=city,proto3" json:"city,omitempty"`
	PostalCode string               `protobuf:"bytes,3,opt,name=postal_code,json=postalCode,proto3" json:"postal_code,omitempty"`
	State      string               `protobuf:"bytes,4,opt,name=state,proto3" json:"state,omitempty"`
	CreatedAt  *timestamp.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *CustomerAddressHistory) Reset() {
	*x = CustomerAddressHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerAddressHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerAddressHistory) ProtoMessage() {}

func (x *CustomerAddressHistory) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerAddressHistory.ProtoReflect.Descriptor instead.
func (*CustomerAddressHistory) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{58}
}

func (x *CustomerAddressHistory) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *CustomerAddressHistory) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *CustomerAddressHistory) GetPostalCode() string {
	if x != nil {
		return x.PostalCode
	}
	return ""
}

func (x *CustomerAddressHistory) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *CustomerAddressHistory) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type CustomerStringValueHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     string               `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *CustomerStringValueHistory) Reset() {
	*x = CustomerStringValueHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerStringValueHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerStringValueHistory) ProtoMessage() {}

func (x *CustomerStringValueHistory) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerStringValueHistory.ProtoReflect.Descriptor instead.
func (*CustomerStringValueHistory) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{59}
}

func (x *CustomerStringValueHistory) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *CustomerStringValueHistory) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type Customer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: faker:"objectIdString"
	Id             string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" faker:"objectIdString"`
	TechEmail      string `protobuf:"bytes,2,opt,name=tech_email,json=techEmail,proto3" json:"tech_email,omitempty"`
	ExternalId     string `protobuf:"bytes,3,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
	Email          string `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	EmailVerified  bool   `protobuf:"varint,5,opt,name=email_verified,json=emailVerified,proto3" json:"email_verified,omitempty"`
	Phone          string `protobuf:"bytes,6,opt,name=phone,proto3" json:"phone,omitempty"`
	PhoneVerified  bool   `protobuf:"varint,7,opt,name=phone_verified,json=phoneVerified,proto3" json:"phone_verified,omitempty"`
	Name           string `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`
	Ip             []byte `protobuf:"bytes,9,opt,name=ip,proto3" json:"ip,omitempty"`
	Locale         string `protobuf:"bytes,10,opt,name=locale,proto3" json:"locale,omitempty"`
	AcceptLanguage string `protobuf:"bytes,11,opt,name=accept_language,json=acceptLanguage,proto3" json:"accept_language,omitempty"`
	// @inject_tag: json:"-"
	UserAgent string               `protobuf:"bytes,12,opt,name=user_agent,json=userAgent,proto3" json:"-"`
	Address   *OrderBillingAddress `protobuf:"bytes,13,opt,name=address,proto3" json:"address,omitempty"`
	Identity  []*CustomerIdentity  `protobuf:"bytes,14,rep,name=identity,proto3" json:"identity,omitempty"`
	// @inject_tag: json:"ip_history"
	IpHistory []*CustomerIpHistory `protobuf:"bytes,15,rep,name=ip_history,json=ipHistory,proto3" json:"ip_history"`
	// @inject_tag: json:"-"
	AddressHistory []*CustomerAddressHistory `protobuf:"bytes,16,rep,name=address_history,json=addressHistory,proto3" json:"-"`
	// @inject_tag: json:"-"
	LocaleHistory []*CustomerStringValueHistory `protobuf:"bytes,17,rep,name=locale_history,json=localeHistory,proto3" json:"-"`
	// @inject_tag: json:"-"
	AcceptLanguageHistory []*CustomerStringValueHistory `protobuf:"bytes,18,rep,name=accept_language_history,json=acceptLanguageHistory,proto3" json:"-"`
	// @inject_tag: json:"metadata"
	Metadata map[string]string `protobuf:"bytes,19,rep,name=metadata,proto3" json:"metadata" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// @inject_tag: json:"-"
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,20,opt,name=created_at,json=createdAt,proto3" json:"-"`
	// @inject_tag: json:"-"
	UpdatedAt *timestamp.Timestamp `protobuf:"bytes,21,opt,name=updated_at,json=updatedAt,proto3" json:"-"`
	//@inject_tag: json:"notify_sale" bson:"notify_sale"
	NotifySale bool `protobuf:"varint,22,opt,name=notify_sale,json=notifySale,proto3" json:"notify_sale" bson:"notify_sale"`
	//@inject_tag: json:"notify_sale_email" bson:"notify_sale_email"
	NotifySaleEmail string `protobuf:"bytes,23,opt,name=notify_sale_email,json=notifySaleEmail,proto3" json:"notify_sale_email" bson:"notify_sale_email"`
	//@inject_tag: json:"notify_new_region" bson:"notify_new_region"
	NotifyNewRegion bool `protobuf:"varint,24,opt,name=notify_new_region,json=notifyNewRegion,proto3" json:"notify_new_region" bson:"notify_new_region"`
	//@inject_tag: json:"notify_new_region_email" bson:"notify_new_region_email"
	NotifyNewRegionEmail string `protobuf:"bytes,25,opt,name=notify_new_region_email,json=notifyNewRegionEmail,proto3" json:"notify_new_region_email" bson:"notify_new_region_email"`
	//@inject_tag: json:"-" bson:"ip_string"
	IpString string `protobuf:"bytes,26,opt,name=ip_string,json=ipString,proto3" json:"-" bson:"ip_string"`
	//@inject_tag: json:"-" bson:"payment_activity"
	PaymentActivity map[string]*PaymentActivityItem `protobuf:"bytes,27,rep,name=payment_activity,json=paymentActivity,proto3" json:"-" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" bson:"payment_activity"`
	//@inject_tag: json:"uuid" bson:"uuid"
	Uuid string `protobuf:"bytes,28,opt,name=uuid,proto3" json:"uuid" bson:"uuid"`
}

func (x *Customer) Reset() {
	*x = Customer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Customer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Customer) ProtoMessage() {}

func (x *Customer) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Customer.ProtoReflect.Descriptor instead.
func (*Customer) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{60}
}

func (x *Customer) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Customer) GetTechEmail() string {
	if x != nil {
		return x.TechEmail
	}
	return ""
}

func (x *Customer) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

func (x *Customer) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Customer) GetEmailVerified() bool {
	if x != nil {
		return x.EmailVerified
	}
	return false
}

func (x *Customer) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *Customer) GetPhoneVerified() bool {
	if x != nil {
		return x.PhoneVerified
	}
	return false
}

func (x *Customer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Customer) GetIp() []byte {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *Customer) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

func (x *Customer) GetAcceptLanguage() string {
	if x != nil {
		return x.AcceptLanguage
	}
	return ""
}

func (x *Customer) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *Customer) GetAddress() *OrderBillingAddress {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Customer) GetIdentity() []*CustomerIdentity {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *Customer) GetIpHistory() []*CustomerIpHistory {
	if x != nil {
		return x.IpHistory
	}
	return nil
}

func (x *Customer) GetAddressHistory() []*CustomerAddressHistory {
	if x != nil {
		return x.AddressHistory
	}
	return nil
}

func (x *Customer) GetLocaleHistory() []*CustomerStringValueHistory {
	if x != nil {
		return x.LocaleHistory
	}
	return nil
}

func (x *Customer) GetAcceptLanguageHistory() []*CustomerStringValueHistory {
	if x != nil {
		return x.AcceptLanguageHistory
	}
	return nil
}

func (x *Customer) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Customer) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Customer) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Customer) GetNotifySale() bool {
	if x != nil {
		return x.NotifySale
	}
	return false
}

func (x *Customer) GetNotifySaleEmail() string {
	if x != nil {
		return x.NotifySaleEmail
	}
	return ""
}

func (x *Customer) GetNotifyNewRegion() bool {
	if x != nil {
		return x.NotifyNewRegion
	}
	return false
}

func (x *Customer) GetNotifyNewRegionEmail() string {
	if x != nil {
		return x.NotifyNewRegionEmail
	}
	return ""
}

func (x *Customer) GetIpString() string {
	if x != nil {
		return x.IpString
	}
	return ""
}

func (x *Customer) GetPaymentActivity() map[string]*PaymentActivityItem {
	if x != nil {
		return x.PaymentActivity
	}
	return nil
}

func (x *Customer) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type PaymentActivityItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: bson:"count"
	Count *PaymentActivityItemCount `protobuf:"bytes,2,opt,name=count,proto3" json:"count,omitempty" bson:"count"`
	//@inject_tag: bson:"last_txn_at"
	LastTxnAt *PaymentActivityItemLastTxnAt `protobuf:"bytes,3,opt,name=last_txn_at,json=lastTxnAt,proto3" json:"last_txn_at,omitempty" bson:"last_txn_at"`
	//@inject_tag: bson:"revenue"
	Revenue *PaymentActivityItemRevenue `protobuf:"bytes,4,opt,name=revenue,proto3" json:"revenue,omitempty" bson:"revenue"`
}

func (x *PaymentActivityItem) Reset() {
	*x = PaymentActivityItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentActivityItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentActivityItem) ProtoMessage() {}

func (x *PaymentActivityItem) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentActivityItem.ProtoReflect.Descriptor instead.
func (*PaymentActivityItem) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{61}
}

func (x *PaymentActivityItem) GetCount() *PaymentActivityItemCount {
	if x != nil {
		return x.Count
	}
	return nil
}

func (x *PaymentActivityItem) GetLastTxnAt() *PaymentActivityItemLastTxnAt {
	if x != nil {
		return x.LastTxnAt
	}
	return nil
}

func (x *PaymentActivityItem) GetRevenue() *PaymentActivityItemRevenue {
	if x != nil {
		return x.Revenue
	}
	return nil
}

type PaymentActivityItemCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: bson:"payment"
	Payment int64 `protobuf:"varint,1,opt,name=payment,proto3" json:"payment,omitempty" bson:"payment"`
	//@inject_tag: bson:"refund"
	Refund int64 `protobuf:"varint,2,opt,name=refund,proto3" json:"refund,omitempty" bson:"refund"`
}

func (x *PaymentActivityItemCount) Reset() {
	*x = PaymentActivityItemCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentActivityItemCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentActivityItemCount) ProtoMessage() {}

func (x *PaymentActivityItemCount) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentActivityItemCount.ProtoReflect.Descriptor instead.
func (*PaymentActivityItemCount) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{62}
}

func (x *PaymentActivityItemCount) GetPayment() int64 {
	if x != nil {
		return x.Payment
	}
	return 0
}

func (x *PaymentActivityItemCount) GetRefund() int64 {
	if x != nil {
		return x.Refund
	}
	return 0
}

type PaymentActivityItemLastTxnAt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: bson:"payment"
	Payment *timestamp.Timestamp `protobuf:"bytes,1,opt,name=payment,proto3" json:"payment,omitempty" bson:"payment"`
	//@inject_tag: bson:"refund"
	Refund *timestamp.Timestamp `protobuf:"bytes,2,opt,name=refund,proto3" json:"refund,omitempty" bson:"refund"`
}

func (x *PaymentActivityItemLastTxnAt) Reset() {
	*x = PaymentActivityItemLastTxnAt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentActivityItemLastTxnAt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentActivityItemLastTxnAt) ProtoMessage() {}

func (x *PaymentActivityItemLastTxnAt) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentActivityItemLastTxnAt.ProtoReflect.Descriptor instead.
func (*PaymentActivityItemLastTxnAt) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{63}
}

func (x *PaymentActivityItemLastTxnAt) GetPayment() *timestamp.Timestamp {
	if x != nil {
		return x.Payment
	}
	return nil
}

func (x *PaymentActivityItemLastTxnAt) GetRefund() *timestamp.Timestamp {
	if x != nil {
		return x.Refund
	}
	return nil
}

type PaymentActivityItemRevenue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: bson:"payment"
	Payment float64 `protobuf:"fixed64,1,opt,name=payment,proto3" json:"payment,omitempty" bson:"payment"`
	//@inject_tag: bson:"refund"
	Refund float64 `protobuf:"fixed64,2,opt,name=refund,proto3" json:"refund,omitempty" bson:"refund"`
	//@inject_tag: bson:"total"
	Total float64 `protobuf:"fixed64,3,opt,name=total,proto3" json:"total,omitempty" bson:"total"`
}

func (x *PaymentActivityItemRevenue) Reset() {
	*x = PaymentActivityItemRevenue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentActivityItemRevenue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentActivityItemRevenue) ProtoMessage() {}

func (x *PaymentActivityItemRevenue) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentActivityItemRevenue.ProtoReflect.Descriptor instead.
func (*PaymentActivityItemRevenue) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{64}
}

func (x *PaymentActivityItemRevenue) GetPayment() float64 {
	if x != nil {
		return x.Payment
	}
	return 0
}

func (x *PaymentActivityItemRevenue) GetRefund() float64 {
	if x != nil {
		return x.Refund
	}
	return 0
}

func (x *PaymentActivityItemRevenue) GetTotal() float64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type TokenUserEmailValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"omitempty,email"
	//
	// The customer’s email address.
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" validate:"omitempty,email"`
	// Whether the email has been verified on the merchant side.
	Verified bool `protobuf:"varint,2,opt,name=verified,proto3" json:"verified,omitempty"`
}

func (x *TokenUserEmailValue) Reset() {
	*x = TokenUserEmailValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenUserEmailValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenUserEmailValue) ProtoMessage() {}

func (x *TokenUserEmailValue) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenUserEmailValue.ProtoReflect.Descriptor instead.
func (*TokenUserEmailValue) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{65}
}

func (x *TokenUserEmailValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *TokenUserEmailValue) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

type TokenUserPhoneValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"omitempty,phone"
	//
	// The customer’s phone.
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" validate:"omitempty,phone"`
	// Whether the phone has been verified on the merchant side.
	Verified bool `protobuf:"varint,2,opt,name=verified,proto3" json:"verified,omitempty"`
}

func (x *TokenUserPhoneValue) Reset() {
	*x = TokenUserPhoneValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenUserPhoneValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenUserPhoneValue) ProtoMessage() {}

func (x *TokenUserPhoneValue) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenUserPhoneValue.ProtoReflect.Descriptor instead.
func (*TokenUserPhoneValue) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{66}
}

func (x *TokenUserPhoneValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *TokenUserPhoneValue) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

type TokenUserIpValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"omitempty,ip"
	//
	// The customer’s IP address.
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" validate:"omitempty,ip"`
}

func (x *TokenUserIpValue) Reset() {
	*x = TokenUserIpValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenUserIpValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenUserIpValue) ProtoMessage() {}

func (x *TokenUserIpValue) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenUserIpValue.ProtoReflect.Descriptor instead.
func (*TokenUserIpValue) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{67}
}

func (x *TokenUserIpValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type TokenUserLocaleValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"omitempty,locale,min=5"
	//
	// The customer’s locale name. The Accept-Language format by RFC 7231.
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" validate:"omitempty,locale,min=5"`
}

func (x *TokenUserLocaleValue) Reset() {
	*x = TokenUserLocaleValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenUserLocaleValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenUserLocaleValue) ProtoMessage() {}

func (x *TokenUserLocaleValue) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenUserLocaleValue.ProtoReflect.Descriptor instead.
func (*TokenUserLocaleValue) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{68}
}

func (x *TokenUserLocaleValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type TokenUserValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The customer’s name.
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *TokenUserValue) Reset() {
	*x = TokenUserValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenUserValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenUserValue) ProtoMessage() {}

func (x *TokenUserValue) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenUserValue.ProtoReflect.Descriptor instead.
func (*TokenUserValue) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{69}
}

func (x *TokenUserValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type TokenUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"required" required:"true"
	//
	// The unique identifier for the customer in the merchant project.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" validate:"required" required:"true"`
	// The customer’s email data.
	Email *TokenUserEmailValue `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	// The customer’s phone data.
	Phone *TokenUserPhoneValue `protobuf:"bytes,4,opt,name=phone,proto3" json:"phone,omitempty"`
	// The customer’s name data.
	Name *TokenUserValue `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	// The customer’s IP address data.
	Ip *TokenUserIpValue `protobuf:"bytes,7,opt,name=ip,proto3" json:"ip,omitempty"`
	// The customer’s locale data.
	Locale *TokenUserLocaleValue `protobuf:"bytes,8,opt,name=locale,proto3" json:"locale,omitempty"`
	// The customer’s address data.
	Address *OrderBillingAddress `protobuf:"bytes,9,opt,name=address,proto3" json:"address,omitempty"`
	// A string-value description that you can attach to the customer's object. It can be useful for storing additional information about your customer’s payment.
	Metadata map[string]string `protobuf:"bytes,10,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	//@inject_tag: json:"-"
	UserAgent string `protobuf:"bytes,11,opt,name=user_agent,json=userAgent,proto3" json:"-"`
	//@inject_tag: json:"-"
	AcceptLanguage string `protobuf:"bytes,12,opt,name=accept_language,json=acceptLanguage,proto3" json:"-"`
}

func (x *TokenUser) Reset() {
	*x = TokenUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenUser) ProtoMessage() {}

func (x *TokenUser) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenUser.ProtoReflect.Descriptor instead.
func (*TokenUser) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{70}
}

func (x *TokenUser) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TokenUser) GetEmail() *TokenUserEmailValue {
	if x != nil {
		return x.Email
	}
	return nil
}

func (x *TokenUser) GetPhone() *TokenUserPhoneValue {
	if x != nil {
		return x.Phone
	}
	return nil
}

func (x *TokenUser) GetName() *TokenUserValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *TokenUser) GetIp() *TokenUserIpValue {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *TokenUser) GetLocale() *TokenUserLocaleValue {
	if x != nil {
		return x.Locale
	}
	return nil
}

func (x *TokenUser) GetAddress() *OrderBillingAddress {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *TokenUser) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *TokenUser) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *TokenUser) GetAcceptLanguage() string {
	if x != nil {
		return x.AcceptLanguage
	}
	return ""
}

type TokenSettingsReturnUrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"omitempty,url"
	//
	// The redirect URL for a successful payment.
	Success string `protobuf:"bytes,1,opt,name=success,proto3" json:"success,omitempty" validate:"omitempty,url"`
	//@inject_tag: validate:"omitempty,url"
	//
	// The redirect URL for a failed payment.
	Fail string `protobuf:"bytes,2,opt,name=fail,proto3" json:"fail,omitempty" validate:"omitempty,url"`
}

func (x *TokenSettingsReturnUrl) Reset() {
	*x = TokenSettingsReturnUrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenSettingsReturnUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenSettingsReturnUrl) ProtoMessage() {}

func (x *TokenSettingsReturnUrl) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenSettingsReturnUrl.ProtoReflect.Descriptor instead.
func (*TokenSettingsReturnUrl) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{71}
}

func (x *TokenSettingsReturnUrl) GetSuccess() string {
	if x != nil {
		return x.Success
	}
	return ""
}

func (x *TokenSettingsReturnUrl) GetFail() string {
	if x != nil {
		return x.Fail
	}
	return ""
}

type TokenSettingsItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"required"
	Sku string `protobuf:"bytes,1,opt,name=sku,proto3" json:"sku,omitempty" validate:"required"`
	//@inject_tag: validate:"required,numeric,gt=0"
	Amount float64 `protobuf:"fixed64,5,opt,name=amount,proto3" json:"amount,omitempty" validate:"required,numeric,gt=0"`
	//@inject_tag: validate:"required,alpha,len=3"
	Currency string `protobuf:"bytes,4,opt,name=currency,proto3" json:"currency,omitempty" validate:"required,alpha,len=3"`
}

func (x *TokenSettingsItem) Reset() {
	*x = TokenSettingsItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenSettingsItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenSettingsItem) ProtoMessage() {}

func (x *TokenSettingsItem) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenSettingsItem.ProtoReflect.Descriptor instead.
func (*TokenSettingsItem) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{72}
}

func (x *TokenSettingsItem) GetSku() string {
	if x != nil {
		return x.Sku
	}
	return ""
}

func (x *TokenSettingsItem) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *TokenSettingsItem) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

type TokenSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"project_id" validate:"required,hexadecimal,len=24" required:"true"
	//
	// The unique identifier for the Project found in the merchant account in the PaySuper Dashboard.
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id" validate:"required,hexadecimal,len=24" required:"true"`
	//@inject_tag: json:"return_url"
	//
	// Redirect URLs.
	ReturnUrl *TokenSettingsReturnUrl `protobuf:"bytes,3,opt,name=return_url,json=returnUrl,proto3" json:"return_url"`
	//@inject_tag: json:"currency" validate:"omitempty,alpha,len=3"
	//
	// The order currency. Three-letter Currency Code ISO 4217, in uppercase. It's required for a simple checkout payment.
	Currency string `protobuf:"bytes,4,opt,name=currency,proto3" json:"currency" validate:"omitempty,alpha,len=3"`
	//@inject_tag: json:"amount" validate:"omitempty,numeric,gt=0"
	//
	// The order amount. It's required for a simple checkout payment.
	Amount float64 `protobuf:"fixed64,5,opt,name=amount,proto3" json:"amount" validate:"omitempty,numeric,gt=0"`
	//@inject_tag: json:"-"
	PaymentMethod string `protobuf:"bytes,6,opt,name=payment_method,json=paymentMethod,proto3" json:"-"`
	//@inject_tag: json:"description"
	//
	// An arbitrary order description.
	Description string `protobuf:"bytes,8,opt,name=description,proto3" json:"description"`
	//@inject_tag: json:"products_ids" validate:"omitempty,eq=1,dive,hexadecimal,len=24"
	//
	// A list of unique identifiers for Project's products. It's required if a payment type equals to ‘product’ or ‘key’.
	ProductsIds []string `protobuf:"bytes,9,rep,name=products_ids,json=productsIds,proto3" json:"products_ids" validate:"omitempty,eq=1,dive,hexadecimal,len=24"`
	//@inject_tag: json:"metadata"
	//
	// The string-value description that you can attach to the customer's object. It can be useful for storing additional information about your customer’s payment.
	Metadata map[string]string `protobuf:"bytes,10,rep,name=metadata,proto3" json:"metadata" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	//@inject_tag: json:"platform_id"
	//
	// The default platform's name for which the customer buys a key. This field is used only for the key type. Available values: steam, gog, uplay, origin, psn, xbox, nintendo, itch, egs.
	PlatformId string `protobuf:"bytes,11,opt,name=platform_id,json=platformId,proto3" json:"platform_id"`
	//@inject_tag: json:"type" validate:"required,oneof=simple key product virtual_currency" required:"true"
	//
	// The order type. It depends on your sales option: Game Keys, Virtual Items, Virtual Currency, Simple Checkout. Available values: key, product, virtual_currency, simple.
	Type string `protobuf:"bytes,12,opt,name=type,proto3" json:"type" validate:"required,oneof=simple key product virtual_currency" required:"true"`
	//@inject_tag: json:"is_buy_for_virtual_currency"
	//
	// Has a true value if an order must be processed using a virtual currency.
	IsBuyForVirtualCurrency bool `protobuf:"varint,13,opt,name=is_buy_for_virtual_currency,json=isBuyForVirtualCurrency,proto3" json:"is_buy_for_virtual_currency"`
	//@inject_tag: json:"button_caption" bson:"button_caption" validate:"omitempty,max=18"
	//
	//The redirect button messages after the successful or failed payment. If it has an empty value the redirect message will be set at OK.
	ButtonCaption string `protobuf:"bytes,14,opt,name=button_caption,json=buttonCaption,proto3" json:"button_caption" bson:"button_caption" validate:"omitempty,max=18"`
	//@inject_tag: json:"recurring_plan_id" validate:"omitempty"
	//
	// Identifier of plan for the recurring subscription.
	RecurringPlanId string `protobuf:"bytes,15,opt,name=recurring_plan_id,json=recurringPlanId,proto3" json:"recurring_plan_id" validate:"omitempty"`
}

func (x *TokenSettings) Reset() {
	*x = TokenSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenSettings) ProtoMessage() {}

func (x *TokenSettings) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenSettings.ProtoReflect.Descriptor instead.
func (*TokenSettings) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{73}
}

func (x *TokenSettings) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *TokenSettings) GetReturnUrl() *TokenSettingsReturnUrl {
	if x != nil {
		return x.ReturnUrl
	}
	return nil
}

func (x *TokenSettings) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *TokenSettings) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *TokenSettings) GetPaymentMethod() string {
	if x != nil {
		return x.PaymentMethod
	}
	return ""
}

func (x *TokenSettings) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TokenSettings) GetProductsIds() []string {
	if x != nil {
		return x.ProductsIds
	}
	return nil
}

func (x *TokenSettings) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *TokenSettings) GetPlatformId() string {
	if x != nil {
		return x.PlatformId
	}
	return ""
}

func (x *TokenSettings) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *TokenSettings) GetIsBuyForVirtualCurrency() bool {
	if x != nil {
		return x.IsBuyForVirtualCurrency
	}
	return false
}

func (x *TokenSettings) GetButtonCaption() string {
	if x != nil {
		return x.ButtonCaption
	}
	return ""
}

func (x *TokenSettings) GetRecurringPlanId() string {
	if x != nil {
		return x.RecurringPlanId
	}
	return ""
}

type OrderIssuer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: bson:"url" json:"url"
	//
	// The referrer URL.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url" bson:"url"`
	//@inject_tag: bson:"embedded" json:"embedded"
	//
	// Has a true value if the form is embedded.
	Embedded bool `protobuf:"varint,2,opt,name=embedded,proto3" json:"embedded" bson:"embedded"`
	//@inject_tag: bson:"reference" json:"reference"
	//
	// The unique identifier for the reference.
	Reference string `protobuf:"bytes,3,opt,name=reference,proto3" json:"reference" bson:"reference"`
	//@inject_tag: bson:"reference_type" json:"reference_type"
	//
	// The reference type.
	ReferenceType string `protobuf:"bytes,4,opt,name=reference_type,json=referenceType,proto3" json:"reference_type" bson:"reference_type"`
	//@inject_tag: bson:"utm_source" json:"utm_source"
	//
	// The UTM-tag of the advertising system, for example: Bing Ads, Google Adwords.
	UtmSource string `protobuf:"bytes,5,opt,name=utm_source,json=utmSource,proto3" json:"utm_source" bson:"utm_source"`
	//@inject_tag: bson:"utm_medium" json:"utm_medium"
	//
	// The UTM-tag of the traffic type, e.g.: cpc, cpm, email newsletter.
	UtmMedium string `protobuf:"bytes,6,opt,name=utm_medium,json=utmMedium,proto3" json:"utm_medium" bson:"utm_medium"`
	//@inject_tag: bson:"utm_campaign" json:"utm_campaign"
	//
	// The UTM-tag of the advertising campaign, for example: Online games, Simulation game.
	UtmCampaign string `protobuf:"bytes,7,opt,name=utm_campaign,json=utmCampaign,proto3" json:"utm_campaign" bson:"utm_campaign"`
	//@inject_tag: bson:"referrer_host" json:"referrer_host"
	//
	// The referrer's host.
	ReferrerHost string `protobuf:"bytes,8,opt,name=referrer_host,json=referrerHost,proto3" json:"referrer_host" bson:"referrer_host"`
}

func (x *OrderIssuer) Reset() {
	*x = OrderIssuer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderIssuer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderIssuer) ProtoMessage() {}

func (x *OrderIssuer) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderIssuer.ProtoReflect.Descriptor instead.
func (*OrderIssuer) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{74}
}

func (x *OrderIssuer) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *OrderIssuer) GetEmbedded() bool {
	if x != nil {
		return x.Embedded
	}
	return false
}

func (x *OrderIssuer) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *OrderIssuer) GetReferenceType() string {
	if x != nil {
		return x.ReferenceType
	}
	return ""
}

func (x *OrderIssuer) GetUtmSource() string {
	if x != nil {
		return x.UtmSource
	}
	return ""
}

func (x *OrderIssuer) GetUtmMedium() string {
	if x != nil {
		return x.UtmMedium
	}
	return ""
}

func (x *OrderIssuer) GetUtmCampaign() string {
	if x != nil {
		return x.UtmCampaign
	}
	return ""
}

func (x *OrderIssuer) GetReferrerHost() string {
	if x != nil {
		return x.ReferrerHost
	}
	return ""
}

type OrderNotificationRefund struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"required,numeric,gt=0" json:"amount"
	//
	// The refund amount.
	Amount float64 `protobuf:"fixed64,1,opt,name=amount,proto3" json:"amount" validate:"required,numeric,gt=0"`
	//@inject_tag: validate:"required,alpha,len=3" json:"currency"
	//
	// The refund's currency. Three-letter currency code ISO 4217, in uppercase.
	Currency string `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency" validate:"required,alpha,len=3"`
	//@inject_tag: json:"reason"
	//
	// The refund reason. Available values: Customer's request, Redeem chargeback, Purchase not provided, Card data was stolen.
	Reason string `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason"`
	//@inject_tag: json:"code"
	//
	// The internal identity for the refund reason in PaySuper.
	Code string `protobuf:"bytes,4,opt,name=code,proto3" json:"code"`
	//@inject_tag: json:"receipt_number"
	//
	// The unique identifier for the refund's receipt.
	ReceiptNumber string `protobuf:"bytes,5,opt,name=receipt_number,json=receiptNumber,proto3" json:"receipt_number"`
	//@inject_tag: json:"receipt_url"
	//
	// The URL in PaySuper service for online access to the refund's receipt.
	ReceiptUrl string `protobuf:"bytes,6,opt,name=receipt_url,json=receiptUrl,proto3" json:"receipt_url"`
}

func (x *OrderNotificationRefund) Reset() {
	*x = OrderNotificationRefund{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderNotificationRefund) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderNotificationRefund) ProtoMessage() {}

func (x *OrderNotificationRefund) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderNotificationRefund.ProtoReflect.Descriptor instead.
func (*OrderNotificationRefund) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{75}
}

func (x *OrderNotificationRefund) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *OrderNotificationRefund) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *OrderNotificationRefund) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *OrderNotificationRefund) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *OrderNotificationRefund) GetReceiptNumber() string {
	if x != nil {
		return x.ReceiptNumber
	}
	return ""
}

func (x *OrderNotificationRefund) GetReceiptUrl() string {
	if x != nil {
		return x.ReceiptUrl
	}
	return ""
}

type GetCountryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"required,alpha,len=2"
	IsoCode string `protobuf:"bytes,1,opt,name=iso_code,json=isoCode,proto3" json:"iso_code,omitempty" validate:"required,alpha,len=2"`
}

func (x *GetCountryRequest) Reset() {
	*x = GetCountryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCountryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCountryRequest) ProtoMessage() {}

func (x *GetCountryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCountryRequest.ProtoReflect.Descriptor instead.
func (*GetCountryRequest) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{76}
}

func (x *GetCountryRequest) GetIsoCode() string {
	if x != nil {
		return x.IsoCode
	}
	return ""
}

type CountryVatThreshold struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"year" bson:"year" validate:"numeric,gte=0"
	//
	// The maximum value of the PaySuper's revenue (since the beginning of the year) from this country which subjects to VAT.
	Year float64 `protobuf:"fixed64,1,opt,name=year,proto3" json:"year" bson:"year" validate:"numeric,gte=0"`
	// @inject_tag: json:"world" bson:"world" validate:"numeric,gte=0"
	//
	// The maximum value of the PaySuper's worldwide revenue (since the beginning of the year) which subjects to VAT.
	World float64 `protobuf:"fixed64,2,opt,name=world,proto3" json:"world" bson:"world" validate:"numeric,gte=0"`
}

func (x *CountryVatThreshold) Reset() {
	*x = CountryVatThreshold{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountryVatThreshold) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountryVatThreshold) ProtoMessage() {}

func (x *CountryVatThreshold) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountryVatThreshold.ProtoReflect.Descriptor instead.
func (*CountryVatThreshold) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{77}
}

func (x *CountryVatThreshold) GetYear() float64 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *CountryVatThreshold) GetWorld() float64 {
	if x != nil {
		return x.World
	}
	return 0
}

type Country struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"-" bson:"_id" validate:"omitempty,hexadecimal,len=24" faker:"objectIdString"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"-" bson:"_id" validate:"omitempty,hexadecimal,len=24" faker:"objectIdString"`
	//@inject_tag: json:"iso_code_a2" bson:"iso_code_a2" validate:"required,alpha,len=2"
	//
	// Two-letter country code in ISO 3166, in uppercase (for instance US).
	IsoCodeA2 string `protobuf:"bytes,2,opt,name=iso_code_a2,json=isoCodeA2,proto3" json:"iso_code_a2" bson:"iso_code_a2" validate:"required,alpha,len=2"`
	//@inject_tag: json:"region" bson:"region" validate:"required"
	//
	// A PaySuper system's relative geographical area for this country.
	Region string `protobuf:"bytes,3,opt,name=region,proto3" json:"region" bson:"region" validate:"required"`
	//@inject_tag: json:"currency" bson:"currency" validate:"required,alpha,len=3"
	//
	// The currency of the country. Three-letter Currency Code ISO 4217, in uppercase.
	Currency string `protobuf:"bytes,4,opt,name=currency,proto3" json:"currency" bson:"currency" validate:"required,alpha,len=3"`
	//@inject_tag: json:"payments_allowed" bson:"payments_allowed"
	//
	// Has a true value if a payment is allowed from this country.
	PaymentsAllowed bool `protobuf:"varint,5,opt,name=payments_allowed,json=paymentsAllowed,proto3" json:"payments_allowed" bson:"payments_allowed"`
	//@inject_tag: json:"change_allowed" bson:"change_allowed"
	//
	// Has a true value if the customer can select another country in case of the payments are disallowed for this country.
	ChangeAllowed bool `protobuf:"varint,6,opt,name=change_allowed,json=changeAllowed,proto3" json:"change_allowed" bson:"change_allowed"`
	//@inject_tag: json:"vat_enabled" bson:"vat_enabled"
	//
	// Has a true value if VAT is calculated and paid for this country.
	VatEnabled bool `protobuf:"varint,7,opt,name=vat_enabled,json=vatEnabled,proto3" json:"vat_enabled" bson:"vat_enabled"`
	//@inject_tag: json:"vat_currency" bson:"vat_currency" validate:"omitempty,alpha,len=3"
	//
	// VAT currency. It can differ from the country currency. Three-letter Currency Code ISO 4217, in uppercase.
	VatCurrency string `protobuf:"bytes,8,opt,name=vat_currency,json=vatCurrency,proto3" json:"vat_currency" bson:"vat_currency" validate:"omitempty,alpha,len=3"`
	//@inject_tag: json:"price_group_id" bson:"price_group_id" validate:"required,hexadecimal,len=24"
	//
	// The unique identifier for the price group this country belongs to.
	PriceGroupId string `protobuf:"bytes,9,opt,name=price_group_id,json=priceGroupId,proto3" json:"price_group_id" bson:"price_group_id" validate:"required,hexadecimal,len=24"`
	// @inject_tag: json:"vat_threshold" bson:"vat_threshold" validate:"required,dive"
	//
	// VAT threshold for this country.
	VatThreshold *CountryVatThreshold `protobuf:"bytes,10,opt,name=vat_threshold,json=vatThreshold,proto3" json:"vat_threshold" bson:"vat_threshold" validate:"required,dive"`
	// @inject_tag: json:"vat_period_month" bson:"vat_period_month" validate:"numeric,gte=0,lte=12"
	//
	// The length of the taxation period in months.
	VatPeriodMonth int32 `protobuf:"varint,11,opt,name=vat_period_month,json=vatPeriodMonth,proto3" json:"vat_period_month" bson:"vat_period_month" validate:"numeric,gte=0,lte=12"`
	// @inject_tag: json:"vat_deadline_days" bson:"vat_deadline_days" validate:"numeric,gte=0"
	//
	// The number of days after the taxation period end to pay VAT.
	VatDeadlineDays int32 `protobuf:"varint,12,opt,name=vat_deadline_days,json=vatDeadlineDays,proto3" json:"vat_deadline_days" bson:"vat_deadline_days" validate:"numeric,gte=0"`
	// @inject_tag: json:"vat_store_years" bson:"vat_store_years" validate:"numeric,gte=0"
	//
	// The number of years to store the VAT payment history for this country.
	VatStoreYears int32 `protobuf:"varint,13,opt,name=vat_store_years,json=vatStoreYears,proto3" json:"vat_store_years" bson:"vat_store_years" validate:"numeric,gte=0"`
	// @inject_tag: json:"vat_currency_rates_policy" bson:"vat_currency_rates_policy" validate:"omitempty,oneof=on-day last-day mid-month"
	//
	// The VAT calculation policy with a currency that differs from this country's VAT currency. Available values: on-day (the conversion rate on the day of payment), last-day (the conversion rate on the last day of a tax period), mid-month (the system reserved option of a conversion rate calculation. This option is disabled.).
	VatCurrencyRatesPolicy string `protobuf:"bytes,14,opt,name=vat_currency_rates_policy,json=vatCurrencyRatesPolicy,proto3" json:"vat_currency_rates_policy" bson:"vat_currency_rates_policy" validate:"omitempty,oneof=on-day last-day mid-month"`
	// @inject_tag: json:"vat_currency_rates_source" bson:"vat_currency_rates_source" validate:"alpha"
	//
	// The source of currency rates to calculate the tax amount.
	VatCurrencyRatesSource string `protobuf:"bytes,15,opt,name=vat_currency_rates_source,json=vatCurrencyRatesSource,proto3" json:"vat_currency_rates_source" bson:"vat_currency_rates_source" validate:"alpha"`
	//@inject_tag: json:"-" bson:"created_at"
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,16,opt,name=created_at,json=createdAt,proto3" json:"-" bson:"created_at"`
	//@inject_tag: json:"-" bson:"updated_at"
	UpdatedAt *timestamp.Timestamp `protobuf:"bytes,17,opt,name=updated_at,json=updatedAt,proto3" json:"-" bson:"updated_at"`
	//@inject_tag: json:"payer_tariff_region" bson:"payer_tariff_region"
	//
	// A PaySuper system's relative geographical area for this country. Available values: asia, europe, latin_america, russia_and_cis, worldwide.
	PayerTariffRegion string `protobuf:"bytes,18,opt,name=payer_tariff_region,json=payerTariffRegion,proto3" json:"payer_tariff_region" bson:"payer_tariff_region"`
	//@inject_tag: json:"high_risk_payments_allowed" bson:"high_risk_payments_allowed"
	//
	// Has a true value if payments from this country are allowed. Has a false value for a high-risk merchant.
	HighRiskPaymentsAllowed bool `protobuf:"varint,19,opt,name=high_risk_payments_allowed,json=highRiskPaymentsAllowed,proto3" json:"high_risk_payments_allowed" bson:"high_risk_payments_allowed"`
	//@inject_tag: json:"high_risk_change_allowed" bson:"high_risk_change_allowed"
	//
	// Has a true value if the customer can select another country while the payments are disallowed for a country determined by their IP address.
	HighRiskChangeAllowed bool `protobuf:"varint,20,opt,name=high_risk_change_allowed,json=highRiskChangeAllowed,proto3" json:"high_risk_change_allowed" bson:"high_risk_change_allowed"`
}

func (x *Country) Reset() {
	*x = Country{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Country) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Country) ProtoMessage() {}

func (x *Country) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Country.ProtoReflect.Descriptor instead.
func (*Country) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{78}
}

func (x *Country) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Country) GetIsoCodeA2() string {
	if x != nil {
		return x.IsoCodeA2
	}
	return ""
}

func (x *Country) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *Country) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *Country) GetPaymentsAllowed() bool {
	if x != nil {
		return x.PaymentsAllowed
	}
	return false
}

func (x *Country) GetChangeAllowed() bool {
	if x != nil {
		return x.ChangeAllowed
	}
	return false
}

func (x *Country) GetVatEnabled() bool {
	if x != nil {
		return x.VatEnabled
	}
	return false
}

func (x *Country) GetVatCurrency() string {
	if x != nil {
		return x.VatCurrency
	}
	return ""
}

func (x *Country) GetPriceGroupId() string {
	if x != nil {
		return x.PriceGroupId
	}
	return ""
}

func (x *Country) GetVatThreshold() *CountryVatThreshold {
	if x != nil {
		return x.VatThreshold
	}
	return nil
}

func (x *Country) GetVatPeriodMonth() int32 {
	if x != nil {
		return x.VatPeriodMonth
	}
	return 0
}

func (x *Country) GetVatDeadlineDays() int32 {
	if x != nil {
		return x.VatDeadlineDays
	}
	return 0
}

func (x *Country) GetVatStoreYears() int32 {
	if x != nil {
		return x.VatStoreYears
	}
	return 0
}

func (x *Country) GetVatCurrencyRatesPolicy() string {
	if x != nil {
		return x.VatCurrencyRatesPolicy
	}
	return ""
}

func (x *Country) GetVatCurrencyRatesSource() string {
	if x != nil {
		return x.VatCurrencyRatesSource
	}
	return ""
}

func (x *Country) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Country) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Country) GetPayerTariffRegion() string {
	if x != nil {
		return x.PayerTariffRegion
	}
	return ""
}

func (x *Country) GetHighRiskPaymentsAllowed() bool {
	if x != nil {
		return x.HighRiskPaymentsAllowed
	}
	return false
}

func (x *Country) GetHighRiskChangeAllowed() bool {
	if x != nil {
		return x.HighRiskChangeAllowed
	}
	return false
}

type CountriesList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of countries.
	Countries []*Country `protobuf:"bytes,1,rep,name=countries,proto3" json:"countries,omitempty"`
}

func (x *CountriesList) Reset() {
	*x = CountriesList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountriesList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountriesList) ProtoMessage() {}

func (x *CountriesList) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountriesList.ProtoReflect.Descriptor instead.
func (*CountriesList) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{79}
}

func (x *CountriesList) GetCountries() []*Country {
	if x != nil {
		return x.Countries
	}
	return nil
}

type GetPriceGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"id" bson:"_id" validate:"omitempty,hexadecimal,len=24"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id" bson:"_id" validate:"omitempty,hexadecimal,len=24"`
}

func (x *GetPriceGroupRequest) Reset() {
	*x = GetPriceGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPriceGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPriceGroupRequest) ProtoMessage() {}

func (x *GetPriceGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPriceGroupRequest.ProtoReflect.Descriptor instead.
func (*GetPriceGroupRequest) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{80}
}

func (x *GetPriceGroupRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type PriceGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"id" bson:"_id" validate:"required,hexadecimal,len=24" required:"true" faker:"objectIdString"
	//
	// The unique identifier for the price group.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id" bson:"_id" validate:"required,hexadecimal,len=24" required:"true" faker:"objectIdString"`
	//@inject_tag: json:"currency" bson:"currency" validate:"required,alpha,len=3" required:"true"
	//
	// Three-letter Currency Code ISO 4217, in uppercase.
	Currency string `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency" bson:"currency" validate:"required,alpha,len=3" required:"true"`
	//@inject_tag: json:"region" bson:"region" validate:"omitempty,alpha"
	//
	// The region's name.
	Region string `protobuf:"bytes,3,opt,name=region,proto3" json:"region" bson:"region" validate:"omitempty,alpha"`
	//@inject_tag: validate:"required,numeric,gte=0" bson:"inflation_rate" json:"-"
	InflationRate float64 `protobuf:"fixed64,4,opt,name=inflation_rate,json=inflationRate,proto3" json:"-" validate:"required,numeric,gte=0" bson:"inflation_rate"`
	//@inject_tag: validate:"required,numeric" bson:"fraction" json:"-"
	Fraction float64 `protobuf:"fixed64,5,opt,name=fraction,proto3" json:"-" validate:"required,numeric" bson:"fraction"`
	//@inject_tag: json:"-" bson:"created_at"
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"-" bson:"created_at"`
	//@inject_tag: json:"-" bson:"updated_at"
	UpdatedAt *timestamp.Timestamp `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"-" bson:"updated_at"`
	// @inject_tag: json:"is_active" bson:"is_active"
	//
	// Has a true value if the price group is active.
	IsActive bool `protobuf:"varint,8,opt,name=is_active,json=isActive,proto3" json:"is_active" bson:"is_active"`
}

func (x *PriceGroup) Reset() {
	*x = PriceGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceGroup) ProtoMessage() {}

func (x *PriceGroup) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceGroup.ProtoReflect.Descriptor instead.
func (*PriceGroup) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{81}
}

func (x *PriceGroup) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PriceGroup) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *PriceGroup) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *PriceGroup) GetInflationRate() float64 {
	if x != nil {
		return x.InflationRate
	}
	return 0
}

func (x *PriceGroup) GetFraction() float64 {
	if x != nil {
		return x.Fraction
	}
	return 0
}

func (x *PriceGroup) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PriceGroup) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *PriceGroup) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

type ZipCodeState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: bson:"code"
	//
	// The state's postal code.
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty" bson:"code"`
	//@inject_tag: bson:"name"
	//
	// The state's name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" bson:"name"`
}

func (x *ZipCodeState) Reset() {
	*x = ZipCodeState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZipCodeState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZipCodeState) ProtoMessage() {}

func (x *ZipCodeState) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZipCodeState.ProtoReflect.Descriptor instead.
func (*ZipCodeState) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{82}
}

func (x *ZipCodeState) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ZipCodeState) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ZipCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The postal code.
	Zip string `protobuf:"bytes,1,opt,name=zip,proto3" json:"zip,omitempty"`
	// The country's name.
	Country string `protobuf:"bytes,2,opt,name=country,proto3" json:"country,omitempty"`
	// The city's name.
	City string `protobuf:"bytes,3,opt,name=city,proto3" json:"city,omitempty"`
	// The state data.
	State *ZipCodeState `protobuf:"bytes,4,opt,name=state,proto3" json:"state,omitempty"`
	// The date this item was added.
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *ZipCode) Reset() {
	*x = ZipCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZipCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZipCode) ProtoMessage() {}

func (x *ZipCode) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZipCode.ProtoReflect.Descriptor instead.
func (*ZipCode) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{83}
}

func (x *ZipCode) GetZip() string {
	if x != nil {
		return x.Zip
	}
	return ""
}

func (x *ZipCode) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *ZipCode) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *ZipCode) GetState() *ZipCodeState {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *ZipCode) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type PaymentChannelCostSystem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"id" bson:"_id" validate:"omitempty,hexadecimal,len=24" faker:"objectIdString"
	//
	// The unique identifier for the payment method.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id" bson:"_id" validate:"omitempty,hexadecimal,len=24" faker:"objectIdString"`
	//@inject_tag: json:"name" bson:"name" validate:"required,alpha"
	//
	// The payment method's name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name" bson:"name" validate:"required,alpha"`
	//@inject_tag: json:"region" bson:"region" validate:"required"
	//
	// The customer's region.
	Region string `protobuf:"bytes,3,opt,name=region,proto3" json:"region" bson:"region" validate:"required"`
	//@inject_tag: json:"country" bson:"country" validate:"omitempty,alpha,len=2"
	//
	// The customer's country. Two-letter country code in ISO 3166-1, in uppercase (for instance US).
	Country string `protobuf:"bytes,4,opt,name=country,proto3" json:"country" bson:"country" validate:"omitempty,alpha,len=2"`
	// @inject_tag: json:"percent" bson:"percent" validate:"required,numeric,gte=0,lte=1"
	//
	// The fee of the payment method in percent.
	Percent float64 `protobuf:"fixed64,5,opt,name=percent,proto3" json:"percent" bson:"percent" validate:"required,numeric,gte=0,lte=1"`
	// @inject_tag: json:"fix_amount" bson:"fix_amount" validate:"numeric,gte=0"
	//
	// The fixed fee of the payment method in the particular currency.
	FixAmount float64 `protobuf:"fixed64,6,opt,name=fix_amount,json=fixAmount,proto3" json:"fix_amount" bson:"fix_amount" validate:"numeric,gte=0"`
	//@inject_tag: json:"fix_amount_currency" bson:"fix_amount_currency" validate:"required,alpha,len=3"
	//
	// The currency of the fixed fee of the payment method. Three-letter currency code ISO 4217, in uppercase.
	FixAmountCurrency string `protobuf:"bytes,7,opt,name=fix_amount_currency,json=fixAmountCurrency,proto3" json:"fix_amount_currency" bson:"fix_amount_currency" validate:"required,alpha,len=3"`
	//@inject_tag: json:"created_at" bson:"created_at"
	//
	// The date of the rates record was created.
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at" bson:"created_at"`
	//@inject_tag: json:"updated_at" bson:"updated_at"
	//
	// The date of the rates record was last updated.
	UpdatedAt *timestamp.Timestamp `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at" bson:"updated_at"`
	// @inject_tag: json:"is_active" bson:"is_active"
	//
	// Has a true value if the rates record is active.
	IsActive bool `protobuf:"varint,10,opt,name=is_active,json=isActive,proto3" json:"is_active" bson:"is_active"`
	// @inject_tag: json:"mcc_code" bson:"mcc_code"
	//
	// The Merchant Category Code (MCC) is a four-digit number listed in ISO 18245.
	MccCode string `protobuf:"bytes,11,opt,name=mcc_code,json=mccCode,proto3" json:"mcc_code" bson:"mcc_code"`
	// @inject_tag: json:"operating_company_id" bson:"operating_company_id" faker:"objectIdString"
	//
	// The unique identifier for the operating company.
	OperatingCompanyId string `protobuf:"bytes,12,opt,name=operating_company_id,json=operatingCompanyId,proto3" json:"operating_company_id" bson:"operating_company_id" faker:"objectIdString"`
}

func (x *PaymentChannelCostSystem) Reset() {
	*x = PaymentChannelCostSystem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentChannelCostSystem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentChannelCostSystem) ProtoMessage() {}

func (x *PaymentChannelCostSystem) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentChannelCostSystem.ProtoReflect.Descriptor instead.
func (*PaymentChannelCostSystem) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{84}
}

func (x *PaymentChannelCostSystem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PaymentChannelCostSystem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PaymentChannelCostSystem) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *PaymentChannelCostSystem) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *PaymentChannelCostSystem) GetPercent() float64 {
	if x != nil {
		return x.Percent
	}
	return 0
}

func (x *PaymentChannelCostSystem) GetFixAmount() float64 {
	if x != nil {
		return x.FixAmount
	}
	return 0
}

func (x *PaymentChannelCostSystem) GetFixAmountCurrency() string {
	if x != nil {
		return x.FixAmountCurrency
	}
	return ""
}

func (x *PaymentChannelCostSystem) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PaymentChannelCostSystem) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *PaymentChannelCostSystem) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *PaymentChannelCostSystem) GetMccCode() string {
	if x != nil {
		return x.MccCode
	}
	return ""
}

func (x *PaymentChannelCostSystem) GetOperatingCompanyId() string {
	if x != nil {
		return x.OperatingCompanyId
	}
	return ""
}

type PaymentChannelCostSystemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"name" bson:"name" validate:"required,alpha"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name" bson:"name" validate:"required,alpha"`
	//@inject_tag: json:"region" bson:"region" validate:"required"
	Region string `protobuf:"bytes,2,opt,name=region,proto3" json:"region" bson:"region" validate:"required"`
	//@inject_tag: json:"country" bson:"country" validate:"omitempty,alpha,len=2"
	Country string `protobuf:"bytes,3,opt,name=country,proto3" json:"country" bson:"country" validate:"omitempty,alpha,len=2"`
	//@inject_tag: json:"mcc_code" bson:"mcc_code" validate:"required,numeric,len=4" query:"mcc_code"
	MccCode string `protobuf:"bytes,4,opt,name=mcc_code,json=mccCode,proto3" json:"mcc_code" bson:"mcc_code" validate:"required,numeric,len=4" query:"mcc_code"`
	//@inject_tag: json:"operating_company_id" bson:"operating_company_id" validate:"required,hexadecimal,len=24" query:"operating_company_id"
	OperatingCompanyId string `protobuf:"bytes,5,opt,name=operating_company_id,json=operatingCompanyId,proto3" json:"operating_company_id" bson:"operating_company_id" validate:"required,hexadecimal,len=24" query:"operating_company_id"`
}

func (x *PaymentChannelCostSystemRequest) Reset() {
	*x = PaymentChannelCostSystemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentChannelCostSystemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentChannelCostSystemRequest) ProtoMessage() {}

func (x *PaymentChannelCostSystemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentChannelCostSystemRequest.ProtoReflect.Descriptor instead.
func (*PaymentChannelCostSystemRequest) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{85}
}

func (x *PaymentChannelCostSystemRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PaymentChannelCostSystemRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *PaymentChannelCostSystemRequest) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *PaymentChannelCostSystemRequest) GetMccCode() string {
	if x != nil {
		return x.MccCode
	}
	return ""
}

func (x *PaymentChannelCostSystemRequest) GetOperatingCompanyId() string {
	if x != nil {
		return x.OperatingCompanyId
	}
	return ""
}

type PaymentChannelCostSystemList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"items"
	//
	// The system costs for payments.
	Items []*PaymentChannelCostSystem `protobuf:"bytes,1,rep,name=items,proto3" json:"items"`
}

func (x *PaymentChannelCostSystemList) Reset() {
	*x = PaymentChannelCostSystemList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentChannelCostSystemList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentChannelCostSystemList) ProtoMessage() {}

func (x *PaymentChannelCostSystemList) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentChannelCostSystemList.ProtoReflect.Descriptor instead.
func (*PaymentChannelCostSystemList) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{86}
}

func (x *PaymentChannelCostSystemList) GetItems() []*PaymentChannelCostSystem {
	if x != nil {
		return x.Items
	}
	return nil
}

type PaymentChannelCostMerchant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"id" bson:"_id" validate:"omitempty,hexadecimal,len=24" faker:"objectIdString"
	//
	// The unique identifier for the record about the merchant's tariffs.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id" bson:"_id" validate:"omitempty,hexadecimal,len=24" faker:"objectIdString"`
	//@inject_tag: json:"merchant_id" bson:"merchant_id" validate:"required,hexadecimal,len=24" faker:"objectIdString"
	//
	// The unique identifier for the merchant.
	MerchantId string `protobuf:"bytes,2,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id" bson:"merchant_id" validate:"required,hexadecimal,len=24" faker:"objectIdString"`
	//@inject_tag: json:"name" bson:"name" validate:"required,name"
	//
	// The payment method's name.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name" bson:"name" validate:"required,name"`
	//@inject_tag: json:"payout_currency" bson:"payout_currency" validate:"required,alpha,len=3"
	//
	// The payout currency. Three-letter Currency Code ISO 4217, in uppercase.
	PayoutCurrency string `protobuf:"bytes,4,opt,name=payout_currency,json=payoutCurrency,proto3" json:"payout_currency" bson:"payout_currency" validate:"required,alpha,len=3"`
	// @inject_tag: json:"min_amount" bson:"min_amount" validate:"omitempty,numeric,gte=0"
	//
	// The minimum payment amount.
	MinAmount float64 `protobuf:"fixed64,5,opt,name=min_amount,json=minAmount,proto3" json:"min_amount" bson:"min_amount" validate:"omitempty,numeric,gte=0"`
	//@inject_tag: json:"region" bson:"region" validate:"required"
	//
	// The customer's region.
	Region string `protobuf:"bytes,6,opt,name=region,proto3" json:"region" bson:"region" validate:"required"`
	//@inject_tag: json:"country" bson:"country" validate:"omitempty,alpha,len=2"
	//
	// The customer's country. Two-letter country code in ISO 3166-1, in uppercase (for instance US).
	Country string `protobuf:"bytes,7,opt,name=country,proto3" json:"country" bson:"country" validate:"omitempty,alpha,len=2"`
	// @inject_tag: json:"method_percent" bson:"method_percent" validate:"required,numeric,gte=0,lte=1"
	//
	// The fee of the payment method in percent.
	MethodPercent float64 `protobuf:"fixed64,8,opt,name=method_percent,json=methodPercent,proto3" json:"method_percent" bson:"method_percent" validate:"required,numeric,gte=0,lte=1"`
	// @inject_tag: json:"method_fix_amount" bson:"method_fix_amount" validate:"numeric,gte=0"
	//
	// The fixed fee of the payment method in the particular currency.
	MethodFixAmount float64 `protobuf:"fixed64,9,opt,name=method_fix_amount,json=methodFixAmount,proto3" json:"method_fix_amount" bson:"method_fix_amount" validate:"numeric,gte=0"`
	// @inject_tag: json:"method_fix_amount_currency" bson:"method_fix_amount_currency" validate:"required,alpha,len=3"
	//
	// The currency of the fixed fee of the payment method. Three-letter currency code ISO 4217, in uppercase.
	MethodFixAmountCurrency string `protobuf:"bytes,10,opt,name=method_fix_amount_currency,json=methodFixAmountCurrency,proto3" json:"method_fix_amount_currency" bson:"method_fix_amount_currency" validate:"required,alpha,len=3"`
	// @inject_tag: json:"ps_percent" bson:"ps_percent" validate:"required,numeric,gte=0,lte=1"
	//
	// The PaySuper fee in percent.
	PsPercent float64 `protobuf:"fixed64,11,opt,name=ps_percent,json=psPercent,proto3" json:"ps_percent" bson:"ps_percent" validate:"required,numeric,gte=0,lte=1"`
	// @inject_tag: json:"ps_fixed_fee" bson:"ps_fixed_fee" validate:"numeric,gte=0"
	//
	// The PaySuper fixed fee in a particular currency.
	PsFixedFee float64 `protobuf:"fixed64,12,opt,name=ps_fixed_fee,json=psFixedFee,proto3" json:"ps_fixed_fee" bson:"ps_fixed_fee" validate:"numeric,gte=0"`
	// @inject_tag: json:"ps_fixed_fee_currency" bson:"ps_fixed_fee_currency" validate:"required,alpha,len=3"
	//
	// The currency of the PaySuper fixed fee of the payment method. Three-letter currency code ISO 4217, in uppercase.
	PsFixedFeeCurrency string `protobuf:"bytes,13,opt,name=ps_fixed_fee_currency,json=psFixedFeeCurrency,proto3" json:"ps_fixed_fee_currency" bson:"ps_fixed_fee_currency" validate:"required,alpha,len=3"`
	//@inject_tag: json:"created_at" bson:"created_at"
	//
	// The date of the rates record was created for the merchant.
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,14,opt,name=created_at,json=createdAt,proto3" json:"created_at" bson:"created_at"`
	//@inject_tag: json:"updated_at" bson:"updated_at"
	//
	// The date of the rates record was last updated for the merchant.
	UpdatedAt *timestamp.Timestamp `protobuf:"bytes,15,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at" bson:"updated_at"`
	// @inject_tag: json:"is_active" bson:"is_active"
	//
	// Has a true value if the rates record is active for the merchant.
	IsActive bool `protobuf:"varint,16,opt,name=is_active,json=isActive,proto3" json:"is_active" bson:"is_active"`
	// @inject_tag: json:"mcc_code" bson:"mcc_code"
	//
	// The Merchant Category Code (MCC) is a four-digit number listed in ISO 18245.
	MccCode string `protobuf:"bytes,17,opt,name=mcc_code,json=mccCode,proto3" json:"mcc_code" bson:"mcc_code"`
	// @inject_tag: json:"max_amount" bson:"max_amount" validate:"omitempty,numeric,gte=0"
	//
	// The maximum payment amount.
	MaxAmount float64 `protobuf:"fixed64,18,opt,name=max_amount,json=maxAmount,proto3" json:"max_amount" bson:"max_amount" validate:"omitempty,numeric,gte=0"`
}

func (x *PaymentChannelCostMerchant) Reset() {
	*x = PaymentChannelCostMerchant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentChannelCostMerchant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentChannelCostMerchant) ProtoMessage() {}

func (x *PaymentChannelCostMerchant) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentChannelCostMerchant.ProtoReflect.Descriptor instead.
func (*PaymentChannelCostMerchant) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{87}
}

func (x *PaymentChannelCostMerchant) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PaymentChannelCostMerchant) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *PaymentChannelCostMerchant) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PaymentChannelCostMerchant) GetPayoutCurrency() string {
	if x != nil {
		return x.PayoutCurrency
	}
	return ""
}

func (x *PaymentChannelCostMerchant) GetMinAmount() float64 {
	if x != nil {
		return x.MinAmount
	}
	return 0
}

func (x *PaymentChannelCostMerchant) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *PaymentChannelCostMerchant) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *PaymentChannelCostMerchant) GetMethodPercent() float64 {
	if x != nil {
		return x.MethodPercent
	}
	return 0
}

func (x *PaymentChannelCostMerchant) GetMethodFixAmount() float64 {
	if x != nil {
		return x.MethodFixAmount
	}
	return 0
}

func (x *PaymentChannelCostMerchant) GetMethodFixAmountCurrency() string {
	if x != nil {
		return x.MethodFixAmountCurrency
	}
	return ""
}

func (x *PaymentChannelCostMerchant) GetPsPercent() float64 {
	if x != nil {
		return x.PsPercent
	}
	return 0
}

func (x *PaymentChannelCostMerchant) GetPsFixedFee() float64 {
	if x != nil {
		return x.PsFixedFee
	}
	return 0
}

func (x *PaymentChannelCostMerchant) GetPsFixedFeeCurrency() string {
	if x != nil {
		return x.PsFixedFeeCurrency
	}
	return ""
}

func (x *PaymentChannelCostMerchant) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PaymentChannelCostMerchant) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *PaymentChannelCostMerchant) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *PaymentChannelCostMerchant) GetMccCode() string {
	if x != nil {
		return x.MccCode
	}
	return ""
}

func (x *PaymentChannelCostMerchant) GetMaxAmount() float64 {
	if x != nil {
		return x.MaxAmount
	}
	return 0
}

type PaymentChannelCostMerchantRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"merchant_id" bson:"merchant_id" validate:"required,hexadecimal,len=24"
	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id" bson:"merchant_id" validate:"required,hexadecimal,len=24"`
	//@inject_tag: json:"name" bson:"name" validate:"required,alpha" query:"name"
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name" bson:"name" validate:"required,alpha" query:"name"`
	//@inject_tag: json:"payout_currency" bson:"payout_currency" validate:"required,alpha,len=3" query:"payout_currency"
	PayoutCurrency string `protobuf:"bytes,3,opt,name=payout_currency,json=payoutCurrency,proto3" json:"payout_currency" bson:"payout_currency" validate:"required,alpha,len=3" query:"payout_currency"`
	// @inject_tag: json:"amount" bson:"amount" validate:"required,numeric,gte=0" query:"amount"
	Amount float64 `protobuf:"fixed64,4,opt,name=amount,proto3" json:"amount" bson:"amount" validate:"required,numeric,gte=0" query:"amount"`
	//@inject_tag: json:"region" bson:"region" validate:"required" query:"region"
	Region string `protobuf:"bytes,5,opt,name=region,proto3" json:"region" bson:"region" validate:"required" query:"region"`
	//@inject_tag: json:"country" bson:"country" validate:"omitempty,alpha,len=2" query:"country"
	Country string `protobuf:"bytes,6,opt,name=country,proto3" json:"country" bson:"country" validate:"omitempty,alpha,len=2" query:"country"`
	//@inject_tag: json:"mcc_code" bson:"mcc_code" validate:"required,numeric,len=4" query:"mcc_code"
	MccCode string `protobuf:"bytes,7,opt,name=mcc_code,json=mccCode,proto3" json:"mcc_code" bson:"mcc_code" validate:"required,numeric,len=4" query:"mcc_code"`
}

func (x *PaymentChannelCostMerchantRequest) Reset() {
	*x = PaymentChannelCostMerchantRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentChannelCostMerchantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentChannelCostMerchantRequest) ProtoMessage() {}

func (x *PaymentChannelCostMerchantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentChannelCostMerchantRequest.ProtoReflect.Descriptor instead.
func (*PaymentChannelCostMerchantRequest) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{88}
}

func (x *PaymentChannelCostMerchantRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *PaymentChannelCostMerchantRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PaymentChannelCostMerchantRequest) GetPayoutCurrency() string {
	if x != nil {
		return x.PayoutCurrency
	}
	return ""
}

func (x *PaymentChannelCostMerchantRequest) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *PaymentChannelCostMerchantRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *PaymentChannelCostMerchantRequest) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *PaymentChannelCostMerchantRequest) GetMccCode() string {
	if x != nil {
		return x.MccCode
	}
	return ""
}

type PaymentChannelCostMerchantList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"items"
	//
	// The merchant costs for payments.
	Items []*PaymentChannelCostMerchant `protobuf:"bytes,1,rep,name=items,proto3" json:"items"`
}

func (x *PaymentChannelCostMerchantList) Reset() {
	*x = PaymentChannelCostMerchantList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentChannelCostMerchantList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentChannelCostMerchantList) ProtoMessage() {}

func (x *PaymentChannelCostMerchantList) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentChannelCostMerchantList.ProtoReflect.Descriptor instead.
func (*PaymentChannelCostMerchantList) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{89}
}

func (x *PaymentChannelCostMerchantList) GetItems() []*PaymentChannelCostMerchant {
	if x != nil {
		return x.Items
	}
	return nil
}

type PaymentChannelCostMerchantListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"merchant_id" bson:"merchant_id" validate:"required,hexadecimal,len=24"
	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id" bson:"merchant_id" validate:"required,hexadecimal,len=24"`
}

func (x *PaymentChannelCostMerchantListRequest) Reset() {
	*x = PaymentChannelCostMerchantListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentChannelCostMerchantListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentChannelCostMerchantListRequest) ProtoMessage() {}

func (x *PaymentChannelCostMerchantListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentChannelCostMerchantListRequest.ProtoReflect.Descriptor instead.
func (*PaymentChannelCostMerchantListRequest) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{90}
}

func (x *PaymentChannelCostMerchantListRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

type MoneyBackCostSystem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"id" bson:"_id" validate:"omitempty,hexadecimal,len=24" faker:"objectIdString"
	//
	// The unique identifier for the record about the merchant's tariffs.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id" bson:"_id" validate:"omitempty,hexadecimal,len=24" faker:"objectIdString"`
	//@inject_tag: json:"name" bson:"name" validate:"required,alpha"
	//
	// The payment method's name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name" bson:"name" validate:"required,alpha"`
	//@inject_tag: json:"payout_currency" bson:"payout_currency" validate:"required,alpha,len=3"
	//
	// The payout currency. Three-letter Currency Code ISO 4217, in uppercase.
	PayoutCurrency string `protobuf:"bytes,3,opt,name=payout_currency,json=payoutCurrency,proto3" json:"payout_currency" bson:"payout_currency" validate:"required,alpha,len=3"`
	//@inject_tag: json:"undo_reason" bson:"undo_reason" validate:"required,alpha,oneof=refund reversal chargeback"
	//
	// The return reason. Available values: refund, reversal, chargeback.
	UndoReason string `protobuf:"bytes,4,opt,name=undo_reason,json=undoReason,proto3" json:"undo_reason" bson:"undo_reason" validate:"required,alpha,oneof=refund reversal chargeback"`
	//@inject_tag: json:"region" bson:"region" validate:"required"
	//
	// The customer's region.
	Region string `protobuf:"bytes,5,opt,name=region,proto3" json:"region" bson:"region" validate:"required"`
	//@inject_tag: json:"country" bson:"country" validate:"omitempty,alpha,len=2"
	//
	// The customer's country. Two-letter country code in ISO 3166-1, in uppercase (for instance US).
	Country string `protobuf:"bytes,6,opt,name=country,proto3" json:"country" bson:"country" validate:"omitempty,alpha,len=2"`
	// @inject_tag: json:"days_from" bson:"days_from" validate:"numeric,gte=0"
	//
	// The number of days after the payment operation.
	DaysFrom int32 `protobuf:"varint,7,opt,name=days_from,json=daysFrom,proto3" json:"days_from" bson:"days_from" validate:"numeric,gte=0"`
	// @inject_tag: json:"payment_stage" bson:"payment_stage" validate:"numeric,gte=1"
	//
	// The payment stage.
	PaymentStage int32 `protobuf:"varint,8,opt,name=payment_stage,json=paymentStage,proto3" json:"payment_stage" bson:"payment_stage" validate:"numeric,gte=1"`
	// @inject_tag: json:"percent" bson:"percent" validate:"numeric,gte=0,lte=1"
	//
	// The fee of the payment method in percent.
	Percent float64 `protobuf:"fixed64,9,opt,name=percent,proto3" json:"percent" bson:"percent" validate:"numeric,gte=0,lte=1"`
	// @inject_tag: json:"fix_amount" bson:"fix_amount" validate:"numeric,gte=0"
	//
	// The fixed fee of the payment method in the particular currency.
	FixAmount float64 `protobuf:"fixed64,10,opt,name=fix_amount,json=fixAmount,proto3" json:"fix_amount" bson:"fix_amount" validate:"numeric,gte=0"`
	//@inject_tag: json:"created_at" bson:"created_at"
	//
	// The date of the rates record was created.
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,11,opt,name=created_at,json=createdAt,proto3" json:"created_at" bson:"created_at"`
	//@inject_tag: json:"updated_at" bson:"updated_at"
	//
	// The date of the rates record was last updated.
	UpdatedAt *timestamp.Timestamp `protobuf:"bytes,12,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at" bson:"updated_at"`
	// @inject_tag: json:"is_active" bson:"is_active"
	//
	// Has a true value if the rates record is active.
	IsActive bool `protobuf:"varint,13,opt,name=is_active,json=isActive,proto3" json:"is_active" bson:"is_active"`
	// @inject_tag: json:"mcc_code" bson:"mcc_code"
	//
	// The Merchant Category Code (MCC) is a four-digit number listed in ISO 18245.
	MccCode string `protobuf:"bytes,14,opt,name=mcc_code,json=mccCode,proto3" json:"mcc_code" bson:"mcc_code"`
	// @inject_tag: json:"operating_company_id" bson:"operating_company_id" faker:"objectIdString"
	//
	// The unique identifier for the operating company.
	OperatingCompanyId string `protobuf:"bytes,15,opt,name=operating_company_id,json=operatingCompanyId,proto3" json:"operating_company_id" bson:"operating_company_id" faker:"objectIdString"`
	// @inject_tag: json:"fix_amount_currency" bson:"fix_amount_currency" validate:"required,alpha,len=3"
	//
	// The currency of the fixed fee of the payment method. Three-letter currency code ISO 4217, in uppercase.
	FixAmountCurrency string `protobuf:"bytes,16,opt,name=fix_amount_currency,json=fixAmountCurrency,proto3" json:"fix_amount_currency" bson:"fix_amount_currency" validate:"required,alpha,len=3"`
}

func (x *MoneyBackCostSystem) Reset() {
	*x = MoneyBackCostSystem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneyBackCostSystem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneyBackCostSystem) ProtoMessage() {}

func (x *MoneyBackCostSystem) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneyBackCostSystem.ProtoReflect.Descriptor instead.
func (*MoneyBackCostSystem) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{91}
}

func (x *MoneyBackCostSystem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MoneyBackCostSystem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MoneyBackCostSystem) GetPayoutCurrency() string {
	if x != nil {
		return x.PayoutCurrency
	}
	return ""
}

func (x *MoneyBackCostSystem) GetUndoReason() string {
	if x != nil {
		return x.UndoReason
	}
	return ""
}

func (x *MoneyBackCostSystem) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *MoneyBackCostSystem) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *MoneyBackCostSystem) GetDaysFrom() int32 {
	if x != nil {
		return x.DaysFrom
	}
	return 0
}

func (x *MoneyBackCostSystem) GetPaymentStage() int32 {
	if x != nil {
		return x.PaymentStage
	}
	return 0
}

func (x *MoneyBackCostSystem) GetPercent() float64 {
	if x != nil {
		return x.Percent
	}
	return 0
}

func (x *MoneyBackCostSystem) GetFixAmount() float64 {
	if x != nil {
		return x.FixAmount
	}
	return 0
}

func (x *MoneyBackCostSystem) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *MoneyBackCostSystem) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *MoneyBackCostSystem) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *MoneyBackCostSystem) GetMccCode() string {
	if x != nil {
		return x.MccCode
	}
	return ""
}

func (x *MoneyBackCostSystem) GetOperatingCompanyId() string {
	if x != nil {
		return x.OperatingCompanyId
	}
	return ""
}

func (x *MoneyBackCostSystem) GetFixAmountCurrency() string {
	if x != nil {
		return x.FixAmountCurrency
	}
	return ""
}

type MoneyBackCostSystemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"name" bson:"name" validate:"required,alpha" query:"name"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name" bson:"name" validate:"required,alpha" query:"name"`
	//@inject_tag: json:"payout_currency" bson:"payout_currency" validate:"required,alpha,len=3" query:"payout_currency"
	PayoutCurrency string `protobuf:"bytes,2,opt,name=payout_currency,json=payoutCurrency,proto3" json:"payout_currency" bson:"payout_currency" validate:"required,alpha,len=3" query:"payout_currency"`
	//@inject_tag: json:"undo_reason" bson:"undo_reason" validate:"required,alpha,oneof=refund reversal chargeback" query:"undo_reason"
	UndoReason string `protobuf:"bytes,3,opt,name=undo_reason,json=undoReason,proto3" json:"undo_reason" bson:"undo_reason" validate:"required,alpha,oneof=refund reversal chargeback" query:"undo_reason"`
	//@inject_tag: json:"region" bson:"region" validate:"required" query:"region"
	Region string `protobuf:"bytes,4,opt,name=region,proto3" json:"region" bson:"region" validate:"required" query:"region"`
	//@inject_tag: json:"country" bson:"country" validate:"omitempty,alpha,len=2" query:"country"
	Country string `protobuf:"bytes,5,opt,name=country,proto3" json:"country" bson:"country" validate:"omitempty,alpha,len=2" query:"country"`
	// @inject_tag: json:"days" bson:"days" validate:"required,numeric,gte=0" query:"days"
	Days int32 `protobuf:"varint,6,opt,name=days,proto3" json:"days" bson:"days" validate:"required,numeric,gte=0" query:"days"`
	// @inject_tag: json:"payment_stage" bson:"payment_stage" validate:"numeric,gte=1" query:"payment_stage"
	PaymentStage int32 `protobuf:"varint,7,opt,name=payment_stage,json=paymentStage,proto3" json:"payment_stage" bson:"payment_stage" validate:"numeric,gte=1" query:"payment_stage"`
	//@inject_tag: json:"mcc_code" bson:"mcc_code" validate:"required,numeric,len=4" query:"mcc_code"
	MccCode string `protobuf:"bytes,8,opt,name=mcc_code,json=mccCode,proto3" json:"mcc_code" bson:"mcc_code" validate:"required,numeric,len=4" query:"mcc_code"`
	//@inject_tag: json:"operating_company_id" bson:"operating_company_id" validate:"required,hexadecimal,len=24" query:"operating_company_id"
	OperatingCompanyId string `protobuf:"bytes,9,opt,name=operating_company_id,json=operatingCompanyId,proto3" json:"operating_company_id" bson:"operating_company_id" validate:"required,hexadecimal,len=24" query:"operating_company_id"`
}

func (x *MoneyBackCostSystemRequest) Reset() {
	*x = MoneyBackCostSystemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneyBackCostSystemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneyBackCostSystemRequest) ProtoMessage() {}

func (x *MoneyBackCostSystemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneyBackCostSystemRequest.ProtoReflect.Descriptor instead.
func (*MoneyBackCostSystemRequest) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{92}
}

func (x *MoneyBackCostSystemRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MoneyBackCostSystemRequest) GetPayoutCurrency() string {
	if x != nil {
		return x.PayoutCurrency
	}
	return ""
}

func (x *MoneyBackCostSystemRequest) GetUndoReason() string {
	if x != nil {
		return x.UndoReason
	}
	return ""
}

func (x *MoneyBackCostSystemRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *MoneyBackCostSystemRequest) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *MoneyBackCostSystemRequest) GetDays() int32 {
	if x != nil {
		return x.Days
	}
	return 0
}

func (x *MoneyBackCostSystemRequest) GetPaymentStage() int32 {
	if x != nil {
		return x.PaymentStage
	}
	return 0
}

func (x *MoneyBackCostSystemRequest) GetMccCode() string {
	if x != nil {
		return x.MccCode
	}
	return ""
}

func (x *MoneyBackCostSystemRequest) GetOperatingCompanyId() string {
	if x != nil {
		return x.OperatingCompanyId
	}
	return ""
}

type MoneyBackCostSystemList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"items"
	//
	// The system costs for the money back operations.
	Items []*MoneyBackCostSystem `protobuf:"bytes,1,rep,name=items,proto3" json:"items"`
}

func (x *MoneyBackCostSystemList) Reset() {
	*x = MoneyBackCostSystemList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneyBackCostSystemList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneyBackCostSystemList) ProtoMessage() {}

func (x *MoneyBackCostSystemList) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneyBackCostSystemList.ProtoReflect.Descriptor instead.
func (*MoneyBackCostSystemList) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{93}
}

func (x *MoneyBackCostSystemList) GetItems() []*MoneyBackCostSystem {
	if x != nil {
		return x.Items
	}
	return nil
}

type MoneyBackCostMerchant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"id" bson:"_id" validate:"omitempty,hexadecimal,len=24" faker:"objectIdString"
	//
	// The unique identifier for the record about the merchant's tariffs.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id" bson:"_id" validate:"omitempty,hexadecimal,len=24" faker:"objectIdString"`
	//@inject_tag: json:"merchant_id" bson:"merchant_id" validate:"required,hexadecimal,len=24" faker:"objectIdString"
	//
	// The unique identifier for the merchant.
	MerchantId string `protobuf:"bytes,2,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id" bson:"merchant_id" validate:"required,hexadecimal,len=24" faker:"objectIdString"`
	//@inject_tag: json:"name" bson:"name" validate:"required,name"
	//
	// The payment method's name.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name" bson:"name" validate:"required,name"`
	//@inject_tag: json:"payout_currency" bson:"payout_currency" validate:"required,alpha,len=3"
	//
	// The payout currency. Three-letter Currency Code ISO 4217, in uppercase.
	PayoutCurrency string `protobuf:"bytes,4,opt,name=payout_currency,json=payoutCurrency,proto3" json:"payout_currency" bson:"payout_currency" validate:"required,alpha,len=3"`
	//@inject_tag: json:"undo_reason" bson:"undo_reason" validate:"required,alpha,oneof=refund reversal chargeback"
	//
	// The return reason. Available values: refund, reversal, chargeback.
	UndoReason string `protobuf:"bytes,5,opt,name=undo_reason,json=undoReason,proto3" json:"undo_reason" bson:"undo_reason" validate:"required,alpha,oneof=refund reversal chargeback"`
	//@inject_tag: json:"region" bson:"region" validate:"required"
	//
	// The customer's region.
	Region string `protobuf:"bytes,6,opt,name=region,proto3" json:"region" bson:"region" validate:"required"`
	//@inject_tag: json:"country" bson:"country" validate:"omitempty,alpha,len=2"
	//
	// The customer's country. Two-letter country code in ISO 3166-1, in uppercase (for instance US).
	Country string `protobuf:"bytes,7,opt,name=country,proto3" json:"country" bson:"country" validate:"omitempty,alpha,len=2"`
	// @inject_tag: json:"days_from" bson:"days_from" validate:"numeric,gte=0"
	//
	// The number of days after the payment operation.
	DaysFrom int32 `protobuf:"varint,8,opt,name=days_from,json=daysFrom,proto3" json:"days_from" bson:"days_from" validate:"numeric,gte=0"`
	// @inject_tag: json:"payment_stage" bson:"payment_stage" validate:"numeric,gte=1"
	//
	// The payment stage.
	PaymentStage int32 `protobuf:"varint,9,opt,name=payment_stage,json=paymentStage,proto3" json:"payment_stage" bson:"payment_stage" validate:"numeric,gte=1"`
	// @inject_tag: json:"percent" bson:"percent" validate:"numeric,gte=0,lte=1"
	//
	// The fee of the payment method in percent.
	Percent float64 `protobuf:"fixed64,10,opt,name=percent,proto3" json:"percent" bson:"percent" validate:"numeric,gte=0,lte=1"`
	// @inject_tag: json:"fix_amount" bson:"fix_amount" validate:"numeric,gte=0"
	//
	// The fixed fee of the payment method in the particular currency.
	FixAmount float64 `protobuf:"fixed64,11,opt,name=fix_amount,json=fixAmount,proto3" json:"fix_amount" bson:"fix_amount" validate:"numeric,gte=0"`
	// @inject_tag: json:"fix_amount_currency" bson:"fix_amount_currency" validate:"required,alpha,len=3"
	//
	// The currency of the fixed fee of the payment method. Three-letter currency code ISO 4217, in uppercase.
	FixAmountCurrency string `protobuf:"bytes,12,opt,name=fix_amount_currency,json=fixAmountCurrency,proto3" json:"fix_amount_currency" bson:"fix_amount_currency" validate:"required,alpha,len=3"`
	// @inject_tag: json:"is_paid_by_merchant" bson:"is_paid_by_merchant"
	//
	// Has a true value if the commission was paid by the merchant.
	IsPaidByMerchant bool `protobuf:"varint,13,opt,name=is_paid_by_merchant,json=isPaidByMerchant,proto3" json:"is_paid_by_merchant" bson:"is_paid_by_merchant"`
	//@inject_tag: json:"created_at" bson:"created_at"
	//
	// The date of the rates record was created for the merchant.
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,14,opt,name=created_at,json=createdAt,proto3" json:"created_at" bson:"created_at"`
	//@inject_tag: json:"updated_at" bson:"updated_at"
	//
	// The date of the rates record was last updated for the merchant.
	UpdatedAt *timestamp.Timestamp `protobuf:"bytes,15,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at" bson:"updated_at"`
	// @inject_tag: json:"is_active" bson:"is_active"
	//
	// Has a true value if the rates record is active for the merchant.
	IsActive bool `protobuf:"varint,16,opt,name=is_active,json=isActive,proto3" json:"is_active" bson:"is_active"`
	// @inject_tag: json:"mcc_code" bson:"mcc_code"
	//
	// The Merchant Category Code (MCC) is a four-digit number listed in ISO 18245.
	MccCode string `protobuf:"bytes,17,opt,name=mcc_code,json=mccCode,proto3" json:"mcc_code" bson:"mcc_code"`
}

func (x *MoneyBackCostMerchant) Reset() {
	*x = MoneyBackCostMerchant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneyBackCostMerchant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneyBackCostMerchant) ProtoMessage() {}

func (x *MoneyBackCostMerchant) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneyBackCostMerchant.ProtoReflect.Descriptor instead.
func (*MoneyBackCostMerchant) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{94}
}

func (x *MoneyBackCostMerchant) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MoneyBackCostMerchant) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *MoneyBackCostMerchant) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MoneyBackCostMerchant) GetPayoutCurrency() string {
	if x != nil {
		return x.PayoutCurrency
	}
	return ""
}

func (x *MoneyBackCostMerchant) GetUndoReason() string {
	if x != nil {
		return x.UndoReason
	}
	return ""
}

func (x *MoneyBackCostMerchant) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *MoneyBackCostMerchant) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *MoneyBackCostMerchant) GetDaysFrom() int32 {
	if x != nil {
		return x.DaysFrom
	}
	return 0
}

func (x *MoneyBackCostMerchant) GetPaymentStage() int32 {
	if x != nil {
		return x.PaymentStage
	}
	return 0
}

func (x *MoneyBackCostMerchant) GetPercent() float64 {
	if x != nil {
		return x.Percent
	}
	return 0
}

func (x *MoneyBackCostMerchant) GetFixAmount() float64 {
	if x != nil {
		return x.FixAmount
	}
	return 0
}

func (x *MoneyBackCostMerchant) GetFixAmountCurrency() string {
	if x != nil {
		return x.FixAmountCurrency
	}
	return ""
}

func (x *MoneyBackCostMerchant) GetIsPaidByMerchant() bool {
	if x != nil {
		return x.IsPaidByMerchant
	}
	return false
}

func (x *MoneyBackCostMerchant) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *MoneyBackCostMerchant) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *MoneyBackCostMerchant) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *MoneyBackCostMerchant) GetMccCode() string {
	if x != nil {
		return x.MccCode
	}
	return ""
}

type MoneyBackCostMerchantRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"merchant_id" bson:"merchant_id" validate:"required,hexadecimal,len=24"
	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id" bson:"merchant_id" validate:"required,hexadecimal,len=24"`
	//@inject_tag: json:"name" bson:"name" validate:"required,alpha" query:"name"
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name" bson:"name" validate:"required,alpha" query:"name"`
	//@inject_tag: json:"payout_currency" bson:"payout_currency" validate:"required,alpha,len=3" query:"payout_currency"
	PayoutCurrency string `protobuf:"bytes,3,opt,name=payout_currency,json=payoutCurrency,proto3" json:"payout_currency" bson:"payout_currency" validate:"required,alpha,len=3" query:"payout_currency"`
	//@inject_tag: json:"undo_reason" bson:"undo_reason" validate:"required,alpha,oneof=refund reversal chargeback" query:"undo_reason"
	UndoReason string `protobuf:"bytes,4,opt,name=undo_reason,json=undoReason,proto3" json:"undo_reason" bson:"undo_reason" validate:"required,alpha,oneof=refund reversal chargeback" query:"undo_reason"`
	//@inject_tag: json:"region" bson:"region" validate:"required" query:"region"
	Region string `protobuf:"bytes,5,opt,name=region,proto3" json:"region" bson:"region" validate:"required" query:"region"`
	//@inject_tag: json:"country" bson:"country" validate:"omitempty,alpha,len=2" query:"country"
	Country string `protobuf:"bytes,6,opt,name=country,proto3" json:"country" bson:"country" validate:"omitempty,alpha,len=2" query:"country"`
	// @inject_tag: json:"days" bson:"days" validate:"required,numeric,gte=0" query:"days"
	Days int32 `protobuf:"varint,7,opt,name=days,proto3" json:"days" bson:"days" validate:"required,numeric,gte=0" query:"days"`
	// @inject_tag: json:"payment_stage" bson:"payment_stage" validate:"numeric,gte=1" query:"payment_stage"
	PaymentStage int32 `protobuf:"varint,8,opt,name=payment_stage,json=paymentStage,proto3" json:"payment_stage" bson:"payment_stage" validate:"numeric,gte=1" query:"payment_stage"`
	//@inject_tag: json:"mcc_code" bson:"mcc_code" validate:"required,numeric,len=4" query:"mcc_code"
	MccCode string `protobuf:"bytes,9,opt,name=mcc_code,json=mccCode,proto3" json:"mcc_code" bson:"mcc_code" validate:"required,numeric,len=4" query:"mcc_code"`
}

func (x *MoneyBackCostMerchantRequest) Reset() {
	*x = MoneyBackCostMerchantRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneyBackCostMerchantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneyBackCostMerchantRequest) ProtoMessage() {}

func (x *MoneyBackCostMerchantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneyBackCostMerchantRequest.ProtoReflect.Descriptor instead.
func (*MoneyBackCostMerchantRequest) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{95}
}

func (x *MoneyBackCostMerchantRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *MoneyBackCostMerchantRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MoneyBackCostMerchantRequest) GetPayoutCurrency() string {
	if x != nil {
		return x.PayoutCurrency
	}
	return ""
}

func (x *MoneyBackCostMerchantRequest) GetUndoReason() string {
	if x != nil {
		return x.UndoReason
	}
	return ""
}

func (x *MoneyBackCostMerchantRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *MoneyBackCostMerchantRequest) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *MoneyBackCostMerchantRequest) GetDays() int32 {
	if x != nil {
		return x.Days
	}
	return 0
}

func (x *MoneyBackCostMerchantRequest) GetPaymentStage() int32 {
	if x != nil {
		return x.PaymentStage
	}
	return 0
}

func (x *MoneyBackCostMerchantRequest) GetMccCode() string {
	if x != nil {
		return x.MccCode
	}
	return ""
}

type PaymentCostDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"id" bson:"_id" validate:"required,hexadecimal,len=24"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id" bson:"_id" validate:"required,hexadecimal,len=24"`
}

func (x *PaymentCostDeleteRequest) Reset() {
	*x = PaymentCostDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentCostDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentCostDeleteRequest) ProtoMessage() {}

func (x *PaymentCostDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentCostDeleteRequest.ProtoReflect.Descriptor instead.
func (*PaymentCostDeleteRequest) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{96}
}

func (x *PaymentCostDeleteRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type MoneyBackCostMerchantList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"items"
	//
	// The merchant costs for money back operations.
	Items []*MoneyBackCostMerchant `protobuf:"bytes,1,rep,name=items,proto3" json:"items"`
}

func (x *MoneyBackCostMerchantList) Reset() {
	*x = MoneyBackCostMerchantList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneyBackCostMerchantList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneyBackCostMerchantList) ProtoMessage() {}

func (x *MoneyBackCostMerchantList) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneyBackCostMerchantList.ProtoReflect.Descriptor instead.
func (*MoneyBackCostMerchantList) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{97}
}

func (x *MoneyBackCostMerchantList) GetItems() []*MoneyBackCostMerchant {
	if x != nil {
		return x.Items
	}
	return nil
}

type MoneyBackCostMerchantListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"merchant_id" bson:"merchant_id" validate:"required,hexadecimal,len=24"
	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id" bson:"merchant_id" validate:"required,hexadecimal,len=24"`
}

func (x *MoneyBackCostMerchantListRequest) Reset() {
	*x = MoneyBackCostMerchantListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneyBackCostMerchantListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneyBackCostMerchantListRequest) ProtoMessage() {}

func (x *MoneyBackCostMerchantListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneyBackCostMerchantListRequest.ProtoReflect.Descriptor instead.
func (*MoneyBackCostMerchantListRequest) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{98}
}

func (x *MoneyBackCostMerchantListRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

type AccountingEntrySource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: faker:"objectIdString"
	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" faker:"objectIdString"`
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *AccountingEntrySource) Reset() {
	*x = AccountingEntrySource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountingEntrySource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountingEntrySource) ProtoMessage() {}

func (x *AccountingEntrySource) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountingEntrySource.ProtoReflect.Descriptor instead.
func (*AccountingEntrySource) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{99}
}

func (x *AccountingEntrySource) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AccountingEntrySource) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type AccountingEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: faker:"objectIdString"
	Id     string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" faker:"objectIdString"`
	Object string                 `protobuf:"bytes,2,opt,name=object,proto3" json:"object,omitempty"`
	Type   string                 `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Source *AccountingEntrySource `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
	//@inject_tag: faker:"objectIdString"
	MerchantId         string               `protobuf:"bytes,5,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty" faker:"objectIdString"`
	Amount             float64              `protobuf:"fixed64,6,opt,name=amount,proto3" json:"amount,omitempty"`   // in royalty_currency
	Currency           string               `protobuf:"bytes,7,opt,name=currency,proto3" json:"currency,omitempty"` // royalty_currency (merchant payout currency)
	Reason             string               `protobuf:"bytes,8,opt,name=reason,proto3" json:"reason,omitempty"`
	Status             string               `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
	Country            string               `protobuf:"bytes,10,opt,name=country,proto3" json:"country,omitempty"`
	OriginalAmount     float64              `protobuf:"fixed64,11,opt,name=original_amount,json=originalAmount,proto3" json:"original_amount,omitempty"`
	OriginalCurrency   string               `protobuf:"bytes,12,opt,name=original_currency,json=originalCurrency,proto3" json:"original_currency,omitempty"`
	LocalAmount        float64              `protobuf:"fixed64,13,opt,name=local_amount,json=localAmount,proto3" json:"local_amount,omitempty"`
	LocalCurrency      string               `protobuf:"bytes,14,opt,name=local_currency,json=localCurrency,proto3" json:"local_currency,omitempty"`
	CreatedAt          *timestamp.Timestamp `protobuf:"bytes,15,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	AvailableOn        *timestamp.Timestamp `protobuf:"bytes,16,opt,name=available_on,json=availableOn,proto3" json:"available_on,omitempty"`
	OperatingCompanyId string               `protobuf:"bytes,17,opt,name=operating_company_id,json=operatingCompanyId,proto3" json:"operating_company_id,omitempty"`
	// The transaction amount in royalty currency rounded to 2 digits after decimal point
	AmountRounded float64 `protobuf:"fixed64,18,opt,name=amount_rounded,json=amountRounded,proto3" json:"amount_rounded,omitempty"`
	// The transaction amount in currency of accounting entry creation rounded to 2 digits after decimal point
	OriginalAmountRounded float64 `protobuf:"fixed64,19,opt,name=original_amount_rounded,json=originalAmountRounded,proto3" json:"original_amount_rounded,omitempty"`
	// The transaction amount in customer's region currency rounded to 2 digits after decimal point
	LocalAmountRounded float64 `protobuf:"fixed64,20,opt,name=local_amount_rounded,json=localAmountRounded,proto3" json:"local_amount_rounded,omitempty"`
}

func (x *AccountingEntry) Reset() {
	*x = AccountingEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountingEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountingEntry) ProtoMessage() {}

func (x *AccountingEntry) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountingEntry.ProtoReflect.Descriptor instead.
func (*AccountingEntry) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{100}
}

func (x *AccountingEntry) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AccountingEntry) GetObject() string {
	if x != nil {
		return x.Object
	}
	return ""
}

func (x *AccountingEntry) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AccountingEntry) GetSource() *AccountingEntrySource {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *AccountingEntry) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *AccountingEntry) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *AccountingEntry) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *AccountingEntry) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *AccountingEntry) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *AccountingEntry) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *AccountingEntry) GetOriginalAmount() float64 {
	if x != nil {
		return x.OriginalAmount
	}
	return 0
}

func (x *AccountingEntry) GetOriginalCurrency() string {
	if x != nil {
		return x.OriginalCurrency
	}
	return ""
}

func (x *AccountingEntry) GetLocalAmount() float64 {
	if x != nil {
		return x.LocalAmount
	}
	return 0
}

func (x *AccountingEntry) GetLocalCurrency() string {
	if x != nil {
		return x.LocalCurrency
	}
	return ""
}

func (x *AccountingEntry) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *AccountingEntry) GetAvailableOn() *timestamp.Timestamp {
	if x != nil {
		return x.AvailableOn
	}
	return nil
}

func (x *AccountingEntry) GetOperatingCompanyId() string {
	if x != nil {
		return x.OperatingCompanyId
	}
	return ""
}

func (x *AccountingEntry) GetAmountRounded() float64 {
	if x != nil {
		return x.AmountRounded
	}
	return 0
}

func (x *AccountingEntry) GetOriginalAmountRounded() float64 {
	if x != nil {
		return x.OriginalAmountRounded
	}
	return 0
}

func (x *AccountingEntry) GetLocalAmountRounded() float64 {
	if x != nil {
		return x.LocalAmountRounded
	}
	return 0
}

type RoyaltyReportTotals struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: bson:"transactions_count"
	//
	// The total transactions.
	TransactionsCount int32 `protobuf:"varint,2,opt,name=transactions_count,json=transactionsCount,proto3" json:"transactions_count,omitempty" bson:"transactions_count"`
	//@inject_tag: bson:"fee_amount"
	//
	// The amount of fees.
	FeeAmount float64 `protobuf:"fixed64,3,opt,name=fee_amount,json=feeAmount,proto3" json:"fee_amount,omitempty" bson:"fee_amount"`
	//@inject_tag: bson:"vat_amount"
	//
	// The amount of VAT.
	VatAmount float64 `protobuf:"fixed64,4,opt,name=vat_amount,json=vatAmount,proto3" json:"vat_amount,omitempty" bson:"vat_amount"`
	//@inject_tag: bson:"payout_amount"
	//
	// The payout amount.
	PayoutAmount float64 `protobuf:"fixed64,5,opt,name=payout_amount,json=payoutAmount,proto3" json:"payout_amount,omitempty" bson:"payout_amount"`
	//@inject_tag: bson:"rolling_reserve_total_amount"
	//
	// The rolling reserve amount.
	RollingReserveAmount float64 `protobuf:"fixed64,6,opt,name=rolling_reserve_amount,json=rollingReserveAmount,proto3" json:"rolling_reserve_amount,omitempty" bson:"rolling_reserve_total_amount"`
	//@inject_tag: bson:"correction_total_amount"
	//
	// The corrections amount.
	CorrectionAmount float64 `protobuf:"fixed64,7,opt,name=correction_amount,json=correctionAmount,proto3" json:"correction_amount,omitempty" bson:"correction_total_amount"`
	//@inject_tag: json:"b2b_vat_rate" bson:"b2b_vat_rate" validate:"numeric,gte=0"
	//
	// Effective rate of b2b_vat.
	B2BVatRate float64 `protobuf:"fixed64,8,opt,name=b2b_vat_rate,json=b2bVatRate,proto3" json:"b2b_vat_rate" bson:"b2b_vat_rate" validate:"numeric,gte=0"`
	//@inject_tag: json:"b2b_vat_base" bson:"b2b_vat_base" validate:"numeric,gte=0"
	//
	// The b2b vat base.
	B2BVatBase float64 `protobuf:"fixed64,9,opt,name=b2b_vat_base,json=b2bVatBase,proto3" json:"b2b_vat_base" bson:"b2b_vat_base" validate:"numeric,gte=0"`
	//@inject_tag: json:"b2b_vat_amount" bson:"b2b_vat_amount" validate:"numeric,gte=0"
	//
	// The b2b vat amount.
	B2BVatAmount float64 `protobuf:"fixed64,10,opt,name=b2b_vat_amount,json=b2bVatAmount,proto3" json:"b2b_vat_amount" bson:"b2b_vat_amount" validate:"numeric,gte=0"`
	//@inject_tag: json:"final_payout_amount" bson:"final_payout_amount" validate:"numeric,gte=0"
	//
	// The final payout amount.
	FinalPayoutAmount float64 `protobuf:"fixed64,11,opt,name=final_payout_amount,json=finalPayoutAmount,proto3" json:"final_payout_amount" bson:"final_payout_amount" validate:"numeric,gte=0"`
}

func (x *RoyaltyReportTotals) Reset() {
	*x = RoyaltyReportTotals{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoyaltyReportTotals) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoyaltyReportTotals) ProtoMessage() {}

func (x *RoyaltyReportTotals) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoyaltyReportTotals.ProtoReflect.Descriptor instead.
func (*RoyaltyReportTotals) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{101}
}

func (x *RoyaltyReportTotals) GetTransactionsCount() int32 {
	if x != nil {
		return x.TransactionsCount
	}
	return 0
}

func (x *RoyaltyReportTotals) GetFeeAmount() float64 {
	if x != nil {
		return x.FeeAmount
	}
	return 0
}

func (x *RoyaltyReportTotals) GetVatAmount() float64 {
	if x != nil {
		return x.VatAmount
	}
	return 0
}

func (x *RoyaltyReportTotals) GetPayoutAmount() float64 {
	if x != nil {
		return x.PayoutAmount
	}
	return 0
}

func (x *RoyaltyReportTotals) GetRollingReserveAmount() float64 {
	if x != nil {
		return x.RollingReserveAmount
	}
	return 0
}

func (x *RoyaltyReportTotals) GetCorrectionAmount() float64 {
	if x != nil {
		return x.CorrectionAmount
	}
	return 0
}

func (x *RoyaltyReportTotals) GetB2BVatRate() float64 {
	if x != nil {
		return x.B2BVatRate
	}
	return 0
}

func (x *RoyaltyReportTotals) GetB2BVatBase() float64 {
	if x != nil {
		return x.B2BVatBase
	}
	return 0
}

func (x *RoyaltyReportTotals) GetB2BVatAmount() float64 {
	if x != nil {
		return x.B2BVatAmount
	}
	return 0
}

func (x *RoyaltyReportTotals) GetFinalPayoutAmount() float64 {
	if x != nil {
		return x.FinalPayoutAmount
	}
	return 0
}

type RoyaltyReportProductSummaryItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: bson:"product" json:"product"
	//
	// The name of the product or project.
	Product string `protobuf:"bytes,1,opt,name=product,proto3" json:"product" bson:"product"`
	//@inject_tag: bson:"region" json:"region"
	//
	// The country's name. Two-letter country code in ISO 3166-1, in uppercase (for instance US).
	Region string `protobuf:"bytes,2,opt,name=region,proto3" json:"region" bson:"region"`
	//@inject_tag: bson:"total_transactions" json:"total_transactions"
	//
	// The total number of transactions for the current product or project in the current country (including sales and returns).
	TotalTransactions int32 `protobuf:"varint,3,opt,name=total_transactions,json=totalTransactions,proto3" json:"total_transactions" bson:"total_transactions"`
	//@inject_tag: bson:"sales_count" json:"sales_count"
	//
	// The number of sales for the current product or project in the current country.
	SalesCount int32 `protobuf:"varint,4,opt,name=sales_count,json=salesCount,proto3" json:"sales_count" bson:"sales_count"`
	//@inject_tag: bson:"gross_sales_amount" json:"gross_sales_amount"
	//
	// The gross amount of sales for current product or project in the current country.
	GrossSalesAmount float64 `protobuf:"fixed64,5,opt,name=gross_sales_amount,json=grossSalesAmount,proto3" json:"gross_sales_amount" bson:"gross_sales_amount"`
	//@inject_tag: bson:"returns_count" json:"returns_count"
	//
	// The number of returns for current product or project in the current country.
	ReturnsCount int32 `protobuf:"varint,6,opt,name=returns_count,json=returnsCount,proto3" json:"returns_count" bson:"returns_count"`
	//@inject_tag: bson:"gross_returns_amount" json:"gross_returns_amount"
	//
	// The gross amount of returns for current product or project in the current country.
	GrossReturnsAmount float64 `protobuf:"fixed64,7,opt,name=gross_returns_amount,json=grossReturnsAmount,proto3" json:"gross_returns_amount" bson:"gross_returns_amount"`
	//@inject_tag: bson:"gross_total_amount" json:"gross_total_amount"
	//
	// The total gross amount (sales minus returns) for current product or project in the current country.
	GrossTotalAmount float64 `protobuf:"fixed64,8,opt,name=gross_total_amount,json=grossTotalAmount,proto3" json:"gross_total_amount" bson:"gross_total_amount"`
	//@inject_tag: bson:"total_fees" json:"total_fees"
	//
	// The amount of fees for current product or project in the current country.
	TotalFees float64 `protobuf:"fixed64,9,opt,name=total_fees,json=totalFees,proto3" json:"total_fees" bson:"total_fees"`
	//@inject_tag: bson:"total_vat" json:"total_vat"
	//
	// The amount of VAT for current product or project in the current country.
	TotalVat float64 `protobuf:"fixed64,10,opt,name=total_vat,json=totalVat,proto3" json:"total_vat" bson:"total_vat"`
	//@inject_tag: bson:"payout_amount" json:"payout_amount"
	//
	// The payout amount for current product or project in the current country.
	PayoutAmount float64 `protobuf:"fixed64,11,opt,name=payout_amount,json=payoutAmount,proto3" json:"payout_amount" bson:"payout_amount"`
}

func (x *RoyaltyReportProductSummaryItem) Reset() {
	*x = RoyaltyReportProductSummaryItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoyaltyReportProductSummaryItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoyaltyReportProductSummaryItem) ProtoMessage() {}

func (x *RoyaltyReportProductSummaryItem) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoyaltyReportProductSummaryItem.ProtoReflect.Descriptor instead.
func (*RoyaltyReportProductSummaryItem) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{102}
}

func (x *RoyaltyReportProductSummaryItem) GetProduct() string {
	if x != nil {
		return x.Product
	}
	return ""
}

func (x *RoyaltyReportProductSummaryItem) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *RoyaltyReportProductSummaryItem) GetTotalTransactions() int32 {
	if x != nil {
		return x.TotalTransactions
	}
	return 0
}

func (x *RoyaltyReportProductSummaryItem) GetSalesCount() int32 {
	if x != nil {
		return x.SalesCount
	}
	return 0
}

func (x *RoyaltyReportProductSummaryItem) GetGrossSalesAmount() float64 {
	if x != nil {
		return x.GrossSalesAmount
	}
	return 0
}

func (x *RoyaltyReportProductSummaryItem) GetReturnsCount() int32 {
	if x != nil {
		return x.ReturnsCount
	}
	return 0
}

func (x *RoyaltyReportProductSummaryItem) GetGrossReturnsAmount() float64 {
	if x != nil {
		return x.GrossReturnsAmount
	}
	return 0
}

func (x *RoyaltyReportProductSummaryItem) GetGrossTotalAmount() float64 {
	if x != nil {
		return x.GrossTotalAmount
	}
	return 0
}

func (x *RoyaltyReportProductSummaryItem) GetTotalFees() float64 {
	if x != nil {
		return x.TotalFees
	}
	return 0
}

func (x *RoyaltyReportProductSummaryItem) GetTotalVat() float64 {
	if x != nil {
		return x.TotalVat
	}
	return 0
}

func (x *RoyaltyReportProductSummaryItem) GetPayoutAmount() float64 {
	if x != nil {
		return x.PayoutAmount
	}
	return 0
}

type RoyaltyReportCorrectionItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: bson:"accounting_entry_id" json:"accounting_entry_id" faker:"objectIdString"
	//
	// The unique identifier for the linked accounting entry.
	AccountingEntryId string `protobuf:"bytes,1,opt,name=accounting_entry_id,json=accountingEntryId,proto3" json:"accounting_entry_id" bson:"accounting_entry_id" faker:"objectIdString"`
	//@inject_tag: bson:"amount" json:"amount"
	//
	// The amount of the correction.
	Amount float64 `protobuf:"fixed64,2,opt,name=amount,proto3" json:"amount" bson:"amount"`
	//@inject_tag: bson:"currency" json:"currency"
	//
	// The currency of the correction. Three-letter Currency Code ISO 4217, in uppercase.
	Currency string `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency" bson:"currency"`
	//@inject_tag: bson:"reason" json:"reason"
	//
	// The correction reason.
	Reason string `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason" bson:"reason"`
	//@inject_tag: bson:"entry_date" json:"entry_date"
	//
	// The date of the correction.
	EntryDate *timestamp.Timestamp `protobuf:"bytes,5,opt,name=entry_date,json=entryDate,proto3" json:"entry_date" bson:"entry_date"`
}

func (x *RoyaltyReportCorrectionItem) Reset() {
	*x = RoyaltyReportCorrectionItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoyaltyReportCorrectionItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoyaltyReportCorrectionItem) ProtoMessage() {}

func (x *RoyaltyReportCorrectionItem) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoyaltyReportCorrectionItem.ProtoReflect.Descriptor instead.
func (*RoyaltyReportCorrectionItem) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{103}
}

func (x *RoyaltyReportCorrectionItem) GetAccountingEntryId() string {
	if x != nil {
		return x.AccountingEntryId
	}
	return ""
}

func (x *RoyaltyReportCorrectionItem) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *RoyaltyReportCorrectionItem) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *RoyaltyReportCorrectionItem) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *RoyaltyReportCorrectionItem) GetEntryDate() *timestamp.Timestamp {
	if x != nil {
		return x.EntryDate
	}
	return nil
}

type RoyaltyReportSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: bson:"products_items" json:"products_items"
	//
	// The summary for each product (project) and country.
	ProductsItems []*RoyaltyReportProductSummaryItem `protobuf:"bytes,1,rep,name=products_items,json=productsItems,proto3" json:"products_items" bson:"products_items"`
	//@inject_tag: bson:"products_total" json:"products_total"
	//
	// The summary totals for all product (project) and country.
	ProductsTotal *RoyaltyReportProductSummaryItem `protobuf:"bytes,2,opt,name=products_total,json=productsTotal,proto3" json:"products_total" bson:"products_total"`
	//@inject_tag: bson:"corrections" json:"corrections"
	//
	// The list of the applied corrections (if any).
	Corrections []*RoyaltyReportCorrectionItem `protobuf:"bytes,3,rep,name=corrections,proto3" json:"corrections" bson:"corrections"`
	//@inject_tag: bson:"rolling_reserves" json:"rolling_reserves"
	//
	// The list of the applied rolling reserves (if any).
	RollingReserves []*RoyaltyReportCorrectionItem `protobuf:"bytes,4,rep,name=rolling_reserves,json=rollingReserves,proto3" json:"rolling_reserves" bson:"rolling_reserves"`
}

func (x *RoyaltyReportSummary) Reset() {
	*x = RoyaltyReportSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoyaltyReportSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoyaltyReportSummary) ProtoMessage() {}

func (x *RoyaltyReportSummary) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoyaltyReportSummary.ProtoReflect.Descriptor instead.
func (*RoyaltyReportSummary) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{104}
}

func (x *RoyaltyReportSummary) GetProductsItems() []*RoyaltyReportProductSummaryItem {
	if x != nil {
		return x.ProductsItems
	}
	return nil
}

func (x *RoyaltyReportSummary) GetProductsTotal() *RoyaltyReportProductSummaryItem {
	if x != nil {
		return x.ProductsTotal
	}
	return nil
}

func (x *RoyaltyReportSummary) GetCorrections() []*RoyaltyReportCorrectionItem {
	if x != nil {
		return x.Corrections
	}
	return nil
}

func (x *RoyaltyReportSummary) GetRollingReserves() []*RoyaltyReportCorrectionItem {
	if x != nil {
		return x.RollingReserves
	}
	return nil
}

type RoyaltyReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: bson:"_id" json:"id" faker:"objectIdString"
	//
	// The unique identifier for the royalty report.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id" bson:"_id" faker:"objectIdString"`
	//@inject_tag: bson:"merchant_id" json:"merchant_id" faker:"objectIdString"
	//
	// The unique identifier for the merchant.
	MerchantId string `protobuf:"bytes,2,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id" bson:"merchant_id" faker:"objectIdString"`
	//@inject_tag: bson:"created_at" json:"created_at"
	//
	// The date of the royalty report creation.
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at" bson:"created_at"`
	//@inject_tag: bson:"updated_at" json:"updated_at"
	//
	// The date of the royalty report last update.
	UpdatedAt *timestamp.Timestamp `protobuf:"bytes,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at" bson:"updated_at"`
	//@inject_tag: bson:"payout_date" json:"payout_date"
	//
	// The date when the report was paid.
	PayoutDate *timestamp.Timestamp `protobuf:"bytes,5,opt,name=payout_date,json=payoutDate,proto3" json:"payout_date" bson:"payout_date"`
	//@inject_tag: bson:"status" json:"status"
	//
	// The document status. Available values: skip, pending, in_progress, paid, canceled, failed.
	Status string `protobuf:"bytes,6,opt,name=status,proto3" json:"status" bson:"status"`
	//@inject_tag: bson:"period_from" json:"period_from"
	//
	// The start date of the report time period.
	PeriodFrom *timestamp.Timestamp `protobuf:"bytes,7,opt,name=period_from,json=periodFrom,proto3" json:"period_from" bson:"period_from"`
	//@inject_tag: bson:"period_to" json:"period_to"
	//
	// The end date of the report time period.
	PeriodTo *timestamp.Timestamp `protobuf:"bytes,8,opt,name=period_to,json=periodTo,proto3" json:"period_to" bson:"period_to"`
	//@inject_tag: bson:"accept_expire_at" json:"accept_expire_at"
	//
	// The date when the royalty report will be auto-accepted (if the merchant hadn't accept it yet or started a dispute).
	AcceptExpireAt *timestamp.Timestamp `protobuf:"bytes,9,opt,name=accept_expire_at,json=acceptExpireAt,proto3" json:"accept_expire_at" bson:"accept_expire_at"`
	//@inject_tag: bson:"merchant_id" json:"accepted_at"
	//
	// The date when the royalty report was accepted.
	AcceptedAt *timestamp.Timestamp `protobuf:"bytes,10,opt,name=accepted_at,json=acceptedAt,proto3" json:"accepted_at" bson:"merchant_id"`
	//@inject_tag: bson:"totals" json:"totals"
	//
	// The totals section of the royalty report.
	Totals *RoyaltyReportTotals `protobuf:"bytes,11,opt,name=totals,proto3" json:"totals" bson:"totals"`
	//@inject_tag: bson:"currency" json:"currency"
	//
	// The currency of the royalty report. Three-letter Currency Code ISO 4217, in uppercase.
	Currency string `protobuf:"bytes,12,opt,name=currency,proto3" json:"currency" bson:"currency"`
	//@inject_tag: bson:"summary" json:"summary"
	//
	// The summary section of the royalty report.
	Summary *RoyaltyReportSummary `protobuf:"bytes,13,opt,name=summary,proto3" json:"summary" bson:"summary"`
	//@inject_tag: bson:"dispute_reason" json:"dispute_reason"
	//
	// The dispute reason (if any).
	DisputeReason string `protobuf:"bytes,14,opt,name=dispute_reason,json=disputeReason,proto3" json:"dispute_reason" bson:"dispute_reason"`
	//@inject_tag: bson:"dispute_started_at" json:"dispute_closed_at"
	//
	// The start date of the dispute (if any).
	DisputeStartedAt *timestamp.Timestamp `protobuf:"bytes,15,opt,name=dispute_started_at,json=disputeStartedAt,proto3" json:"dispute_closed_at" bson:"dispute_started_at"`
	//@inject_tag: bson:"dispute_closed_at" json:"dispute_closed_at"
	//
	// The resolution date of the dispute (if any).
	DisputeClosedAt *timestamp.Timestamp `protobuf:"bytes,16,opt,name=dispute_closed_at,json=disputeClosedAt,proto3" json:"dispute_closed_at" bson:"dispute_closed_at"`
	//@inject_tag: bson:"is_auto_accepted" json:"is_auto_accepted"
	//
	// Has a true value if the royalty report is auto-accepted.
	IsAutoAccepted bool `protobuf:"varint,17,opt,name=is_auto_accepted,json=isAutoAccepted,proto3" json:"is_auto_accepted" bson:"is_auto_accepted"`
	//@inject_tag: bson:"payout_document_id" json:"payout_document_id"
	//
	// The unique identifier for the payout document.
	PayoutDocumentId string `protobuf:"bytes,18,opt,name=payout_document_id,json=payoutDocumentId,proto3" json:"payout_document_id" bson:"payout_document_id"`
	// @inject_tag: json:"operating_company_id" bson:"operating_company_id"
	//
	// The unique identifier for the operating company.
	OperatingCompanyId string `protobuf:"bytes,19,opt,name=operating_company_id,json=operatingCompanyId,proto3" json:"operating_company_id" bson:"operating_company_id"`
	// @inject_tag: json:"string_period_from" bson:"string_period_from"
	//
	// Period from in string format.
	StringPeriodFrom string `protobuf:"bytes,20,opt,name=string_period_from,json=stringPeriodFrom,proto3" json:"string_period_from" bson:"string_period_from"`
	// @inject_tag: json:"string_period_to" bson:"string_period_to"
	//
	// Period to in string format.
	StringPeriodTo string `protobuf:"bytes,21,opt,name=string_period_to,json=stringPeriodTo,proto3" json:"string_period_to" bson:"string_period_to"`
	//@inject_tag: json:"merchant_name"
	//
	// The merchant name who owns the report.
	MerchantName string `protobuf:"bytes,22,opt,name=merchant_name,json=merchantName,proto3" json:"merchant_name"`
}

func (x *RoyaltyReport) Reset() {
	*x = RoyaltyReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoyaltyReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoyaltyReport) ProtoMessage() {}

func (x *RoyaltyReport) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoyaltyReport.ProtoReflect.Descriptor instead.
func (*RoyaltyReport) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{105}
}

func (x *RoyaltyReport) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RoyaltyReport) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *RoyaltyReport) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *RoyaltyReport) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *RoyaltyReport) GetPayoutDate() *timestamp.Timestamp {
	if x != nil {
		return x.PayoutDate
	}
	return nil
}

func (x *RoyaltyReport) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *RoyaltyReport) GetPeriodFrom() *timestamp.Timestamp {
	if x != nil {
		return x.PeriodFrom
	}
	return nil
}

func (x *RoyaltyReport) GetPeriodTo() *timestamp.Timestamp {
	if x != nil {
		return x.PeriodTo
	}
	return nil
}

func (x *RoyaltyReport) GetAcceptExpireAt() *timestamp.Timestamp {
	if x != nil {
		return x.AcceptExpireAt
	}
	return nil
}

func (x *RoyaltyReport) GetAcceptedAt() *timestamp.Timestamp {
	if x != nil {
		return x.AcceptedAt
	}
	return nil
}

func (x *RoyaltyReport) GetTotals() *RoyaltyReportTotals {
	if x != nil {
		return x.Totals
	}
	return nil
}

func (x *RoyaltyReport) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *RoyaltyReport) GetSummary() *RoyaltyReportSummary {
	if x != nil {
		return x.Summary
	}
	return nil
}

func (x *RoyaltyReport) GetDisputeReason() string {
	if x != nil {
		return x.DisputeReason
	}
	return ""
}

func (x *RoyaltyReport) GetDisputeStartedAt() *timestamp.Timestamp {
	if x != nil {
		return x.DisputeStartedAt
	}
	return nil
}

func (x *RoyaltyReport) GetDisputeClosedAt() *timestamp.Timestamp {
	if x != nil {
		return x.DisputeClosedAt
	}
	return nil
}

func (x *RoyaltyReport) GetIsAutoAccepted() bool {
	if x != nil {
		return x.IsAutoAccepted
	}
	return false
}

func (x *RoyaltyReport) GetPayoutDocumentId() string {
	if x != nil {
		return x.PayoutDocumentId
	}
	return ""
}

func (x *RoyaltyReport) GetOperatingCompanyId() string {
	if x != nil {
		return x.OperatingCompanyId
	}
	return ""
}

func (x *RoyaltyReport) GetStringPeriodFrom() string {
	if x != nil {
		return x.StringPeriodFrom
	}
	return ""
}

func (x *RoyaltyReport) GetStringPeriodTo() string {
	if x != nil {
		return x.StringPeriodTo
	}
	return ""
}

func (x *RoyaltyReport) GetMerchantName() string {
	if x != nil {
		return x.MerchantName
	}
	return ""
}

type RoyaltyReportChanges struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: faker:"objectIdString"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" faker:"objectIdString"`
	//@inject_tag: faker:"objectIdString"
	RoyaltyReportId string               `protobuf:"bytes,2,opt,name=royalty_report_id,json=royaltyReportId,proto3" json:"royalty_report_id,omitempty" faker:"objectIdString"`
	Source          string               `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	Ip              string               `protobuf:"bytes,4,opt,name=ip,proto3" json:"ip,omitempty"`
	Hash            string               `protobuf:"bytes,7,opt,name=hash,proto3" json:"hash,omitempty"`
	CreatedAt       *timestamp.Timestamp `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *RoyaltyReportChanges) Reset() {
	*x = RoyaltyReportChanges{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoyaltyReportChanges) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoyaltyReportChanges) ProtoMessage() {}

func (x *RoyaltyReportChanges) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoyaltyReportChanges.ProtoReflect.Descriptor instead.
func (*RoyaltyReportChanges) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{106}
}

func (x *RoyaltyReportChanges) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RoyaltyReportChanges) GetRoyaltyReportId() string {
	if x != nil {
		return x.RoyaltyReportId
	}
	return ""
}

func (x *RoyaltyReportChanges) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *RoyaltyReportChanges) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *RoyaltyReportChanges) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *RoyaltyReportChanges) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type VatTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"id" bson:"_id" validate:"omitempty,hexadecimal,len=24"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id" bson:"_id" validate:"omitempty,hexadecimal,len=24"`
	//@inject_tag: json:"order_id" bson:"order_id" validate:"required,hexadecimal,len=24"
	OrderId string `protobuf:"bytes,2,opt,name=order_id,json=orderId,proto3" json:"order_id" bson:"order_id" validate:"required,hexadecimal,len=24"`
	//@inject_tag: json:"transaction_id" bson:"transaction_id" validate:"required"
	TransactionId string `protobuf:"bytes,3,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id" bson:"transaction_id" validate:"required"`
	//@inject_tag: json:"transaction_type" bson:"transaction_type" validate:"required,oneof=payment refund chargeback"
	TransactionType string `protobuf:"bytes,4,opt,name=transaction_type,json=transactionType,proto3" json:"transaction_type" bson:"transaction_type" validate:"required,oneof=payment refund chargeback"`
	// @inject_tag: json:"transaction_amount" bson:"transaction_amount" validate:"numeric,gte=0"
	TransactionAmount float64 `protobuf:"fixed64,5,opt,name=transaction_amount,json=transactionAmount,proto3" json:"transaction_amount" bson:"transaction_amount" validate:"numeric,gte=0"`
	//@inject_tag: json:"transaction_currency" bson:"transaction_currency" validate:"required,alpha,len=3"
	TransactionCurrency string `protobuf:"bytes,6,opt,name=transaction_currency,json=transactionCurrency,proto3" json:"transaction_currency" bson:"transaction_currency" validate:"required,alpha,len=3"`
	// @inject_tag: json:"vat_amount" bson:"vat_amount" validate:"numeric,gte=0"
	VatAmount float64 `protobuf:"fixed64,7,opt,name=vat_amount,json=vatAmount,proto3" json:"vat_amount" bson:"vat_amount" validate:"numeric,gte=0"`
	//@inject_tag: json:"vat_currency" bson:"vat_currency" validate:"required,alpha,len=3"
	VatCurrency string `protobuf:"bytes,8,opt,name=vat_currency,json=vatCurrency,proto3" json:"vat_currency" bson:"vat_currency" validate:"required,alpha,len=3"`
	// @inject_tag: json:"fees_amount" bson:"fees_amount" validate:"numeric,gte=0"
	FeesAmount float64 `protobuf:"fixed64,9,opt,name=fees_amount,json=feesAmount,proto3" json:"fees_amount" bson:"fees_amount" validate:"numeric,gte=0"`
	//@inject_tag: json:"fees_currency" bson:"fees_currency" validate:"required,alpha,len=3"
	FeesCurrency string `protobuf:"bytes,10,opt,name=fees_currency,json=feesCurrency,proto3" json:"fees_currency" bson:"fees_currency" validate:"required,alpha,len=3"`
	// @inject_tag: json:"local_transaction_amount" bson:"local_transaction_amount" validate:"omitempty,numeric,gte=0"
	LocalTransactionAmount float64 `protobuf:"fixed64,11,opt,name=local_transaction_amount,json=localTransactionAmount,proto3" json:"local_transaction_amount" bson:"local_transaction_amount" validate:"omitempty,numeric,gte=0"`
	// @inject_tag: json:"local_vat_amount" bson:"local_vat_amount" validate:"omitempty,numeric,gte=0"
	LocalVatAmount float64 `protobuf:"fixed64,12,opt,name=local_vat_amount,json=localVatAmount,proto3" json:"local_vat_amount" bson:"local_vat_amount" validate:"omitempty,numeric,gte=0"`
	// @inject_tag: json:"local_fees_amount" bson:"local_fees_amount" validate:"omitempty,numeric,gte=0"
	LocalFeesAmount float64 `protobuf:"fixed64,13,opt,name=local_fees_amount,json=localFeesAmount,proto3" json:"local_fees_amount" bson:"local_fees_amount" validate:"omitempty,numeric,gte=0"`
	//@inject_tag: json:"local_currency" bson:"local_currency" validate:"required,alpha,len=3"
	LocalCurrency string `protobuf:"bytes,14,opt,name=local_currency,json=localCurrency,proto3" json:"local_currency" bson:"local_currency" validate:"required,alpha,len=3"`
	//@inject_tag: json:"local_amounts_approximate" bson:"local_amounts_alocal_amounts_approximatepproximated" validate:"required,alpha,len=3"
	LocalAmountsApproximate bool `protobuf:"varint,15,opt,name=local_amounts_approximate,json=localAmountsApproximate,proto3" json:"local_amounts_approximate" bson:"local_amounts_alocal_amounts_approximatepproximated" validate:"required,alpha,len=3"`
	//@inject_tag: json:"billing_address_criteria" bson:"billing_address_criteria" validate:"required,oneof=ip bin language customer form"
	BillingAddressCriteria string `protobuf:"bytes,16,opt,name=billing_address_criteria,json=billingAddressCriteria,proto3" json:"billing_address_criteria" bson:"billing_address_criteria" validate:"required,oneof=ip bin language customer form"`
	//@inject_tag: json:"billing_address" bson:"billing_address" validate:"required,dive"
	BillingAddress *OrderBillingAddress `protobuf:"bytes,17,opt,name=billing_address,json=billingAddress,proto3" json:"billing_address" bson:"billing_address" validate:"required,dive"`
	//@inject_tag: json:"user_id" bson:"user_id" validate:"omitempty,hexadecimal,len=24"
	UserId string `protobuf:"bytes,18,opt,name=user_id,json=userId,proto3" json:"user_id" bson:"user_id" validate:"omitempty,hexadecimal,len=24"`
	//@inject_tag: json:"payment_method" bson:"payment_method" validate:"required"
	PaymentMethod string `protobuf:"bytes,19,opt,name=payment_method,json=paymentMethod,proto3" json:"payment_method" bson:"payment_method" validate:"required"`
	//@inject_tag: json:"is_deduction" bson:"is_deduction"
	IsDeduction bool `protobuf:"varint,20,opt,name=is_deduction,json=isDeduction,proto3" json:"is_deduction" bson:"is_deduction"`
	//@inject_tag: json:"country" bson:"country" validate:"required,alpha,len=2"
	Country string `protobuf:"bytes,21,opt,name=country,proto3" json:"country" bson:"country" validate:"required,alpha,len=2"`
	//@inject_tag: json:"date_time" bson:"date_time"
	DateTime *timestamp.Timestamp `protobuf:"bytes,22,opt,name=date_time,json=dateTime,proto3" json:"date_time" bson:"date_time"`
}

func (x *VatTransaction) Reset() {
	*x = VatTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VatTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VatTransaction) ProtoMessage() {}

func (x *VatTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VatTransaction.ProtoReflect.Descriptor instead.
func (*VatTransaction) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{107}
}

func (x *VatTransaction) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VatTransaction) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *VatTransaction) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *VatTransaction) GetTransactionType() string {
	if x != nil {
		return x.TransactionType
	}
	return ""
}

func (x *VatTransaction) GetTransactionAmount() float64 {
	if x != nil {
		return x.TransactionAmount
	}
	return 0
}

func (x *VatTransaction) GetTransactionCurrency() string {
	if x != nil {
		return x.TransactionCurrency
	}
	return ""
}

func (x *VatTransaction) GetVatAmount() float64 {
	if x != nil {
		return x.VatAmount
	}
	return 0
}

func (x *VatTransaction) GetVatCurrency() string {
	if x != nil {
		return x.VatCurrency
	}
	return ""
}

func (x *VatTransaction) GetFeesAmount() float64 {
	if x != nil {
		return x.FeesAmount
	}
	return 0
}

func (x *VatTransaction) GetFeesCurrency() string {
	if x != nil {
		return x.FeesCurrency
	}
	return ""
}

func (x *VatTransaction) GetLocalTransactionAmount() float64 {
	if x != nil {
		return x.LocalTransactionAmount
	}
	return 0
}

func (x *VatTransaction) GetLocalVatAmount() float64 {
	if x != nil {
		return x.LocalVatAmount
	}
	return 0
}

func (x *VatTransaction) GetLocalFeesAmount() float64 {
	if x != nil {
		return x.LocalFeesAmount
	}
	return 0
}

func (x *VatTransaction) GetLocalCurrency() string {
	if x != nil {
		return x.LocalCurrency
	}
	return ""
}

func (x *VatTransaction) GetLocalAmountsApproximate() bool {
	if x != nil {
		return x.LocalAmountsApproximate
	}
	return false
}

func (x *VatTransaction) GetBillingAddressCriteria() string {
	if x != nil {
		return x.BillingAddressCriteria
	}
	return ""
}

func (x *VatTransaction) GetBillingAddress() *OrderBillingAddress {
	if x != nil {
		return x.BillingAddress
	}
	return nil
}

func (x *VatTransaction) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *VatTransaction) GetPaymentMethod() string {
	if x != nil {
		return x.PaymentMethod
	}
	return ""
}

func (x *VatTransaction) GetIsDeduction() bool {
	if x != nil {
		return x.IsDeduction
	}
	return false
}

func (x *VatTransaction) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *VatTransaction) GetDateTime() *timestamp.Timestamp {
	if x != nil {
		return x.DateTime
	}
	return nil
}

type VatReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"id" bson:"_id" validate:"omitempty,hexadecimal,len=24" faker:"objectIdString"
	//
	// The unique identifier for the VAT report.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id" bson:"_id" validate:"omitempty,hexadecimal,len=24" faker:"objectIdString"`
	//@inject_tag: json:"country" bson:"country" validate:"required,alpha,len=2"
	//
	// The country's name. Two-letter country code in ISO 3166-1, in uppercase (for instance US).
	Country string `protobuf:"bytes,2,opt,name=country,proto3" json:"country" bson:"country" validate:"required,alpha,len=2"`
	// @inject_tag: json:"vat_rate" bson:"vat_rate" validate:"numeric,gte=0,lte=1"
	//
	// VAT rate.
	VatRate float64 `protobuf:"fixed64,3,opt,name=vat_rate,json=vatRate,proto3" json:"vat_rate" bson:"vat_rate" validate:"numeric,gte=0,lte=1"`
	//@inject_tag: json:"currency" bson:"currency" validate:"required,alpha,len=3"
	//
	// The rate currency. Three-letter Currency Code ISO 4217, in uppercase.
	Currency string `protobuf:"bytes,4,opt,name=currency,proto3" json:"currency" bson:"currency" validate:"required,alpha,len=3"`
	// @inject_tag: json:"transactions_count" bson:"transactions_count" validate:"numeric,gte=0"
	//
	// The total transactions.
	TransactionsCount int32 `protobuf:"varint,5,opt,name=transactions_count,json=transactionsCount,proto3" json:"transactions_count" bson:"transactions_count" validate:"numeric,gte=0"`
	// @inject_tag: json:"gross_revenue" bson:"gross_revenue" validate:"numeric,gte=0"
	//
	// The gross revenue.
	GrossRevenue float64 `protobuf:"fixed64,6,opt,name=gross_revenue,json=grossRevenue,proto3" json:"gross_revenue" bson:"gross_revenue" validate:"numeric,gte=0"`
	// @inject_tag: json:"vat_amount" bson:"vat_amount" validate:"numeric,gte=0"
	//
	// The amount of VAT.
	VatAmount float64 `protobuf:"fixed64,7,opt,name=vat_amount,json=vatAmount,proto3" json:"vat_amount" bson:"vat_amount" validate:"numeric,gte=0"`
	// @inject_tag: json:"fees_amount" bson:"fees_amount" validate:"numeric,gte=0"
	//
	// The total amount of fees.
	FeesAmount float64 `protobuf:"fixed64,8,opt,name=fees_amount,json=feesAmount,proto3" json:"fees_amount" bson:"fees_amount" validate:"numeric,gte=0"`
	// @inject_tag: json:"deduction_amount" bson:"deduction_amount" validate:"numeric,gte=0"
	//
	// The deduction amount.
	DeductionAmount float64 `protobuf:"fixed64,9,opt,name=deduction_amount,json=deductionAmount,proto3" json:"deduction_amount" bson:"deduction_amount" validate:"numeric,gte=0"`
	// @inject_tag: json:"correction_amount" bson:"correction_amount" validate:"numeric,lte=0"
	//
	// The correction amount.
	CorrectionAmount float64 `protobuf:"fixed64,10,opt,name=correction_amount,json=correctionAmount,proto3" json:"correction_amount" bson:"correction_amount" validate:"numeric,lte=0"`
	//@inject_tag: json:"status" bson:"status" validate:"required,alpha,oneof=threshold expired pending need_to_pay paid overdue canceled"
	//
	// The VAT report status. Available values: threshold, expired, pending, need_to_pay, paid, overdue, canceled.
	Status string `protobuf:"bytes,11,opt,name=status,proto3" json:"status" bson:"status" validate:"required,alpha,oneof=threshold expired pending need_to_pay paid overdue canceled"`
	// @inject_tag: json:"country_annual_turnover" bson:"country_annual_turnover" validate:"numeric,gte=0"
	//
	// The annual turnover for the country.
	CountryAnnualTurnover float64 `protobuf:"fixed64,12,opt,name=country_annual_turnover,json=countryAnnualTurnover,proto3" json:"country_annual_turnover" bson:"country_annual_turnover" validate:"numeric,gte=0"`
	// @inject_tag: json:"world_annual_turnover" bson:"world_annual_turnover" validate:"numeric,gte=0"
	//
	// The world annual turnover.
	WorldAnnualTurnover float64 `protobuf:"fixed64,13,opt,name=world_annual_turnover,json=worldAnnualTurnover,proto3" json:"world_annual_turnover" bson:"world_annual_turnover" validate:"numeric,gte=0"`
	//@inject_tag: json:"amounts_approximate" bson:"amounts_approximate"
	//
	// Has a true value if the amounts are non-final due to the currency exchange rates delay.
	AmountsApproximate bool `protobuf:"varint,14,opt,name=amounts_approximate,json=amountsApproximate,proto3" json:"amounts_approximate" bson:"amounts_approximate"`
	//@inject_tag: json:"date_from" bson:"date_from"
	//
	// The start date of the period for the report.
	DateFrom *timestamp.Timestamp `protobuf:"bytes,15,opt,name=date_from,json=dateFrom,proto3" json:"date_from" bson:"date_from"`
	//@inject_tag: json:"date_to" bson:"date_to"
	//
	// The end date of the period for the report.
	DateTo *timestamp.Timestamp `protobuf:"bytes,16,opt,name=date_to,json=dateTo,proto3" json:"date_to" bson:"date_to"`
	//@inject_tag: json:"pay_until_date" bson:"pay_until_date"
	//
	// The deadline date of the VAT payment.
	PayUntilDate *timestamp.Timestamp `protobuf:"bytes,17,opt,name=pay_until_date,json=payUntilDate,proto3" json:"pay_until_date" bson:"pay_until_date"`
	//@inject_tag: json:"created_at" bson:"created_at"
	//
	// The date of the report creation.
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,18,opt,name=created_at,json=createdAt,proto3" json:"created_at" bson:"created_at"`
	//@inject_tag: json:"updated_at" bson:"updated_at"
	//
	// The date of the report last update.
	UpdatedAt *timestamp.Timestamp `protobuf:"bytes,19,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at" bson:"updated_at"`
	//@inject_tag: json:"paid_at" bson:"paid_at"
	//
	// The payment date.
	PaidAt *timestamp.Timestamp `protobuf:"bytes,20,opt,name=paid_at,json=paidAt,proto3" json:"paid_at" bson:"paid_at"`
	// @inject_tag: json:"operating_company_id" bson:"operating_company_id" faker:"objectIdString"
	//
	// The unique identifier for the operating company.
	OperatingCompanyId string `protobuf:"bytes,21,opt,name=operating_company_id,json=operatingCompanyId,proto3" json:"operating_company_id" bson:"operating_company_id" faker:"objectIdString"`
}

func (x *VatReport) Reset() {
	*x = VatReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VatReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VatReport) ProtoMessage() {}

func (x *VatReport) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VatReport.ProtoReflect.Descriptor instead.
func (*VatReport) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{108}
}

func (x *VatReport) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VatReport) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *VatReport) GetVatRate() float64 {
	if x != nil {
		return x.VatRate
	}
	return 0
}

func (x *VatReport) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *VatReport) GetTransactionsCount() int32 {
	if x != nil {
		return x.TransactionsCount
	}
	return 0
}

func (x *VatReport) GetGrossRevenue() float64 {
	if x != nil {
		return x.GrossRevenue
	}
	return 0
}

func (x *VatReport) GetVatAmount() float64 {
	if x != nil {
		return x.VatAmount
	}
	return 0
}

func (x *VatReport) GetFeesAmount() float64 {
	if x != nil {
		return x.FeesAmount
	}
	return 0
}

func (x *VatReport) GetDeductionAmount() float64 {
	if x != nil {
		return x.DeductionAmount
	}
	return 0
}

func (x *VatReport) GetCorrectionAmount() float64 {
	if x != nil {
		return x.CorrectionAmount
	}
	return 0
}

func (x *VatReport) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *VatReport) GetCountryAnnualTurnover() float64 {
	if x != nil {
		return x.CountryAnnualTurnover
	}
	return 0
}

func (x *VatReport) GetWorldAnnualTurnover() float64 {
	if x != nil {
		return x.WorldAnnualTurnover
	}
	return 0
}

func (x *VatReport) GetAmountsApproximate() bool {
	if x != nil {
		return x.AmountsApproximate
	}
	return false
}

func (x *VatReport) GetDateFrom() *timestamp.Timestamp {
	if x != nil {
		return x.DateFrom
	}
	return nil
}

func (x *VatReport) GetDateTo() *timestamp.Timestamp {
	if x != nil {
		return x.DateTo
	}
	return nil
}

func (x *VatReport) GetPayUntilDate() *timestamp.Timestamp {
	if x != nil {
		return x.PayUntilDate
	}
	return nil
}

func (x *VatReport) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *VatReport) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *VatReport) GetPaidAt() *timestamp.Timestamp {
	if x != nil {
		return x.PaidAt
	}
	return nil
}

func (x *VatReport) GetOperatingCompanyId() string {
	if x != nil {
		return x.OperatingCompanyId
	}
	return ""
}

type AnnualTurnover struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"year" bson:"year" validate:"required,numeric,gte=2019"
	Year int32 `protobuf:"varint,1,opt,name=year,proto3" json:"year" bson:"year" validate:"required,numeric,gte=2019"`
	//@inject_tag: json:"country" bson:"country" validate:"omitempty,alpha,len=2"
	Country string `protobuf:"bytes,2,opt,name=country,proto3" json:"country" bson:"country" validate:"omitempty,alpha,len=2"`
	// @inject_tag: json:"amount" bson:"amount" validate:"numeric,gte=0"
	Amount float64 `protobuf:"fixed64,3,opt,name=amount,proto3" json:"amount" bson:"amount" validate:"numeric,gte=0"`
	//@inject_tag: json:"currency" bson:"currency" validate:"required,alpha,len=3"
	Currency string `protobuf:"bytes,4,opt,name=currency,proto3" json:"currency" bson:"currency" validate:"required,alpha,len=3"`
	// @inject_tag: json:"operating_company_id" bson:"operating_company_id"
	OperatingCompanyId string `protobuf:"bytes,5,opt,name=operating_company_id,json=operatingCompanyId,proto3" json:"operating_company_id" bson:"operating_company_id"`
}

func (x *AnnualTurnover) Reset() {
	*x = AnnualTurnover{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnnualTurnover) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnnualTurnover) ProtoMessage() {}

func (x *AnnualTurnover) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnnualTurnover.ProtoReflect.Descriptor instead.
func (*AnnualTurnover) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{109}
}

func (x *AnnualTurnover) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *AnnualTurnover) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *AnnualTurnover) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *AnnualTurnover) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *AnnualTurnover) GetOperatingCompanyId() string {
	if x != nil {
		return x.OperatingCompanyId
	}
	return ""
}

type OrderViewMoney struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"-" bson:"amount"
	//
	// The amount value.
	Amount float64 `protobuf:"fixed64,1,opt,name=amount,proto3" json:"-" bson:"amount"`
	//@inject_tag: json:"currency" bson:"currency"
	//
	// The amount currency. Three-letter currency code in ISO 4217, in uppercase.
	Currency string `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency" bson:"currency"`
	//@inject_tag: json:"amount" bson:"amount_rounded"
	//
	// The amount value.
	AmountRounded float64 `protobuf:"fixed64,3,opt,name=amount_rounded,json=amountRounded,proto3" json:"amount" bson:"amount_rounded"`
}

func (x *OrderViewMoney) Reset() {
	*x = OrderViewMoney{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderViewMoney) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderViewMoney) ProtoMessage() {}

func (x *OrderViewMoney) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderViewMoney.ProtoReflect.Descriptor instead.
func (*OrderViewMoney) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{110}
}

func (x *OrderViewMoney) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *OrderViewMoney) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *OrderViewMoney) GetAmountRounded() float64 {
	if x != nil {
		return x.AmountRounded
	}
	return 0
}

type OrderViewMerchantInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"company_name" bson:"company_name"
	//
	// The merchant's company name.
	CompanyName string `protobuf:"bytes,1,opt,name=company_name,json=companyName,proto3" json:"company_name" bson:"company_name"`
	//@inject_tag: json:"agreement_number" bson:"agreement_number"
	//
	// The merchant's license agreement number.
	AgreementNumber string `protobuf:"bytes,2,opt,name=agreement_number,json=agreementNumber,proto3" json:"agreement_number" bson:"agreement_number"`
}

func (x *OrderViewMerchantInfo) Reset() {
	*x = OrderViewMerchantInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderViewMerchantInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderViewMerchantInfo) ProtoMessage() {}

func (x *OrderViewMerchantInfo) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderViewMerchantInfo.ProtoReflect.Descriptor instead.
func (*OrderViewMerchantInfo) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{111}
}

func (x *OrderViewMerchantInfo) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *OrderViewMerchantInfo) GetAgreementNumber() string {
	if x != nil {
		return x.AgreementNumber
	}
	return ""
}

type OrderViewReportSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"status" bson:"status"
	//
	// The status for reports
	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status" bson:"status"`
	// @inject_tag: json:"charge" bson:"charge"
	//
	// Transaction charge for reports
	Charge *OrderViewMoney `protobuf:"bytes,2,opt,name=charge,proto3" json:"charge" bson:"charge"`
	// @inject_tag: json:"gross" bson:"gross"
	//
	// Transaction gross for reports
	Gross *OrderViewMoney `protobuf:"bytes,3,opt,name=gross,proto3" json:"gross" bson:"gross"`
	// @inject_tag: json:"vat" bson:"vat"
	//
	// Transaction vat for reports
	Vat *OrderViewMoney `protobuf:"bytes,4,opt,name=vat,proto3" json:"vat" bson:"vat"`
	// @inject_tag: json:"fees" bson:"fees"
	//
	// Transaction fees for reports
	Fees *OrderViewMoney `protobuf:"bytes,5,opt,name=fees,proto3" json:"fees" bson:"fees"`
	// @inject_tag: json:"revenue" bson:"revenue"
	//
	// Transaction revenue for reports
	Revenue *OrderViewMoney `protobuf:"bytes,6,opt,name=revenue,proto3" json:"revenue" bson:"revenue"`
}

func (x *OrderViewReportSummary) Reset() {
	*x = OrderViewReportSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderViewReportSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderViewReportSummary) ProtoMessage() {}

func (x *OrderViewReportSummary) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderViewReportSummary.ProtoReflect.Descriptor instead.
func (*OrderViewReportSummary) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{112}
}

func (x *OrderViewReportSummary) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *OrderViewReportSummary) GetCharge() *OrderViewMoney {
	if x != nil {
		return x.Charge
	}
	return nil
}

func (x *OrderViewReportSummary) GetGross() *OrderViewMoney {
	if x != nil {
		return x.Gross
	}
	return nil
}

func (x *OrderViewReportSummary) GetVat() *OrderViewMoney {
	if x != nil {
		return x.Vat
	}
	return nil
}

func (x *OrderViewReportSummary) GetFees() *OrderViewMoney {
	if x != nil {
		return x.Fees
	}
	return nil
}

func (x *OrderViewReportSummary) GetRevenue() *OrderViewMoney {
	if x != nil {
		return x.Revenue
	}
	return nil
}

type OrderViewPublic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"-" bson:"_id" faker:"objectIdString"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"-" bson:"_id" faker:"objectIdString"` // unique internal order identifier in Protocol One
	// @inject_tag: json:"uuid" bson:"uuid"
	//
	// The unique identifier for the order.
	Uuid string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid" bson:"uuid"`
	// @inject_tag: json:"total_payment_amount" bson:"total_payment_amount"
	//
	// The total payment amount.
	TotalPaymentAmount float64 `protobuf:"fixed64,3,opt,name=total_payment_amount,json=totalPaymentAmount,proto3" json:"total_payment_amount" bson:"total_payment_amount"`
	// @inject_tag: json:"currency" bson:"currency"
	//
	// The currency of the payment. Three-letter currency code ISO 4217, in uppercase.
	Currency string `protobuf:"bytes,4,opt,name=currency,proto3" json:"currency" bson:"currency"`
	// @inject_tag: json:"project" bson:"project"
	//
	// The project data.
	Project *ProjectOrder `protobuf:"bytes,5,opt,name=project,proto3" json:"project" bson:"project"`
	// @inject_tag: bson:"created_at" bson:"created_at"
	//
	// The date in ISO 8601 of the order creation.
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty" bson:"created_at" bson:"created_at"`
	// @inject_tag: json:"transaction" bson:"pm_order_id"
	//
	// The unique identifier for the order in the payment system.
	Transaction string `protobuf:"bytes,7,opt,name=transaction,proto3" json:"transaction" bson:"pm_order_id"`
	// @inject_tag: json:"payment_method" bson:"payment_method"
	//
	// The payment method data.
	PaymentMethod *PaymentMethodOrder `protobuf:"bytes,8,opt,name=payment_method,json=paymentMethod,proto3" json:"payment_method" bson:"payment_method"`
	// @inject_tag: json:"country_code" bson:"country_code"
	//
	// Two-letter country code in ISO 3166-1, in uppercase.
	CountryCode string `protobuf:"bytes,9,opt,name=country_code,json=countryCode,proto3" json:"country_code" bson:"country_code"`
	// @inject_tag: json:"merchant_id" bson:"merchant_id" faker:"objectIdString"
	//
	// The unique identifier for the merchant.
	MerchantId string `protobuf:"bytes,10,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id" bson:"merchant_id" faker:"objectIdString"`
	// @inject_tag: json:"locale" bson:"locale"
	//
	// The customer’s locale name. Four-letter language code in ISO 639, for instance en-US.
	Locale string `protobuf:"bytes,11,opt,name=locale,proto3" json:"locale" bson:"locale"`
	// @inject_tag: json:"status" bson:"status"
	//
	// The current status of the order. Available values: created, processed, canceled, rejected, refunded, chargeback, pending.
	Status string `protobuf:"bytes,12,opt,name=status,proto3" json:"status" bson:"status"`
	// @inject_tag: json:"transaction_date" bson:"pm_order_close_date"
	//
	// The date in ISO 8601 of the processed transaction.
	TransactionDate *timestamp.Timestamp `protobuf:"bytes,13,opt,name=transaction_date,json=transactionDate,proto3" json:"transaction_date" bson:"pm_order_close_date"`
	// @inject_tag: json:"user" bson:"user"
	//
	// The customer data.
	User *OrderUser `protobuf:"bytes,14,opt,name=user,proto3" json:"user" bson:"user"`
	// @inject_tag: json:"billing_address" bson:"billing_address"
	//
	// The customer's billing address.
	BillingAddress *OrderBillingAddress `protobuf:"bytes,15,opt,name=billing_address,json=billingAddress,proto3" json:"billing_address" bson:"billing_address"`
	// @inject_tag: json:"type" bson:"type"
	//
	// The order type. It depends on your sales option (Game Keys, Virtual Items, Virtual Currency, the simple checkout). Available values: key, product, virtual_currency, simple.
	Type string `protobuf:"bytes,16,opt,name=type,proto3" json:"type" bson:"type"`
	// @inject_tag: json:"is_vat_deduction" bson:"is_vat_deduction"
	//
	// Has a true value if VAT can be deducted.
	IsVatDeduction bool `protobuf:"varint,17,opt,name=is_vat_deduction,json=isVatDeduction,proto3" json:"is_vat_deduction" bson:"is_vat_deduction"`
	// @inject_tag: json:"gross_revenue" bson:"gross_revenue"
	//
	// The gross revenue.
	GrossRevenue *OrderViewMoney `protobuf:"bytes,18,opt,name=gross_revenue,json=grossRevenue,proto3" json:"gross_revenue" bson:"gross_revenue"`
	// @inject_tag: json:"tax_fee" bson:"tax_fee"
	//
	// The tax fee.
	TaxFee *OrderViewMoney `protobuf:"bytes,19,opt,name=tax_fee,json=taxFee,proto3" json:"tax_fee" bson:"tax_fee"`
	// @inject_tag: json:"tax_fee_currency_exchange_fee" bson:"tax_fee_currency_exchange_fee"
	//
	// The tax fee for the currency exchange.
	TaxFeeCurrencyExchangeFee *OrderViewMoney `protobuf:"bytes,20,opt,name=tax_fee_currency_exchange_fee,json=taxFeeCurrencyExchangeFee,proto3" json:"tax_fee_currency_exchange_fee" bson:"tax_fee_currency_exchange_fee"`
	// @inject_tag: json:"tax_fee_total" bson:"tax_fee_total"
	//
	// The total tax fee.
	TaxFeeTotal *OrderViewMoney `protobuf:"bytes,21,opt,name=tax_fee_total,json=taxFeeTotal,proto3" json:"tax_fee_total" bson:"tax_fee_total"`
	// @inject_tag: json:"method_fee_total" bson:"method_fee_total"
	//
	// The method fee total.
	MethodFeeTotal *OrderViewMoney `protobuf:"bytes,22,opt,name=method_fee_total,json=methodFeeTotal,proto3" json:"method_fee_total" bson:"method_fee_total"`
	// @inject_tag: json:"method_fee_tariff" bson:"method_fee_tariff"
	//
	// The tariff for the method fee.
	MethodFeeTariff *OrderViewMoney `protobuf:"bytes,23,opt,name=method_fee_tariff,json=methodFeeTariff,proto3" json:"method_fee_tariff" bson:"method_fee_tariff"`
	// @inject_tag: json:"method_fixed_fee_tariff" bson:"method_fixed_fee_tariff"
	//
	// The tariff of the fixed method fee.
	MethodFixedFeeTariff *OrderViewMoney `protobuf:"bytes,24,opt,name=method_fixed_fee_tariff,json=methodFixedFeeTariff,proto3" json:"method_fixed_fee_tariff" bson:"method_fixed_fee_tariff"`
	// @inject_tag: json:"paysuper_fixed_fee" bson:"paysuper_fixed_fee"
	//
	// The PaySuper fixed fee.
	PaysuperFixedFee *OrderViewMoney `protobuf:"bytes,25,opt,name=paysuper_fixed_fee,json=paysuperFixedFee,proto3" json:"paysuper_fixed_fee" bson:"paysuper_fixed_fee"`
	// @inject_tag: json:"fees_total" bson:"fees_total"
	//
	// The total fees.
	FeesTotal *OrderViewMoney `protobuf:"bytes,26,opt,name=fees_total,json=feesTotal,proto3" json:"fees_total" bson:"fees_total"`
	// @inject_tag: json:"fees_total_local" bson:"fees_total_local"
	//
	// The total fees in the customer's region currency.
	FeesTotalLocal *OrderViewMoney `protobuf:"bytes,27,opt,name=fees_total_local,json=feesTotalLocal,proto3" json:"fees_total_local" bson:"fees_total_local"`
	// @inject_tag: json:"net_revenue" bson:"net_revenue"
	//
	// The net revenue.
	NetRevenue *OrderViewMoney `protobuf:"bytes,28,opt,name=net_revenue,json=netRevenue,proto3" json:"net_revenue" bson:"net_revenue"`
	// @inject_tag: json:"refund_gross_revenue" bson:"refund_gross_revenue"
	//
	// The gross revenue from the refund.
	RefundGrossRevenue *OrderViewMoney `protobuf:"bytes,29,opt,name=refund_gross_revenue,json=refundGrossRevenue,proto3" json:"refund_gross_revenue" bson:"refund_gross_revenue"`
	// @inject_tag: json:"method_refund_fee_tariff" bson:"method_refund_fee_tariff"
	//
	// The fee tariff for the method refund.
	MethodRefundFeeTariff *OrderViewMoney `protobuf:"bytes,30,opt,name=method_refund_fee_tariff,json=methodRefundFeeTariff,proto3" json:"method_refund_fee_tariff" bson:"method_refund_fee_tariff"`
	// @inject_tag: json:"merchant_refund_fixed_fee_tariff" bson:"merchant_refund_fixed_fee_tariff"
	//
	// The fixed fee tariff for the method refund.
	MerchantRefundFixedFeeTariff *OrderViewMoney `protobuf:"bytes,31,opt,name=merchant_refund_fixed_fee_tariff,json=merchantRefundFixedFeeTariff,proto3" json:"merchant_refund_fixed_fee_tariff" bson:"merchant_refund_fixed_fee_tariff"`
	// @inject_tag: json:"refund_tax_fee" bson:"refund_tax_fee"
	//
	// The tax fee of the refund.
	RefundTaxFee *OrderViewMoney `protobuf:"bytes,32,opt,name=refund_tax_fee,json=refundTaxFee,proto3" json:"refund_tax_fee" bson:"refund_tax_fee"`
	// @inject_tag: json:"refund_tax_fee_currency_exchange_fee" bson:"refund_tax_fee_currency_exchange_fee"
	//
	// The refund tax fee for the currency exchange fee.
	RefundTaxFeeCurrencyExchangeFee *OrderViewMoney `protobuf:"bytes,33,opt,name=refund_tax_fee_currency_exchange_fee,json=refundTaxFeeCurrencyExchangeFee,proto3" json:"refund_tax_fee_currency_exchange_fee" bson:"refund_tax_fee_currency_exchange_fee"`
	// @inject_tag: json:"paysuper_refund_tax_fee_currency_exchange_fee" bson:"paysuper_refund_tax_fee_currency_exchange_fee"
	//
	// The PaySuper refund tax fee for the currency exchange fee.
	PaysuperRefundTaxFeeCurrencyExchangeFee *OrderViewMoney `protobuf:"bytes,34,opt,name=paysuper_refund_tax_fee_currency_exchange_fee,json=paysuperRefundTaxFeeCurrencyExchangeFee,proto3" json:"paysuper_refund_tax_fee_currency_exchange_fee" bson:"paysuper_refund_tax_fee_currency_exchange_fee"`
	// @inject_tag: json:"refund_reverse_revenue" bson:"refund_reverse_revenue"
	//
	// The refund reverse revenue.
	RefundReverseRevenue *OrderViewMoney `protobuf:"bytes,35,opt,name=refund_reverse_revenue,json=refundReverseRevenue,proto3" json:"refund_reverse_revenue" bson:"refund_reverse_revenue"`
	// @inject_tag: json:"refund_fees_total" bson:"refund_fees_total"
	//
	// The refund total fees.
	RefundFeesTotal *OrderViewMoney `protobuf:"bytes,36,opt,name=refund_fees_total,json=refundFeesTotal,proto3" json:"refund_fees_total" bson:"refund_fees_total"`
	// @inject_tag: json:"refund_fees_total_local" bson:"refund_fees_total_local"
	//
	// The total fees of the refund in the customer's region currency.
	RefundFeesTotalLocal *OrderViewMoney `protobuf:"bytes,37,opt,name=refund_fees_total_local,json=refundFeesTotalLocal,proto3" json:"refund_fees_total_local" bson:"refund_fees_total_local"`
	// The order issuer data.
	Issuer *OrderIssuer `protobuf:"bytes,38,opt,name=issuer,proto3" json:"issuer,omitempty"`
	// @inject_tag: json:"items" bson:"items"
	//
	// The list of the products.
	Items []*OrderItem `protobuf:"bytes,39,rep,name=items,proto3" json:"items" bson:"items"`
	//@inject_tag: json:"merchant_payout_currency" bson:"merchant_payout_currency"
	//
	// The merchant's payout currency.
	MerchantPayoutCurrency string `protobuf:"bytes,40,opt,name=merchant_payout_currency,json=merchantPayoutCurrency,proto3" json:"merchant_payout_currency" bson:"merchant_payout_currency"`
	//@inject_tag: json:"parent_order" bson:"parent_order"
	//
	// The parent order data (for refunds only).
	ParentOrder *ParentOrder `protobuf:"bytes,41,opt,name=parent_order,json=parentOrder,proto3" json:"parent_order" bson:"parent_order"`
	//@inject_tag: json:"refund" bson:"refund"
	//
	// The notification of the refund. Has a null value if the order is not refunded.
	Refund *OrderNotificationRefund `protobuf:"bytes,42,opt,name=refund,proto3" json:"refund" bson:"refund"`
	//@inject_tag: json:"cancellation" bson:"cancellation"
	//
	// The notification of the cancellation. Has a null value if the order is not cancelled.
	Cancellation *OrderNotificationCancellation `protobuf:"bytes,43,opt,name=cancellation,proto3" json:"cancellation" bson:"cancellation"`
	// @inject_tag: json:"operating_company_id" bson:"operating_company_id"
	//
	// The unique identifier for the merchant's operating company.
	OperatingCompanyId string `protobuf:"bytes,44,opt,name=operating_company_id,json=operatingCompanyId,proto3" json:"operating_company_id" bson:"operating_company_id"`
	// @inject_tag: json:"refund_allowed" bson:"refund_allowed"
	//
	// Has a true value if the refund is allowed.
	RefundAllowed bool `protobuf:"varint,45,opt,name=refund_allowed,json=refundAllowed,proto3" json:"refund_allowed" bson:"refund_allowed"`
	// @inject_tag: json:"order_charge" bson:"order_charge"
	//
	// The order charge.
	OrderCharge *OrderViewMoney `protobuf:"bytes,46,opt,name=order_charge,json=orderCharge,proto3" json:"order_charge" bson:"order_charge"`
	// @inject_tag: json:"payment_ip_country"
	//
	// The customer's country code by the customer's IP address.
	PaymentIpCountry string `protobuf:"bytes,47,opt,name=payment_ip_country,json=paymentIpCountry,proto3" json:"payment_ip_country"`
	// @inject_tag: json:"is_ip_country_mismatch_bin" bson:"is_ip_country_mismatch_bin"
	//
	// Has a true value if the country from the card's BIN has not been matched to the country defined by the IP address (for card payments only).
	IsIpCountryMismatchBin bool `protobuf:"varint,48,opt,name=is_ip_country_mismatch_bin,json=isIpCountryMismatchBin,proto3" json:"is_ip_country_mismatch_bin" bson:"is_ip_country_mismatch_bin"`
	// @inject_tag: json:"billing_country_changed_by_user" bson:"billing_country_changed_by_user"
	//
	// Has a true value if the country was selected by the customer.
	BillingCountryChangedByUser bool `protobuf:"varint,49,opt,name=billing_country_changed_by_user,json=billingCountryChangedByUser,proto3" json:"billing_country_changed_by_user" bson:"billing_country_changed_by_user"`
	// @inject_tag: json:"vat_payer" bson:"vat_payer" validate:"oneof=buyer seller nobody"
	//
	// The responsible for VAT. Available values: buyer (VAT is added to the order charge), seller (VAT is included in the order charge), nobody (VAT exempt).
	VatPayer string `protobuf:"bytes,50,opt,name=vat_payer,json=vatPayer,proto3" json:"vat_payer" bson:"vat_payer" validate:"oneof=buyer seller nobody"`
	// @inject_tag: json:"is_production" bson:"is_production"
	//
	// Has a true value for a production payment and false for a test payment that goes through a test sandbox.
	IsProduction bool `protobuf:"varint,51,opt,name=is_production,json=isProduction,proto3" json:"is_production" bson:"is_production"`
	// @inject_tag: json:"merchant_info" bson:"merchant_info"
	//
	// The merchant's company data.
	MerchantInfo *OrderViewMerchantInfo `protobuf:"bytes,52,opt,name=merchant_info,json=merchantInfo,proto3" json:"merchant_info" bson:"merchant_info"`
	// @inject_tag: json:"-"
	//
	// DEPRECATED! Use the recurring_subscription_id property
	// Exists recurring for order
	Recurring bool `protobuf:"varint,53,opt,name=recurring,proto3" json:"-"`
	// @inject_tag: json:"-"
	//
	// DEPRECATED! Use the recurring_subscription_id property
	// Recurring identity for order
	RecurringId string `protobuf:"bytes,54,opt,name=recurring_id,json=recurringId,proto3" json:"-"`
	// @inject_tag: json:"payment_gross_revenue" bson:"payment_gross_revenue"
	//
	// The gross revenue from the payment.
	PaymentGrossRevenue *OrderViewMoney `protobuf:"bytes,55,opt,name=payment_gross_revenue,json=paymentGrossRevenue,proto3" json:"payment_gross_revenue" bson:"payment_gross_revenue"`
	// @inject_tag: json:"payment_refund_gross_revenue" bson:"payment_refund_gross_revenue"
	//
	// The gross revenue of the payment refund.
	PaymentRefundGrossRevenue *OrderViewMoney `protobuf:"bytes,56,opt,name=payment_refund_gross_revenue,json=paymentRefundGrossRevenue,proto3" json:"payment_refund_gross_revenue" bson:"payment_refund_gross_revenue"`
	// @inject_tag: json:"refund_tax_fee_total" bson:"refund_tax_fee_total"
	//
	// The total refund tax fee.
	RefundTaxFeeTotal *OrderViewMoney `protobuf:"bytes,57,opt,name=refund_tax_fee_total,json=refundTaxFeeTotal,proto3" json:"refund_tax_fee_total" bson:"refund_tax_fee_total"`
	// @inject_tag: json:"report_summary" bson:"report_summary"
	//
	// Transaction summary for reports
	ReportSummary *OrderViewReportSummary `protobuf:"bytes,58,opt,name=report_summary,json=reportSummary,proto3" json:"report_summary" bson:"report_summary"`
	// @inject_tag: json:"recurring_subscription_id"
	//
	// Identity of recurring subscription for order
	RecurringSubscriptionId string `protobuf:"bytes,59,opt,name=recurring_subscription_id,json=recurringSubscriptionId,proto3" json:"recurring_subscription_id"`
	// @inject_tag: json:"recurring_plan_id"
	//
	// Identity of recurring plan for order
	RecurringPlanId string `protobuf:"bytes,60,opt,name=recurring_plan_id,json=recurringPlanId,proto3" json:"recurring_plan_id"`
}

func (x *OrderViewPublic) Reset() {
	*x = OrderViewPublic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderViewPublic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderViewPublic) ProtoMessage() {}

func (x *OrderViewPublic) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderViewPublic.ProtoReflect.Descriptor instead.
func (*OrderViewPublic) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{113}
}

func (x *OrderViewPublic) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *OrderViewPublic) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *OrderViewPublic) GetTotalPaymentAmount() float64 {
	if x != nil {
		return x.TotalPaymentAmount
	}
	return 0
}

func (x *OrderViewPublic) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *OrderViewPublic) GetProject() *ProjectOrder {
	if x != nil {
		return x.Project
	}
	return nil
}

func (x *OrderViewPublic) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *OrderViewPublic) GetTransaction() string {
	if x != nil {
		return x.Transaction
	}
	return ""
}

func (x *OrderViewPublic) GetPaymentMethod() *PaymentMethodOrder {
	if x != nil {
		return x.PaymentMethod
	}
	return nil
}

func (x *OrderViewPublic) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *OrderViewPublic) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *OrderViewPublic) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

func (x *OrderViewPublic) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *OrderViewPublic) GetTransactionDate() *timestamp.Timestamp {
	if x != nil {
		return x.TransactionDate
	}
	return nil
}

func (x *OrderViewPublic) GetUser() *OrderUser {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *OrderViewPublic) GetBillingAddress() *OrderBillingAddress {
	if x != nil {
		return x.BillingAddress
	}
	return nil
}

func (x *OrderViewPublic) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *OrderViewPublic) GetIsVatDeduction() bool {
	if x != nil {
		return x.IsVatDeduction
	}
	return false
}

func (x *OrderViewPublic) GetGrossRevenue() *OrderViewMoney {
	if x != nil {
		return x.GrossRevenue
	}
	return nil
}

func (x *OrderViewPublic) GetTaxFee() *OrderViewMoney {
	if x != nil {
		return x.TaxFee
	}
	return nil
}

func (x *OrderViewPublic) GetTaxFeeCurrencyExchangeFee() *OrderViewMoney {
	if x != nil {
		return x.TaxFeeCurrencyExchangeFee
	}
	return nil
}

func (x *OrderViewPublic) GetTaxFeeTotal() *OrderViewMoney {
	if x != nil {
		return x.TaxFeeTotal
	}
	return nil
}

func (x *OrderViewPublic) GetMethodFeeTotal() *OrderViewMoney {
	if x != nil {
		return x.MethodFeeTotal
	}
	return nil
}

func (x *OrderViewPublic) GetMethodFeeTariff() *OrderViewMoney {
	if x != nil {
		return x.MethodFeeTariff
	}
	return nil
}

func (x *OrderViewPublic) GetMethodFixedFeeTariff() *OrderViewMoney {
	if x != nil {
		return x.MethodFixedFeeTariff
	}
	return nil
}

func (x *OrderViewPublic) GetPaysuperFixedFee() *OrderViewMoney {
	if x != nil {
		return x.PaysuperFixedFee
	}
	return nil
}

func (x *OrderViewPublic) GetFeesTotal() *OrderViewMoney {
	if x != nil {
		return x.FeesTotal
	}
	return nil
}

func (x *OrderViewPublic) GetFeesTotalLocal() *OrderViewMoney {
	if x != nil {
		return x.FeesTotalLocal
	}
	return nil
}

func (x *OrderViewPublic) GetNetRevenue() *OrderViewMoney {
	if x != nil {
		return x.NetRevenue
	}
	return nil
}

func (x *OrderViewPublic) GetRefundGrossRevenue() *OrderViewMoney {
	if x != nil {
		return x.RefundGrossRevenue
	}
	return nil
}

func (x *OrderViewPublic) GetMethodRefundFeeTariff() *OrderViewMoney {
	if x != nil {
		return x.MethodRefundFeeTariff
	}
	return nil
}

func (x *OrderViewPublic) GetMerchantRefundFixedFeeTariff() *OrderViewMoney {
	if x != nil {
		return x.MerchantRefundFixedFeeTariff
	}
	return nil
}

func (x *OrderViewPublic) GetRefundTaxFee() *OrderViewMoney {
	if x != nil {
		return x.RefundTaxFee
	}
	return nil
}

func (x *OrderViewPublic) GetRefundTaxFeeCurrencyExchangeFee() *OrderViewMoney {
	if x != nil {
		return x.RefundTaxFeeCurrencyExchangeFee
	}
	return nil
}

func (x *OrderViewPublic) GetPaysuperRefundTaxFeeCurrencyExchangeFee() *OrderViewMoney {
	if x != nil {
		return x.PaysuperRefundTaxFeeCurrencyExchangeFee
	}
	return nil
}

func (x *OrderViewPublic) GetRefundReverseRevenue() *OrderViewMoney {
	if x != nil {
		return x.RefundReverseRevenue
	}
	return nil
}

func (x *OrderViewPublic) GetRefundFeesTotal() *OrderViewMoney {
	if x != nil {
		return x.RefundFeesTotal
	}
	return nil
}

func (x *OrderViewPublic) GetRefundFeesTotalLocal() *OrderViewMoney {
	if x != nil {
		return x.RefundFeesTotalLocal
	}
	return nil
}

func (x *OrderViewPublic) GetIssuer() *OrderIssuer {
	if x != nil {
		return x.Issuer
	}
	return nil
}

func (x *OrderViewPublic) GetItems() []*OrderItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *OrderViewPublic) GetMerchantPayoutCurrency() string {
	if x != nil {
		return x.MerchantPayoutCurrency
	}
	return ""
}

func (x *OrderViewPublic) GetParentOrder() *ParentOrder {
	if x != nil {
		return x.ParentOrder
	}
	return nil
}

func (x *OrderViewPublic) GetRefund() *OrderNotificationRefund {
	if x != nil {
		return x.Refund
	}
	return nil
}

func (x *OrderViewPublic) GetCancellation() *OrderNotificationCancellation {
	if x != nil {
		return x.Cancellation
	}
	return nil
}

func (x *OrderViewPublic) GetOperatingCompanyId() string {
	if x != nil {
		return x.OperatingCompanyId
	}
	return ""
}

func (x *OrderViewPublic) GetRefundAllowed() bool {
	if x != nil {
		return x.RefundAllowed
	}
	return false
}

func (x *OrderViewPublic) GetOrderCharge() *OrderViewMoney {
	if x != nil {
		return x.OrderCharge
	}
	return nil
}

func (x *OrderViewPublic) GetPaymentIpCountry() string {
	if x != nil {
		return x.PaymentIpCountry
	}
	return ""
}

func (x *OrderViewPublic) GetIsIpCountryMismatchBin() bool {
	if x != nil {
		return x.IsIpCountryMismatchBin
	}
	return false
}

func (x *OrderViewPublic) GetBillingCountryChangedByUser() bool {
	if x != nil {
		return x.BillingCountryChangedByUser
	}
	return false
}

func (x *OrderViewPublic) GetVatPayer() string {
	if x != nil {
		return x.VatPayer
	}
	return ""
}

func (x *OrderViewPublic) GetIsProduction() bool {
	if x != nil {
		return x.IsProduction
	}
	return false
}

func (x *OrderViewPublic) GetMerchantInfo() *OrderViewMerchantInfo {
	if x != nil {
		return x.MerchantInfo
	}
	return nil
}

func (x *OrderViewPublic) GetRecurring() bool {
	if x != nil {
		return x.Recurring
	}
	return false
}

func (x *OrderViewPublic) GetRecurringId() string {
	if x != nil {
		return x.RecurringId
	}
	return ""
}

func (x *OrderViewPublic) GetPaymentGrossRevenue() *OrderViewMoney {
	if x != nil {
		return x.PaymentGrossRevenue
	}
	return nil
}

func (x *OrderViewPublic) GetPaymentRefundGrossRevenue() *OrderViewMoney {
	if x != nil {
		return x.PaymentRefundGrossRevenue
	}
	return nil
}

func (x *OrderViewPublic) GetRefundTaxFeeTotal() *OrderViewMoney {
	if x != nil {
		return x.RefundTaxFeeTotal
	}
	return nil
}

func (x *OrderViewPublic) GetReportSummary() *OrderViewReportSummary {
	if x != nil {
		return x.ReportSummary
	}
	return nil
}

func (x *OrderViewPublic) GetRecurringSubscriptionId() string {
	if x != nil {
		return x.RecurringSubscriptionId
	}
	return ""
}

func (x *OrderViewPublic) GetRecurringPlanId() string {
	if x != nil {
		return x.RecurringPlanId
	}
	return ""
}

type OrderViewPrivate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"-" bson:"_id" faker:"objectIdString"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"-" bson:"_id" faker:"objectIdString"` // unique internal order identifier in Protocol One
	// @inject_tag: json:"uuid" bson:"uuid"
	//
	// The public unique identifier for the order in PaySuper.
	Uuid string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid" bson:"uuid"`
	// @inject_tag: json:"total_payment_amount" bson:"total_payment_amount"
	//
	// The total payment amount including all commissions.
	TotalPaymentAmount float64 `protobuf:"fixed64,3,opt,name=total_payment_amount,json=totalPaymentAmount,proto3" json:"total_payment_amount" bson:"total_payment_amount"`
	// @inject_tag: json:"currency" bson:"currency"
	//
	// The currency of the order. Three-letter Currency Code ISO 4217, in uppercase.
	Currency string `protobuf:"bytes,4,opt,name=currency,proto3" json:"currency" bson:"currency"`
	// @inject_tag: json:"project" bson:"project"
	//
	// The project data.
	Project *ProjectOrder `protobuf:"bytes,5,opt,name=project,proto3" json:"project" bson:"project"`
	// @inject_tag: json:"created_at" bson:"created_at"
	//
	// The date of the order creation.
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at" bson:"created_at"`
	// @inject_tag: json:"transaction" bson:"pm_order_id"
	//
	// The unique identifier for the order in the payment system.
	Transaction string `protobuf:"bytes,7,opt,name=transaction,proto3" json:"transaction" bson:"pm_order_id"`
	// @inject_tag: json:"payment_method" bson:"payment_method"
	//
	// The payment method data.
	PaymentMethod *PaymentMethodOrder `protobuf:"bytes,8,opt,name=payment_method,json=paymentMethod,proto3" json:"payment_method" bson:"payment_method"`
	// @inject_tag: json:"country_code" bson:"country_code"
	//
	// The customer's country code. Two-letter country code in ISO 3166-1, in uppercase.
	CountryCode string `protobuf:"bytes,9,opt,name=country_code,json=countryCode,proto3" json:"country_code" bson:"country_code"`
	// @inject_tag: json:"merchant_id" bson:"merchant_id" faker:"objectIdString"
	//
	// The unique identifier for the merchant.
	MerchantId string `protobuf:"bytes,10,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id" bson:"merchant_id" faker:"objectIdString"`
	// @inject_tag: json:"locale" bson:"locale"
	//
	// The customer's locale name. The language code in ISO 639-1 (for instance en-US).
	Locale string `protobuf:"bytes,11,opt,name=locale,proto3" json:"locale" bson:"locale"`
	// @inject_tag: json:"status" bson:"status"
	//
	// The status of the order. Available values: created, processed, canceled, rejected, refunded, chargeback, pending.
	Status string `protobuf:"bytes,12,opt,name=status,proto3" json:"status" bson:"status"`
	// @inject_tag: json:"transaction_date" bson:"pm_order_close_date"
	//
	// The date in ISO 8601 of the processed transaction.
	TransactionDate *timestamp.Timestamp `protobuf:"bytes,13,opt,name=transaction_date,json=transactionDate,proto3" json:"transaction_date" bson:"pm_order_close_date"`
	// @inject_tag: json:"user" bson:"user"
	//
	// The customer data.
	User *OrderUser `protobuf:"bytes,14,opt,name=user,proto3" json:"user" bson:"user"`
	// @inject_tag: json:"billing_address" bson:"billing_address"
	//
	// The customer's billing address entered in payment form.
	BillingAddress *OrderBillingAddress `protobuf:"bytes,15,opt,name=billing_address,json=billingAddress,proto3" json:"billing_address" bson:"billing_address"`
	// @inject_tag: json:"type" bson:"type"
	//
	// The order type. It depends on your sales option (Game Keys, Virtual Items, Virtual Currency the simple checkout). For products created as Game Keys use the key type, as Virtual Items - the product type, as Virtual Currency - the virtual_currency type, for a simple checkout - the simple type. Enum values: key, product, virtual_currency, simple.
	Type string `protobuf:"bytes,16,opt,name=type,proto3" json:"type" bson:"type"`
	// @inject_tag: json:"is_vat_deduction" bson:"is_vat_deduction"
	//
	// Has a true value if VAT can be deducted.
	IsVatDeduction bool `protobuf:"varint,17,opt,name=is_vat_deduction,json=isVatDeduction,proto3" json:"is_vat_deduction" bson:"is_vat_deduction"`
	// @inject_tag: json:"payment_gross_revenue_local" bson:"payment_gross_revenue_local"
	//
	// The gross revenue from the payment in the customer's region currency.
	PaymentGrossRevenueLocal *OrderViewMoney `protobuf:"bytes,18,opt,name=payment_gross_revenue_local,json=paymentGrossRevenueLocal,proto3" json:"payment_gross_revenue_local" bson:"payment_gross_revenue_local"`
	// @inject_tag: json:"payment_gross_revenue_origin" bson:"payment_gross_revenue_origin"
	//
	// The origin gross revenue from the payment.
	PaymentGrossRevenueOrigin *OrderViewMoney `protobuf:"bytes,19,opt,name=payment_gross_revenue_origin,json=paymentGrossRevenueOrigin,proto3" json:"payment_gross_revenue_origin" bson:"payment_gross_revenue_origin"`
	// @inject_tag: json:"payment_gross_revenue" bson:"payment_gross_revenue"
	//
	// The gross revenue from the payment.
	PaymentGrossRevenue *OrderViewMoney `protobuf:"bytes,20,opt,name=payment_gross_revenue,json=paymentGrossRevenue,proto3" json:"payment_gross_revenue" bson:"payment_gross_revenue"`
	// @inject_tag: json:"payment_tax_fee" bson:"payment_tax_fee"
	//
	// The tax fee of the payment.
	PaymentTaxFee *OrderViewMoney `protobuf:"bytes,21,opt,name=payment_tax_fee,json=paymentTaxFee,proto3" json:"payment_tax_fee" bson:"payment_tax_fee"`
	// @inject_tag: json:"payment_tax_fee_local" bson:"payment_tax_fee_local"
	//
	// The tax fee of the payment in the customer's region currency.
	PaymentTaxFeeLocal *OrderViewMoney `protobuf:"bytes,22,opt,name=payment_tax_fee_local,json=paymentTaxFeeLocal,proto3" json:"payment_tax_fee_local" bson:"payment_tax_fee_local"`
	// @inject_tag: json:"payment_tax_fee_origin" bson:"payment_tax_fee_origin"
	//
	// The origin tax fee of the payment.
	PaymentTaxFeeOrigin *OrderViewMoney `protobuf:"bytes,23,opt,name=payment_tax_fee_origin,json=paymentTaxFeeOrigin,proto3" json:"payment_tax_fee_origin" bson:"payment_tax_fee_origin"`
	// @inject_tag: json:"payment_tax_fee_currency_exchange_fee" bson:"payment_tax_fee_currency_exchange_fee"
	//
	// The tax fee of the payment for the currency exchange.
	PaymentTaxFeeCurrencyExchangeFee *OrderViewMoney `protobuf:"bytes,24,opt,name=payment_tax_fee_currency_exchange_fee,json=paymentTaxFeeCurrencyExchangeFee,proto3" json:"payment_tax_fee_currency_exchange_fee" bson:"payment_tax_fee_currency_exchange_fee"`
	// @inject_tag: json:"payment_tax_fee_total" bson:"payment_tax_fee_total"
	//
	// The tax fee total of the payment.
	PaymentTaxFeeTotal *OrderViewMoney `protobuf:"bytes,25,opt,name=payment_tax_fee_total,json=paymentTaxFeeTotal,proto3" json:"payment_tax_fee_total" bson:"payment_tax_fee_total"`
	// @inject_tag: json:"payment_gross_revenue_fx" bson:"payment_gross_revenue_fx"
	//
	// The gross revenue from the foreign exchange of the payment.
	PaymentGrossRevenueFx *OrderViewMoney `protobuf:"bytes,26,opt,name=payment_gross_revenue_fx,json=paymentGrossRevenueFx,proto3" json:"payment_gross_revenue_fx" bson:"payment_gross_revenue_fx"`
	// @inject_tag: json:"payment_gross_revenue_fx_tax_fee" bson:"payment_gross_revenue_fx_tax_fee"
	//
	// The gross revenue from the foreign exchange of the payment tax fee.
	PaymentGrossRevenueFxTaxFee *OrderViewMoney `protobuf:"bytes,27,opt,name=payment_gross_revenue_fx_tax_fee,json=paymentGrossRevenueFxTaxFee,proto3" json:"payment_gross_revenue_fx_tax_fee" bson:"payment_gross_revenue_fx_tax_fee"`
	// @inject_tag: json:"payment_gross_revenue_fx_profit" bson:"payment_gross_revenue_fx_profit"
	//
	// The gross revenue from the foreign exchange of the profit.
	PaymentGrossRevenueFxProfit *OrderViewMoney `protobuf:"bytes,28,opt,name=payment_gross_revenue_fx_profit,json=paymentGrossRevenueFxProfit,proto3" json:"payment_gross_revenue_fx_profit" bson:"payment_gross_revenue_fx_profit"`
	// @inject_tag: json:"gross_revenue" bson:"gross_revenue"
	//
	// The gross revenue.
	GrossRevenue *OrderViewMoney `protobuf:"bytes,29,opt,name=gross_revenue,json=grossRevenue,proto3" json:"gross_revenue" bson:"gross_revenue"`
	// @inject_tag: json:"tax_fee" bson:"tax_fee"
	//
	// The tax fee.
	TaxFee *OrderViewMoney `protobuf:"bytes,30,opt,name=tax_fee,json=taxFee,proto3" json:"tax_fee" bson:"tax_fee"`
	// @inject_tag: json:"tax_fee_currency_exchange_fee" bson:"tax_fee_currency_exchange_fee"
	//
	// The tax fee for the currency exchange.
	TaxFeeCurrencyExchangeFee *OrderViewMoney `protobuf:"bytes,31,opt,name=tax_fee_currency_exchange_fee,json=taxFeeCurrencyExchangeFee,proto3" json:"tax_fee_currency_exchange_fee" bson:"tax_fee_currency_exchange_fee"`
	// @inject_tag: json:"tax_fee_total" bson:"tax_fee_total"
	//
	// The total tax fee.
	TaxFeeTotal *OrderViewMoney `protobuf:"bytes,32,opt,name=tax_fee_total,json=taxFeeTotal,proto3" json:"tax_fee_total" bson:"tax_fee_total"`
	// @inject_tag: json:"method_fee_total" bson:"method_fee_total"
	//
	// The method fee total.
	MethodFeeTotal *OrderViewMoney `protobuf:"bytes,33,opt,name=method_fee_total,json=methodFeeTotal,proto3" json:"method_fee_total" bson:"method_fee_total"`
	// @inject_tag: json:"method_fee_tariff" bson:"method_fee_tariff"
	//
	// The tariff of the method fee.
	MethodFeeTariff *OrderViewMoney `protobuf:"bytes,34,opt,name=method_fee_tariff,json=methodFeeTariff,proto3" json:"method_fee_tariff" bson:"method_fee_tariff"`
	// @inject_tag: json:"paysuper_method_fee_tariff_self_cost" bson:"paysuper_method_fee_tariff_self_cost"
	//
	// The self-cost tariff of the PaySuper method fee.
	PaysuperMethodFeeTariffSelfCost *OrderViewMoney `protobuf:"bytes,35,opt,name=paysuper_method_fee_tariff_self_cost,json=paysuperMethodFeeTariffSelfCost,proto3" json:"paysuper_method_fee_tariff_self_cost" bson:"paysuper_method_fee_tariff_self_cost"`
	// @inject_tag: json:"paysuper_method_fee_profit" bson:"paysuper_method_fee_profit"
	//
	// The profit of the PaySuper method fee.
	PaysuperMethodFeeProfit *OrderViewMoney `protobuf:"bytes,36,opt,name=paysuper_method_fee_profit,json=paysuperMethodFeeProfit,proto3" json:"paysuper_method_fee_profit" bson:"paysuper_method_fee_profit"`
	// @inject_tag: json:"method_fixed_fee_tariff" bson:"method_fixed_fee_tariff"
	//
	// The tariff of the fixed method fee.
	MethodFixedFeeTariff *OrderViewMoney `protobuf:"bytes,37,opt,name=method_fixed_fee_tariff,json=methodFixedFeeTariff,proto3" json:"method_fixed_fee_tariff" bson:"method_fixed_fee_tariff"`
	// @inject_tag: json:"paysuper_method_fixed_fee_tariff_fx_profit" bson:"paysuper_method_fixed_fee_tariff_fx_profit"
	//
	// The PaySuper fixed method fee tariff for the foreign exchange of the profit.
	PaysuperMethodFixedFeeTariffFxProfit *OrderViewMoney `protobuf:"bytes,38,opt,name=paysuper_method_fixed_fee_tariff_fx_profit,json=paysuperMethodFixedFeeTariffFxProfit,proto3" json:"paysuper_method_fixed_fee_tariff_fx_profit" bson:"paysuper_method_fixed_fee_tariff_fx_profit"`
	// @inject_tag: json:"paysuper_method_fixed_fee_tariff_self_cost" bson:"paysuper_method_fixed_fee_tariff_self_cost"
	//
	// The self-cost tariff of the PaySuper fixed method fee.
	PaysuperMethodFixedFeeTariffSelfCost *OrderViewMoney `protobuf:"bytes,39,opt,name=paysuper_method_fixed_fee_tariff_self_cost,json=paysuperMethodFixedFeeTariffSelfCost,proto3" json:"paysuper_method_fixed_fee_tariff_self_cost" bson:"paysuper_method_fixed_fee_tariff_self_cost"`
	// @inject_tag: json:"paysuper_method_fixed_fee_tariff_total_profit" bson:"paysuper_method_fixed_fee_tariff_total_profit"
	//
	// The total profit of the PaySuper fixed method fee tariff.
	PaysuperMethodFixedFeeTariffTotalProfit *OrderViewMoney `protobuf:"bytes,40,opt,name=paysuper_method_fixed_fee_tariff_total_profit,json=paysuperMethodFixedFeeTariffTotalProfit,proto3" json:"paysuper_method_fixed_fee_tariff_total_profit" bson:"paysuper_method_fixed_fee_tariff_total_profit"`
	// @inject_tag: json:"paysuper_fixed_fee" bson:"paysuper_fixed_fee"
	//
	// The PaySuper fixed fee.
	PaysuperFixedFee *OrderViewMoney `protobuf:"bytes,41,opt,name=paysuper_fixed_fee,json=paysuperFixedFee,proto3" json:"paysuper_fixed_fee" bson:"paysuper_fixed_fee"`
	// @inject_tag: json:"paysuper_fixed_fee_fx_profit" bson:"paysuper_fixed_fee_fx_profit"
	//
	// The FX profit of the PaySuper fixed fee.
	PaysuperFixedFeeFxProfit *OrderViewMoney `protobuf:"bytes,42,opt,name=paysuper_fixed_fee_fx_profit,json=paysuperFixedFeeFxProfit,proto3" json:"paysuper_fixed_fee_fx_profit" bson:"paysuper_fixed_fee_fx_profit"`
	// @inject_tag: json:"fees_total" bson:"fees_total"
	//
	// The total fees.
	FeesTotal *OrderViewMoney `protobuf:"bytes,43,opt,name=fees_total,json=feesTotal,proto3" json:"fees_total" bson:"fees_total"`
	// @inject_tag: json:"fees_total_local" bson:"fees_total_local"
	//
	// The total fees in the customer's region currency.
	FeesTotalLocal *OrderViewMoney `protobuf:"bytes,44,opt,name=fees_total_local,json=feesTotalLocal,proto3" json:"fees_total_local" bson:"fees_total_local"`
	// @inject_tag: json:"net_revenue" bson:"net_revenue"
	//
	// The net revenue.
	NetRevenue *OrderViewMoney `protobuf:"bytes,45,opt,name=net_revenue,json=netRevenue,proto3" json:"net_revenue" bson:"net_revenue"`
	// @inject_tag: json:"paysuper_method_total_profit" bson:"paysuper_method_total_profit"
	//
	// The total profit of the PaySuper method.
	PaysuperMethodTotalProfit *OrderViewMoney `protobuf:"bytes,46,opt,name=paysuper_method_total_profit,json=paysuperMethodTotalProfit,proto3" json:"paysuper_method_total_profit" bson:"paysuper_method_total_profit"`
	// @inject_tag: json:"paysuper_total_profit" bson:"paysuper_total_profit"
	//
	// The PaySuper total profit.
	PaysuperTotalProfit *OrderViewMoney `protobuf:"bytes,47,opt,name=paysuper_total_profit,json=paysuperTotalProfit,proto3" json:"paysuper_total_profit" bson:"paysuper_total_profit"`
	// @inject_tag: json:"payment_refund_gross_revenue_local" bson:"payment_refund_gross_revenue_local"
	//
	// The gross revenue of the payment refund in the customer's region currency.
	PaymentRefundGrossRevenueLocal *OrderViewMoney `protobuf:"bytes,48,opt,name=payment_refund_gross_revenue_local,json=paymentRefundGrossRevenueLocal,proto3" json:"payment_refund_gross_revenue_local" bson:"payment_refund_gross_revenue_local"`
	// @inject_tag: json:"payment_refund_gross_revenue_origin" bson:"payment_refund_gross_revenue_origin"
	//
	// The origin gross revenue of the payment refund.
	PaymentRefundGrossRevenueOrigin *OrderViewMoney `protobuf:"bytes,49,opt,name=payment_refund_gross_revenue_origin,json=paymentRefundGrossRevenueOrigin,proto3" json:"payment_refund_gross_revenue_origin" bson:"payment_refund_gross_revenue_origin"`
	// @inject_tag: json:"payment_refund_gross_revenue" bson:"payment_refund_gross_revenue"
	//
	// The gross revenue of the payment refund.
	PaymentRefundGrossRevenue *OrderViewMoney `protobuf:"bytes,50,opt,name=payment_refund_gross_revenue,json=paymentRefundGrossRevenue,proto3" json:"payment_refund_gross_revenue" bson:"payment_refund_gross_revenue"`
	// @inject_tag: json:"payment_refund_tax_fee" bson:"payment_refund_tax_fee"
	//
	// The tax fee of the payment refund.
	PaymentRefundTaxFee *OrderViewMoney `protobuf:"bytes,51,opt,name=payment_refund_tax_fee,json=paymentRefundTaxFee,proto3" json:"payment_refund_tax_fee" bson:"payment_refund_tax_fee"`
	// @inject_tag: json:"payment_refund_tax_fee_local" bson:"payment_refund_tax_fee_local"
	//
	// The tax fee of the payment refund in the customer's region currency.
	PaymentRefundTaxFeeLocal *OrderViewMoney `protobuf:"bytes,52,opt,name=payment_refund_tax_fee_local,json=paymentRefundTaxFeeLocal,proto3" json:"payment_refund_tax_fee_local" bson:"payment_refund_tax_fee_local"`
	// @inject_tag: json:"payment_refund_tax_fee_origin" bson:"payment_refund_tax_fee_origin"
	//
	// The origin tax fee of the payment refund.
	PaymentRefundTaxFeeOrigin *OrderViewMoney `protobuf:"bytes,53,opt,name=payment_refund_tax_fee_origin,json=paymentRefundTaxFeeOrigin,proto3" json:"payment_refund_tax_fee_origin" bson:"payment_refund_tax_fee_origin"`
	// @inject_tag: json:"payment_refund_fee_tariff" bson:"payment_refund_fee_tariff"
	//
	// The fee tariff of the payment refund.
	PaymentRefundFeeTariff *OrderViewMoney `protobuf:"bytes,54,opt,name=payment_refund_fee_tariff,json=paymentRefundFeeTariff,proto3" json:"payment_refund_fee_tariff" bson:"payment_refund_fee_tariff"`
	// @inject_tag: json:"method_refund_fixed_fee_tariff" bson:"method_refund_fixed_fee_tariff"
	//
	// The fixed fee tariff of the method refund.
	MethodRefundFixedFeeTariff *OrderViewMoney `protobuf:"bytes,55,opt,name=method_refund_fixed_fee_tariff,json=methodRefundFixedFeeTariff,proto3" json:"method_refund_fixed_fee_tariff" bson:"method_refund_fixed_fee_tariff"`
	// @inject_tag: json:"refund_gross_revenue" bson:"refund_gross_revenue"
	//
	// The gross revenue from the refund.
	RefundGrossRevenue *OrderViewMoney `protobuf:"bytes,56,opt,name=refund_gross_revenue,json=refundGrossRevenue,proto3" json:"refund_gross_revenue" bson:"refund_gross_revenue"`
	// @inject_tag: json:"refund_gross_revenue_fx" bson:"refund_gross_revenue_fx"
	//
	// The gross revenue from the foreign exchange of the refund.
	RefundGrossRevenueFx *OrderViewMoney `protobuf:"bytes,57,opt,name=refund_gross_revenue_fx,json=refundGrossRevenueFx,proto3" json:"refund_gross_revenue_fx" bson:"refund_gross_revenue_fx"`
	// @inject_tag: json:"method_refund_fee_tariff" bson:"method_refund_fee_tariff"
	//
	// The fee tariff for the method refund.
	MethodRefundFeeTariff *OrderViewMoney `protobuf:"bytes,58,opt,name=method_refund_fee_tariff,json=methodRefundFeeTariff,proto3" json:"method_refund_fee_tariff" bson:"method_refund_fee_tariff"`
	// @inject_tag: json:"paysuper_method_refund_fee_tariff_profit" bson:"paysuper_method_refund_fee_tariff_profit"
	//
	// The PaySuper method refund fee tariff profit.
	PaysuperMethodRefundFeeTariffProfit *OrderViewMoney `protobuf:"bytes,59,opt,name=paysuper_method_refund_fee_tariff_profit,json=paysuperMethodRefundFeeTariffProfit,proto3" json:"paysuper_method_refund_fee_tariff_profit" bson:"paysuper_method_refund_fee_tariff_profit"`
	// @inject_tag: json:"paysuper_method_refund_fixed_fee_tariff_self_cost" bson:"paysuper_method_refund_fixed_fee_tariff_self_cost"
	//
	// The PaySuper method refund fixed fee tariff self-cost.
	PaysuperMethodRefundFixedFeeTariffSelfCost *OrderViewMoney `protobuf:"bytes,60,opt,name=paysuper_method_refund_fixed_fee_tariff_self_cost,json=paysuperMethodRefundFixedFeeTariffSelfCost,proto3" json:"paysuper_method_refund_fixed_fee_tariff_self_cost" bson:"paysuper_method_refund_fixed_fee_tariff_self_cost"`
	// @inject_tag: json:"merchant_refund_fixed_fee_tariff" bson:"merchant_refund_fixed_fee_tariff"
	//
	// The merchant refund fixed fee tariff.
	MerchantRefundFixedFeeTariff *OrderViewMoney `protobuf:"bytes,61,opt,name=merchant_refund_fixed_fee_tariff,json=merchantRefundFixedFeeTariff,proto3" json:"merchant_refund_fixed_fee_tariff" bson:"merchant_refund_fixed_fee_tariff"`
	// @inject_tag: json:"paysuper_method_refund_fixed_fee_tariff_profit" bson:"paysuper_method_refund_fixed_fee_tariff_profit"
	//
	// The PaySuper method refund fixed fee tariff profit.
	PaysuperMethodRefundFixedFeeTariffProfit *OrderViewMoney `protobuf:"bytes,62,opt,name=paysuper_method_refund_fixed_fee_tariff_profit,json=paysuperMethodRefundFixedFeeTariffProfit,proto3" json:"paysuper_method_refund_fixed_fee_tariff_profit" bson:"paysuper_method_refund_fixed_fee_tariff_profit"`
	// @inject_tag: json:"refund_tax_fee" bson:"refund_tax_fee"
	//
	// The refund tax fee.
	RefundTaxFee *OrderViewMoney `protobuf:"bytes,63,opt,name=refund_tax_fee,json=refundTaxFee,proto3" json:"refund_tax_fee" bson:"refund_tax_fee"`
	// @inject_tag: json:"refund_tax_fee_currency_exchange_fee" bson:"refund_tax_fee_currency_exchange_fee"
	//
	// The refund tax fee for the currency exchange fee.
	RefundTaxFeeCurrencyExchangeFee *OrderViewMoney `protobuf:"bytes,64,opt,name=refund_tax_fee_currency_exchange_fee,json=refundTaxFeeCurrencyExchangeFee,proto3" json:"refund_tax_fee_currency_exchange_fee" bson:"refund_tax_fee_currency_exchange_fee"`
	// @inject_tag: json:"paysuper_refund_tax_fee_currency_exchange_fee" bson:"paysuper_refund_tax_fee_currency_exchange_fee"
	//
	// The PaySuper refund tax fee for the currency exchange fee.
	PaysuperRefundTaxFeeCurrencyExchangeFee *OrderViewMoney `protobuf:"bytes,65,opt,name=paysuper_refund_tax_fee_currency_exchange_fee,json=paysuperRefundTaxFeeCurrencyExchangeFee,proto3" json:"paysuper_refund_tax_fee_currency_exchange_fee" bson:"paysuper_refund_tax_fee_currency_exchange_fee"`
	// @inject_tag: json:"refund_tax_fee_total" bson:"refund_tax_fee_total"
	//
	// The total refund tax fee.
	RefundTaxFeeTotal *OrderViewMoney `protobuf:"bytes,66,opt,name=refund_tax_fee_total,json=refundTaxFeeTotal,proto3" json:"refund_tax_fee_total" bson:"refund_tax_fee_total"`
	// @inject_tag: json:"refund_reverse_revenue" bson:"refund_reverse_revenue"
	//
	// The refund reverse revenue.
	RefundReverseRevenue *OrderViewMoney `protobuf:"bytes,67,opt,name=refund_reverse_revenue,json=refundReverseRevenue,proto3" json:"refund_reverse_revenue" bson:"refund_reverse_revenue"`
	// @inject_tag: json:"refund_fees_total" bson:"refund_fees_total"
	//
	// The refund total fees.
	RefundFeesTotal *OrderViewMoney `protobuf:"bytes,68,opt,name=refund_fees_total,json=refundFeesTotal,proto3" json:"refund_fees_total" bson:"refund_fees_total"`
	// @inject_tag: json:"refund_fees_total_local" bson:"refund_fees_total_local"
	//
	// The total fees in the customer's region currency.
	RefundFeesTotalLocal *OrderViewMoney `protobuf:"bytes,69,opt,name=refund_fees_total_local,json=refundFeesTotalLocal,proto3" json:"refund_fees_total_local" bson:"refund_fees_total_local"`
	// @inject_tag: json:"paysuper_refund_total_profit" bson:"paysuper_refund_total_profit"
	//
	// The PaySuper refund total profit.
	PaysuperRefundTotalProfit *OrderViewMoney `protobuf:"bytes,70,opt,name=paysuper_refund_total_profit,json=paysuperRefundTotalProfit,proto3" json:"paysuper_refund_total_profit" bson:"paysuper_refund_total_profit"`
	//@inject_tag: json:"issuer" bson:"issuer"
	//
	// The order issuer data.
	Issuer *OrderIssuer `protobuf:"bytes,71,opt,name=issuer,proto3" json:"issuer" bson:"issuer"`
	// @inject_tag: json:"items" bson:"items"
	//
	// The list of products in the order.
	Items []*OrderItem `protobuf:"bytes,72,rep,name=items,proto3" json:"items" bson:"items"`
	//@inject_tag: json:"merchant_payout_currency" bson:"merchant_payout_currency"
	//
	// The merchant's payout currency.
	MerchantPayoutCurrency string `protobuf:"bytes,73,opt,name=merchant_payout_currency,json=merchantPayoutCurrency,proto3" json:"merchant_payout_currency" bson:"merchant_payout_currency"`
	//@inject_tag: json:"parent_order" bson:"parent_order"
	//
	// The parent order data (for refunds only).
	ParentOrder *ParentOrder `protobuf:"bytes,74,opt,name=parent_order,json=parentOrder,proto3" json:"parent_order" bson:"parent_order"`
	//@inject_tag: json:"refund" bson:"refund"
	//
	// The notification of refund. Has a null value if the order is not refunded.
	Refund *OrderNotificationRefund `protobuf:"bytes,75,opt,name=refund,proto3" json:"refund" bson:"refund"`
	//@inject_tag: json:"cancellation" bson:"cancellation"
	//
	// The notification of the cancellation. Has a null value if the order is not canceled.
	Cancellation *OrderNotificationCancellation `protobuf:"bytes,76,opt,name=cancellation,proto3" json:"cancellation" bson:"cancellation"`
	// @inject_tag: json:"mcc_code" bson:"mcc_code"
	//
	// The Merchant Category Code (MCC) is a four-digit number listed in ISO 18245.
	MccCode string `protobuf:"bytes,77,opt,name=mcc_code,json=mccCode,proto3" json:"mcc_code" bson:"mcc_code"`
	// @inject_tag: json:"operating_company_id" bson:"operating_company_id"
	//
	// The unique identifier for the operating company.
	OperatingCompanyId string `protobuf:"bytes,78,opt,name=operating_company_id,json=operatingCompanyId,proto3" json:"operating_company_id" bson:"operating_company_id"`
	// @inject_tag: json:"is_high_risk" bson:"is_high_risk"
	//
	// Has a true value if the customer can select another country while the payments are disallowed for a country determined by their IP address.
	IsHighRisk bool `protobuf:"varint,79,opt,name=is_high_risk,json=isHighRisk,proto3" json:"is_high_risk" bson:"is_high_risk"`
	// @inject_tag: json:"refund_allowed"  bson:"refund_allowed"
	//
	// Has a true value if the payment method allows a refund.
	RefundAllowed bool `protobuf:"varint,80,opt,name=refund_allowed,json=refundAllowed,proto3" json:"refund_allowed" bson:"refund_allowed"`
	// @inject_tag: json:"order_charge" bson:"order_charge"
	//
	// The order charge.
	OrderCharge *OrderViewMoney `protobuf:"bytes,81,opt,name=order_charge,json=orderCharge,proto3" json:"order_charge" bson:"order_charge"`
	// @inject_tag: json:"payment_ip_country" bson:"payment_ip_country"
	//
	// The IP address of the country where the order was paid.
	PaymentIpCountry string `protobuf:"bytes,82,opt,name=payment_ip_country,json=paymentIpCountry,proto3" json:"payment_ip_country" bson:"payment_ip_country"`
	// @inject_tag: json:"is_ip_country_mismatch_bin" bson:"is_ip_country_mismatch_bin"
	//
	// Has a true value if the country from the card's BIN has not been matched to the country defined by the IP address (for card payments only).
	IsIpCountryMismatchBin bool `protobuf:"varint,83,opt,name=is_ip_country_mismatch_bin,json=isIpCountryMismatchBin,proto3" json:"is_ip_country_mismatch_bin" bson:"is_ip_country_mismatch_bin"`
	// @inject_tag: json:"billing_country_changed_by_user" bson:"billing_country_changed_by_user"
	//
	// Has a true value if the country was selected by the customer.
	BillingCountryChangedByUser bool `protobuf:"varint,84,opt,name=billing_country_changed_by_user,json=billingCountryChangedByUser,proto3" json:"billing_country_changed_by_user" bson:"billing_country_changed_by_user"`
	// @inject_tag: json:"vat_payer" bson:"vat_payer" validate:"oneof=buyer seller nobody"
	//
	// The responsible for VAT. Available values: buyer (VAT is added to the order charge), seller (VAT is included in the order charge), nobody (VAT exempt).
	VatPayer string `protobuf:"bytes,85,opt,name=vat_payer,json=vatPayer,proto3" json:"vat_payer" bson:"vat_payer" validate:"oneof=buyer seller nobody"`
	// @inject_tag: json:"is_production" bson:"is_production"
	//
	// Has a true value for a production payment and false for a test payment that goes through a test sandbox.
	IsProduction bool `protobuf:"varint,86,opt,name=is_production,json=isProduction,proto3" json:"is_production" bson:"is_production"`
	// @inject_tag: json:"merchant_info" bson:"merchant_info"
	//
	// The merchant's company data.
	MerchantInfo *OrderViewMerchantInfo `protobuf:"bytes,87,opt,name=merchant_info,json=merchantInfo,proto3" json:"merchant_info" bson:"merchant_info"`
	// @inject_tag: json:"order_charge_before_vat" bson:"order_charge_before_vat"
	//
	// The order charge excluding VAT.
	OrderChargeBeforeVat *OrderViewMoney `protobuf:"bytes,88,opt,name=order_charge_before_vat,json=orderChargeBeforeVat,proto3" json:"order_charge_before_vat" bson:"order_charge_before_vat"`
	// @inject_tag: json:"tax_rate" bson:"tax_rate"
	//
	// The tax rate.
	TaxRate float64 `protobuf:"fixed64,89,opt,name=tax_rate,json=taxRate,proto3" json:"tax_rate" bson:"tax_rate"`
	// @inject_tag: json:"payment_method_terminal_id" bson:"payment_method_terminal_id"
	//
	// The unique identifier of terminal of payment method
	PaymentMethodTerminalId string `protobuf:"bytes,90,opt,name=payment_method_terminal_id,json=paymentMethodTerminalId,proto3" json:"payment_method_terminal_id" bson:"payment_method_terminal_id"`
	// @inject_tag: json:"-" bson:"recurring"
	//
	// DEPRECATED! Use the recurring_subscription_id property
	// Exists recurring for order
	Recurring bool `protobuf:"varint,91,opt,name=recurring,proto3" json:"-" bson:"recurring"`
	// @inject_tag: json:"-" bson:"recurring_id"
	//
	// DEPRECATED! Use the recurring_subscription_id property
	// Recurring identity for order
	RecurringId string `protobuf:"bytes,92,opt,name=recurring_id,json=recurringId,proto3" json:"-" bson:"recurring_id"`
	// @inject_tag: json:"-" bson:"royalty_report_id"
	//
	// The royalty report's identifier which include this order
	RoyaltyReportId string `protobuf:"bytes,93,opt,name=royalty_report_id,json=royaltyReportId,proto3" json:"-" bson:"royalty_report_id"`
	// @inject_tag: json:"-" bson:"metadata_values"
	//
	// Only values from metadata field
	MetadataValues []string `protobuf:"bytes,94,rep,name=metadata_values,json=metadataValues,proto3" json:"-" bson:"metadata_values"`
	// @inject_tag: json:"-" bson:"amount_before_vat"
	//
	// The order amount excluding commissions.
	AmountBeforeVat float64 `protobuf:"fixed64,95,opt,name=amount_before_vat,json=amountBeforeVat,proto3" json:"-" bson:"amount_before_vat"`
	// @inject_tag: json:"report_summary" bson:"report_summary"
	//
	// Transaction summary for reports
	ReportSummary *OrderViewReportSummary `protobuf:"bytes,96,opt,name=report_summary,json=reportSummary,proto3" json:"report_summary" bson:"report_summary"`
	// @inject_tag: json:"recurring_subscription_id"
	//
	// Identity of recurring subscription for order
	RecurringSubscriptionId string `protobuf:"bytes,97,opt,name=recurring_subscription_id,json=recurringSubscriptionId,proto3" json:"recurring_subscription_id"`
	// @inject_tag: json:"recurring_plan_id"
	//
	// Identity of recurring plan for order
	RecurringPlanId string `protobuf:"bytes,98,opt,name=recurring_plan_id,json=recurringPlanId,proto3" json:"recurring_plan_id"`
}

func (x *OrderViewPrivate) Reset() {
	*x = OrderViewPrivate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderViewPrivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderViewPrivate) ProtoMessage() {}

func (x *OrderViewPrivate) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderViewPrivate.ProtoReflect.Descriptor instead.
func (*OrderViewPrivate) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{114}
}

func (x *OrderViewPrivate) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *OrderViewPrivate) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *OrderViewPrivate) GetTotalPaymentAmount() float64 {
	if x != nil {
		return x.TotalPaymentAmount
	}
	return 0
}

func (x *OrderViewPrivate) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *OrderViewPrivate) GetProject() *ProjectOrder {
	if x != nil {
		return x.Project
	}
	return nil
}

func (x *OrderViewPrivate) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *OrderViewPrivate) GetTransaction() string {
	if x != nil {
		return x.Transaction
	}
	return ""
}

func (x *OrderViewPrivate) GetPaymentMethod() *PaymentMethodOrder {
	if x != nil {
		return x.PaymentMethod
	}
	return nil
}

func (x *OrderViewPrivate) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *OrderViewPrivate) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *OrderViewPrivate) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

func (x *OrderViewPrivate) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *OrderViewPrivate) GetTransactionDate() *timestamp.Timestamp {
	if x != nil {
		return x.TransactionDate
	}
	return nil
}

func (x *OrderViewPrivate) GetUser() *OrderUser {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *OrderViewPrivate) GetBillingAddress() *OrderBillingAddress {
	if x != nil {
		return x.BillingAddress
	}
	return nil
}

func (x *OrderViewPrivate) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *OrderViewPrivate) GetIsVatDeduction() bool {
	if x != nil {
		return x.IsVatDeduction
	}
	return false
}

func (x *OrderViewPrivate) GetPaymentGrossRevenueLocal() *OrderViewMoney {
	if x != nil {
		return x.PaymentGrossRevenueLocal
	}
	return nil
}

func (x *OrderViewPrivate) GetPaymentGrossRevenueOrigin() *OrderViewMoney {
	if x != nil {
		return x.PaymentGrossRevenueOrigin
	}
	return nil
}

func (x *OrderViewPrivate) GetPaymentGrossRevenue() *OrderViewMoney {
	if x != nil {
		return x.PaymentGrossRevenue
	}
	return nil
}

func (x *OrderViewPrivate) GetPaymentTaxFee() *OrderViewMoney {
	if x != nil {
		return x.PaymentTaxFee
	}
	return nil
}

func (x *OrderViewPrivate) GetPaymentTaxFeeLocal() *OrderViewMoney {
	if x != nil {
		return x.PaymentTaxFeeLocal
	}
	return nil
}

func (x *OrderViewPrivate) GetPaymentTaxFeeOrigin() *OrderViewMoney {
	if x != nil {
		return x.PaymentTaxFeeOrigin
	}
	return nil
}

func (x *OrderViewPrivate) GetPaymentTaxFeeCurrencyExchangeFee() *OrderViewMoney {
	if x != nil {
		return x.PaymentTaxFeeCurrencyExchangeFee
	}
	return nil
}

func (x *OrderViewPrivate) GetPaymentTaxFeeTotal() *OrderViewMoney {
	if x != nil {
		return x.PaymentTaxFeeTotal
	}
	return nil
}

func (x *OrderViewPrivate) GetPaymentGrossRevenueFx() *OrderViewMoney {
	if x != nil {
		return x.PaymentGrossRevenueFx
	}
	return nil
}

func (x *OrderViewPrivate) GetPaymentGrossRevenueFxTaxFee() *OrderViewMoney {
	if x != nil {
		return x.PaymentGrossRevenueFxTaxFee
	}
	return nil
}

func (x *OrderViewPrivate) GetPaymentGrossRevenueFxProfit() *OrderViewMoney {
	if x != nil {
		return x.PaymentGrossRevenueFxProfit
	}
	return nil
}

func (x *OrderViewPrivate) GetGrossRevenue() *OrderViewMoney {
	if x != nil {
		return x.GrossRevenue
	}
	return nil
}

func (x *OrderViewPrivate) GetTaxFee() *OrderViewMoney {
	if x != nil {
		return x.TaxFee
	}
	return nil
}

func (x *OrderViewPrivate) GetTaxFeeCurrencyExchangeFee() *OrderViewMoney {
	if x != nil {
		return x.TaxFeeCurrencyExchangeFee
	}
	return nil
}

func (x *OrderViewPrivate) GetTaxFeeTotal() *OrderViewMoney {
	if x != nil {
		return x.TaxFeeTotal
	}
	return nil
}

func (x *OrderViewPrivate) GetMethodFeeTotal() *OrderViewMoney {
	if x != nil {
		return x.MethodFeeTotal
	}
	return nil
}

func (x *OrderViewPrivate) GetMethodFeeTariff() *OrderViewMoney {
	if x != nil {
		return x.MethodFeeTariff
	}
	return nil
}

func (x *OrderViewPrivate) GetPaysuperMethodFeeTariffSelfCost() *OrderViewMoney {
	if x != nil {
		return x.PaysuperMethodFeeTariffSelfCost
	}
	return nil
}

func (x *OrderViewPrivate) GetPaysuperMethodFeeProfit() *OrderViewMoney {
	if x != nil {
		return x.PaysuperMethodFeeProfit
	}
	return nil
}

func (x *OrderViewPrivate) GetMethodFixedFeeTariff() *OrderViewMoney {
	if x != nil {
		return x.MethodFixedFeeTariff
	}
	return nil
}

func (x *OrderViewPrivate) GetPaysuperMethodFixedFeeTariffFxProfit() *OrderViewMoney {
	if x != nil {
		return x.PaysuperMethodFixedFeeTariffFxProfit
	}
	return nil
}

func (x *OrderViewPrivate) GetPaysuperMethodFixedFeeTariffSelfCost() *OrderViewMoney {
	if x != nil {
		return x.PaysuperMethodFixedFeeTariffSelfCost
	}
	return nil
}

func (x *OrderViewPrivate) GetPaysuperMethodFixedFeeTariffTotalProfit() *OrderViewMoney {
	if x != nil {
		return x.PaysuperMethodFixedFeeTariffTotalProfit
	}
	return nil
}

func (x *OrderViewPrivate) GetPaysuperFixedFee() *OrderViewMoney {
	if x != nil {
		return x.PaysuperFixedFee
	}
	return nil
}

func (x *OrderViewPrivate) GetPaysuperFixedFeeFxProfit() *OrderViewMoney {
	if x != nil {
		return x.PaysuperFixedFeeFxProfit
	}
	return nil
}

func (x *OrderViewPrivate) GetFeesTotal() *OrderViewMoney {
	if x != nil {
		return x.FeesTotal
	}
	return nil
}

func (x *OrderViewPrivate) GetFeesTotalLocal() *OrderViewMoney {
	if x != nil {
		return x.FeesTotalLocal
	}
	return nil
}

func (x *OrderViewPrivate) GetNetRevenue() *OrderViewMoney {
	if x != nil {
		return x.NetRevenue
	}
	return nil
}

func (x *OrderViewPrivate) GetPaysuperMethodTotalProfit() *OrderViewMoney {
	if x != nil {
		return x.PaysuperMethodTotalProfit
	}
	return nil
}

func (x *OrderViewPrivate) GetPaysuperTotalProfit() *OrderViewMoney {
	if x != nil {
		return x.PaysuperTotalProfit
	}
	return nil
}

func (x *OrderViewPrivate) GetPaymentRefundGrossRevenueLocal() *OrderViewMoney {
	if x != nil {
		return x.PaymentRefundGrossRevenueLocal
	}
	return nil
}

func (x *OrderViewPrivate) GetPaymentRefundGrossRevenueOrigin() *OrderViewMoney {
	if x != nil {
		return x.PaymentRefundGrossRevenueOrigin
	}
	return nil
}

func (x *OrderViewPrivate) GetPaymentRefundGrossRevenue() *OrderViewMoney {
	if x != nil {
		return x.PaymentRefundGrossRevenue
	}
	return nil
}

func (x *OrderViewPrivate) GetPaymentRefundTaxFee() *OrderViewMoney {
	if x != nil {
		return x.PaymentRefundTaxFee
	}
	return nil
}

func (x *OrderViewPrivate) GetPaymentRefundTaxFeeLocal() *OrderViewMoney {
	if x != nil {
		return x.PaymentRefundTaxFeeLocal
	}
	return nil
}

func (x *OrderViewPrivate) GetPaymentRefundTaxFeeOrigin() *OrderViewMoney {
	if x != nil {
		return x.PaymentRefundTaxFeeOrigin
	}
	return nil
}

func (x *OrderViewPrivate) GetPaymentRefundFeeTariff() *OrderViewMoney {
	if x != nil {
		return x.PaymentRefundFeeTariff
	}
	return nil
}

func (x *OrderViewPrivate) GetMethodRefundFixedFeeTariff() *OrderViewMoney {
	if x != nil {
		return x.MethodRefundFixedFeeTariff
	}
	return nil
}

func (x *OrderViewPrivate) GetRefundGrossRevenue() *OrderViewMoney {
	if x != nil {
		return x.RefundGrossRevenue
	}
	return nil
}

func (x *OrderViewPrivate) GetRefundGrossRevenueFx() *OrderViewMoney {
	if x != nil {
		return x.RefundGrossRevenueFx
	}
	return nil
}

func (x *OrderViewPrivate) GetMethodRefundFeeTariff() *OrderViewMoney {
	if x != nil {
		return x.MethodRefundFeeTariff
	}
	return nil
}

func (x *OrderViewPrivate) GetPaysuperMethodRefundFeeTariffProfit() *OrderViewMoney {
	if x != nil {
		return x.PaysuperMethodRefundFeeTariffProfit
	}
	return nil
}

func (x *OrderViewPrivate) GetPaysuperMethodRefundFixedFeeTariffSelfCost() *OrderViewMoney {
	if x != nil {
		return x.PaysuperMethodRefundFixedFeeTariffSelfCost
	}
	return nil
}

func (x *OrderViewPrivate) GetMerchantRefundFixedFeeTariff() *OrderViewMoney {
	if x != nil {
		return x.MerchantRefundFixedFeeTariff
	}
	return nil
}

func (x *OrderViewPrivate) GetPaysuperMethodRefundFixedFeeTariffProfit() *OrderViewMoney {
	if x != nil {
		return x.PaysuperMethodRefundFixedFeeTariffProfit
	}
	return nil
}

func (x *OrderViewPrivate) GetRefundTaxFee() *OrderViewMoney {
	if x != nil {
		return x.RefundTaxFee
	}
	return nil
}

func (x *OrderViewPrivate) GetRefundTaxFeeCurrencyExchangeFee() *OrderViewMoney {
	if x != nil {
		return x.RefundTaxFeeCurrencyExchangeFee
	}
	return nil
}

func (x *OrderViewPrivate) GetPaysuperRefundTaxFeeCurrencyExchangeFee() *OrderViewMoney {
	if x != nil {
		return x.PaysuperRefundTaxFeeCurrencyExchangeFee
	}
	return nil
}

func (x *OrderViewPrivate) GetRefundTaxFeeTotal() *OrderViewMoney {
	if x != nil {
		return x.RefundTaxFeeTotal
	}
	return nil
}

func (x *OrderViewPrivate) GetRefundReverseRevenue() *OrderViewMoney {
	if x != nil {
		return x.RefundReverseRevenue
	}
	return nil
}

func (x *OrderViewPrivate) GetRefundFeesTotal() *OrderViewMoney {
	if x != nil {
		return x.RefundFeesTotal
	}
	return nil
}

func (x *OrderViewPrivate) GetRefundFeesTotalLocal() *OrderViewMoney {
	if x != nil {
		return x.RefundFeesTotalLocal
	}
	return nil
}

func (x *OrderViewPrivate) GetPaysuperRefundTotalProfit() *OrderViewMoney {
	if x != nil {
		return x.PaysuperRefundTotalProfit
	}
	return nil
}

func (x *OrderViewPrivate) GetIssuer() *OrderIssuer {
	if x != nil {
		return x.Issuer
	}
	return nil
}

func (x *OrderViewPrivate) GetItems() []*OrderItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *OrderViewPrivate) GetMerchantPayoutCurrency() string {
	if x != nil {
		return x.MerchantPayoutCurrency
	}
	return ""
}

func (x *OrderViewPrivate) GetParentOrder() *ParentOrder {
	if x != nil {
		return x.ParentOrder
	}
	return nil
}

func (x *OrderViewPrivate) GetRefund() *OrderNotificationRefund {
	if x != nil {
		return x.Refund
	}
	return nil
}

func (x *OrderViewPrivate) GetCancellation() *OrderNotificationCancellation {
	if x != nil {
		return x.Cancellation
	}
	return nil
}

func (x *OrderViewPrivate) GetMccCode() string {
	if x != nil {
		return x.MccCode
	}
	return ""
}

func (x *OrderViewPrivate) GetOperatingCompanyId() string {
	if x != nil {
		return x.OperatingCompanyId
	}
	return ""
}

func (x *OrderViewPrivate) GetIsHighRisk() bool {
	if x != nil {
		return x.IsHighRisk
	}
	return false
}

func (x *OrderViewPrivate) GetRefundAllowed() bool {
	if x != nil {
		return x.RefundAllowed
	}
	return false
}

func (x *OrderViewPrivate) GetOrderCharge() *OrderViewMoney {
	if x != nil {
		return x.OrderCharge
	}
	return nil
}

func (x *OrderViewPrivate) GetPaymentIpCountry() string {
	if x != nil {
		return x.PaymentIpCountry
	}
	return ""
}

func (x *OrderViewPrivate) GetIsIpCountryMismatchBin() bool {
	if x != nil {
		return x.IsIpCountryMismatchBin
	}
	return false
}

func (x *OrderViewPrivate) GetBillingCountryChangedByUser() bool {
	if x != nil {
		return x.BillingCountryChangedByUser
	}
	return false
}

func (x *OrderViewPrivate) GetVatPayer() string {
	if x != nil {
		return x.VatPayer
	}
	return ""
}

func (x *OrderViewPrivate) GetIsProduction() bool {
	if x != nil {
		return x.IsProduction
	}
	return false
}

func (x *OrderViewPrivate) GetMerchantInfo() *OrderViewMerchantInfo {
	if x != nil {
		return x.MerchantInfo
	}
	return nil
}

func (x *OrderViewPrivate) GetOrderChargeBeforeVat() *OrderViewMoney {
	if x != nil {
		return x.OrderChargeBeforeVat
	}
	return nil
}

func (x *OrderViewPrivate) GetTaxRate() float64 {
	if x != nil {
		return x.TaxRate
	}
	return 0
}

func (x *OrderViewPrivate) GetPaymentMethodTerminalId() string {
	if x != nil {
		return x.PaymentMethodTerminalId
	}
	return ""
}

func (x *OrderViewPrivate) GetRecurring() bool {
	if x != nil {
		return x.Recurring
	}
	return false
}

func (x *OrderViewPrivate) GetRecurringId() string {
	if x != nil {
		return x.RecurringId
	}
	return ""
}

func (x *OrderViewPrivate) GetRoyaltyReportId() string {
	if x != nil {
		return x.RoyaltyReportId
	}
	return ""
}

func (x *OrderViewPrivate) GetMetadataValues() []string {
	if x != nil {
		return x.MetadataValues
	}
	return nil
}

func (x *OrderViewPrivate) GetAmountBeforeVat() float64 {
	if x != nil {
		return x.AmountBeforeVat
	}
	return 0
}

func (x *OrderViewPrivate) GetReportSummary() *OrderViewReportSummary {
	if x != nil {
		return x.ReportSummary
	}
	return nil
}

func (x *OrderViewPrivate) GetRecurringSubscriptionId() string {
	if x != nil {
		return x.RecurringSubscriptionId
	}
	return ""
}

func (x *OrderViewPrivate) GetRecurringPlanId() string {
	if x != nil {
		return x.RecurringPlanId
	}
	return ""
}

type RecommendedPrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"region"
	//
	// The region's name.
	Region string `protobuf:"bytes,1,opt,name=region,proto3" json:"region"`
	// @inject_tag: json:"currency"
	//
	// Three-letter currency code in ISO 4217, in uppercase.
	Currency string `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency"`
	// @inject_tag: json:"amount"
	//
	// The recommended currency conversion price.
	Amount float64 `protobuf:"fixed64,3,opt,name=amount,proto3" json:"amount"`
}

func (x *RecommendedPrice) Reset() {
	*x = RecommendedPrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecommendedPrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecommendedPrice) ProtoMessage() {}

func (x *RecommendedPrice) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecommendedPrice.ProtoReflect.Descriptor instead.
func (*RecommendedPrice) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{115}
}

func (x *RecommendedPrice) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *RecommendedPrice) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *RecommendedPrice) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type PriceTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"id" bson:"_id" validate:"omitempty,hexadecimal,len=24" faker:"objectIdString"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id" bson:"_id" validate:"omitempty,hexadecimal,len=24" faker:"objectIdString"`
	//@inject_tag: json:"currency" bson:"currency" validate:"required,alpha,len=3"
	Currency string `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency" bson:"currency" validate:"required,alpha,len=3"`
	// @inject_tag: json:"ranges"
	Ranges []*PriceTableRange `protobuf:"bytes,3,rep,name=ranges,proto3" json:"ranges"`
}

func (x *PriceTable) Reset() {
	*x = PriceTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceTable) ProtoMessage() {}

func (x *PriceTable) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceTable.ProtoReflect.Descriptor instead.
func (*PriceTable) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{116}
}

func (x *PriceTable) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PriceTable) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *PriceTable) GetRanges() []*PriceTableRange {
	if x != nil {
		return x.Ranges
	}
	return nil
}

type PriceTableRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"position" bson:"position"
	//
	// The order number in a pricing table.
	Position int32 `protobuf:"varint,1,opt,name=position,proto3" json:"position" bson:"position"`
	// @inject_tag: json:"from"
	//
	// The lower boundary value of the range.
	From float64 `protobuf:"fixed64,3,opt,name=from,proto3" json:"from"`
	// @inject_tag: json:"to"
	//
	// The upper boundary value of the range.
	To float64 `protobuf:"fixed64,4,opt,name=to,proto3" json:"to"`
}

func (x *PriceTableRange) Reset() {
	*x = PriceTableRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceTableRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceTableRange) ProtoMessage() {}

func (x *PriceTableRange) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceTableRange.ProtoReflect.Descriptor instead.
func (*PriceTableRange) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{117}
}

func (x *PriceTableRange) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *PriceTableRange) GetFrom() float64 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *PriceTableRange) GetTo() float64 {
	if x != nil {
		return x.To
	}
	return 0
}

type Id struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Id) Reset() {
	*x = Id{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Id) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Id) ProtoMessage() {}

func (x *Id) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Id.ProtoReflect.Descriptor instead.
func (*Id) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{118}
}

func (x *Id) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RangeInt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"from"
	//
	// The lower boundary value of the range.
	From int32 `protobuf:"varint,1,opt,name=from,proto3" json:"from"`
	//@inject_tag: json:"to"
	//
	// The upper boundary value of the range.
	To int32 `protobuf:"varint,2,opt,name=to,proto3" json:"to"`
}

func (x *RangeInt) Reset() {
	*x = RangeInt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RangeInt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RangeInt) ProtoMessage() {}

func (x *RangeInt) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RangeInt.ProtoReflect.Descriptor instead.
func (*RangeInt) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{119}
}

func (x *RangeInt) GetFrom() int32 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *RangeInt) GetTo() int32 {
	if x != nil {
		return x.To
	}
	return 0
}

type MerchantTariffRatesPayment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"min_amount" bson:"min_amount"
	//
	// The minimum payment amount.
	MinAmount float64 `protobuf:"fixed64,1,opt,name=min_amount,json=minAmount,proto3" json:"min_amount" bson:"min_amount"`
	//@inject_tag: json:"max_amount" bson:"max_amount"
	//
	// The maximum payment amount.
	MaxAmount float64 `protobuf:"fixed64,2,opt,name=max_amount,json=maxAmount,proto3" json:"max_amount" bson:"max_amount"`
	//@inject_tag: json:"method_name" bson:"method_name"
	//
	// The payment method's name.
	MethodName string `protobuf:"bytes,3,opt,name=method_name,json=methodName,proto3" json:"method_name" bson:"method_name"`
	//@inject_tag: json:"method_percent_fee" bson:"method_percent_fee"
	//
	// The fee of the payment method in percent.
	MethodPercentFee float64 `protobuf:"fixed64,4,opt,name=method_percent_fee,json=methodPercentFee,proto3" json:"method_percent_fee" bson:"method_percent_fee"`
	//@inject_tag: json:"method_fixed_fee" bson:"method_fixed_fee"
	//
	// The fixed fee of the payment method in the particular currency.
	MethodFixedFee float64 `protobuf:"fixed64,5,opt,name=method_fixed_fee,json=methodFixedFee,proto3" json:"method_fixed_fee" bson:"method_fixed_fee"`
	//@inject_tag: json:"method_fixed_fee_currency" bson:"method_fixed_fee_currency"
	//
	// The currency of the fixed fee of the payment method. Three-letter currency code ISO 4217, in uppercase.
	MethodFixedFeeCurrency string `protobuf:"bytes,6,opt,name=method_fixed_fee_currency,json=methodFixedFeeCurrency,proto3" json:"method_fixed_fee_currency" bson:"method_fixed_fee_currency"`
	//@inject_tag: json:"ps_percent_fee" bson:"ps_percent_fee"
	//
	// The PaySuper fee in percent.
	PsPercentFee float64 `protobuf:"fixed64,7,opt,name=ps_percent_fee,json=psPercentFee,proto3" json:"ps_percent_fee" bson:"ps_percent_fee"`
	//@inject_tag: json:"ps_fixed_fee" bson:"ps_fixed_fee"
	//
	// The PaySuper fixed fee in a particular currency.
	PsFixedFee float64 `protobuf:"fixed64,8,opt,name=ps_fixed_fee,json=psFixedFee,proto3" json:"ps_fixed_fee" bson:"ps_fixed_fee"`
	//@inject_tag: json:"ps_fixed_fee_currency" bson:"ps_fixed_fee_currency"
	//
	// The currency of the PaySuper fixed fee of the payment method. Three-letter currency code ISO 4217, in uppercase.
	PsFixedFeeCurrency string `protobuf:"bytes,9,opt,name=ps_fixed_fee_currency,json=psFixedFeeCurrency,proto3" json:"ps_fixed_fee_currency" bson:"ps_fixed_fee_currency"`
	//@inject_tag: json:"merchant_home_region" bson:"merchant_home_region"
	//
	// The merchant's home region name. Available values: asia, europe, latin_america, russia_and_cis, worldwide.
	MerchantHomeRegion string `protobuf:"bytes,10,opt,name=merchant_home_region,json=merchantHomeRegion,proto3" json:"merchant_home_region" bson:"merchant_home_region"`
	//@inject_tag: json:"payer_region" bson:"payer_region"
	//
	// The customer's region name. Available values: asia, europe, latin_america, russia_and_cis, worldwide.
	PayerRegion string `protobuf:"bytes,11,opt,name=payer_region,json=payerRegion,proto3" json:"payer_region" bson:"payer_region"`
	// @inject_tag: json:"mcc_code" bson:"mcc_code"
	//
	// The Merchant Category Code (MCC) is a four-digit number listed in ISO 18245.
	MccCode string `protobuf:"bytes,12,opt,name=mcc_code,json=mccCode,proto3" json:"mcc_code" bson:"mcc_code"`
	// @inject_tag: json:"is_active" bson:"is_active"
	//
	// Has a true value if the payment method is active.
	IsActive bool `protobuf:"varint,13,opt,name=is_active,json=isActive,proto3" json:"is_active" bson:"is_active"`
}

func (x *MerchantTariffRatesPayment) Reset() {
	*x = MerchantTariffRatesPayment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerchantTariffRatesPayment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerchantTariffRatesPayment) ProtoMessage() {}

func (x *MerchantTariffRatesPayment) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerchantTariffRatesPayment.ProtoReflect.Descriptor instead.
func (*MerchantTariffRatesPayment) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{120}
}

func (x *MerchantTariffRatesPayment) GetMinAmount() float64 {
	if x != nil {
		return x.MinAmount
	}
	return 0
}

func (x *MerchantTariffRatesPayment) GetMaxAmount() float64 {
	if x != nil {
		return x.MaxAmount
	}
	return 0
}

func (x *MerchantTariffRatesPayment) GetMethodName() string {
	if x != nil {
		return x.MethodName
	}
	return ""
}

func (x *MerchantTariffRatesPayment) GetMethodPercentFee() float64 {
	if x != nil {
		return x.MethodPercentFee
	}
	return 0
}

func (x *MerchantTariffRatesPayment) GetMethodFixedFee() float64 {
	if x != nil {
		return x.MethodFixedFee
	}
	return 0
}

func (x *MerchantTariffRatesPayment) GetMethodFixedFeeCurrency() string {
	if x != nil {
		return x.MethodFixedFeeCurrency
	}
	return ""
}

func (x *MerchantTariffRatesPayment) GetPsPercentFee() float64 {
	if x != nil {
		return x.PsPercentFee
	}
	return 0
}

func (x *MerchantTariffRatesPayment) GetPsFixedFee() float64 {
	if x != nil {
		return x.PsFixedFee
	}
	return 0
}

func (x *MerchantTariffRatesPayment) GetPsFixedFeeCurrency() string {
	if x != nil {
		return x.PsFixedFeeCurrency
	}
	return ""
}

func (x *MerchantTariffRatesPayment) GetMerchantHomeRegion() string {
	if x != nil {
		return x.MerchantHomeRegion
	}
	return ""
}

func (x *MerchantTariffRatesPayment) GetPayerRegion() string {
	if x != nil {
		return x.PayerRegion
	}
	return ""
}

func (x *MerchantTariffRatesPayment) GetMccCode() string {
	if x != nil {
		return x.MccCode
	}
	return ""
}

func (x *MerchantTariffRatesPayment) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

type MerchantTariffRatesSettingsItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"method_name" bson:"method_name"
	//
	// The method's name.
	MethodName string `protobuf:"bytes,1,opt,name=method_name,json=methodName,proto3" json:"method_name" bson:"method_name"`
	//@inject_tag: json:"method_percent_fee" bson:"method_percent_fee"
	//
	// The fee of the method in percent.
	MethodPercentFee float64 `protobuf:"fixed64,2,opt,name=method_percent_fee,json=methodPercentFee,proto3" json:"method_percent_fee" bson:"method_percent_fee"`
	//@inject_tag: json:"method_fixed_fee" bson:"method_fixed_fee"
	//
	// The fixed fee of the method in the particular currency.
	MethodFixedFee float64 `protobuf:"fixed64,3,opt,name=method_fixed_fee,json=methodFixedFee,proto3" json:"method_fixed_fee" bson:"method_fixed_fee"`
	//@inject_tag: json:"method_fixed_fee_currency" bson:"method_fixed_fee_currency"
	//
	// The currency of the fixed fee of the method. Three-letter currency code ISO 4217, in uppercase.
	MethodFixedFeeCurrency string `protobuf:"bytes,4,opt,name=method_fixed_fee_currency,json=methodFixedFeeCurrency,proto3" json:"method_fixed_fee_currency" bson:"method_fixed_fee_currency"`
	//@inject_tag: json:"is_paid_by_merchant" bson:"is_paid_by_merchant"
	//
	// Has a true value if the method is paid by the merchant.
	IsPaidByMerchant bool `protobuf:"varint,5,opt,name=is_paid_by_merchant,json=isPaidByMerchant,proto3" json:"is_paid_by_merchant" bson:"is_paid_by_merchant"`
}

func (x *MerchantTariffRatesSettingsItem) Reset() {
	*x = MerchantTariffRatesSettingsItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerchantTariffRatesSettingsItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerchantTariffRatesSettingsItem) ProtoMessage() {}

func (x *MerchantTariffRatesSettingsItem) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerchantTariffRatesSettingsItem.ProtoReflect.Descriptor instead.
func (*MerchantTariffRatesSettingsItem) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{121}
}

func (x *MerchantTariffRatesSettingsItem) GetMethodName() string {
	if x != nil {
		return x.MethodName
	}
	return ""
}

func (x *MerchantTariffRatesSettingsItem) GetMethodPercentFee() float64 {
	if x != nil {
		return x.MethodPercentFee
	}
	return 0
}

func (x *MerchantTariffRatesSettingsItem) GetMethodFixedFee() float64 {
	if x != nil {
		return x.MethodFixedFee
	}
	return 0
}

func (x *MerchantTariffRatesSettingsItem) GetMethodFixedFeeCurrency() string {
	if x != nil {
		return x.MethodFixedFeeCurrency
	}
	return ""
}

func (x *MerchantTariffRatesSettingsItem) GetIsPaidByMerchant() bool {
	if x != nil {
		return x.IsPaidByMerchant
	}
	return false
}

type MerchantTariffRatesSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"refund" bson:"refund"
	Refund []*MerchantTariffRatesSettingsItem `protobuf:"bytes,1,rep,name=refund,proto3" json:"refund" bson:"refund"`
	//@inject_tag: json:"chargeback" bson:"chargeback"
	Chargeback []*MerchantTariffRatesSettingsItem `protobuf:"bytes,2,rep,name=chargeback,proto3" json:"chargeback" bson:"chargeback"`
	//@inject_tag: json:"payout" bson:"payout"
	Payout map[string]*MerchantTariffRatesSettingsItem `protobuf:"bytes,3,rep,name=payout,proto3" json:"payout" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" bson:"payout"`
	//@inject_tag: json:"minimal_payout" bson:"minimal_payout"
	MinimalPayout map[string]float32 `protobuf:"bytes,4,rep,name=minimal_payout,json=minimalPayout,proto3" json:"minimal_payout" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3" bson:"minimal_payout"`
	//@inject_tag: json:"mcc_code" bson:"mcc_code"
	MccCode string `protobuf:"bytes,5,opt,name=mcc_code,json=mccCode,proto3" json:"mcc_code" bson:"mcc_code"`
}

func (x *MerchantTariffRatesSettings) Reset() {
	*x = MerchantTariffRatesSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerchantTariffRatesSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerchantTariffRatesSettings) ProtoMessage() {}

func (x *MerchantTariffRatesSettings) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerchantTariffRatesSettings.ProtoReflect.Descriptor instead.
func (*MerchantTariffRatesSettings) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{122}
}

func (x *MerchantTariffRatesSettings) GetRefund() []*MerchantTariffRatesSettingsItem {
	if x != nil {
		return x.Refund
	}
	return nil
}

func (x *MerchantTariffRatesSettings) GetChargeback() []*MerchantTariffRatesSettingsItem {
	if x != nil {
		return x.Chargeback
	}
	return nil
}

func (x *MerchantTariffRatesSettings) GetPayout() map[string]*MerchantTariffRatesSettingsItem {
	if x != nil {
		return x.Payout
	}
	return nil
}

func (x *MerchantTariffRatesSettings) GetMinimalPayout() map[string]float32 {
	if x != nil {
		return x.MinimalPayout
	}
	return nil
}

func (x *MerchantTariffRatesSettings) GetMccCode() string {
	if x != nil {
		return x.MccCode
	}
	return ""
}

type Key struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"id" bson:"_id" faker:"objectIdString"
	//
	// The unique identifier for the key.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id" bson:"_id" faker:"objectIdString"`
	//@inject_tag: json:"code" validate:"required,max=50"
	//
	// The activation code.
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code" validate:"required,max=50"`
	//@inject_tag: validate:"required,hexadecimal,len=24" faker:"objectIdString"
	//
	// The unique identifier for the key's product.
	KeyProductId string `protobuf:"bytes,3,opt,name=key_product_id,json=keyProductId,proto3" json:"key_product_id,omitempty" validate:"required,hexadecimal,len=24" faker:"objectIdString"`
	//@inject_tag: validate:"required,max=255"
	//
	// The unique identifier for the platform. Available values: steam, gog, uplay, origin, psn, xbox, nintendo, itch, egs.
	PlatformId string `protobuf:"bytes,5,opt,name=platform_id,json=platformId,proto3" json:"platform_id,omitempty" validate:"required,max=255"`
	//@inject_tag: validate:"omitempty,hexadecimal,len=24" faker:"objectIdString"
	//
	// The unique identifier for the order when redeeming the code (can be empty).
	OrderId string `protobuf:"bytes,6,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty" validate:"omitempty,hexadecimal,len=24" faker:"objectIdString"`
	// The date the key has been created.
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	//@inject_tag: validate:"omitempty"
	//
	// The date the key has been reserved.
	ReservedTo *timestamp.Timestamp `protobuf:"bytes,8,opt,name=reserved_to,json=reservedTo,proto3" json:"reserved_to,omitempty" validate:"omitempty"`
	//@inject_tag: validate:"omitempty"
	//
	// The date the key has been redeemed.
	RedeemedAt *timestamp.Timestamp `protobuf:"bytes,9,opt,name=redeemed_at,json=redeemedAt,proto3" json:"redeemed_at,omitempty" validate:"omitempty"`
}

func (x *Key) Reset() {
	*x = Key{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Key) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Key) ProtoMessage() {}

func (x *Key) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Key.ProtoReflect.Descriptor instead.
func (*Key) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{123}
}

func (x *Key) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Key) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Key) GetKeyProductId() string {
	if x != nil {
		return x.KeyProductId
	}
	return ""
}

func (x *Key) GetPlatformId() string {
	if x != nil {
		return x.PlatformId
	}
	return ""
}

func (x *Key) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *Key) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Key) GetReservedTo() *timestamp.Timestamp {
	if x != nil {
		return x.ReservedTo
	}
	return nil
}

func (x *Key) GetRedeemedAt() *timestamp.Timestamp {
	if x != nil {
		return x.RedeemedAt
	}
	return nil
}

type PayoutDocument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"id" bson:"_id" validate:"omitempty,hexadecimal,len=24" faker:"objectIdString"
	//
	// The unique identifier for the payout document.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id" bson:"_id" validate:"omitempty,hexadecimal,len=24" faker:"objectIdString"`
	//@inject_tag: json:"merchant_id" bson:"merchant_id" validate:"omitempty,hexadecimal,len=24" faker:"objectIdString"
	//
	// The unique identifier for the merchant who is the owner of the payout document.
	MerchantId string `protobuf:"bytes,2,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id" bson:"merchant_id" validate:"omitempty,hexadecimal,len=24" faker:"objectIdString"`
	//@inject_tag: json:"source_id"
	//
	// The list of the unique identifiers for the royalty reports.
	SourceId []string `protobuf:"bytes,3,rep,name=source_id,json=sourceId,proto3" json:"source_id"`
	// @inject_tag: json:"total_fees" validate:"numeric,gte=0"
	//
	// The total amount of fees.
	TotalFees float64 `protobuf:"fixed64,4,opt,name=total_fees,json=totalFees,proto3" json:"total_fees" validate:"numeric,gte=0"`
	// @inject_tag: json:"balance" validate:"numeric,gte=0"
	//
	// The payout amount.
	Balance float64 `protobuf:"fixed64,5,opt,name=balance,proto3" json:"balance" validate:"numeric,gte=0"`
	//@inject_tag: json:"currency" validate:"required,alpha,len=3"
	//
	// The payout amount currency. Three-letter Currency Code ISO 4217, in uppercase.
	Currency string `protobuf:"bytes,6,opt,name=currency,proto3" json:"currency" validate:"required,alpha,len=3"`
	// @inject_tag: json:"period_from"
	//
	// The start date of the payout period .
	PeriodFrom *timestamp.Timestamp `protobuf:"bytes,7,opt,name=period_from,json=periodFrom,proto3" json:"period_from"`
	// @inject_tag: json:"period_to"
	//
	// The end date of the payout period.
	PeriodTo *timestamp.Timestamp `protobuf:"bytes,8,opt,name=period_to,json=periodTo,proto3" json:"period_to"`
	// @inject_tag: json:"total_transactions"
	//
	// The total number of transactions.
	TotalTransactions int32 `protobuf:"varint,9,opt,name=total_transactions,json=totalTransactions,proto3" json:"total_transactions"`
	//@inject_tag: json:"description" validate:"omitempty,max=255"
	//
	// The additional description of the payout.
	Description string `protobuf:"bytes,10,opt,name=description,proto3" json:"description" validate:"omitempty,max=255"`
	//@inject_tag: json:"destination" validate:"max=255"
	//
	// The merchant's banking data.
	Destination *MerchantBanking `protobuf:"bytes,11,opt,name=destination,proto3" json:"destination" validate:"max=255"`
	//@inject_tag: json:"merchant_agreement_number" validate:"max=255"
	//
	// The merchant's license agreement number.
	MerchantAgreementNumber string `protobuf:"bytes,12,opt,name=merchant_agreement_number,json=merchantAgreementNumber,proto3" json:"merchant_agreement_number" validate:"max=255"`
	// @inject_tag: json:"company"
	//
	// Information about the merchant's company.
	Company *MerchantCompanyInfo `protobuf:"bytes,13,opt,name=company,proto3" json:"company"`
	//@inject_tag: json:"status" validate:"required,oneof=skip pending in_progress paid canceled failed"
	//
	// The document status. Available values: skip, pending, in_progress, paid, canceled, failed.
	Status string `protobuf:"bytes,14,opt,name=status,proto3" json:"status" validate:"required,oneof=skip pending in_progress paid canceled failed"`
	//@inject_tag: json:"transaction" validate:"max=255"
	//
	// The unique identifier for the payout transaction.
	Transaction string `protobuf:"bytes,15,opt,name=transaction,proto3" json:"transaction" validate:"max=255"`
	//@inject_tag: json:"failure_code" validate:"omitempty,oneof=account_closed account_frozen account_restricted destination_bank_invalid could_not_process declined insufficient_funds invalid_account_number incorrect_account_holder_name invalid_currency"
	//
	// The payout's failure code. Available values: account_closed, account_frozen, account_restricted, destination_bank_invalid, could_not_process, declined, insufficient_funds, invalid_account_number, incorrect_account_holder_name, invalid_currency.
	FailureCode string `protobuf:"bytes,16,opt,name=failure_code,json=failureCode,proto3" json:"failure_code" validate:"omitempty,oneof=account_closed account_frozen account_restricted destination_bank_invalid could_not_process declined insufficient_funds invalid_account_number incorrect_account_holder_name invalid_currency"`
	//@inject_tag: json:"failure_message" validate:"max=255"
	//
	// The payout's failure message.
	FailureMessage string `protobuf:"bytes,17,opt,name=failure_message,json=failureMessage,proto3" json:"failure_message" validate:"max=255"`
	//@inject_tag: json:"failure_transaction" validate:"max=255"
	//
	// The unique identifier for the payout failure transaction.
	FailureTransaction string `protobuf:"bytes,18,opt,name=failure_transaction,json=failureTransaction,proto3" json:"failure_transaction" validate:"max=255"`
	//@inject_tag: json:"created_at"
	//
	// The date of the payout creation.
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,24,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	//@inject_tag: json:"updated_at"
	//
	// The date of the payout last update.
	UpdatedAt *timestamp.Timestamp `protobuf:"bytes,25,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	//@inject_tag: json:"arrival_date"
	//
	// The payout arrival date.
	ArrivalDate *timestamp.Timestamp `protobuf:"bytes,26,opt,name=arrival_date,json=arrivalDate,proto3" json:"arrival_date"`
	//@inject_tag: json:"paid_at"
	//
	// The payout date.
	PaidAt *timestamp.Timestamp `protobuf:"bytes,27,opt,name=paid_at,json=paidAt,proto3" json:"paid_at"`
	// @inject_tag: json:"operating_company_id" bson:"operating_company_id" faker:"objectIdString"
	//
	// The unique identifier for the operating company.
	OperatingCompanyId string `protobuf:"bytes,28,opt,name=operating_company_id,json=operatingCompanyId,proto3" json:"operating_company_id" bson:"operating_company_id" faker:"objectIdString"`
	//@inject_tag: json:"increment_id" bson:"autoincrement_id" validate:"omitempty,numeric,gt=0"
	//
	// The autoincrement unique identifier for the payout document.
	AutoincrementId int64 `protobuf:"varint,29,opt,name=autoincrement_id,json=autoincrementId,proto3" json:"increment_id" bson:"autoincrement_id" validate:"omitempty,numeric,gt=0"`
	// @inject_tag: json:"string_period_from" bson:"string_period_from"
	//
	// Period from in string format.
	StringPeriodFrom string `protobuf:"bytes,30,opt,name=string_period_from,json=stringPeriodFrom,proto3" json:"string_period_from" bson:"string_period_from"`
	// @inject_tag: json:"string_period_to" bson:"string_period_to"
	//
	// Period to in string format.
	StringPeriodTo string `protobuf:"bytes,31,opt,name=string_period_to,json=stringPeriodTo,proto3" json:"string_period_to" bson:"string_period_to"`
	// @inject_tag: json:"b2b_vat_base" bson:"b2b_vat_base" validate:"numeric,gte=0"
	//
	// The total Licensee Revenue Share amount as base for b2b vat calculation
	B2BVatBase float64 `protobuf:"fixed64,32,opt,name=b2b_vat_base,json=b2bVatBase,proto3" json:"b2b_vat_base" bson:"b2b_vat_base" validate:"numeric,gte=0"`
	// @inject_tag: json:"b2b_vat_rate" bson:"b2b_vat_rate" validate:"numeric,gte=0"
	//
	// Effective rate of b2b_vat.
	B2BVatRate float64 `protobuf:"fixed64,33,opt,name=b2b_vat_rate,json=b2bVatRate,proto3" json:"b2b_vat_rate" bson:"b2b_vat_rate" validate:"numeric,gte=0"`
	// @inject_tag: json:"b2b_vat_amount" bson:"b2b_vat_amount" validate:"numeric,gte=0"
	//
	// The b2b vat amount.
	B2BVatAmount float64 `protobuf:"fixed64,34,opt,name=b2b_vat_amount,json=b2bVatAmount,proto3" json:"b2b_vat_amount" bson:"b2b_vat_amount" validate:"numeric,gte=0"`
	// @inject_tag: json:"fees_excluding_vat" bson:"fees_excluding_vat" validate:"numeric,gte=0"
	//
	// The b2b vat amount.
	FeesExcludingVat float64 `protobuf:"fixed64,35,opt,name=fees_excluding_vat,json=feesExcludingVat,proto3" json:"fees_excluding_vat" bson:"fees_excluding_vat" validate:"numeric,gte=0"`
}

func (x *PayoutDocument) Reset() {
	*x = PayoutDocument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayoutDocument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayoutDocument) ProtoMessage() {}

func (x *PayoutDocument) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayoutDocument.ProtoReflect.Descriptor instead.
func (*PayoutDocument) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{124}
}

func (x *PayoutDocument) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PayoutDocument) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *PayoutDocument) GetSourceId() []string {
	if x != nil {
		return x.SourceId
	}
	return nil
}

func (x *PayoutDocument) GetTotalFees() float64 {
	if x != nil {
		return x.TotalFees
	}
	return 0
}

func (x *PayoutDocument) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *PayoutDocument) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *PayoutDocument) GetPeriodFrom() *timestamp.Timestamp {
	if x != nil {
		return x.PeriodFrom
	}
	return nil
}

func (x *PayoutDocument) GetPeriodTo() *timestamp.Timestamp {
	if x != nil {
		return x.PeriodTo
	}
	return nil
}

func (x *PayoutDocument) GetTotalTransactions() int32 {
	if x != nil {
		return x.TotalTransactions
	}
	return 0
}

func (x *PayoutDocument) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PayoutDocument) GetDestination() *MerchantBanking {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *PayoutDocument) GetMerchantAgreementNumber() string {
	if x != nil {
		return x.MerchantAgreementNumber
	}
	return ""
}

func (x *PayoutDocument) GetCompany() *MerchantCompanyInfo {
	if x != nil {
		return x.Company
	}
	return nil
}

func (x *PayoutDocument) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *PayoutDocument) GetTransaction() string {
	if x != nil {
		return x.Transaction
	}
	return ""
}

func (x *PayoutDocument) GetFailureCode() string {
	if x != nil {
		return x.FailureCode
	}
	return ""
}

func (x *PayoutDocument) GetFailureMessage() string {
	if x != nil {
		return x.FailureMessage
	}
	return ""
}

func (x *PayoutDocument) GetFailureTransaction() string {
	if x != nil {
		return x.FailureTransaction
	}
	return ""
}

func (x *PayoutDocument) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PayoutDocument) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *PayoutDocument) GetArrivalDate() *timestamp.Timestamp {
	if x != nil {
		return x.ArrivalDate
	}
	return nil
}

func (x *PayoutDocument) GetPaidAt() *timestamp.Timestamp {
	if x != nil {
		return x.PaidAt
	}
	return nil
}

func (x *PayoutDocument) GetOperatingCompanyId() string {
	if x != nil {
		return x.OperatingCompanyId
	}
	return ""
}

func (x *PayoutDocument) GetAutoincrementId() int64 {
	if x != nil {
		return x.AutoincrementId
	}
	return 0
}

func (x *PayoutDocument) GetStringPeriodFrom() string {
	if x != nil {
		return x.StringPeriodFrom
	}
	return ""
}

func (x *PayoutDocument) GetStringPeriodTo() string {
	if x != nil {
		return x.StringPeriodTo
	}
	return ""
}

func (x *PayoutDocument) GetB2BVatBase() float64 {
	if x != nil {
		return x.B2BVatBase
	}
	return 0
}

func (x *PayoutDocument) GetB2BVatRate() float64 {
	if x != nil {
		return x.B2BVatRate
	}
	return 0
}

func (x *PayoutDocument) GetB2BVatAmount() float64 {
	if x != nil {
		return x.B2BVatAmount
	}
	return 0
}

func (x *PayoutDocument) GetFeesExcludingVat() float64 {
	if x != nil {
		return x.FeesExcludingVat
	}
	return 0
}

type PayoutDocumentChanges struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: faker:"objectIdString"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" faker:"objectIdString"`
	// @inject_tag: faker:"objectIdString"
	PayoutDocumentId string               `protobuf:"bytes,2,opt,name=payout_document_id,json=payoutDocumentId,proto3" json:"payout_document_id,omitempty" faker:"objectIdString"`
	Source           string               `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	Ip               string               `protobuf:"bytes,4,opt,name=ip,proto3" json:"ip,omitempty"`
	Hash             string               `protobuf:"bytes,5,opt,name=hash,proto3" json:"hash,omitempty"`
	CreatedAt        *timestamp.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *PayoutDocumentChanges) Reset() {
	*x = PayoutDocumentChanges{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayoutDocumentChanges) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayoutDocumentChanges) ProtoMessage() {}

func (x *PayoutDocumentChanges) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayoutDocumentChanges.ProtoReflect.Descriptor instead.
func (*PayoutDocumentChanges) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{125}
}

func (x *PayoutDocumentChanges) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PayoutDocumentChanges) GetPayoutDocumentId() string {
	if x != nil {
		return x.PayoutDocumentId
	}
	return ""
}

func (x *PayoutDocumentChanges) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *PayoutDocumentChanges) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *PayoutDocumentChanges) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *PayoutDocumentChanges) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type MerchantBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"id" validate:"required,hexadecimal,len=24" faker:"objectIdString"
	//
	// The unique identifier for the merchant's balance.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id" validate:"required,hexadecimal,len=24" faker:"objectIdString"`
	//@inject_tag: json:"merchant_id" validate:"required,hexadecimal,len=24" faker:"objectIdString"
	//
	// The unique identifier for the merchant.
	MerchantId string `protobuf:"bytes,2,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id" validate:"required,hexadecimal,len=24" faker:"objectIdString"`
	//@inject_tag: json:"currency" validate:"required,alpha,len=3"
	//
	// The balance currency. Three-letter currency code ISO 4217, in uppercase.
	Currency string `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency" validate:"required,alpha,len=3"`
	//@inject_tag: json:"debit" validate:"required,numeric"
	//
	// The debit balance.
	Debit float64 `protobuf:"fixed64,4,opt,name=debit,proto3" json:"debit" validate:"required,numeric"`
	//@inject_tag: json:"credit" validate:"required,numeric"
	//
	// The credit balance.
	Credit float64 `protobuf:"fixed64,5,opt,name=credit,proto3" json:"credit" validate:"required,numeric"`
	//@inject_tag: json:"rolling_reserve" validate:"required,numeric"
	//
	// The rolling reserve balance.
	RollingReserve float64 `protobuf:"fixed64,6,opt,name=rolling_reserve,json=rollingReserve,proto3" json:"rolling_reserve" validate:"required,numeric"`
	//@inject_tag: json:"total" validate:"required,numeric"
	//
	// The total amount.
	Total float64 `protobuf:"fixed64,7,opt,name=total,proto3" json:"total" validate:"required,numeric"`
	// The date of the balance creation.
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *MerchantBalance) Reset() {
	*x = MerchantBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerchantBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerchantBalance) ProtoMessage() {}

func (x *MerchantBalance) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerchantBalance.ProtoReflect.Descriptor instead.
func (*MerchantBalance) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{126}
}

func (x *MerchantBalance) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MerchantBalance) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *MerchantBalance) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *MerchantBalance) GetDebit() float64 {
	if x != nil {
		return x.Debit
	}
	return 0
}

func (x *MerchantBalance) GetCredit() float64 {
	if x != nil {
		return x.Credit
	}
	return 0
}

func (x *MerchantBalance) GetRollingReserve() float64 {
	if x != nil {
		return x.RollingReserve
	}
	return 0
}

func (x *MerchantBalance) GetTotal() float64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *MerchantBalance) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type OrderReceipt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"total_price"
	//
	// The total order price not including VAT formatted with a sign of the order currency.
	TotalPrice string `protobuf:"bytes,1,opt,name=total_price,json=totalPrice,proto3" json:"total_price"`
	//@inject_tag: json:"transaction_id"
	//
	// The unique identifier for the transaction.
	TransactionId string `protobuf:"bytes,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id"`
	//@inject_tag: json:"transaction_date"
	//
	// The transaction date.
	TransactionDate string `protobuf:"bytes,3,opt,name=transaction_date,json=transactionDate,proto3" json:"transaction_date"`
	//@inject_tag: json:"project_name"
	//
	// The project's name.
	ProjectName string `protobuf:"bytes,4,opt,name=project_name,json=projectName,proto3" json:"project_name"`
	//@inject_tag: json:"merchant_name"
	//
	// The merchant's name.
	MerchantName string `protobuf:"bytes,5,opt,name=merchant_name,json=merchantName,proto3" json:"merchant_name"`
	//@inject_tag: json:"items"
	//
	// The receipt's items data.
	Items []*OrderReceiptItem `protobuf:"bytes,6,rep,name=items,proto3" json:"items"`
	//@inject_tag: json:"order_type"
	//
	// The type of the order.
	OrderType string `protobuf:"bytes,7,opt,name=order_type,json=orderType,proto3" json:"order_type"`
	//@inject_tag: json:"platform_name"
	//
	// The platform's name (if any).
	PlatformName string `protobuf:"bytes,8,opt,name=platform_name,json=platformName,proto3" json:"platform_name"`
	//@inject_tag: json:"payment_partner"
	//
	// The payment partner's name.
	PaymentPartner string `protobuf:"bytes,9,opt,name=payment_partner,json=paymentPartner,proto3" json:"payment_partner"`
	// @inject_tag: json:"vat_payer"
	//
	// The responsible for VAT. Available values: buyer (VAT is added to the order charge), seller (VAT is included in the order charge), nobody (VAT exempt).
	VatPayer string `protobuf:"bytes,10,opt,name=vat_payer,json=vatPayer,proto3" json:"vat_payer"`
	//@inject_tag: json:"vat_in_order_currency"
	//
	// VAT amount formatted with a sign of the order currency.
	VatInOrderCurrency string `protobuf:"bytes,11,opt,name=vat_in_order_currency,json=vatInOrderCurrency,proto3" json:"vat_in_order_currency"`
	//@inject_tag: json:"vat_in_charge_currency"
	//
	// VAT amount formatted with an order charge currency sign.
	VatInChargeCurrency string `protobuf:"bytes,12,opt,name=vat_in_charge_currency,json=vatInChargeCurrency,proto3" json:"vat_in_charge_currency"`
	//@inject_tag: json:"total_amount"
	//
	// The order total amount including VAT formatted with a sign of the order currency.
	TotalAmount string `protobuf:"bytes,13,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount"`
	//@inject_tag: json:"total_charge"
	//
	// The order total amount including VAT formatted with a sign of the order charge currency.
	TotalCharge string `protobuf:"bytes,14,opt,name=total_charge,json=totalCharge,proto3" json:"total_charge"`
	//@inject_tag: json:"receipt_id"
	//
	// The unique identifier for the order receipt.
	ReceiptId string `protobuf:"bytes,15,opt,name=receipt_id,json=receiptId,proto3" json:"receipt_id"`
	//@inject_tag: json:"url"
	//
	// The order receipt URL.
	Url string `protobuf:"bytes,16,opt,name=url,proto3" json:"url"`
	//@inject_tag: json:"vat_rate"
	//
	// The order VAT rate formatted with a percent sign.
	VatRate string `protobuf:"bytes,17,opt,name=vat_rate,json=vatRate,proto3" json:"vat_rate"`
	//@inject_tag: json:"customer_email"
	//
	//The customer's email.
	CustomerEmail string `protobuf:"bytes,18,opt,name=customer_email,json=customerEmail,proto3" json:"customer_email"`
	//@inject_tag: json:"customer_uuid"
	//
	//The customer's public identifier.
	CustomerUuid string `protobuf:"bytes,19,opt,name=customer_uuid,json=customerUuid,proto3" json:"customer_uuid"`
	//@inject_tag: json:"subscription_view_url"
	//
	//The url for show recurring subscription of customer.
	SubscriptionViewUrl string `protobuf:"bytes,20,opt,name=subscription_view_url,json=subscriptionViewUrl,proto3" json:"subscription_view_url"`
	//@inject_tag: json:"subscriptions_management_url"
	//
	//The url for manage recurring subscriptions of customer.
	SubscriptionsManagementUrl string `protobuf:"bytes,21,opt,name=subscriptions_management_url,json=subscriptionsManagementUrl,proto3" json:"subscriptions_management_url"`
	//@inject_tag: json:"recurring_period"
	//
	//The period alias for recurring payments.
	RecurringPeriod string `protobuf:"bytes,22,opt,name=recurring_period,json=recurringPeriod,proto3" json:"recurring_period"`
	//@inject_tag: json:"recurring_interval"
	//
	//The interval for recurring period.
	RecurringInterval string `protobuf:"bytes,23,opt,name=recurring_interval,json=recurringInterval,proto3" json:"recurring_interval"`
	//@inject_tag: json:"recurring_date_end"
	//
	//The last day for recurring payments.
	RecurringDateEnd string `protobuf:"bytes,24,opt,name=recurring_date_end,json=recurringDateEnd,proto3" json:"recurring_date_end"`
	// @inject_tag: json:"trademark"
	//
	// The merchant's trade mark.
	Trademark string `protobuf:"bytes,25,opt,name=trademark,proto3" json:"trademark"`
}

func (x *OrderReceipt) Reset() {
	*x = OrderReceipt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderReceipt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderReceipt) ProtoMessage() {}

func (x *OrderReceipt) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderReceipt.ProtoReflect.Descriptor instead.
func (*OrderReceipt) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{127}
}

func (x *OrderReceipt) GetTotalPrice() string {
	if x != nil {
		return x.TotalPrice
	}
	return ""
}

func (x *OrderReceipt) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *OrderReceipt) GetTransactionDate() string {
	if x != nil {
		return x.TransactionDate
	}
	return ""
}

func (x *OrderReceipt) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *OrderReceipt) GetMerchantName() string {
	if x != nil {
		return x.MerchantName
	}
	return ""
}

func (x *OrderReceipt) GetItems() []*OrderReceiptItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *OrderReceipt) GetOrderType() string {
	if x != nil {
		return x.OrderType
	}
	return ""
}

func (x *OrderReceipt) GetPlatformName() string {
	if x != nil {
		return x.PlatformName
	}
	return ""
}

func (x *OrderReceipt) GetPaymentPartner() string {
	if x != nil {
		return x.PaymentPartner
	}
	return ""
}

func (x *OrderReceipt) GetVatPayer() string {
	if x != nil {
		return x.VatPayer
	}
	return ""
}

func (x *OrderReceipt) GetVatInOrderCurrency() string {
	if x != nil {
		return x.VatInOrderCurrency
	}
	return ""
}

func (x *OrderReceipt) GetVatInChargeCurrency() string {
	if x != nil {
		return x.VatInChargeCurrency
	}
	return ""
}

func (x *OrderReceipt) GetTotalAmount() string {
	if x != nil {
		return x.TotalAmount
	}
	return ""
}

func (x *OrderReceipt) GetTotalCharge() string {
	if x != nil {
		return x.TotalCharge
	}
	return ""
}

func (x *OrderReceipt) GetReceiptId() string {
	if x != nil {
		return x.ReceiptId
	}
	return ""
}

func (x *OrderReceipt) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *OrderReceipt) GetVatRate() string {
	if x != nil {
		return x.VatRate
	}
	return ""
}

func (x *OrderReceipt) GetCustomerEmail() string {
	if x != nil {
		return x.CustomerEmail
	}
	return ""
}

func (x *OrderReceipt) GetCustomerUuid() string {
	if x != nil {
		return x.CustomerUuid
	}
	return ""
}

func (x *OrderReceipt) GetSubscriptionViewUrl() string {
	if x != nil {
		return x.SubscriptionViewUrl
	}
	return ""
}

func (x *OrderReceipt) GetSubscriptionsManagementUrl() string {
	if x != nil {
		return x.SubscriptionsManagementUrl
	}
	return ""
}

func (x *OrderReceipt) GetRecurringPeriod() string {
	if x != nil {
		return x.RecurringPeriod
	}
	return ""
}

func (x *OrderReceipt) GetRecurringInterval() string {
	if x != nil {
		return x.RecurringInterval
	}
	return ""
}

func (x *OrderReceipt) GetRecurringDateEnd() string {
	if x != nil {
		return x.RecurringDateEnd
	}
	return ""
}

func (x *OrderReceipt) GetTrademark() string {
	if x != nil {
		return x.Trademark
	}
	return ""
}

type OrderReceiptItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"name"
	//
	// The receipt's item name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name"`
	//@inject_tag: json:"price"
	//
	// The receipt's item price.
	Price string `protobuf:"bytes,2,opt,name=price,proto3" json:"price"`
}

func (x *OrderReceiptItem) Reset() {
	*x = OrderReceiptItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderReceiptItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderReceiptItem) ProtoMessage() {}

func (x *OrderReceiptItem) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderReceiptItem.ProtoReflect.Descriptor instead.
func (*OrderReceiptItem) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{128}
}

func (x *OrderReceiptItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OrderReceiptItem) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

type HasCurrencyItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"currency" validate:"required,alpha,len=3"
	//
	// Three-letter currency code ISO 4217, in uppercase.
	Currency string `protobuf:"bytes,1,opt,name=currency,proto3" json:"currency" validate:"required,alpha,len=3"`
	//@inject_tag: json:"region" validate:"required,region_price"
	//
	// The region of the price.
	Region string `protobuf:"bytes,2,opt,name=region,proto3" json:"region" validate:"required,region_price"`
}

func (x *HasCurrencyItem) Reset() {
	*x = HasCurrencyItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HasCurrencyItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HasCurrencyItem) ProtoMessage() {}

func (x *HasCurrencyItem) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HasCurrencyItem.ProtoReflect.Descriptor instead.
func (*HasCurrencyItem) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{129}
}

func (x *HasCurrencyItem) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *HasCurrencyItem) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

type LocalizedUrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: validate:"omitempty,uri" json:"en"
	//
	// The URL for EN localization.
	En string `protobuf:"bytes,1,opt,name=en,proto3" json:"en" validate:"omitempty,uri"`
	//@inject_tag: validate:"omitempty,uri" json:"ru"
	//
	// The URL for RU localization.
	Ru string `protobuf:"bytes,2,opt,name=ru,proto3" json:"ru" validate:"omitempty,uri"`
	//@inject_tag: validate:"omitempty,uri" json:"es"
	//
	// The URL for ES localization.
	Es string `protobuf:"bytes,3,opt,name=es,proto3" json:"es" validate:"omitempty,uri"`
	//@inject_tag: validate:"omitempty,uri" json:"de"
	//
	// The URL for DE localization.
	De string `protobuf:"bytes,4,opt,name=de,proto3" json:"de" validate:"omitempty,uri"`
	//@inject_tag: validate:"omitempty,uri" json:"zh"
	//
	// The URL for ZH localization.
	Zh string `protobuf:"bytes,5,opt,name=zh,proto3" json:"zh" validate:"omitempty,uri"`
	//@inject_tag: validate:"omitempty,uri" json:"fr"
	//
	// The URL for FR localization.
	Fr string `protobuf:"bytes,6,opt,name=fr,proto3" json:"fr" validate:"omitempty,uri"`
	//@inject_tag: validate:"omitempty,uri" json:"ar"
	//
	// The URL for AR localization.
	Ar string `protobuf:"bytes,7,opt,name=ar,proto3" json:"ar" validate:"omitempty,uri"`
	//@inject_tag: validate:"omitempty,uri" json:"pt"
	//
	// The URL for PT localization.
	Pt string `protobuf:"bytes,8,opt,name=pt,proto3" json:"pt" validate:"omitempty,uri"`
	//@inject_tag: validate:"omitempty,uri" json:"it"
	//
	// The URL for IT localization.
	It string `protobuf:"bytes,9,opt,name=it,proto3" json:"it" validate:"omitempty,uri"`
	//@inject_tag: validate:"omitempty,uri" json:"pl"
	//
	// The URL for PL localization.
	Pl string `protobuf:"bytes,10,opt,name=pl,proto3" json:"pl" validate:"omitempty,uri"`
	//@inject_tag: validate:"omitempty,uri" json:"el"
	//
	// The URL for EL localization.
	El string `protobuf:"bytes,11,opt,name=el,proto3" json:"el" validate:"omitempty,uri"`
	//@inject_tag: validate:"omitempty,uri" json:"ko"
	//
	// The URL for KO localization.
	Ko string `protobuf:"bytes,12,opt,name=ko,proto3" json:"ko" validate:"omitempty,uri"`
	//@inject_tag: validate:"omitempty,uri" json:"ja"
	//
	// The URL for JA localization.
	Ja string `protobuf:"bytes,13,opt,name=ja,proto3" json:"ja" validate:"omitempty,uri"`
	//@inject_tag: validate:"omitempty,uri" json:"vl"
	//
	// The URL for VL localization.
	Vl string `protobuf:"bytes,14,opt,name=vl,proto3" json:"vl" validate:"omitempty,uri"`
	//@inject_tag: validate:"omitempty,uri" json:"he"
	//
	// The URL for HE localization.
	He string `protobuf:"bytes,15,opt,name=he,proto3" json:"he" validate:"omitempty,uri"`
	//@inject_tag: validate:"omitempty,uri" json:"th"
	//
	// The URL for TH localization.
	Th string `protobuf:"bytes,16,opt,name=th,proto3" json:"th" validate:"omitempty,uri"`
	//@inject_tag: validate:"omitempty,uri" json:"cs"
	//
	// The URL for CS localization.
	Cs string `protobuf:"bytes,17,opt,name=cs,proto3" json:"cs" validate:"omitempty,uri"`
	//@inject_tag: validate:"omitempty,uri" json:"bg"
	//
	// The URL for BG localization.
	Bg string `protobuf:"bytes,18,opt,name=bg,proto3" json:"bg" validate:"omitempty,uri"`
	//@inject_tag: validate:"omitempty,uri" json:"fi"
	//
	// The URL for FI localization.
	Fi string `protobuf:"bytes,19,opt,name=fi,proto3" json:"fi" validate:"omitempty,uri"`
	//@inject_tag: validate:"omitempty,uri" json:"sv"
	//
	// The URL for SV localization.
	Sv string `protobuf:"bytes,20,opt,name=sv,proto3" json:"sv" validate:"omitempty,uri"`
	//@inject_tag: validate:"omitempty,uri" json:"da"
	//
	// The URL for DA localization.
	Da string `protobuf:"bytes,21,opt,name=da,proto3" json:"da" validate:"omitempty,uri"`
	//@inject_tag: validate:"omitempty,uri" json:"tr"
	//
	// The URL for TR localization.
	Tr string `protobuf:"bytes,22,opt,name=tr,proto3" json:"tr" validate:"omitempty,uri"`
}

func (x *LocalizedUrl) Reset() {
	*x = LocalizedUrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalizedUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalizedUrl) ProtoMessage() {}

func (x *LocalizedUrl) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalizedUrl.ProtoReflect.Descriptor instead.
func (*LocalizedUrl) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{130}
}

func (x *LocalizedUrl) GetEn() string {
	if x != nil {
		return x.En
	}
	return ""
}

func (x *LocalizedUrl) GetRu() string {
	if x != nil {
		return x.Ru
	}
	return ""
}

func (x *LocalizedUrl) GetEs() string {
	if x != nil {
		return x.Es
	}
	return ""
}

func (x *LocalizedUrl) GetDe() string {
	if x != nil {
		return x.De
	}
	return ""
}

func (x *LocalizedUrl) GetZh() string {
	if x != nil {
		return x.Zh
	}
	return ""
}

func (x *LocalizedUrl) GetFr() string {
	if x != nil {
		return x.Fr
	}
	return ""
}

func (x *LocalizedUrl) GetAr() string {
	if x != nil {
		return x.Ar
	}
	return ""
}

func (x *LocalizedUrl) GetPt() string {
	if x != nil {
		return x.Pt
	}
	return ""
}

func (x *LocalizedUrl) GetIt() string {
	if x != nil {
		return x.It
	}
	return ""
}

func (x *LocalizedUrl) GetPl() string {
	if x != nil {
		return x.Pl
	}
	return ""
}

func (x *LocalizedUrl) GetEl() string {
	if x != nil {
		return x.El
	}
	return ""
}

func (x *LocalizedUrl) GetKo() string {
	if x != nil {
		return x.Ko
	}
	return ""
}

func (x *LocalizedUrl) GetJa() string {
	if x != nil {
		return x.Ja
	}
	return ""
}

func (x *LocalizedUrl) GetVl() string {
	if x != nil {
		return x.Vl
	}
	return ""
}

func (x *LocalizedUrl) GetHe() string {
	if x != nil {
		return x.He
	}
	return ""
}

func (x *LocalizedUrl) GetTh() string {
	if x != nil {
		return x.Th
	}
	return ""
}

func (x *LocalizedUrl) GetCs() string {
	if x != nil {
		return x.Cs
	}
	return ""
}

func (x *LocalizedUrl) GetBg() string {
	if x != nil {
		return x.Bg
	}
	return ""
}

func (x *LocalizedUrl) GetFi() string {
	if x != nil {
		return x.Fi
	}
	return ""
}

func (x *LocalizedUrl) GetSv() string {
	if x != nil {
		return x.Sv
	}
	return ""
}

func (x *LocalizedUrl) GetDa() string {
	if x != nil {
		return x.Da
	}
	return ""
}

func (x *LocalizedUrl) GetTr() string {
	if x != nil {
		return x.Tr
	}
	return ""
}

type ImageCollection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"images"
	//
	// The list of URLs for covers for each localization.
	Images *LocalizedUrl `protobuf:"bytes,1,opt,name=images,proto3" json:"images"`
	//@inject_tag: json:"use_one_for_all"
	//
	// Has a true value if the single cover is used for all localizations.
	UseOneForAll bool `protobuf:"varint,2,opt,name=use_one_for_all,json=useOneForAll,proto3" json:"use_one_for_all"`
}

func (x *ImageCollection) Reset() {
	*x = ImageCollection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageCollection) ProtoMessage() {}

func (x *ImageCollection) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageCollection.ProtoReflect.Descriptor instead.
func (*ImageCollection) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{131}
}

func (x *ImageCollection) GetImages() *LocalizedUrl {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *ImageCollection) GetUseOneForAll() bool {
	if x != nil {
		return x.UseOneForAll
	}
	return false
}

type ProductPrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"amount" validate:"required,numeric,gt=0"
	//
	// The product's price.
	Amount float64 `protobuf:"fixed64,1,opt,name=amount,proto3" json:"amount" validate:"required,numeric,gt=0"`
	//@inject_tag: json:"currency" validate:"omitempty,alpha,len=3"
	//
	// The product's price currency. Three-letter Currency Code ISO 4217, in uppercase.
	Currency string `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency" validate:"omitempty,alpha,len=3"`
	//@inject_tag: json:"region" validate:"omitempty,region_price"
	//
	// The product's price region.
	Region string `protobuf:"bytes,3,opt,name=region,proto3" json:"region" validate:"omitempty,region_price"`
	//@inject_tag: json:"is_virtual_currency" bson:"is_virtual_currency"
	//
	// Has a true value if the product's amount in the virtual currency.
	IsVirtualCurrency bool `protobuf:"varint,4,opt,name=is_virtual_currency,json=isVirtualCurrency,proto3" json:"is_virtual_currency" bson:"is_virtual_currency"`
}

func (x *ProductPrice) Reset() {
	*x = ProductPrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductPrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductPrice) ProtoMessage() {}

func (x *ProductPrice) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductPrice.ProtoReflect.Descriptor instead.
func (*ProductPrice) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{132}
}

func (x *ProductPrice) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *ProductPrice) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *ProductPrice) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ProductPrice) GetIsVirtualCurrency() bool {
	if x != nil {
		return x.IsVirtualCurrency
	}
	return false
}

type ProjectVirtualCurrency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"logo" validate:"omitempty,url"
	//
	// The logo URL for the virtual currency.
	Logo string `protobuf:"bytes,1,opt,name=logo,proto3" json:"logo" validate:"omitempty,url"`
	// @inject_tag: json:"name" validate:"required,min=1"
	//
	// The list of localized names for the virtual currency.
	Name map[string]string `protobuf:"bytes,2,rep,name=name,proto3" json:"name" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" validate:"required,min=1"`
	// @inject_tag: json:"success_message" validate:"required,min=1"
	//
	// The list of localized notifications about the successful virtual currency purchase.
	SuccessMessage map[string]string `protobuf:"bytes,3,rep,name=success_message,json=successMessage,proto3" json:"success_message" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" validate:"required,min=1"`
	//@inject_tag: json:"prices" validate:"required,min=1,currency_price,dive"
	//
	// The list of the virtual currency pricing based on regions.
	Prices []*ProductPrice `protobuf:"bytes,4,rep,name=prices,proto3" json:"prices" validate:"required,min=1,currency_price,dive"`
	//@inject_tag: json:"min_purchase_value"
	//
	// The minimum limit of the virtual currency.
	MinPurchaseValue float64 `protobuf:"fixed64,5,opt,name=min_purchase_value,json=minPurchaseValue,proto3" json:"min_purchase_value"`
	//@inject_tag: json:"max_purchase_value"
	//
	// The maximum limit of the virtual currency.
	MaxPurchaseValue float64 `protobuf:"fixed64,6,opt,name=max_purchase_value,json=maxPurchaseValue,proto3" json:"max_purchase_value"`
	//@inject_tag: json:"sell_count_type" validate:"omitempty,oneof=fractional integral"
	//
	// The number representation of the virtual currency amount. Available values: fractional (for example: 1,58), integral (1, 2, 5 etc).
	SellCountType string `protobuf:"bytes,7,opt,name=sell_count_type,json=sellCountType,proto3" json:"sell_count_type" validate:"omitempty,oneof=fractional integral"`
}

func (x *ProjectVirtualCurrency) Reset() {
	*x = ProjectVirtualCurrency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectVirtualCurrency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectVirtualCurrency) ProtoMessage() {}

func (x *ProjectVirtualCurrency) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectVirtualCurrency.ProtoReflect.Descriptor instead.
func (*ProjectVirtualCurrency) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{133}
}

func (x *ProjectVirtualCurrency) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *ProjectVirtualCurrency) GetName() map[string]string {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ProjectVirtualCurrency) GetSuccessMessage() map[string]string {
	if x != nil {
		return x.SuccessMessage
	}
	return nil
}

func (x *ProjectVirtualCurrency) GetPrices() []*ProductPrice {
	if x != nil {
		return x.Prices
	}
	return nil
}

func (x *ProjectVirtualCurrency) GetMinPurchaseValue() float64 {
	if x != nil {
		return x.MinPurchaseValue
	}
	return 0
}

func (x *ProjectVirtualCurrency) GetMaxPurchaseValue() float64 {
	if x != nil {
		return x.MaxPurchaseValue
	}
	return 0
}

func (x *ProjectVirtualCurrency) GetSellCountType() string {
	if x != nil {
		return x.SellCountType
	}
	return ""
}

type OrderCreateByPaylink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"id" validate:"required,hexadecimal,len=24"
	PaylinkId string `protobuf:"bytes,1,opt,name=paylink_id,json=paylinkId,proto3" json:"id" validate:"required,hexadecimal,len=24"`
	PayerIp   string `protobuf:"bytes,2,opt,name=payer_ip,json=payerIp,proto3" json:"payer_ip,omitempty"`
	// @inject_tag: json:"referer"
	IssuerUrl string `protobuf:"bytes,3,opt,name=issuer_url,json=issuerUrl,proto3" json:"referer"`
	// @inject_tag: json:"is_embedded"
	IsEmbedded bool `protobuf:"varint,4,opt,name=is_embedded,json=isEmbedded,proto3" json:"is_embedded"`
	//@inject_tag: bson:"utm_source" json:"utm_source"
	UtmSource string `protobuf:"bytes,5,opt,name=utm_source,json=utmSource,proto3" json:"utm_source" bson:"utm_source"`
	//@inject_tag: bson:"utm_medium" json:"utm_medium"
	UtmMedium string `protobuf:"bytes,6,opt,name=utm_medium,json=utmMedium,proto3" json:"utm_medium" bson:"utm_medium"`
	//@inject_tag: bson:"utm_campaign" json:"utm_campaign"
	UtmCampaign string `protobuf:"bytes,7,opt,name=utm_campaign,json=utmCampaign,proto3" json:"utm_campaign" bson:"utm_campaign"`
	Cookie      string `protobuf:"bytes,8,opt,name=cookie,proto3" json:"cookie,omitempty"`
}

func (x *OrderCreateByPaylink) Reset() {
	*x = OrderCreateByPaylink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderCreateByPaylink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderCreateByPaylink) ProtoMessage() {}

func (x *OrderCreateByPaylink) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderCreateByPaylink.ProtoReflect.Descriptor instead.
func (*OrderCreateByPaylink) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{134}
}

func (x *OrderCreateByPaylink) GetPaylinkId() string {
	if x != nil {
		return x.PaylinkId
	}
	return ""
}

func (x *OrderCreateByPaylink) GetPayerIp() string {
	if x != nil {
		return x.PayerIp
	}
	return ""
}

func (x *OrderCreateByPaylink) GetIssuerUrl() string {
	if x != nil {
		return x.IssuerUrl
	}
	return ""
}

func (x *OrderCreateByPaylink) GetIsEmbedded() bool {
	if x != nil {
		return x.IsEmbedded
	}
	return false
}

func (x *OrderCreateByPaylink) GetUtmSource() string {
	if x != nil {
		return x.UtmSource
	}
	return ""
}

func (x *OrderCreateByPaylink) GetUtmMedium() string {
	if x != nil {
		return x.UtmMedium
	}
	return ""
}

func (x *OrderCreateByPaylink) GetUtmCampaign() string {
	if x != nil {
		return x.UtmCampaign
	}
	return ""
}

func (x *OrderCreateByPaylink) GetCookie() string {
	if x != nil {
		return x.Cookie
	}
	return ""
}

type UserIpData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"country"
	//
	// The customer's country. Two-letter country code in ISO 3166-1, in uppercase (for instance US).
	Country string `protobuf:"bytes,1,opt,name=country,proto3" json:"country"`
	// @inject_tag: json:"city"
	//
	// The customer's city.
	City string `protobuf:"bytes,2,opt,name=city,proto3" json:"city"`
	// @inject_tag: json:"zip"
	//
	// The customer's postal code.
	Zip string `protobuf:"bytes,3,opt,name=zip,proto3" json:"zip"`
}

func (x *UserIpData) Reset() {
	*x = UserIpData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserIpData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserIpData) ProtoMessage() {}

func (x *UserIpData) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserIpData.ProtoReflect.Descriptor instead.
func (*UserIpData) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{135}
}

func (x *UserIpData) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *UserIpData) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *UserIpData) GetZip() string {
	if x != nil {
		return x.Zip
	}
	return ""
}

type PaymentFormDataChangeResponseItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"user_address_data_required"
	//
	// Has a true value if it's required to get a real customer's geo-position information.
	UserAddressDataRequired bool `protobuf:"varint,1,opt,name=user_address_data_required,json=userAddressDataRequired,proto3" json:"user_address_data_required"`
	// @inject_tag: json:"user_ip_data"
	//
	// The customer's IP address.
	UserIpData *UserIpData `protobuf:"bytes,2,opt,name=user_ip_data,json=userIpData,proto3" json:"user_ip_data"`
	// The brand of the card issuer.
	Brand string `protobuf:"bytes,3,opt,name=brand,proto3" json:"brand,omitempty"`
	//@inject_tag: json:"country_payments_allowed"
	//
	// Has a true value if the payments are allowed from this customer's country.
	CountryPaymentsAllowed bool `protobuf:"varint,4,opt,name=country_payments_allowed,json=countryPaymentsAllowed,proto3" json:"country_payments_allowed"`
	//@inject_tag: json:"country_change_allowed"
	//
	// Has a true value if the customer can select another country while payments are disallowed for his country.
	CountryChangeAllowed bool `protobuf:"varint,5,opt,name=country_change_allowed,json=countryChangeAllowed,proto3" json:"country_change_allowed"`
	// @inject_tag: json:"has_vat"
	//
	// Has a true value if the payment has the VAT commission.
	HasVat bool `protobuf:"varint,6,opt,name=has_vat,json=hasVat,proto3" json:"has_vat"`
	// @inject_tag: json:"vat"
	//
	// The amount of VAT.
	Vat float64 `protobuf:"fixed64,7,opt,name=vat,proto3" json:"vat"`
	// @inject_tag: json:"amount"
	//
	// The payment amount without VAT.
	Amount float64 `protobuf:"fixed64,8,opt,name=amount,proto3" json:"amount"`
	// @inject_tag: json:"total_amount"
	//
	// The payment amount including VAT.
	TotalAmount float64 `protobuf:"fixed64,9,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount"`
	//@inject_tag: json:"currency"
	//
	// The currency of the order.
	Currency string `protobuf:"bytes,10,opt,name=currency,proto3" json:"currency"`
	// @inject_tag: json:"items"
	//
	// A list of purchased items in this order.
	Items []*OrderItem `protobuf:"bytes,11,rep,name=items,proto3" json:"items"`
	// @inject_tag: json:"charge_currency"
	//
	// The currency of the order charge. It can differ from the order currency because it also depends on the customer's card currency.
	ChargeCurrency string `protobuf:"bytes,12,opt,name=charge_currency,json=chargeCurrency,proto3" json:"charge_currency"`
	// @inject_tag: json:"charge_amount"
	//
	// The total amount of the order charge.
	ChargeAmount float64 `protobuf:"fixed64,13,opt,name=charge_amount,json=chargeAmount,proto3" json:"charge_amount"`
	// @inject_tag: json:"vat_in_charge_currency"
	//
	// The VAT currency of the order charge. It can differ from the order currency because it depends on the user's card currency.
	VatInChargeCurrency float64 `protobuf:"fixed64,14,opt,name=vat_in_charge_currency,json=vatInChargeCurrency,proto3" json:"vat_in_charge_currency"`
	// @inject_tag: json:"vat_rate"
	//
	// VAT rate.
	VatRate float64 `protobuf:"fixed64,15,opt,name=vat_rate,json=vatRate,proto3" json:"vat_rate"`
}

func (x *PaymentFormDataChangeResponseItem) Reset() {
	*x = PaymentFormDataChangeResponseItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentFormDataChangeResponseItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentFormDataChangeResponseItem) ProtoMessage() {}

func (x *PaymentFormDataChangeResponseItem) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentFormDataChangeResponseItem.ProtoReflect.Descriptor instead.
func (*PaymentFormDataChangeResponseItem) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{136}
}

func (x *PaymentFormDataChangeResponseItem) GetUserAddressDataRequired() bool {
	if x != nil {
		return x.UserAddressDataRequired
	}
	return false
}

func (x *PaymentFormDataChangeResponseItem) GetUserIpData() *UserIpData {
	if x != nil {
		return x.UserIpData
	}
	return nil
}

func (x *PaymentFormDataChangeResponseItem) GetBrand() string {
	if x != nil {
		return x.Brand
	}
	return ""
}

func (x *PaymentFormDataChangeResponseItem) GetCountryPaymentsAllowed() bool {
	if x != nil {
		return x.CountryPaymentsAllowed
	}
	return false
}

func (x *PaymentFormDataChangeResponseItem) GetCountryChangeAllowed() bool {
	if x != nil {
		return x.CountryChangeAllowed
	}
	return false
}

func (x *PaymentFormDataChangeResponseItem) GetHasVat() bool {
	if x != nil {
		return x.HasVat
	}
	return false
}

func (x *PaymentFormDataChangeResponseItem) GetVat() float64 {
	if x != nil {
		return x.Vat
	}
	return 0
}

func (x *PaymentFormDataChangeResponseItem) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *PaymentFormDataChangeResponseItem) GetTotalAmount() float64 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *PaymentFormDataChangeResponseItem) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *PaymentFormDataChangeResponseItem) GetItems() []*OrderItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *PaymentFormDataChangeResponseItem) GetChargeCurrency() string {
	if x != nil {
		return x.ChargeCurrency
	}
	return ""
}

func (x *PaymentFormDataChangeResponseItem) GetChargeAmount() float64 {
	if x != nil {
		return x.ChargeAmount
	}
	return 0
}

func (x *PaymentFormDataChangeResponseItem) GetVatInChargeCurrency() float64 {
	if x != nil {
		return x.VatInChargeCurrency
	}
	return 0
}

func (x *PaymentFormDataChangeResponseItem) GetVatRate() float64 {
	if x != nil {
		return x.VatRate
	}
	return 0
}

type OperatingCompany struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: bson:"_id" json:"id" faker:"objectIdString"
	//
	// The unique identifier for the operating company.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id" bson:"_id" faker:"objectIdString"`
	// @inject_tag: bson:"name" json:"name" validate:"required"
	//
	// The operating company's name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name" bson:"name" validate:"required"`
	// @inject_tag: bson:"country" json:"country" validate:"required,alpha,len=2"
	//
	// The operating company's country.
	Country string `protobuf:"bytes,3,opt,name=country,proto3" json:"country" bson:"country" validate:"required,alpha,len=2"`
	// @inject_tag: bson:"registration_number" json:"registration_number" validate:"required"
	//
	// The operating company's registration number.
	RegistrationNumber string `protobuf:"bytes,4,opt,name=registration_number,json=registrationNumber,proto3" json:"registration_number" bson:"registration_number" validate:"required"`
	// @inject_tag: bson:"vat_number" json:"vat_number" validate:"required"
	//
	// The operating company's VAT number.
	VatNumber string `protobuf:"bytes,5,opt,name=vat_number,json=vatNumber,proto3" json:"vat_number" bson:"vat_number" validate:"required"`
	// @inject_tag: bson:"address" json:"address" validate:"required"
	//
	// The operating company's address.
	Address string `protobuf:"bytes,6,opt,name=address,proto3" json:"address" bson:"address" validate:"required"`
	// @inject_tag: bson:"vat_address" json:"vat_address" validate:"required"
	//
	// The operating company's VAT address.
	VatAddress string `protobuf:"bytes,7,opt,name=vat_address,json=vatAddress,proto3" json:"vat_address" bson:"vat_address" validate:"required"`
	// @inject_tag: bson:"signatory_name" json:"signatory_name" validate:"required"
	//
	// The authorized signer's name of the operating company.
	SignatoryName string `protobuf:"bytes,8,opt,name=signatory_name,json=signatoryName,proto3" json:"signatory_name" bson:"signatory_name" validate:"required"`
	// @inject_tag: bson:"signatory_position" json:"signatory_position" validate:"required"
	//
	// The authorized signer's position in the operating company.
	SignatoryPosition string `protobuf:"bytes,9,opt,name=signatory_position,json=signatoryPosition,proto3" json:"signatory_position" bson:"signatory_position" validate:"required"`
	// @inject_tag: bson:"banking_details" json:"banking_details" validate:"required"
	//
	// The baking details including bank, bank address, account number, SWIFT/BIC, intermediary bank.
	BankingDetails string `protobuf:"bytes,10,opt,name=banking_details,json=bankingDetails,proto3" json:"banking_details" bson:"banking_details" validate:"required"`
	// @inject_tag: bson:"payment_countries" json:"payment_countries" validate:"omitempty,dive,alpha,len=2"
	//
	// The list of the countries allowed for a payment.
	PaymentCountries []string `protobuf:"bytes,11,rep,name=payment_countries,json=paymentCountries,proto3" json:"payment_countries" bson:"payment_countries" validate:"omitempty,dive,alpha,len=2"`
	// @inject_tag: json:"created_at"
	//
	// The date of the operating company creation.
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,12,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	// @inject_tag: json:"updated_at"
	//
	// The date of the operating company last update.
	UpdatedAt *timestamp.Timestamp `protobuf:"bytes,13,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	// @inject_tag: bson:"registration_date" json:"registration_date" validate:"required"
	//
	// The date of the operating company registration.
	RegistrationDate string `protobuf:"bytes,14,opt,name=registration_date,json=registrationDate,proto3" json:"registration_date" bson:"registration_date" validate:"required"`
	// @inject_tag: bson:"email" json:"email" validate:"required,email"
	//
	// The operating company's email.
	Email string `protobuf:"bytes,15,opt,name=email,proto3" json:"email" bson:"email" validate:"required,email"`
}

func (x *OperatingCompany) Reset() {
	*x = OperatingCompany{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperatingCompany) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatingCompany) ProtoMessage() {}

func (x *OperatingCompany) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatingCompany.ProtoReflect.Descriptor instead.
func (*OperatingCompany) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{137}
}

func (x *OperatingCompany) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *OperatingCompany) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OperatingCompany) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *OperatingCompany) GetRegistrationNumber() string {
	if x != nil {
		return x.RegistrationNumber
	}
	return ""
}

func (x *OperatingCompany) GetVatNumber() string {
	if x != nil {
		return x.VatNumber
	}
	return ""
}

func (x *OperatingCompany) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *OperatingCompany) GetVatAddress() string {
	if x != nil {
		return x.VatAddress
	}
	return ""
}

func (x *OperatingCompany) GetSignatoryName() string {
	if x != nil {
		return x.SignatoryName
	}
	return ""
}

func (x *OperatingCompany) GetSignatoryPosition() string {
	if x != nil {
		return x.SignatoryPosition
	}
	return ""
}

func (x *OperatingCompany) GetBankingDetails() string {
	if x != nil {
		return x.BankingDetails
	}
	return ""
}

func (x *OperatingCompany) GetPaymentCountries() []string {
	if x != nil {
		return x.PaymentCountries
	}
	return nil
}

func (x *OperatingCompany) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *OperatingCompany) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *OperatingCompany) GetRegistrationDate() string {
	if x != nil {
		return x.RegistrationDate
	}
	return ""
}

func (x *OperatingCompany) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type PaymentMinLimitSystem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: bson:"_id" json:"-" faker:"objectIdString"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"-" bson:"_id" faker:"objectIdString"`
	//@inject_tag: validate:"required,alpha,len=3" json:"currency" bson:"currency" required:"true"
	//
	// The system limit currency.
	Currency string `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency" validate:"required,alpha,len=3" bson:"currency" required:"true"`
	// @inject_tag: validate:"required,numeric,gt=0" json:"amount" bson:"amount" required:"true"
	//
	// The system limit amount.
	Amount float64 `protobuf:"fixed64,3,opt,name=amount,proto3" json:"amount" validate:"required,numeric,gt=0" bson:"amount" required:"true"`
	// @inject_tag: json:"created_at"
	//
	// The date of the system limit created.
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	// @inject_tag: json:"updated_at"
	//
	// The date of the system limit last update.
	UpdatedAt *timestamp.Timestamp `protobuf:"bytes,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
}

func (x *PaymentMinLimitSystem) Reset() {
	*x = PaymentMinLimitSystem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentMinLimitSystem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentMinLimitSystem) ProtoMessage() {}

func (x *PaymentMinLimitSystem) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentMinLimitSystem.ProtoReflect.Descriptor instead.
func (*PaymentMinLimitSystem) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{138}
}

func (x *PaymentMinLimitSystem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PaymentMinLimitSystem) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *PaymentMinLimitSystem) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *PaymentMinLimitSystem) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PaymentMinLimitSystem) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type UserRole struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"id" validate:"required,hexadecimal,len=24" required:"true" faker:"objectIdString"
	//
	// The unique identifier for the user's role.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id" validate:"required,hexadecimal,len=24" required:"true" faker:"objectIdString"`
	//@inject_tag: json:"merchant_id" validate:"required,hexadecimal,len=24" required:"true" faker:"objectIdString"
	//
	// The unique identifier for the merchant (only for merchant users).
	MerchantId string `protobuf:"bytes,3,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id" validate:"required,hexadecimal,len=24" required:"true" faker:"objectIdString"`
	//@inject_tag: json:"role" validate:"required" required:"true"
	//
	// The user's role.
	Role string `protobuf:"bytes,4,opt,name=role,proto3" json:"role" validate:"required" required:"true"`
	//@inject_tag: json:"status" bson:"status" validate="oneof=invited accepted"
	//
	// The user's invitation status. Available values: invited, approved.
	Status string `protobuf:"bytes,5,opt,name=status,proto3" json:"status" bson:"status"`
	//@inject_tag: json:"user_id" bson:"user_id" validate:"required,hexadecimal,len=24" required:"true" faker:"objectIdString"
	//
	// The unique identifier for the user.
	UserId string `protobuf:"bytes,6,opt,name=user_id,json=userId,proto3" json:"user_id" bson:"user_id" validate:"required,hexadecimal,len=24" required:"true" faker:"objectIdString"`
	//@inject_tag: json:"first_name" bson:"first_name"  validate:"required" required:"true"
	//
	// The user's first name.
	FirstName string `protobuf:"bytes,7,opt,name=first_name,json=firstName,proto3" json:"first_name" bson:"first_name" validate:"required" required:"true"`
	//@inject_tag: json:"last_name" bson:"last_name" validate:"required" required:"true"
	//
	// The user's last name.
	LastName string `protobuf:"bytes,8,opt,name=last_name,json=lastName,proto3" json:"last_name" bson:"last_name" validate:"required" required:"true"`
	//@inject_tag: json:"email" bson:"email" validate:"required,email" required:"true"
	//
	// The user's email address.
	Email string `protobuf:"bytes,9,opt,name=email,proto3" json:"email" bson:"email" validate:"required,email" required:"true"`
	// @inject_tag: json:"created_at"
	//
	// The date of the user's role creation.
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	// @inject_tag: json:"updated_at"
	//
	// The date of the user's role last update.
	UpdatedAt *timestamp.Timestamp `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
}

func (x *UserRole) Reset() {
	*x = UserRole{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRole) ProtoMessage() {}

func (x *UserRole) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRole.ProtoReflect.Descriptor instead.
func (*UserRole) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{139}
}

func (x *UserRole) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserRole) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *UserRole) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *UserRole) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *UserRole) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserRole) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *UserRole) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *UserRole) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserRole) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *UserRole) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type RoleListItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"id"
	//
	// The unique identifier for the role.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	//@inject_tag: json:"name"
	//
	// The role's name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
}

func (x *RoleListItem) Reset() {
	*x = RoleListItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleListItem) ProtoMessage() {}

func (x *RoleListItem) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleListItem.ProtoReflect.Descriptor instead.
func (*RoleListItem) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{140}
}

func (x *RoleListItem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RoleListItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ActOfCompletionDocument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: json:"merchant_id" bson:"merchant_id" validate:"omitempty,hexadecimal,len=24" faker:"objectIdString"
	//
	// The unique identifier for the merchant who is the owner of the payout document.
	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id" bson:"merchant_id" validate:"omitempty,hexadecimal,len=24" faker:"objectIdString"`
	// @inject_tag: json:"total_fees" validate:"numeric,gte=0"
	//
	// The total amount of fees.
	TotalFees float64 `protobuf:"fixed64,2,opt,name=total_fees,json=totalFees,proto3" json:"total_fees" validate:"numeric,gte=0"`
	// @inject_tag: json:"balance" validate:"numeric,gte=0"
	//
	// The payout amount.
	Balance float64 `protobuf:"fixed64,3,opt,name=balance,proto3" json:"balance" validate:"numeric,gte=0"`
	// @inject_tag: json:"total_transactions"
	//
	// The total number of transactions.
	TotalTransactions int32 `protobuf:"varint,4,opt,name=total_transactions,json=totalTransactions,proto3" json:"total_transactions"`
	// @inject_tag: json:"b2b_vat_base" bson:"b2b_vat_base" validate:"numeric,gte=0"
	//
	// The total Licensee Revenue Share amount as base for b2b vat calculation
	B2BVatBase float64 `protobuf:"fixed64,5,opt,name=b2b_vat_base,json=b2bVatBase,proto3" json:"b2b_vat_base" bson:"b2b_vat_base" validate:"numeric,gte=0"`
	//@inject_tag: json:"b2b_vat_rate" bson:"b2b_vat_rate" validate:"numeric,gte=0"
	//
	// Effective rate of b2b_vat.
	B2BVatRate float64 `protobuf:"fixed64,6,opt,name=b2b_vat_rate,json=b2bVatRate,proto3" json:"b2b_vat_rate" bson:"b2b_vat_rate" validate:"numeric,gte=0"`
	// @inject_tag: json:"b2b_vat_amount" bson:"b2b_vat_amount" validate:"numeric,gte=0"
	//
	// The b2b vat amount.
	B2BVatAmount float64 `protobuf:"fixed64,7,opt,name=b2b_vat_amount,json=b2bVatAmount,proto3" json:"b2b_vat_amount" bson:"b2b_vat_amount" validate:"numeric,gte=0"`
	// @inject_tag: json:"fees_excluding_vat" bson:"fees_excluding_vat" validate:"numeric,gte=0"
	//
	// The b2b vat amount.
	FeesExcludingVat float64 `protobuf:"fixed64,8,opt,name=fees_excluding_vat,json=feesExcludingVat,proto3" json:"fees_excluding_vat" bson:"fees_excluding_vat" validate:"numeric,gte=0"`
	// @inject_tag: json:"corrections_amount" bson:"corrections_amount" validate:"numeric,gte=0"
	//
	// The b2b vat amount.
	CorrectionsAmount float64 `protobuf:"fixed64,9,opt,name=corrections_amount,json=correctionsAmount,proto3" json:"corrections_amount" bson:"corrections_amount" validate:"numeric,gte=0"`
}

func (x *ActOfCompletionDocument) Reset() {
	*x = ActOfCompletionDocument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActOfCompletionDocument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActOfCompletionDocument) ProtoMessage() {}

func (x *ActOfCompletionDocument) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActOfCompletionDocument.ProtoReflect.Descriptor instead.
func (*ActOfCompletionDocument) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{141}
}

func (x *ActOfCompletionDocument) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *ActOfCompletionDocument) GetTotalFees() float64 {
	if x != nil {
		return x.TotalFees
	}
	return 0
}

func (x *ActOfCompletionDocument) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *ActOfCompletionDocument) GetTotalTransactions() int32 {
	if x != nil {
		return x.TotalTransactions
	}
	return 0
}

func (x *ActOfCompletionDocument) GetB2BVatBase() float64 {
	if x != nil {
		return x.B2BVatBase
	}
	return 0
}

func (x *ActOfCompletionDocument) GetB2BVatRate() float64 {
	if x != nil {
		return x.B2BVatRate
	}
	return 0
}

func (x *ActOfCompletionDocument) GetB2BVatAmount() float64 {
	if x != nil {
		return x.B2BVatAmount
	}
	return 0
}

func (x *ActOfCompletionDocument) GetFeesExcludingVat() float64 {
	if x != nil {
		return x.FeesExcludingVat
	}
	return 0
}

func (x *ActOfCompletionDocument) GetCorrectionsAmount() float64 {
	if x != nil {
		return x.CorrectionsAmount
	}
	return 0
}

type BrowserCookie struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerId        string `protobuf:"bytes,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	VirtualCustomerId string `protobuf:"bytes,2,opt,name=virtual_customer_id,json=virtualCustomerId,proto3" json:"virtual_customer_id,omitempty"`
	Ip                string `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	IpCountry         string `protobuf:"bytes,4,opt,name=ip_country,json=ipCountry,proto3" json:"ip_country,omitempty"`
	SelectedCountry   string `protobuf:"bytes,5,opt,name=selected_country,json=selectedCountry,proto3" json:"selected_country,omitempty"`
	UserAgent         string `protobuf:"bytes,6,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
	AcceptLanguage    string `protobuf:"bytes,7,opt,name=accept_language,json=acceptLanguage,proto3" json:"accept_language,omitempty"`
	SessionCount      int32  `protobuf:"varint,8,opt,name=session_count,json=sessionCount,proto3" json:"session_count,omitempty"`
}

func (x *BrowserCookie) Reset() {
	*x = BrowserCookie{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrowserCookie) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrowserCookie) ProtoMessage() {}

func (x *BrowserCookie) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrowserCookie.ProtoReflect.Descriptor instead.
func (*BrowserCookie) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{142}
}

func (x *BrowserCookie) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *BrowserCookie) GetVirtualCustomerId() string {
	if x != nil {
		return x.VirtualCustomerId
	}
	return ""
}

func (x *BrowserCookie) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *BrowserCookie) GetIpCountry() string {
	if x != nil {
		return x.IpCountry
	}
	return ""
}

func (x *BrowserCookie) GetSelectedCountry() string {
	if x != nil {
		return x.SelectedCountry
	}
	return ""
}

func (x *BrowserCookie) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *BrowserCookie) GetAcceptLanguage() string {
	if x != nil {
		return x.AcceptLanguage
	}
	return ""
}

func (x *BrowserCookie) GetSessionCount() int32 {
	if x != nil {
		return x.SessionCount
	}
	return 0
}

type MerchantDocument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"id" validate:"omitempty,hexadecimal,len=24" faker:"objectIdString"
	//
	// The unique identifier for the merchant document.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id" validate:"omitempty,hexadecimal,len=24" faker:"objectIdString"`
	// @inject_tag: json:"merchant_id" validate:"required,hexadecimal,len=24" faker:"objectIdString" param:"merchant_id"
	//
	// The merchant identifier for the document.
	MerchantId string `protobuf:"bytes,2,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id" validate:"required,hexadecimal,len=24" faker:"objectIdString" param:"merchant_id"`
	// @inject_tag: json:"user_id" validate:"required,hexadecimal,len=24" faker:"objectIdString"
	//
	// ID of the user who added the document.
	UserId string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id" validate:"required,hexadecimal,len=24" faker:"objectIdString"`
	// @inject_tag: json:"original_name" validate:"required"
	//
	// Original uploaded file name.
	OriginalName string `protobuf:"bytes,4,opt,name=original_name,json=originalName,proto3" json:"original_name" validate:"required"`
	// @inject_tag: json:"-"
	//
	// The path to the saved file in the S3 storage.
	FilePath string `protobuf:"bytes,5,opt,name=file_path,json=filePath,proto3" json:"-"`
	// @inject_tag: json:"description" validate:"omitempty"
	//
	// The optional description for file.
	Description string `protobuf:"bytes,6,opt,name=description,proto3" json:"description" validate:"omitempty"`
	// @inject_tag: json:"created_at"
	//
	// The date of the merchant document creation.
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
}

func (x *MerchantDocument) Reset() {
	*x = MerchantDocument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerchantDocument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerchantDocument) ProtoMessage() {}

func (x *MerchantDocument) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerchantDocument.ProtoReflect.Descriptor instead.
func (*MerchantDocument) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{143}
}

func (x *MerchantDocument) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MerchantDocument) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *MerchantDocument) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *MerchantDocument) GetOriginalName() string {
	if x != nil {
		return x.OriginalName
	}
	return ""
}

func (x *MerchantDocument) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *MerchantDocument) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MerchantDocument) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type RecurringPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"id" validate:"omitempty,hexadecimal,len=24" param:"plan_id" faker:"objectIdString"
	//
	// The unique identifier of recurring plan.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id" validate:"omitempty,hexadecimal,len=24" param:"plan_id" faker:"objectIdString"`
	// @inject_tag: json:"merchant_id" validate:"required,hexadecimal,len=24" param:"merchant_id" faker:"objectIdString"
	//
	// The identifier of the merchant who owns the plan.
	MerchantId string `protobuf:"bytes,2,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id" validate:"required,hexadecimal,len=24" param:"merchant_id" faker:"objectIdString"`
	// @inject_tag: json:"project_id" validate:"required,hexadecimal,len=24" param:"project_id" faker:"objectIdString"
	//
	// The identifier of the merchant project.
	ProjectId string `protobuf:"bytes,3,opt,name=project_id,json=projectId,proto3" json:"project_id" validate:"required,hexadecimal,len=24" param:"project_id" faker:"objectIdString"`
	// @inject_tag: json:"name" validate:"required" required:"true"
	//
	// The list of the plan localized names.
	Name map[string]string `protobuf:"bytes,4,rep,name=name,proto3" json:"name" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" validate:"required" required:"true"`
	// @inject_tag: json:"charge" validate:"required" required:"true"
	//
	// The plan charge settings.
	Charge *RecurringPlanCharge `protobuf:"bytes,5,opt,name=charge,proto3" json:"charge" validate:"required" required:"true"`
	// @inject_tag: json:"external_id" validate:"omitempty,alphanum,lte=32"
	//
	// Plan external ID (up to 32 characters).
	ExternalId string `protobuf:"bytes,6,opt,name=external_id,json=externalId,proto3" json:"external_id" validate:"omitempty,alphanum,lte=32"`
	// @inject_tag: json:"description" validate:"omitempty"
	//
	// The list of the plan localized description
	Description map[string]string `protobuf:"bytes,7,rep,name=description,proto3" json:"description" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" validate:"omitempty"`
	// @inject_tag: json:"group_id" validate:"omitempty,alphanum,lte=32"
	//
	// Group ID the plans are linked to (up to 32 characters).
	GroupId string `protobuf:"bytes,8,opt,name=group_id,json=groupId,proto3" json:"group_id" validate:"omitempty,alphanum,lte=32"`
	// @inject_tag: json:"expiration" validate:"omitempty"
	//
	// Subscription expiration details.
	Expiration *RecurringPlanPeriod `protobuf:"bytes,9,opt,name=expiration,proto3" json:"expiration" validate:"omitempty"`
	// @inject_tag: json:"trial" validate:"omitempty"
	//
	// Trial period details.
	Trial *RecurringPlanPeriod `protobuf:"bytes,10,opt,name=trial,proto3" json:"trial" validate:"omitempty"`
	// @inject_tag: json:"grace_period" validate:"omitempty"
	//
	// Trial period details.
	GracePeriod *RecurringPlanPeriod `protobuf:"bytes,11,opt,name=grace_period,json=gracePeriod,proto3" json:"grace_period" validate:"omitempty"`
	// @inject_tag: json:"tags" validate:"omitempty"
	//
	// Plan tags.
	Tags []string `protobuf:"bytes,12,rep,name=tags,proto3" json:"tags" validate:"omitempty"`
	// @inject_tag: json:"status" validate:"omitempty,oneof=active disabled"
	//
	// Subscription plan status.
	Status string `protobuf:"bytes,13,opt,name=status,proto3" json:"status" validate:"omitempty,oneof=active disabled"`
	// @inject_tag: json:"created_at"
	//
	// The date of the recurring plan creation.
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,14,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	// @inject_tag: json:"updated_at"
	//
	// The date of the recurring plan last updated.
	UpdatedAt *timestamp.Timestamp `protobuf:"bytes,15,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	// @inject_tag: json:"-"
	//
	// The date of the recurring plan deleted.
	DeletedAt *timestamp.Timestamp `protobuf:"bytes,16,opt,name=deleted_at,json=deletedAt,proto3" json:"-"`
}

func (x *RecurringPlan) Reset() {
	*x = RecurringPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecurringPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecurringPlan) ProtoMessage() {}

func (x *RecurringPlan) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecurringPlan.ProtoReflect.Descriptor instead.
func (*RecurringPlan) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{144}
}

func (x *RecurringPlan) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RecurringPlan) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *RecurringPlan) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *RecurringPlan) GetName() map[string]string {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *RecurringPlan) GetCharge() *RecurringPlanCharge {
	if x != nil {
		return x.Charge
	}
	return nil
}

func (x *RecurringPlan) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

func (x *RecurringPlan) GetDescription() map[string]string {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *RecurringPlan) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *RecurringPlan) GetExpiration() *RecurringPlanPeriod {
	if x != nil {
		return x.Expiration
	}
	return nil
}

func (x *RecurringPlan) GetTrial() *RecurringPlanPeriod {
	if x != nil {
		return x.Trial
	}
	return nil
}

func (x *RecurringPlan) GetGracePeriod() *RecurringPlanPeriod {
	if x != nil {
		return x.GracePeriod
	}
	return nil
}

func (x *RecurringPlan) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *RecurringPlan) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *RecurringPlan) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *RecurringPlan) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *RecurringPlan) GetDeletedAt() *timestamp.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

type RecurringPlanCharge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"period" validate:"required"
	//
	// Billing period of the recurring plan.
	Period *RecurringPlanPeriod `protobuf:"bytes,1,opt,name=period,proto3" json:"period" validate:"required"`
	// @inject_tag: json:"amount" validate:"required,numeric,gte=0"
	//
	// The plan charge amount as a positive number.
	Amount float64 `protobuf:"fixed64,2,opt,name=amount,proto3" json:"amount" validate:"required,numeric,gte=0"`
	// @inject_tag: json:"currency" validate:"required,alpha,len=3"
	//
	// The currency of the plan charge. Three-letter Currency Code ISO 4217, in uppercase.
	Currency string `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency" validate:"required,alpha,len=3"`
}

func (x *RecurringPlanCharge) Reset() {
	*x = RecurringPlanCharge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecurringPlanCharge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecurringPlanCharge) ProtoMessage() {}

func (x *RecurringPlanCharge) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecurringPlanCharge.ProtoReflect.Descriptor instead.
func (*RecurringPlanCharge) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{145}
}

func (x *RecurringPlanCharge) GetPeriod() *RecurringPlanPeriod {
	if x != nil {
		return x.Period
	}
	return nil
}

func (x *RecurringPlanCharge) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *RecurringPlanCharge) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

type RecurringPlanPeriod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"value" validate:"required"
	//
	// Number of time units.
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value" validate:"required"`
	// @inject_tag: json:"type" validate:"required,oneof=minute day week month year"
	//
	// Time unit.
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type" validate:"required,oneof=minute day week month year"`
}

func (x *RecurringPlanPeriod) Reset() {
	*x = RecurringPlanPeriod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecurringPlanPeriod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecurringPlanPeriod) ProtoMessage() {}

func (x *RecurringPlanPeriod) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecurringPlanPeriod.ProtoReflect.Descriptor instead.
func (*RecurringPlanPeriod) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{146}
}

func (x *RecurringPlanPeriod) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *RecurringPlanPeriod) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type RecurringSubscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"id" validate:"omitempty,hexadecimal,len=24" param:"subscription_id" faker:"objectIdString"
	//
	// The unique identifier of recurring subscription.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id" validate:"omitempty,hexadecimal,len=24" param:"subscription_id" faker:"objectIdString"`
	// @inject_tag: json:"plan" validate:"required"
	//
	// The recurring plan settings.
	Plan *RecurringPlan `protobuf:"bytes,2,opt,name=plan,proto3" json:"plan" validate:"required"`
	// @inject_tag: json:"customer" validate:"required"
	//
	// Information about the owner of the subscription.
	Customer *RecurringSubscriptionCustomer `protobuf:"bytes,3,opt,name=customer,proto3" json:"customer" validate:"required"`
	// @inject_tag: json:"project" validate:"required"
	//
	// Information about the product of the subscription.
	Project *RecurringSubscriptionProject `protobuf:"bytes,4,opt,name=project,proto3" json:"project" validate:"required"`
	// @inject_tag: json:"status" validate:"required,oneof=active canceled none_renewing"
	//
	// Status of the recurring subscription. May be an active, canceled or none_renewing.
	Status string `protobuf:"bytes,5,opt,name=status,proto3" json:"status" validate:"required,oneof=active canceled none_renewing"`
	// @inject_tag: json:"item_type" validate:"required,oneof=simple, product, key, virtual_currency"
	//
	// The type of the product for subscription. Available values: simple, product, key or virtual_currency.
	ItemType string `protobuf:"bytes,6,opt,name=item_type,json=itemType,proto3" json:"item_type" validate:"required,oneof=simple, product, key, virtual_currency"`
	// @inject_tag: json:"item_list" validate:"omitempty"
	//
	// List of identifiers for a subscription product type or key.
	ItemList []string `protobuf:"bytes,7,rep,name=item_list,json=itemList,proto3" json:"item_list" validate:"omitempty"`
	// @inject_tag: json:"-" validate:"omitempty"
	//
	// The CardPay recurring plan identifier.
	CardpayPlanId string `protobuf:"bytes,8,opt,name=cardpay_plan_id,json=cardpayPlanId,proto3" json:"-" validate:"omitempty"`
	// @inject_tag: json:"-" validate:"omitempty"
	//
	// The CardPay subscription identifier.
	CardpaySubscriptionId string `protobuf:"bytes,9,opt,name=cardpay_subscription_id,json=cardpaySubscriptionId,proto3" json:"-" validate:"omitempty"`
	// @inject_tag: json:"total_amount" validate:"omitempty"
	//
	// The total amount of payments for the subscription.
	TotalAmount float64 `protobuf:"fixed64,10,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount" validate:"omitempty"`
	// @inject_tag: json:"created_at"
	//
	// Date and time the subscription was created.
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,11,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	// @inject_tag: json:"updated_at"
	//
	// Date and time the subscription was updated.
	UpdatedAt *timestamp.Timestamp `protobuf:"bytes,12,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	// @inject_tag: json:"expire_at"
	//
	// Subscription end date and time.
	ExpireAt *timestamp.Timestamp `protobuf:"bytes,13,opt,name=expire_at,json=expireAt,proto3" json:"expire_at"`
	// @inject_tag: json:"last_payment_at"
	//
	// Date and time of the last subscription payment.
	LastPaymentAt *timestamp.Timestamp `protobuf:"bytes,14,opt,name=last_payment_at,json=lastPaymentAt,proto3" json:"last_payment_at"`
	// @inject_tag: json:"canceled_at"
	//
	// Date and time of the canceled subscription.
	CanceledAt *timestamp.Timestamp `protobuf:"bytes,15,opt,name=canceled_at,json=canceledAt,proto3" json:"canceled_at"`
	// @inject_tag: json:"renewal_pending"
	//
	// Subscription pending renewal.
	RenewalPending bool `protobuf:"varint,16,opt,name=renewal_pending,json=renewalPending,proto3" json:"renewal_pending"`
}

func (x *RecurringSubscription) Reset() {
	*x = RecurringSubscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecurringSubscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecurringSubscription) ProtoMessage() {}

func (x *RecurringSubscription) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecurringSubscription.ProtoReflect.Descriptor instead.
func (*RecurringSubscription) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{147}
}

func (x *RecurringSubscription) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RecurringSubscription) GetPlan() *RecurringPlan {
	if x != nil {
		return x.Plan
	}
	return nil
}

func (x *RecurringSubscription) GetCustomer() *RecurringSubscriptionCustomer {
	if x != nil {
		return x.Customer
	}
	return nil
}

func (x *RecurringSubscription) GetProject() *RecurringSubscriptionProject {
	if x != nil {
		return x.Project
	}
	return nil
}

func (x *RecurringSubscription) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *RecurringSubscription) GetItemType() string {
	if x != nil {
		return x.ItemType
	}
	return ""
}

func (x *RecurringSubscription) GetItemList() []string {
	if x != nil {
		return x.ItemList
	}
	return nil
}

func (x *RecurringSubscription) GetCardpayPlanId() string {
	if x != nil {
		return x.CardpayPlanId
	}
	return ""
}

func (x *RecurringSubscription) GetCardpaySubscriptionId() string {
	if x != nil {
		return x.CardpaySubscriptionId
	}
	return ""
}

func (x *RecurringSubscription) GetTotalAmount() float64 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *RecurringSubscription) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *RecurringSubscription) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *RecurringSubscription) GetExpireAt() *timestamp.Timestamp {
	if x != nil {
		return x.ExpireAt
	}
	return nil
}

func (x *RecurringSubscription) GetLastPaymentAt() *timestamp.Timestamp {
	if x != nil {
		return x.LastPaymentAt
	}
	return nil
}

func (x *RecurringSubscription) GetCanceledAt() *timestamp.Timestamp {
	if x != nil {
		return x.CanceledAt
	}
	return nil
}

func (x *RecurringSubscription) GetRenewalPending() bool {
	if x != nil {
		return x.RenewalPending
	}
	return false
}

type SubscriptionOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Amount   float32              `protobuf:"fixed32,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Currency string               `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency,omitempty"`
	Date     *timestamp.Timestamp `protobuf:"bytes,4,opt,name=date,proto3" json:"date,omitempty"`
	// @inject_tag: json:"card_number"
	CardNumber string `protobuf:"bytes,5,opt,name=card_number,json=cardNumber,proto3" json:"card_number"`
	// @inject_tag: json:"product_name"
	ProductName []string `protobuf:"bytes,6,rep,name=product_name,json=productName,proto3" json:"product_name"`
}

func (x *SubscriptionOrder) Reset() {
	*x = SubscriptionOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptionOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionOrder) ProtoMessage() {}

func (x *SubscriptionOrder) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionOrder.ProtoReflect.Descriptor instead.
func (*SubscriptionOrder) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{148}
}

func (x *SubscriptionOrder) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SubscriptionOrder) GetAmount() float32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *SubscriptionOrder) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *SubscriptionOrder) GetDate() *timestamp.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *SubscriptionOrder) GetCardNumber() string {
	if x != nil {
		return x.CardNumber
	}
	return ""
}

func (x *SubscriptionOrder) GetProductName() []string {
	if x != nil {
		return x.ProductName
	}
	return nil
}

type RecurringSubscriptionCustomer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"id" validate:"required,hexadecimal,len=24" faker:"objectIdString"
	//
	// The identifier of customer.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id" validate:"required,hexadecimal,len=24" faker:"objectIdString"`
	// The UUID identifier of customer.
	Uuid string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// The external identifier of customer.
	ExternalId string `protobuf:"bytes,3,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
	// The email address of customer.
	Email string `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	// The phone number of customer.
	Phone string `protobuf:"bytes,5,opt,name=phone,proto3" json:"phone,omitempty"`
}

func (x *RecurringSubscriptionCustomer) Reset() {
	*x = RecurringSubscriptionCustomer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecurringSubscriptionCustomer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecurringSubscriptionCustomer) ProtoMessage() {}

func (x *RecurringSubscriptionCustomer) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecurringSubscriptionCustomer.ProtoReflect.Descriptor instead.
func (*RecurringSubscriptionCustomer) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{149}
}

func (x *RecurringSubscriptionCustomer) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RecurringSubscriptionCustomer) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *RecurringSubscriptionCustomer) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

func (x *RecurringSubscriptionCustomer) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *RecurringSubscriptionCustomer) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

type RecurringSubscriptionProject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"id" validate:"required,hexadecimal,len=24" faker:"objectIdString"
	//
	// The identifier of project.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id" validate:"required,hexadecimal,len=24" faker:"objectIdString"`
	// The multi language name of project.
	Name map[string]string `protobuf:"bytes,2,rep,name=name,proto3" json:"name,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RecurringSubscriptionProject) Reset() {
	*x = RecurringSubscriptionProject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecurringSubscriptionProject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecurringSubscriptionProject) ProtoMessage() {}

func (x *RecurringSubscriptionProject) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecurringSubscriptionProject.ProtoReflect.Descriptor instead.
func (*RecurringSubscriptionProject) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{150}
}

func (x *RecurringSubscriptionProject) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RecurringSubscriptionProject) GetName() map[string]string {
	if x != nil {
		return x.Name
	}
	return nil
}

type CardPayAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Country string `protobuf:"bytes,1,opt,name=country,proto3" json:"country,omitempty"`
	City    string `protobuf:"bytes,2,opt,name=city,proto3" json:"city,omitempty"`
	Phone   string `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
	State   string `protobuf:"bytes,4,opt,name=state,proto3" json:"state,omitempty"`
	Street  string `protobuf:"bytes,5,opt,name=street,proto3" json:"street,omitempty"`
	Zip     string `protobuf:"bytes,6,opt,name=zip,proto3" json:"zip,omitempty"`
}

func (x *CardPayAddress) Reset() {
	*x = CardPayAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardPayAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardPayAddress) ProtoMessage() {}

func (x *CardPayAddress) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardPayAddress.ProtoReflect.Descriptor instead.
func (*CardPayAddress) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{151}
}

func (x *CardPayAddress) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *CardPayAddress) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *CardPayAddress) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *CardPayAddress) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *CardPayAddress) GetStreet() string {
	if x != nil {
		return x.Street
	}
	return ""
}

func (x *CardPayAddress) GetZip() string {
	if x != nil {
		return x.Zip
	}
	return ""
}

type CardPayItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string  `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Count       int32   `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	Price       float64 `protobuf:"fixed64,4,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *CardPayItem) Reset() {
	*x = CardPayItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardPayItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardPayItem) ProtoMessage() {}

func (x *CardPayItem) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardPayItem.ProtoReflect.Descriptor instead.
func (*CardPayItem) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{152}
}

func (x *CardPayItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CardPayItem) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CardPayItem) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *CardPayItem) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

type CardPayMerchantOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//// @inject_tag: validate:"required,hexadecimal,len=24"
	Id              string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Description     string          `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Items           []*CardPayItem  `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
	ShippingAddress *CardPayAddress `protobuf:"bytes,4,opt,name=shipping_address,json=shippingAddress,proto3" json:"shipping_address,omitempty"`
}

func (x *CardPayMerchantOrder) Reset() {
	*x = CardPayMerchantOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardPayMerchantOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardPayMerchantOrder) ProtoMessage() {}

func (x *CardPayMerchantOrder) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardPayMerchantOrder.ProtoReflect.Descriptor instead.
func (*CardPayMerchantOrder) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{153}
}

func (x *CardPayMerchantOrder) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CardPayMerchantOrder) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CardPayMerchantOrder) GetItems() []*CardPayItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *CardPayMerchantOrder) GetShippingAddress() *CardPayAddress {
	if x != nil {
		return x.ShippingAddress
	}
	return nil
}

type CallbackCardPayBankCardAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Holder             string `protobuf:"bytes,1,opt,name=holder,proto3" json:"holder,omitempty"`
	IssuingCountryCode string `protobuf:"bytes,2,opt,name=issuing_country_code,json=issuingCountryCode,proto3" json:"issuing_country_code,omitempty"`
	MaskedPan          string `protobuf:"bytes,3,opt,name=masked_pan,json=maskedPan,proto3" json:"masked_pan,omitempty"`
	Token              string `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *CallbackCardPayBankCardAccount) Reset() {
	*x = CallbackCardPayBankCardAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallbackCardPayBankCardAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallbackCardPayBankCardAccount) ProtoMessage() {}

func (x *CallbackCardPayBankCardAccount) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallbackCardPayBankCardAccount.ProtoReflect.Descriptor instead.
func (*CallbackCardPayBankCardAccount) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{154}
}

func (x *CallbackCardPayBankCardAccount) GetHolder() string {
	if x != nil {
		return x.Holder
	}
	return ""
}

func (x *CallbackCardPayBankCardAccount) GetIssuingCountryCode() string {
	if x != nil {
		return x.IssuingCountryCode
	}
	return ""
}

func (x *CallbackCardPayBankCardAccount) GetMaskedPan() string {
	if x != nil {
		return x.MaskedPan
	}
	return ""
}

func (x *CallbackCardPayBankCardAccount) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type CallbackCardPayCryptoCurrencyAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CryptoAddress       string `protobuf:"bytes,1,opt,name=crypto_address,json=cryptoAddress,proto3" json:"crypto_address,omitempty"`
	CryptoTransactionId string `protobuf:"bytes,2,opt,name=crypto_transaction_id,json=cryptoTransactionId,proto3" json:"crypto_transaction_id,omitempty"`
	PrcAmount           string `protobuf:"bytes,3,opt,name=prc_amount,json=prcAmount,proto3" json:"prc_amount,omitempty"`
	PrcCurrency         string `protobuf:"bytes,4,opt,name=prc_currency,json=prcCurrency,proto3" json:"prc_currency,omitempty"`
}

func (x *CallbackCardPayCryptoCurrencyAccount) Reset() {
	*x = CallbackCardPayCryptoCurrencyAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallbackCardPayCryptoCurrencyAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallbackCardPayCryptoCurrencyAccount) ProtoMessage() {}

func (x *CallbackCardPayCryptoCurrencyAccount) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallbackCardPayCryptoCurrencyAccount.ProtoReflect.Descriptor instead.
func (*CallbackCardPayCryptoCurrencyAccount) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{155}
}

func (x *CallbackCardPayCryptoCurrencyAccount) GetCryptoAddress() string {
	if x != nil {
		return x.CryptoAddress
	}
	return ""
}

func (x *CallbackCardPayCryptoCurrencyAccount) GetCryptoTransactionId() string {
	if x != nil {
		return x.CryptoTransactionId
	}
	return ""
}

func (x *CallbackCardPayCryptoCurrencyAccount) GetPrcAmount() string {
	if x != nil {
		return x.PrcAmount
	}
	return ""
}

func (x *CallbackCardPayCryptoCurrencyAccount) GetPrcCurrency() string {
	if x != nil {
		return x.PrcCurrency
	}
	return ""
}

type CardPayCustomer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email  string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Ip     string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Id     string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Locale string `protobuf:"bytes,4,opt,name=locale,proto3" json:"locale,omitempty"`
}

func (x *CardPayCustomer) Reset() {
	*x = CardPayCustomer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardPayCustomer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardPayCustomer) ProtoMessage() {}

func (x *CardPayCustomer) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardPayCustomer.ProtoReflect.Descriptor instead.
func (*CardPayCustomer) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{156}
}

func (x *CardPayCustomer) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *CardPayCustomer) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *CardPayCustomer) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CardPayCustomer) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

type CardPayEWalletAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CardPayEWalletAccount) Reset() {
	*x = CardPayEWalletAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardPayEWalletAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardPayEWalletAccount) ProtoMessage() {}

func (x *CardPayEWalletAccount) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardPayEWalletAccount.ProtoReflect.Descriptor instead.
func (*CardPayEWalletAccount) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{157}
}

func (x *CardPayEWalletAccount) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CallbackCardPayPaymentData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Amount        float64 `protobuf:"fixed64,2,opt,name=amount,proto3" json:"amount,omitempty"`
	AuthCode      string  `protobuf:"bytes,3,opt,name=auth_code,json=authCode,proto3" json:"auth_code,omitempty"`
	Created       string  `protobuf:"bytes,4,opt,name=created,proto3" json:"created,omitempty"`
	Currency      string  `protobuf:"bytes,5,opt,name=currency,proto3" json:"currency,omitempty"`
	DeclineCode   string  `protobuf:"bytes,6,opt,name=decline_code,json=declineCode,proto3" json:"decline_code,omitempty"`
	DeclineReason string  `protobuf:"bytes,7,opt,name=decline_reason,json=declineReason,proto3" json:"decline_reason,omitempty"`
	Description   string  `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
	Is_3D         bool    `protobuf:"varint,9,opt,name=is_3d,json=is3d,proto3" json:"is_3d,omitempty"`
	Note          string  `protobuf:"bytes,10,opt,name=note,proto3" json:"note,omitempty"`
	Rrn           string  `protobuf:"bytes,11,opt,name=rrn,proto3" json:"rrn,omitempty"`
	Status        string  `protobuf:"bytes,12,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *CallbackCardPayPaymentData) Reset() {
	*x = CallbackCardPayPaymentData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallbackCardPayPaymentData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallbackCardPayPaymentData) ProtoMessage() {}

func (x *CallbackCardPayPaymentData) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallbackCardPayPaymentData.ProtoReflect.Descriptor instead.
func (*CallbackCardPayPaymentData) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{158}
}

func (x *CallbackCardPayPaymentData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CallbackCardPayPaymentData) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *CallbackCardPayPaymentData) GetAuthCode() string {
	if x != nil {
		return x.AuthCode
	}
	return ""
}

func (x *CallbackCardPayPaymentData) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

func (x *CallbackCardPayPaymentData) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *CallbackCardPayPaymentData) GetDeclineCode() string {
	if x != nil {
		return x.DeclineCode
	}
	return ""
}

func (x *CallbackCardPayPaymentData) GetDeclineReason() string {
	if x != nil {
		return x.DeclineReason
	}
	return ""
}

func (x *CallbackCardPayPaymentData) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CallbackCardPayPaymentData) GetIs_3D() bool {
	if x != nil {
		return x.Is_3D
	}
	return false
}

func (x *CallbackCardPayPaymentData) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *CallbackCardPayPaymentData) GetRrn() string {
	if x != nil {
		return x.Rrn
	}
	return ""
}

func (x *CallbackCardPayPaymentData) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type CardPayCallbackRecurringDataFilling struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CardPayCallbackRecurringDataFilling) Reset() {
	*x = CardPayCallbackRecurringDataFilling{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardPayCallbackRecurringDataFilling) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardPayCallbackRecurringDataFilling) ProtoMessage() {}

func (x *CardPayCallbackRecurringDataFilling) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardPayCallbackRecurringDataFilling.ProtoReflect.Descriptor instead.
func (*CardPayCallbackRecurringDataFilling) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{159}
}

func (x *CardPayCallbackRecurringDataFilling) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CardPayCallbackRecurringDataSubscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CardPayCallbackRecurringDataSubscription) Reset() {
	*x = CardPayCallbackRecurringDataSubscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardPayCallbackRecurringDataSubscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardPayCallbackRecurringDataSubscription) ProtoMessage() {}

func (x *CardPayCallbackRecurringDataSubscription) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardPayCallbackRecurringDataSubscription.ProtoReflect.Descriptor instead.
func (*CardPayCallbackRecurringDataSubscription) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{160}
}

func (x *CardPayCallbackRecurringDataSubscription) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CardPayCallbackRecurringData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string                                    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Amount        float64                                   `protobuf:"fixed64,2,opt,name=amount,proto3" json:"amount,omitempty"`
	AuthCode      string                                    `protobuf:"bytes,3,opt,name=auth_code,json=authCode,proto3" json:"auth_code,omitempty"`
	Created       string                                    `protobuf:"bytes,4,opt,name=created,proto3" json:"created,omitempty"`
	Currency      string                                    `protobuf:"bytes,5,opt,name=currency,proto3" json:"currency,omitempty"`
	DeclineCode   string                                    `protobuf:"bytes,6,opt,name=decline_code,json=declineCode,proto3" json:"decline_code,omitempty"`
	DeclineReason string                                    `protobuf:"bytes,7,opt,name=decline_reason,json=declineReason,proto3" json:"decline_reason,omitempty"`
	Description   string                                    `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
	Is_3D         bool                                      `protobuf:"varint,9,opt,name=is_3d,json=is3d,proto3" json:"is_3d,omitempty"`
	Note          string                                    `protobuf:"bytes,10,opt,name=note,proto3" json:"note,omitempty"`
	Rrn           string                                    `protobuf:"bytes,11,opt,name=rrn,proto3" json:"rrn,omitempty"`
	Status        string                                    `protobuf:"bytes,12,opt,name=status,proto3" json:"status,omitempty"`
	Filing        *CardPayCallbackRecurringDataFilling      `protobuf:"bytes,13,opt,name=filing,proto3" json:"filing,omitempty"`
	Subscription  *CardPayCallbackRecurringDataSubscription `protobuf:"bytes,14,opt,name=subscription,proto3" json:"subscription,omitempty"`
}

func (x *CardPayCallbackRecurringData) Reset() {
	*x = CardPayCallbackRecurringData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardPayCallbackRecurringData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardPayCallbackRecurringData) ProtoMessage() {}

func (x *CardPayCallbackRecurringData) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardPayCallbackRecurringData.ProtoReflect.Descriptor instead.
func (*CardPayCallbackRecurringData) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{161}
}

func (x *CardPayCallbackRecurringData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CardPayCallbackRecurringData) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *CardPayCallbackRecurringData) GetAuthCode() string {
	if x != nil {
		return x.AuthCode
	}
	return ""
}

func (x *CardPayCallbackRecurringData) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

func (x *CardPayCallbackRecurringData) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *CardPayCallbackRecurringData) GetDeclineCode() string {
	if x != nil {
		return x.DeclineCode
	}
	return ""
}

func (x *CardPayCallbackRecurringData) GetDeclineReason() string {
	if x != nil {
		return x.DeclineReason
	}
	return ""
}

func (x *CardPayCallbackRecurringData) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CardPayCallbackRecurringData) GetIs_3D() bool {
	if x != nil {
		return x.Is_3D
	}
	return false
}

func (x *CardPayCallbackRecurringData) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *CardPayCallbackRecurringData) GetRrn() string {
	if x != nil {
		return x.Rrn
	}
	return ""
}

func (x *CardPayCallbackRecurringData) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *CardPayCallbackRecurringData) GetFiling() *CardPayCallbackRecurringDataFilling {
	if x != nil {
		return x.Filing
	}
	return nil
}

func (x *CardPayCallbackRecurringData) GetSubscription() *CardPayCallbackRecurringDataSubscription {
	if x != nil {
		return x.Subscription
	}
	return nil
}

type CardPayPaymentCallback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MerchantOrder         *CardPayMerchantOrder                 `protobuf:"bytes,1,opt,name=merchant_order,json=merchantOrder,proto3" json:"merchant_order,omitempty"`
	PaymentMethod         string                                `protobuf:"bytes,2,opt,name=payment_method,json=paymentMethod,proto3" json:"payment_method,omitempty"`
	CallbackTime          string                                `protobuf:"bytes,3,opt,name=callback_time,json=callbackTime,proto3" json:"callback_time,omitempty"`
	CardAccount           *CallbackCardPayBankCardAccount       `protobuf:"bytes,4,opt,name=card_account,json=cardAccount,proto3" json:"card_account,omitempty"`
	CryptocurrencyAccount *CallbackCardPayCryptoCurrencyAccount `protobuf:"bytes,5,opt,name=cryptocurrency_account,json=cryptocurrencyAccount,proto3" json:"cryptocurrency_account,omitempty"`
	Customer              *CardPayCustomer                      `protobuf:"bytes,6,opt,name=customer,proto3" json:"customer,omitempty"`
	EwalletAccount        *CardPayEWalletAccount                `protobuf:"bytes,7,opt,name=ewallet_account,json=ewalletAccount,proto3" json:"ewallet_account,omitempty"`
	// @inject_tag: json:"payment_data,omitempty"
	PaymentData *CallbackCardPayPaymentData `protobuf:"bytes,8,opt,name=payment_data,json=paymentData,proto3" json:"payment_data,omitempty"`
	// @inject_tag: json:"recurring_data,omitempty"
	RecurringData *CardPayCallbackRecurringData `protobuf:"bytes,9,opt,name=recurring_data,json=recurringData,proto3" json:"recurring_data,omitempty"`
}

func (x *CardPayPaymentCallback) Reset() {
	*x = CardPayPaymentCallback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardPayPaymentCallback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardPayPaymentCallback) ProtoMessage() {}

func (x *CardPayPaymentCallback) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardPayPaymentCallback.ProtoReflect.Descriptor instead.
func (*CardPayPaymentCallback) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{162}
}

func (x *CardPayPaymentCallback) GetMerchantOrder() *CardPayMerchantOrder {
	if x != nil {
		return x.MerchantOrder
	}
	return nil
}

func (x *CardPayPaymentCallback) GetPaymentMethod() string {
	if x != nil {
		return x.PaymentMethod
	}
	return ""
}

func (x *CardPayPaymentCallback) GetCallbackTime() string {
	if x != nil {
		return x.CallbackTime
	}
	return ""
}

func (x *CardPayPaymentCallback) GetCardAccount() *CallbackCardPayBankCardAccount {
	if x != nil {
		return x.CardAccount
	}
	return nil
}

func (x *CardPayPaymentCallback) GetCryptocurrencyAccount() *CallbackCardPayCryptoCurrencyAccount {
	if x != nil {
		return x.CryptocurrencyAccount
	}
	return nil
}

func (x *CardPayPaymentCallback) GetCustomer() *CardPayCustomer {
	if x != nil {
		return x.Customer
	}
	return nil
}

func (x *CardPayPaymentCallback) GetEwalletAccount() *CardPayEWalletAccount {
	if x != nil {
		return x.EwalletAccount
	}
	return nil
}

func (x *CardPayPaymentCallback) GetPaymentData() *CallbackCardPayPaymentData {
	if x != nil {
		return x.PaymentData
	}
	return nil
}

func (x *CardPayPaymentCallback) GetRecurringData() *CardPayCallbackRecurringData {
	if x != nil {
		return x.RecurringData
	}
	return nil
}

type CardPayRefundCallbackRefundData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: validate:"required,numeric,gt=0"
	Amount float64 `protobuf:"fixed64,1,opt,name=amount,proto3" json:"amount,omitempty" validate:"required,numeric,gt=0"`
	// @inject_tag: validate:"required"
	Created string `protobuf:"bytes,2,opt,name=created,proto3" json:"created,omitempty" validate:"required"`
	// @inject_tag: validate:"required,alpha,len=3"
	Currency string `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency,omitempty" validate:"required,alpha,len=3"`
	// @inject_tag: validate:"required"
	Id string `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty" validate:"required"`
	// @inject_tag: validate:"required"
	Status        string `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty" validate:"required"`
	AuthCode      string `protobuf:"bytes,6,opt,name=auth_code,json=authCode,proto3" json:"auth_code,omitempty"`
	DeclineCode   string `protobuf:"bytes,7,opt,name=decline_code,json=declineCode,proto3" json:"decline_code,omitempty"`
	DeclineReason string `protobuf:"bytes,8,opt,name=decline_reason,json=declineReason,proto3" json:"decline_reason,omitempty"`
	Is_3D         bool   `protobuf:"varint,9,opt,name=is_3d,json=is3d,proto3" json:"is_3d,omitempty"`
	Rrn           string `protobuf:"bytes,10,opt,name=rrn,proto3" json:"rrn,omitempty"`
}

func (x *CardPayRefundCallbackRefundData) Reset() {
	*x = CardPayRefundCallbackRefundData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardPayRefundCallbackRefundData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardPayRefundCallbackRefundData) ProtoMessage() {}

func (x *CardPayRefundCallbackRefundData) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardPayRefundCallbackRefundData.ProtoReflect.Descriptor instead.
func (*CardPayRefundCallbackRefundData) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{163}
}

func (x *CardPayRefundCallbackRefundData) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *CardPayRefundCallbackRefundData) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

func (x *CardPayRefundCallbackRefundData) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *CardPayRefundCallbackRefundData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CardPayRefundCallbackRefundData) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *CardPayRefundCallbackRefundData) GetAuthCode() string {
	if x != nil {
		return x.AuthCode
	}
	return ""
}

func (x *CardPayRefundCallbackRefundData) GetDeclineCode() string {
	if x != nil {
		return x.DeclineCode
	}
	return ""
}

func (x *CardPayRefundCallbackRefundData) GetDeclineReason() string {
	if x != nil {
		return x.DeclineReason
	}
	return ""
}

func (x *CardPayRefundCallbackRefundData) GetIs_3D() bool {
	if x != nil {
		return x.Is_3D
	}
	return false
}

func (x *CardPayRefundCallbackRefundData) GetRrn() string {
	if x != nil {
		return x.Rrn
	}
	return ""
}

type CardPayRefundCallbackPaymentData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: validate:"required"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" validate:"required"`
	// @inject_tag: validate:"numeric,gte=0"
	RemainingAmount float64 `protobuf:"fixed64,2,opt,name=remaining_amount,json=remainingAmount,proto3" json:"remaining_amount,omitempty" validate:"numeric,gte=0"`
}

func (x *CardPayRefundCallbackPaymentData) Reset() {
	*x = CardPayRefundCallbackPaymentData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardPayRefundCallbackPaymentData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardPayRefundCallbackPaymentData) ProtoMessage() {}

func (x *CardPayRefundCallbackPaymentData) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardPayRefundCallbackPaymentData.ProtoReflect.Descriptor instead.
func (*CardPayRefundCallbackPaymentData) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{164}
}

func (x *CardPayRefundCallbackPaymentData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CardPayRefundCallbackPaymentData) GetRemainingAmount() float64 {
	if x != nil {
		return x.RemainingAmount
	}
	return 0
}

type CardPayRefundCallback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: validate:"required"
	MerchantOrder *CardPayMerchantOrder `protobuf:"bytes,1,opt,name=merchant_order,json=merchantOrder,proto3" json:"merchant_order,omitempty" validate:"required"`
	// @inject_tag: validate:"required"
	PaymentMethod string `protobuf:"bytes,2,opt,name=payment_method,json=paymentMethod,proto3" json:"payment_method,omitempty" validate:"required"`
	// @inject_tag: validate:"required"
	PaymentData *CardPayRefundCallbackPaymentData `protobuf:"bytes,3,opt,name=payment_data,json=paymentData,proto3" json:"payment_data,omitempty" validate:"required"`
	// @inject_tag: validate:"required"
	RefundData   *CardPayRefundCallbackRefundData `protobuf:"bytes,4,opt,name=refund_data,json=refundData,proto3" json:"refund_data,omitempty" validate:"required"`
	CallbackTime string                           `protobuf:"bytes,5,opt,name=callback_time,json=callbackTime,proto3" json:"callback_time,omitempty"`
	// @inject_tag: json:"-"
	CardAccount *CallbackCardPayBankCardAccount `protobuf:"bytes,6,opt,name=card_account,json=cardAccount,proto3" json:"-"`
	Customer    *CardPayCustomer                `protobuf:"bytes,7,opt,name=customer,proto3" json:"customer,omitempty"`
	// @inject_tag: json:"-"
	EwalletAccount *CardPayEWalletAccount `protobuf:"bytes,8,opt,name=ewallet_account,json=ewalletAccount,proto3" json:"-"`
}

func (x *CardPayRefundCallback) Reset() {
	*x = CardPayRefundCallback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardPayRefundCallback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardPayRefundCallback) ProtoMessage() {}

func (x *CardPayRefundCallback) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardPayRefundCallback.ProtoReflect.Descriptor instead.
func (*CardPayRefundCallback) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{165}
}

func (x *CardPayRefundCallback) GetMerchantOrder() *CardPayMerchantOrder {
	if x != nil {
		return x.MerchantOrder
	}
	return nil
}

func (x *CardPayRefundCallback) GetPaymentMethod() string {
	if x != nil {
		return x.PaymentMethod
	}
	return ""
}

func (x *CardPayRefundCallback) GetPaymentData() *CardPayRefundCallbackPaymentData {
	if x != nil {
		return x.PaymentData
	}
	return nil
}

func (x *CardPayRefundCallback) GetRefundData() *CardPayRefundCallbackRefundData {
	if x != nil {
		return x.RefundData
	}
	return nil
}

func (x *CardPayRefundCallback) GetCallbackTime() string {
	if x != nil {
		return x.CallbackTime
	}
	return ""
}

func (x *CardPayRefundCallback) GetCardAccount() *CallbackCardPayBankCardAccount {
	if x != nil {
		return x.CardAccount
	}
	return nil
}

func (x *CardPayRefundCallback) GetCustomer() *CardPayCustomer {
	if x != nil {
		return x.Customer
	}
	return nil
}

func (x *CardPayRefundCallback) GetEwalletAccount() *CardPayEWalletAccount {
	if x != nil {
		return x.EwalletAccount
	}
	return nil
}

type WebHookPaymentMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Order      *Order `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`
	ForceRetry bool   `protobuf:"varint,2,opt,name=force_retry,json=forceRetry,proto3" json:"force_retry,omitempty"`
}

func (x *WebHookPaymentMessage) Reset() {
	*x = WebHookPaymentMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebHookPaymentMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebHookPaymentMessage) ProtoMessage() {}

func (x *WebHookPaymentMessage) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebHookPaymentMessage.ProtoReflect.Descriptor instead.
func (*WebHookPaymentMessage) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{166}
}

func (x *WebHookPaymentMessage) GetOrder() *Order {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *WebHookPaymentMessage) GetForceRetry() bool {
	if x != nil {
		return x.ForceRetry
	}
	return false
}

var File_billing_proto protoreflect.FileDescriptor

var file_billing_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x26, 0x0a, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x65,
	0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x72, 0x75, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x72,
	0x75, 0x22, 0xa0, 0x0d, 0x0a, 0x12, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x75, 0x72, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x75, 0x72, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x72, 0x6c, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x72, 0x6c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x72,
	0x6c, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x75, 0x72, 0x6c, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x75,
	0x72, 0x6c, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75,
	0x72, 0x6c, 0x46, 0x61, 0x69, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x79,
	0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61,
	0x79, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x12, 0x49, 0x0a, 0x0a, 0x72, 0x61, 0x77, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x12,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x52, 0x61, 0x77, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x09, 0x72, 0x61, 0x77, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x72,
	0x61, 0x77, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72,
	0x61, 0x77, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6a, 0x73, 0x6f,
	0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x45, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x5b,
	0x0a, 0x10, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x55,
	0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65,
	0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x45, 0x6d, 0x62, 0x65, 0x64,
	0x64, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x26, 0x0a, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x73, 0x70, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x73, 0x70, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x72, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x74, 0x6d, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x74, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x74,
	0x6d, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x75, 0x74, 0x6d, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x74, 0x6d,
	0x5f, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x75, 0x74, 0x6d, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x12, 0x3c, 0x0a, 0x1b,
	0x69, 0x73, 0x5f, 0x62, 0x75, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x27, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x17, 0x69, 0x73, 0x42, 0x75, 0x79, 0x46, 0x6f, 0x72, 0x56, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f,
	0x6f, 0x6b, 0x69, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6f, 0x6b,
	0x69, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x75, 0x74, 0x74,
	0x6f, 0x6e, 0x43, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x6f, 0x72, 0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x63,
	0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x2c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50,
	0x6c, 0x61, 0x6e, 0x49, 0x64, 0x1a, 0x3c, 0x0a, 0x0e, 0x52, 0x61, 0x77, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x42, 0x0a, 0x14, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x80, 0x01, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e,
	0x43, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc8, 0x11, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x5f, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x34, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x2b, 0x0a, 0x11, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x61, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x39, 0x0a,
	0x19, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x16, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x55, 0x72, 0x6c, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x5f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x55,
	0x72, 0x6c, 0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x64, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x72,
	0x6c, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x44,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72,
	0x6c, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x5f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x6d,
	0x69, 0x6e, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x6d, 0x69, 0x6e, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x78,
	0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x30, 0x0a, 0x14,
	0x69, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x6f, 0x75, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x73, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x2d, 0x0a,
	0x12, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11,
	0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x65, 0x6e, 0x64, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x72, 0x6c, 0x5f,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x72, 0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x75, 0x72, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x75, 0x72, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x72, 0x6c, 0x5f, 0x72, 0x65, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x75, 0x72, 0x6c, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x46, 0x61, 0x69, 0x6c,
	0x12, 0x30, 0x0a, 0x14, 0x75, 0x72, 0x6c, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x75, 0x72, 0x6c, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x75, 0x72, 0x6c, 0x5f, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x75, 0x72, 0x6c, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x62, 0x61, 0x63, 0x6b, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a,
	0x12, 0x75, 0x72, 0x6c, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x75, 0x72, 0x6c, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x75,
	0x72, 0x6c, 0x5f, 0x66, 0x72, 0x61, 0x75, 0x64, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x72, 0x6c, 0x46, 0x72, 0x61, 0x75, 0x64,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x75, 0x72, 0x6c, 0x5f, 0x72,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x75, 0x72, 0x6c, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x50, 0x0a, 0x10, 0x66,
	0x75, 0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x66, 0x75,
	0x6c, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a,
	0x11, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x68, 0x6f, 0x72, 0x74,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x10, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73,
	0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x48, 0x61, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x05,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x10,
	0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x61, 0x74, 0x5f,
	0x70, 0x61, 0x79, 0x65, 0x72, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x61, 0x74,
	0x50, 0x61, 0x79, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x11, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x10, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x40, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x5f,
	0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x57, 0x65, 0x62, 0x48, 0x6f, 0x6f, 0x6b, 0x54,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0e, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x54,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f,
	0x6b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x51, 0x0a, 0x11, 0x66, 0x6f, 0x72,
	0x6d, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x28,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x54, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x66, 0x6f, 0x72,
	0x6d, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x65, 0x78, 0x74, 0x1a, 0x37, 0x0a, 0x09,
	0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14, 0x46, 0x75, 0x6c, 0x6c, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x43, 0x0a, 0x15, 0x53, 0x68, 0x6f,
	0x72, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42,
	0x0a, 0x14, 0x46, 0x6f, 0x72, 0x6d, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x65, 0x78,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xbc, 0x01, 0x0a, 0x0e, 0x57, 0x65, 0x62, 0x48, 0x6f, 0x6f, 0x6b, 0x54, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x34, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x4a, 0x0a, 0x10, 0x76,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x28, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x4b, 0x65, 0x79, 0x73, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x6b, 0x65, 0x79,
	0x73, 0x22, 0xb8, 0x01, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x54, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x6f, 0x6e, 0x5f, 0x65, 0x78, 0x69,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x6e, 0x6f, 0x6e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63,
	0x74, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x2b, 0x0a, 0x11, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x6e, 0x63, 0x6f,
	0x72, 0x72, 0x65, 0x63, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xbf, 0x01, 0x0a,
	0x16, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x6f, 0x6e, 0x5f, 0x65,
	0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x6e, 0x6f, 0x6e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x72, 0x72,
	0x65, 0x63, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x6e,
	0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x2a,
	0x0a, 0x0b, 0x4b, 0x65, 0x79, 0x73, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x73, 0x50, 0x61, 0x73, 0x73, 0x65, 0x64, 0x22, 0xa5, 0x08, 0x0a, 0x0c, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x72, 0x6c, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x72, 0x6c, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x72, 0x6c, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x72, 0x6c, 0x46, 0x61, 0x69, 0x6c, 0x12, 0x23, 0x0a,
	0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65,
	0x79, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x65,
	0x6e, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x2a, 0x0a,
	0x11, 0x75, 0x72, 0x6c, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x72, 0x6c, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x75, 0x72, 0x6c,
	0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x75, 0x72, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x61, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x34, 0x0a, 0x16, 0x75, 0x72, 0x6c, 0x5f, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x75, 0x72, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x62, 0x61, 0x63, 0x6b, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12,
	0x75, 0x72, 0x6c, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x75, 0x72, 0x6c, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x72,
	0x6c, 0x5f, 0x66, 0x72, 0x61, 0x75, 0x64, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x72, 0x6c, 0x46, 0x72, 0x61, 0x75, 0x64, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x75, 0x72, 0x6c, 0x5f, 0x72, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x75, 0x72, 0x6c, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3a, 0x0a, 0x19,
	0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79,
	0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x17, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x52, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x4d, 0x0a, 0x11, 0x72, 0x65, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x10, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x44, 0x0a, 0x10, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x12, 0x56, 0x0a,
	0x11, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e,
	0x46, 0x6f, 0x72, 0x6d, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x65, 0x78, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x66, 0x6f, 0x72, 0x6d, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x54, 0x65, 0x78, 0x74, 0x1a, 0x37, 0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42,
	0x0a, 0x14, 0x46, 0x6f, 0x72, 0x6d, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x65, 0x78,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x96, 0x01, 0x0a, 0x0f, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x42, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x52, 0x0a,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c,
	0x52, 0x09, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x22, 0x5a, 0x0a, 0x18, 0x4d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x54, 0x65,
	0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x22, 0x77, 0x0a, 0x19, 0x4d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xa7, 0x02, 0x0a, 0x0f, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x6e,
	0x6b, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25,
	0x0a, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x77, 0x69, 0x66, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x77, 0x69, 0x66, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x33, 0x0a, 0x15, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64,
	0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x1b, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x19, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x5c, 0x0a, 0x12, 0x4d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd8, 0x01, 0x0a, 0x0c, 0x4d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x11, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x65, 0x22, 0xf3, 0x02, 0x0a, 0x13, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x29, 0x0a, 0x10, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x6c, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x65,
	0x62, 0x73, 0x69, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x65, 0x62,
	0x73, 0x69, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x7a, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x7a, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x12, 0x2f, 0x0a, 0x13, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x78, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x80, 0x01, 0x0a, 0x16, 0x4d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x53,
	0x74, 0x65, 0x70, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x62, 0x61, 0x6e,
	0x6b, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x22, 0x7d, 0x0a, 0x25,
	0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x69,
	0x67, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x69, 0x67, 0x6e, 0x55, 0x72, 0x6c,
	0x12, 0x39, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x22, 0x98, 0x03, 0x0a, 0x1e,
	0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1f,
	0x0a, 0x0b, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x55, 0x72, 0x6c, 0x12,
	0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x30, 0x0a, 0x14,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x32,
	0x0a, 0x15, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x73, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x73, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x12, 0x5a, 0x0a, 0x11, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x69,
	0x67, 0x6e, 0x55, 0x72, 0x6c, 0x52, 0x0f, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x53,
	0x69, 0x67, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x4e, 0x0a, 0x0b, 0x70, 0x73, 0x5f, 0x73, 0x69, 0x67,
	0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x62, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x41, 0x67,
	0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x72, 0x6c, 0x52, 0x09, 0x70, 0x73, 0x53,
	0x69, 0x67, 0x6e, 0x55, 0x72, 0x6c, 0x22, 0xd3, 0x03, 0x0a, 0x0e, 0x4d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x12, 0x3d, 0x0a, 0x07, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x54, 0x61, 0x72,
	0x69, 0x66, 0x66, 0x52, 0x61, 0x74, 0x65, 0x73, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x07, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x06, 0x70, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x69, 0x66,
	0x66, 0x52, 0x61, 0x74, 0x65, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x06, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x6f,
	0x6d, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x68, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x0a, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x52, 0x61, 0x74, 0x65, 0x73, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x40, 0x0a, 0x06, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x52, 0x61,
	0x74, 0x65, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x06, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x51, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x69, 0x6d,
	0x61, 0x6c, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x2e, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c,
	0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x6d, 0x69, 0x6e,
	0x69, 0x6d, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x1a, 0x40, 0x0a, 0x12, 0x4d, 0x69,
	0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xce, 0x12, 0x0a,
	0x08, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x34, 0x0a, 0x08,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x73, 0x12, 0x32, 0x0a, 0x07, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x62,
	0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x44, 0x0a, 0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73,
	0x5f, 0x76, 0x61, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x56, 0x61, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x40, 0x0a, 0x1d, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x6f, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x69, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x68, 0x61, 0x73, 0x5f, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x14, 0x68, 0x61, 0x73, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x61, 0x73, 0x5f,
	0x70, 0x73, 0x70, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x68, 0x61, 0x73, 0x50, 0x73, 0x70, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4c, 0x61, 0x73, 0x74,
	0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x12,
	0x4e, 0x0a, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x69, 0x61, 0x5f, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x56, 0x69, 0x61, 0x4d, 0x61, 0x69, 0x6c, 0x12, 0x2c, 0x0a,
	0x12, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x6c,
	0x69, 0x6e, 0x6b, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x61, 0x69, 0x6c, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x2a, 0x0a, 0x11, 0x73,
	0x33, 0x5f, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x33, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x10, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f,
	0x63, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x22, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x69, 0x6e, 0x5f, 0x70,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0f, 0x6d, 0x69, 0x6e, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x19, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12,
	0x30, 0x0a, 0x14, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x25, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x72,
	0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x44, 0x61, 0x79,
	0x73, 0x12, 0x68, 0x0a, 0x31, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x62, 0x61, 0x63, 0x6b, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x26, 0x20, 0x01, 0x28, 0x01, 0x52, 0x2d, 0x72, 0x6f,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x27, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x69, 0x74, 0x65, 0x6d, 0x4d,
	0x69, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x16,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x69, 0x74,
	0x65, 0x6d, 0x4d, 0x69, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x66, 0x75, 0x67, 0x6f, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x65, 0x6e,
	0x74, 0x72, 0x69, 0x66, 0x75, 0x67, 0x6f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x61, 0x0a, 0x18,
	0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x16, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x35, 0x0a, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x53, 0x74, 0x65, 0x70, 0x73, 0x52,
	0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x2f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x4f, 0x0a, 0x16, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x13, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x61, 0x73, 0x5f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x32, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x68,
	0x61, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x67,
	0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x33,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c,
	0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x34, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x12, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2f, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x69, 0x66,
	0x66, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66,
	0x52, 0x06, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x12, 0x34, 0x0a, 0x16, 0x6d, 0x61, 0x6e, 0x75,
	0x61, 0x6c, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x36, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c,
	0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x6d, 0x63, 0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x63, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x6d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x6d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x6f, 0x6e, 0x74, 0x5f, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x5f, 0x76, 0x61, 0x74, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x64, 0x6f, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x56, 0x61, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x61, 0x70, 0x69, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x61, 0x70, 0x69, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x61, 0x0a, 0x13, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8e, 0x04,
	0x0a, 0x11, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x36,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x34, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x07,
	0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x42, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x32, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x07,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x16, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x13, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x44, 0x0a, 0x10, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x22, 0x8b,
	0x01, 0x0a, 0x0e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x61, 0x73,
	0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x68, 0x61, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x22, 0x40, 0x0a, 0x1a,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e,
	0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x74, 0x6f, 0x22, 0xdf,
	0x02, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x69, 0x73, 0x52, 0x65, 0x61, 0x64, 0x12, 0x3f, 0x0a, 0x08, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73,
	0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x22, 0x6d, 0x0a, 0x10, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x46, 0x65, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0d, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x61, 0x74, 0x65, 0x22,
	0x66, 0x0a, 0x08, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x61, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x72,
	0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x7a, 0x0a, 0x13, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x22, 0xd3, 0x04, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65,
	0x12, 0x36, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x63, 0x68, 0x5f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x63, 0x68,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f,
	0x6e, 0x65, 0x77, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x12, 0x35, 0x0a, 0x17, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x6e, 0x65, 0x77, 0x5f,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x1a, 0x3b, 0x0a, 0x0d,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4b, 0x0a, 0x1d, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xce, 0x22, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x12, 0x4a,
	0x0a, 0x0c, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x70, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11,
	0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x73, 0x61, 0x6c, 0x65,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x61,
	0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x73, 0x61, 0x6c,
	0x65, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x61, 0x6c, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x2c,
	0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x72, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x14,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x26, 0x0a, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x12, 0x45, 0x0a, 0x0f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0e, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x03, 0x74, 0x61, 0x78,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x61, 0x78, 0x52, 0x03, 0x74, 0x61, 0x78, 0x12, 0x42,
	0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0x28, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x38, 0x0a, 0x06,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x06,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x38, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x4e, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x2f, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x55, 0x0a, 0x19, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x16, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x48, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x26, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x5e, 0x0a, 0x1e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x1a, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x4a,
	0x73, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3f, 0x0a,
	0x1c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f,
	0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x2a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x19, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x50, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x65,
	0x0a, 0x19, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x2b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x54,
	0x78, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x16, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x54, 0x78, 0x6e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x54, 0x0a, 0x12, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x65, 0x73, 0x18, 0x2c, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x73, 0x69,
	0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x65, 0x73, 0x12, 0x54, 0x0a, 0x19, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x66, 0x6f,
	0x72, 0x6d, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x15, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x46, 0x6f, 0x72, 0x6d, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x3b, 0x0a, 0x1a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18,
	0x2e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x75, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x2f, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x5b, 0x0a, 0x15, 0x69, 0x73,
	0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x73,
	0x65, 0x6e, 0x74, 0x18, 0x30, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x73, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x13, 0x69, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x13, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x31,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x12, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x37, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x46, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a,
	0x10, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x74, 0x5f, 0x64, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x36, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x56, 0x61, 0x74, 0x44, 0x65,
	0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x45, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6b,
	0x65, 0x79, 0x73, 0x18, 0x47, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12,
	0x35, 0x0a, 0x17, 0x69, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x48, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x14, 0x69, 0x73, 0x4b, 0x65, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x49, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x4a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a,
	0x1b, 0x69, 0x73, 0x5f, 0x62, 0x75, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x76, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x4b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x17, 0x69, 0x73, 0x42, 0x75, 0x79, 0x46, 0x6f, 0x72, 0x56, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x6d,
	0x63, 0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x63, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x4d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x68,
	0x69, 0x67, 0x68, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x69, 0x73, 0x48, 0x69, 0x67, 0x68, 0x52, 0x69, 0x73, 0x6b, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x73,
	0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x64, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x51, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c,
	0x0a, 0x12, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x70, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x18, 0x52, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x3a, 0x0a, 0x1a,
	0x69, 0x73, 0x5f, 0x69, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6d, 0x69,
	0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x53, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x16, 0x69, 0x73, 0x49, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4d, 0x69, 0x73,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x42, 0x69, 0x6e, 0x12, 0x44, 0x0a, 0x1f, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x54, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1b, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2a,
	0x0a, 0x11, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x18, 0x55, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x52, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x61,
	0x74, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x18, 0x56, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76,
	0x61, 0x74, 0x50, 0x61, 0x79, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x57, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x69, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c,
	0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x18, 0x58, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x73, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x59, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x6f, 0x72, 0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x43, 0x0a, 0x0d,
	0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x5a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x6f,
	0x79, 0x61, 0x6c, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x38, 0x0a,
	0x0b, 0x6e, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x18, 0x5c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x0a, 0x6e, 0x65, 0x74,
	0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x12, 0x29, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x5d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x03, 0x66,
	0x65, 0x65, 0x12, 0x4e, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x5e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x11, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x5f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67,
	0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64,
	0x18, 0x60, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e,
	0x67, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x19, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x61, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e,
	0x67, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x2a, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x61,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x62, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x75,
	0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x49,
	0x0a, 0x1b, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x54,
	0x78, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x44, 0x0a, 0x16, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x46, 0x0a, 0x18, 0x49, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x67, 0x0a, 0x16, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x61, 0x74,
	0x65, 0x45, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x22, 0x31, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x22, 0x86, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x73,
	0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x32, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x69, 0x73, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x41, 0x32, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x22, 0xff, 0x03, 0x0a,
	0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x6b, 0x75, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x73, 0x6b, 0x75, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x3c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4b,
	0x0a, 0x0d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x82, 0x04, 0x0a, 0x12,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2a, 0x0a,
	0x11, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x61, 0x76, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x73, 0x61, 0x76, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x61, 0x72, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x43, 0x61, 0x72, 0x64, 0x52,
	0x04, 0x63, 0x61, 0x72, 0x64, 0x12, 0x34, 0x0a, 0x06, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x52, 0x06, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x45, 0x0a, 0x0f, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x43, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x52, 0x0e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x22, 0x8f, 0x02, 0x0a, 0x13, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x27, 0x0a,
	0x0f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x43, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x55, 0x72, 0x6c, 0x12,
	0x19, 0x0a, 0x08, 0x6d, 0x63, 0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x63, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x62, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x62, 0x72, 0x61,
	0x6e, 0x64, 0x22, 0xd8, 0x02, 0x0a, 0x0d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x2f, 0x0a, 0x13, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x39, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x22, 0xf1, 0x01,
	0x0a, 0x11, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x43,
	0x61, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x72, 0x73, 0x74, 0x36, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x72, 0x73, 0x74, 0x36, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x61, 0x73, 0x74, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x73, 0x74,
	0x34, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x79, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x59, 0x65, 0x61, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x72,
	0x61, 0x6e, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x33,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x33,
	0x64, 0x22, 0x45, 0x0a, 0x13, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x72, 0x61, 0x6e,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x45, 0x0a, 0x13, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x12,
	0x14, 0x0a, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x62, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22,
	0xc6, 0x01, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x2b, 0x0a, 0x11, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x61, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x39, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xb1, 0x07, 0x0a, 0x0d, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x10, 0x6d, 0x69, 0x6e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x10, 0x6d, 0x61, 0x78, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x12, 0x1b, 0x0a, 0x09,
	0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x0d, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x5f, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x72,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x72,
	0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12,
	0x27, 0x0a, 0x0f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x1a, 0x5d, 0x0a, 0x11, 0x54, 0x65, 0x73, 0x74,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x63, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x36, 0x0a, 0x0a,
	0x43, 0x61, 0x72, 0x64, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f,
	0x6e, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68,
	0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x79, 0x65, 0x61, 0x72, 0x22, 0x7b, 0x0a, 0x09, 0x53, 0x61, 0x76, 0x65, 0x64, 0x43, 0x61, 0x72,
	0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x70, 0x61, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x68, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x48, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x43,
	0x61, 0x72, 0x64, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x22, 0xec, 0x01, 0x0a, 0x18, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72,
	0x6d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x25, 0x0a, 0x0e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x70, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x67,
	0x65, 0x78, 0x70, 0x12, 0x26, 0x0a, 0x0f, 0x68, 0x61, 0x73, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x64,
	0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x68, 0x61,
	0x73, 0x53, 0x61, 0x76, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x33, 0x0a, 0x0b, 0x73,
	0x61, 0x76, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x64,
	0x43, 0x61, 0x72, 0x64, 0x52, 0x0a, 0x73, 0x61, 0x76, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73,
	0x22, 0x5d, 0x0a, 0x2d, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x50, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03,
	0x66, 0x65, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22,
	0x95, 0x01, 0x0a, 0x20, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x5f, 0x0a, 0x0f, 0x70, 0x65, 0x72, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x36, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x50,
	0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x70, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xce, 0x01, 0x0a, 0x20, 0x4d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x2b, 0x0a,
	0x11, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x6c, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x3c, 0x0a, 0x1a, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x22, 0x49, 0x0a, 0x23, 0x4d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0xa1, 0x02, 0x0a, 0x15, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x53, 0x0a,
	0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0x49, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a,
	0x0b, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x69,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69,
	0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x53, 0x0a, 0x0f, 0x52, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x50, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x7a, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x7a, 0x69, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x31, 0x0a, 0x0b,
	0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22,
	0x93, 0x04, 0x0a, 0x06, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x0e, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x37, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x52,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x50, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09,
	0x70, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x61, 0x6c,
	0x65, 0x73, 0x5f, 0x74, 0x61, 0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x73, 0x61,
	0x6c, 0x65, 0x73, 0x54, 0x61, 0x78, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69,
	0x73, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x28, 0x0a, 0x10, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0xe9, 0x01, 0x0a, 0x1c, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0d,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x39, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x22, 0xd3, 0x01, 0x0a, 0x10, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xb3, 0x01, 0x0a, 0x11, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x49, 0x70, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x70, 0x12, 0x39, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x70, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x70, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x36, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xb8, 0x01,
	0x0a, 0x16, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x73,
	0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x6d, 0x0a, 0x1a, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x39, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xfb, 0x0a, 0x0a, 0x08, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x63, 0x68, 0x5f, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x63, 0x68, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02,
	0x69, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x12, 0x36, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x39, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18,
	0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x70, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x09, 0x69, 0x70, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x48, 0x0a, 0x0f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18,
	0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x4a, 0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65,
	0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x5b, 0x0a, 0x17, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x12, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x15, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x3b, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x13, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x73, 0x61, 0x6c,
	0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53,
	0x61, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x73, 0x61,
	0x6c, 0x65, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x61, 0x6c, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x2a, 0x0a, 0x11, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x17, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x51, 0x0a, 0x10, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x60, 0x0a, 0x14, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd4, 0x01, 0x0a, 0x13, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x37, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74,
	0x78, 0x6e, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x78, 0x6e,
	0x41, 0x74, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x78, 0x6e, 0x41, 0x74, 0x12, 0x3d, 0x0a,
	0x07, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x76, 0x65,
	0x6e, 0x75, 0x65, 0x52, 0x07, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x22, 0x4c, 0x0a, 0x18,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49,
	0x74, 0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x22, 0x88, 0x01, 0x0a, 0x1c, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x74,
	0x65, 0x6d, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x78, 0x6e, 0x41, 0x74, 0x12, 0x34, 0x0a, 0x07, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x32, 0x0a, 0x06, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x72,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x22, 0x64, 0x0a, 0x1a, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x76, 0x65,
	0x6e, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x72,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x47, 0x0a, 0x13, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x22, 0x47, 0x0a, 0x13, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x22, 0x28, 0x0a,
	0x10, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x70, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2c, 0x0a, 0x14, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x26, 0x0a, 0x0e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x73,
	0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8d, 0x04,
	0x0a, 0x09, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x32, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x55, 0x73, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x29, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x69, 0x70, 0x12, 0x35, 0x0a, 0x06, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3c, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x73, 0x65, 0x72,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x46, 0x0a,
	0x16, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x66, 0x61, 0x69, 0x6c, 0x22, 0x59, 0x0a, 0x11, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x6b,
	0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x6b, 0x75, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x22, 0xd3, 0x04, 0x0a, 0x0d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x3e, 0x0a, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x55, 0x72, 0x6c, 0x52, 0x09, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x55, 0x72,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x49, 0x64,
	0x73, 0x12, 0x40, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x1b, 0x69, 0x73, 0x5f, 0x62,
	0x75, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x69,
	0x73, 0x42, 0x75, 0x79, 0x46, 0x6f, 0x72, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e,
	0x5f, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x43, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a,
	0x11, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72,
	0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x86, 0x02, 0x0a, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6d, 0x62, 0x65,
	0x64, 0x64, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x65, 0x6d, 0x62, 0x65,
	0x64, 0x64, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x74, 0x6d,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75,
	0x74, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x74, 0x6d, 0x5f,
	0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x74,
	0x6d, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x74, 0x6d, 0x5f, 0x63,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75,
	0x74, 0x6d, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x22,
	0xc1, 0x01, 0x0a, 0x17, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x55, 0x72, 0x6c, 0x22, 0x2e, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x6f, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x73, 0x6f, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0x3f, 0x0a, 0x13, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x56, 0x61,
	0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65,
	0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x77,
	0x6f, 0x72, 0x6c, 0x64, 0x22, 0xfc, 0x06, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x73, 0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x32, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x73, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x41, 0x32,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12,
	0x25, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x61, 0x74, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x76, 0x61, 0x74,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x61, 0x74, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76,
	0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x12, 0x41, 0x0a, 0x0d, 0x76, 0x61, 0x74, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x56, 0x61, 0x74, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x0c, 0x76, 0x61, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x76, 0x61, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x76,
	0x61, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x2a, 0x0a,
	0x11, 0x76, 0x61, 0x74, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x61,
	0x79, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x76, 0x61, 0x74, 0x44, 0x65, 0x61,
	0x64, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x79, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x76, 0x61, 0x74,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x76, 0x61, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x59, 0x65, 0x61, 0x72,
	0x73, 0x12, 0x39, 0x0a, 0x19, 0x76, 0x61, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x76, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x52, 0x61, 0x74, 0x65, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x39, 0x0a, 0x19,
	0x76, 0x61, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x73, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x16, 0x76, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x61, 0x74, 0x65,
	0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2e, 0x0a,
	0x13, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x5f, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x61, 0x79, 0x65,
	0x72, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a,
	0x1a, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x17, 0x68, 0x69, 0x67, 0x68, 0x52, 0x69, 0x73, 0x6b, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x68, 0x69,
	0x67, 0x68, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x68, 0x69,
	0x67, 0x68, 0x52, 0x69, 0x73, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x22, 0x3f, 0x0a, 0x0d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x22, 0x26, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xa6, 0x02, 0x0a,
	0x0a, 0x50, 0x72, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12,
	0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x66, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x69, 0x6e, 0x66, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x36, 0x0a, 0x0c, 0x5a, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xb1, 0x01,
	0x0a, 0x07, 0x5a, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x7a, 0x69, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x7a, 0x69, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x5a, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x22, 0xb9, 0x03, 0x0a, 0x18, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x66, 0x69, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x66, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a,
	0x13, 0x66, 0x69, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x66, 0x69, 0x78, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x39, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x6d, 0x63, 0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x63, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x22, 0xb4, 0x01,
	0x0a, 0x1f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x43, 0x6f, 0x73, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x63, 0x63, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x63, 0x63, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x49, 0x64, 0x22, 0x57, 0x0a, 0x1c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x73, 0x74,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xac, 0x05,
	0x0a, 0x1a, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x43, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x69,
	0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x6d, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0d, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x66, 0x69, 0x78,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b,
	0x0a, 0x1a, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x66, 0x69, 0x78, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x17, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x73, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x70, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x73,
	0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0a, 0x70, 0x73, 0x46, 0x69, 0x78, 0x65, 0x64, 0x46, 0x65, 0x65, 0x12, 0x31, 0x0a, 0x15,
	0x70, 0x73, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x73, 0x46,
	0x69, 0x78, 0x65, 0x64, 0x46, 0x65, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x63, 0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x63, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe6, 0x01, 0x0a,
	0x21, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43,
	0x6f, 0x73, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x63,
	0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x63,
	0x63, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x5b, 0x0a, 0x1e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43,
	0x6f, 0x73, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x22, 0x48, 0x0a, 0x25, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xc0, 0x04, 0x0a,
	0x13, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x42, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x73, 0x74, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x6e, 0x64, 0x6f, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x79, 0x73, 0x5f, 0x66, 0x72, 0x6f,
	0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x61, 0x79, 0x73, 0x46, 0x72, 0x6f,
	0x6d, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x66, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x63, 0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x63, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a,
	0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12,
	0x2e, 0x0a, 0x13, 0x66, 0x69, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x66, 0x69,
	0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22,
	0xb2, 0x02, 0x0a, 0x1a, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x42, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x73,
	0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x75,
	0x6e, 0x64, 0x6f, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x75, 0x6e, 0x64, 0x6f, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x79, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x61,
	0x79, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x63, 0x63, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x63, 0x63, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x17, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x42, 0x61, 0x63,
	0x6b, 0x43, 0x6f, 0x73, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x32, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x42, 0x61,
	0x63, 0x6b, 0x43, 0x6f, 0x73, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x22, 0xe0, 0x04, 0x0a, 0x15, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x42, 0x61, 0x63,
	0x6b, 0x43, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x75,
	0x6e, 0x64, 0x6f, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x75, 0x6e, 0x64, 0x6f, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1b,
	0x0a, 0x09, 0x64, 0x61, 0x79, 0x73, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x64, 0x61, 0x79, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x23, 0x0a, 0x0d, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x07, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69,
	0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x66, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x66, 0x69, 0x78,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x66, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2d, 0x0a, 0x13, 0x69, 0x73, 0x5f,
	0x70, 0x61, 0x69, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x50, 0x61, 0x69, 0x64, 0x42, 0x79,
	0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d,
	0x63, 0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x63, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xa3, 0x02, 0x0a, 0x1c, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x42, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x6e, 0x64, 0x6f,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x79, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x61, 0x79, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x63, 0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x63, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x2a, 0x0a, 0x18,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x51, 0x0a, 0x19, 0x4d, 0x6f, 0x6e, 0x65,
	0x79, 0x42, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4d,
	0x6f, 0x6e, 0x65, 0x79, 0x42, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x43, 0x0a, 0x20, 0x4d,
	0x6f, 0x6e, 0x65, 0x79, 0x42, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x22, 0x3b, 0x0a, 0x15, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x81, 0x06,
	0x0a, 0x0f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a,
	0x11, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x3d, 0x0a, 0x0c, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6f, 0x6e, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0b, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x6e, 0x12, 0x30,
	0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x12,
	0x30, 0x0a, 0x14, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x65,
	0x64, 0x22, 0xa4, 0x03, 0x0a, 0x13, 0x52, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x65, 0x65, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x66, 0x65,
	0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x61, 0x74, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x76, 0x61, 0x74,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x70,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x72,
	0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x72, 0x6f, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x63, 0x6f,
	0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20,
	0x0a, 0x0c, 0x62, 0x32, 0x62, 0x5f, 0x76, 0x61, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x62, 0x32, 0x62, 0x56, 0x61, 0x74, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x20, 0x0a, 0x0c, 0x62, 0x32, 0x62, 0x5f, 0x76, 0x61, 0x74, 0x5f, 0x62, 0x61, 0x73, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x62, 0x32, 0x62, 0x56, 0x61, 0x74, 0x42, 0x61,
	0x73, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x32, 0x62, 0x5f, 0x76, 0x61, 0x74, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x62, 0x32, 0x62, 0x56,
	0x61, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x66, 0x69, 0x6e, 0x61,
	0x6c, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb7, 0x03, 0x0a, 0x1f, 0x52, 0x6f, 0x79,
	0x61, 0x6c, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x2d,
	0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c,
	0x0a, 0x12, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x67, 0x72, 0x6f, 0x73,
	0x73, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x30, 0x0a, 0x14, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x12, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x10, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x61, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0xd4, 0x01, 0x0a, 0x1b, 0x52, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x39,
	0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x22, 0xd1, 0x02, 0x0a, 0x14, 0x52, 0x6f,
	0x79, 0x61, 0x6c, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x12, 0x4f, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x12, 0x4f, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x5f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x46, 0x0a, 0x0b, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x52, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x0b, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4f, 0x0a, 0x10,
	0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x52, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f,
	0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0f, 0x72, 0x6f,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x22, 0xcf, 0x08,
	0x0a, 0x0d, 0x52, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x37, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x5f, 0x74, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x54,
	0x6f, 0x12, 0x44, 0x0a, 0x10, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x45,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x52,
	0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x73, 0x52, 0x06, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x37, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x52, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12,
	0x25, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10,
	0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x46, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x41, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x61,
	0x75, 0x74, 0x6f, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x30, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x46, 0x72, 0x6f, 0x6d,
	0x12, 0x28, 0x0a, 0x10, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x5f, 0x74, 0x6f, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x54, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0xc9, 0x01, 0x0a, 0x14, 0x52, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x6f, 0x79, 0x61,
	0x6c, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xa1, 0x07, 0x0a, 0x0e,
	0x56, 0x61, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x29, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x14, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1d, 0x0a,
	0x0a, 0x76, 0x61, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x76, 0x61, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x76, 0x61, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x76, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x1f, 0x0a, 0x0b, 0x66, 0x65, 0x65, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x66, 0x65, 0x65, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x66, 0x65, 0x65, 0x73, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x65, 0x65, 0x73, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x38, 0x0a, 0x18, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x28, 0x0a, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x74, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x56, 0x61, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x73, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x3a, 0x0a, 0x19,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x5f, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x17, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x78, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x72, 0x69, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x12, 0x45, 0x0a, 0x0f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0e, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f,
	0x64, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x69, 0x73, 0x44, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x37, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x9a, 0x07, 0x0a, 0x09, 0x56, 0x61, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x61, 0x74, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x76, 0x61, 0x74, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2d,
	0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x76, 0x65, 0x6e,
	0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x61, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x76, 0x61, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x65, 0x65, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x66, 0x65, 0x65, 0x73, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x64, 0x65,
	0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a,
	0x11, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x61, 0x6e,
	0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x15, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x6e, 0x6e, 0x75,
	0x61, 0x6c, 0x54, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x15, 0x77, 0x6f,
	0x72, 0x6c, 0x64, 0x5f, 0x61, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x6f,
	0x76, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x77, 0x6f, 0x72, 0x6c, 0x64,
	0x41, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x54, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x2f,
	0x0a, 0x13, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x12,
	0x37, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08,
	0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x12, 0x40, 0x0a,
	0x0e, 0x70, 0x61, 0x79, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0c, 0x70, 0x61, 0x79, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x33, 0x0a, 0x07, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x06, 0x70, 0x61, 0x69, 0x64, 0x41, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x22, 0xa4, 0x01, 0x0a,
	0x0e, 0x41, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x54, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x79,
	0x65, 0x61, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x30, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x49, 0x64, 0x22, 0x6b, 0x0a, 0x0e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0d, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64,
	0x22, 0x65, 0x0a, 0x15, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x4d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x9b, 0x02, 0x0a, 0x16, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x4d, 0x6f,
	0x6e, 0x65, 0x79, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x67,
	0x72, 0x6f, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x4d, 0x6f,
	0x6e, 0x65, 0x79, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x03, 0x76, 0x61,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x52, 0x03, 0x76, 0x61, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x66, 0x65, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x04, 0x66, 0x65,
	0x65, 0x73, 0x12, 0x31, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x07, 0x72, 0x65,
	0x76, 0x65, 0x6e, 0x75, 0x65, 0x22, 0x9a, 0x1b, 0x0a, 0x0f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56,
	0x69, 0x65, 0x77, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x30, 0x0a,
	0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2f, 0x0a, 0x07, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x39, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0e, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x0d,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x45, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x12, 0x45, 0x0a, 0x0f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x69,
	0x73, 0x5f, 0x76, 0x61, 0x74, 0x5f, 0x64, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x56, 0x61, 0x74, 0x44, 0x65, 0x64, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x0d, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x72,
	0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x0c, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x76, 0x65,
	0x6e, 0x75, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x74, 0x61, 0x78, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x06, 0x74,
	0x61, 0x78, 0x46, 0x65, 0x65, 0x12, 0x59, 0x0a, 0x1d, 0x74, 0x61, 0x78, 0x5f, 0x66, 0x65, 0x65,
	0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x19, 0x74, 0x61, 0x78, 0x46, 0x65, 0x65, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x65, 0x65,
	0x12, 0x3b, 0x0a, 0x0d, 0x74, 0x61, 0x78, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x52, 0x0b, 0x74, 0x61, 0x78, 0x46, 0x65, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x41, 0x0a,
	0x10, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x52, 0x0e, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x46, 0x65, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x43, 0x0a, 0x11, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x74,
	0x61, 0x72, 0x69, 0x66, 0x66, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x4d,
	0x6f, 0x6e, 0x65, 0x79, 0x52, 0x0f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x46, 0x65, 0x65, 0x54,
	0x61, 0x72, 0x69, 0x66, 0x66, 0x12, 0x4e, 0x0a, 0x17, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52,
	0x14, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x46, 0x69, 0x78, 0x65, 0x64, 0x46, 0x65, 0x65, 0x54,
	0x61, 0x72, 0x69, 0x66, 0x66, 0x12, 0x45, 0x0a, 0x12, 0x70, 0x61, 0x79, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x56, 0x69, 0x65, 0x77, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x10, 0x70, 0x61, 0x79, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x46, 0x69, 0x78, 0x65, 0x64, 0x46, 0x65, 0x65, 0x12, 0x36, 0x0a, 0x0a,
	0x66, 0x65, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x56, 0x69, 0x65, 0x77, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x09, 0x66, 0x65, 0x65, 0x73, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x41, 0x0a, 0x10, 0x66, 0x65, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x69,
	0x65, 0x77, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x0e, 0x66, 0x65, 0x65, 0x73, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x38, 0x0a, 0x0b, 0x6e, 0x65, 0x74, 0x5f, 0x72,
	0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x0a, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75,
	0x65, 0x12, 0x49, 0x0a, 0x14, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x73,
	0x73, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56,
	0x69, 0x65, 0x77, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x12, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x47, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x12, 0x50, 0x0a, 0x18,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x66, 0x65,
	0x65, 0x5f, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x69,
	0x65, 0x77, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x15, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x46, 0x65, 0x65, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x12, 0x5f,
	0x0a, 0x20, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x69,
	0x66, 0x66, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x4d, 0x6f, 0x6e, 0x65,
	0x79, 0x52, 0x1c, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x46, 0x69, 0x78, 0x65, 0x64, 0x46, 0x65, 0x65, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x12,
	0x3d, 0x0a, 0x0e, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x66, 0x65,
	0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x52, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x54, 0x61, 0x78, 0x46, 0x65, 0x65, 0x12, 0x66,
	0x0a, 0x24, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x66, 0x65, 0x65,
	0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x1f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x54, 0x61, 0x78,
	0x46, 0x65, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x46, 0x65, 0x65, 0x12, 0x77, 0x0a, 0x2d, 0x70, 0x61, 0x79, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x66, 0x65,
	0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x69, 0x65,
	0x77, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x27, 0x70, 0x61, 0x79, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x54, 0x61, 0x78, 0x46, 0x65, 0x65, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x65, 0x65, 0x12,
	0x4d, 0x0a, 0x16, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56,
	0x69, 0x65, 0x77, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x14, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x12, 0x43,
	0x0a, 0x11, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x5f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x4d, 0x6f, 0x6e,
	0x65, 0x79, 0x52, 0x0f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x46, 0x65, 0x65, 0x73, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x4e, 0x0a, 0x17, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x66, 0x65,
	0x65, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x14, 0x72,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x46, 0x65, 0x65, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x26, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x72, 0x12, 0x28, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x27, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x6d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x6d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x37, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x38,
	0x0a, 0x06, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x52, 0x06, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x4a, 0x0a, 0x0c, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x2c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x3a, 0x0a,
	0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x2e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x0b, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18,
	0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x70,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x3a, 0x0a, 0x1a, 0x69, 0x73, 0x5f, 0x69, 0x70,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x30, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x69, 0x73, 0x49,
	0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x42, 0x69, 0x6e, 0x12, 0x44, 0x0a, 0x1f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x31, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x62, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x61, 0x74,
	0x5f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x61,
	0x74, 0x50, 0x61, 0x79, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x33, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69,
	0x73, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0d, 0x6d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x34, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0c, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x35, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x21,
	0x0a, 0x0c, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x36,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x49,
	0x64, 0x12, 0x4b, 0x0a, 0x15, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f,
	0x73, 0x73, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x56, 0x69, 0x65, 0x77, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x13, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x47, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x12, 0x58,
	0x0a, 0x1c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x5f, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x18, 0x38,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x19, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x47, 0x72, 0x6f, 0x73,
	0x73, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x12, 0x48, 0x0a, 0x14, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x39, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52,
	0x11, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x54, 0x61, 0x78, 0x46, 0x65, 0x65, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x46, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0d, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x3a, 0x0a, 0x19, 0x72, 0x65,
	0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x72,
	0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x3c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x6e,
	0x49, 0x64, 0x22, 0x86, 0x34, 0x0a, 0x10, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2f, 0x0a, 0x07, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x0d, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x45, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x45,
	0x0a, 0x0f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f,
	0x76, 0x61, 0x74, 0x5f, 0x64, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x56, 0x61, 0x74, 0x44, 0x65, 0x64, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x1b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67,
	0x72, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x4d, 0x6f, 0x6e, 0x65,
	0x79, 0x52, 0x18, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x73, 0x73, 0x52,
	0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x58, 0x0a, 0x1c, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x76,
	0x65, 0x6e, 0x75, 0x65, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x56, 0x69, 0x65, 0x77, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x19, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x4f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x4b, 0x0a, 0x15, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x13, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x76, 0x65, 0x6e,
	0x75, 0x65, 0x12, 0x3f, 0x0a, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61,
	0x78, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x4d,
	0x6f, 0x6e, 0x65, 0x79, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x78,
	0x46, 0x65, 0x65, 0x12, 0x4a, 0x0a, 0x15, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x61, 0x78, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x12, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x78, 0x46, 0x65, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x12,
	0x4c, 0x0a, 0x16, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x66,
	0x65, 0x65, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56,
	0x69, 0x65, 0x77, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x13, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x61, 0x78, 0x46, 0x65, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x68, 0x0a,
	0x25, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x66, 0x65, 0x65,
	0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x20, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61,
	0x78, 0x46, 0x65, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x46, 0x65, 0x65, 0x12, 0x4a, 0x0a, 0x15, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52,
	0x12, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x78, 0x46, 0x65, 0x65, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x50, 0x0a, 0x18, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67,
	0x72, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x66, 0x78, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x15,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x76, 0x65,
	0x6e, 0x75, 0x65, 0x46, 0x78, 0x12, 0x5e, 0x0a, 0x20, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x66,
	0x78, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56,
	0x69, 0x65, 0x77, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x1b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x47, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x46, 0x78, 0x54,
	0x61, 0x78, 0x46, 0x65, 0x65, 0x12, 0x5d, 0x0a, 0x1f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x66,
	0x78, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x69,
	0x65, 0x77, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x1b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x47, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x46, 0x78, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x74, 0x12, 0x3c, 0x0a, 0x0d, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x65,
	0x76, 0x65, 0x6e, 0x75, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x4d,
	0x6f, 0x6e, 0x65, 0x79, 0x52, 0x0c, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x76, 0x65, 0x6e,
	0x75, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x74, 0x61, 0x78, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x06, 0x74, 0x61,
	0x78, 0x46, 0x65, 0x65, 0x12, 0x59, 0x0a, 0x1d, 0x74, 0x61, 0x78, 0x5f, 0x66, 0x65, 0x65, 0x5f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x4d,
	0x6f, 0x6e, 0x65, 0x79, 0x52, 0x19, 0x74, 0x61, 0x78, 0x46, 0x65, 0x65, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x65, 0x65, 0x12,
	0x3b, 0x0a, 0x0d, 0x74, 0x61, 0x78, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52,
	0x0b, 0x74, 0x61, 0x78, 0x46, 0x65, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x41, 0x0a, 0x10,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52,
	0x0e, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x46, 0x65, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x43, 0x0a, 0x11, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x74, 0x61,
	0x72, 0x69, 0x66, 0x66, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x4d, 0x6f,
	0x6e, 0x65, 0x79, 0x52, 0x0f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x46, 0x65, 0x65, 0x54, 0x61,
	0x72, 0x69, 0x66, 0x66, 0x12, 0x66, 0x0a, 0x24, 0x70, 0x61, 0x79, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x69,
	0x66, 0x66, 0x5f, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x1f, 0x70, 0x61, 0x79,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x46, 0x65, 0x65, 0x54, 0x61,
	0x72, 0x69, 0x66, 0x66, 0x53, 0x65, 0x6c, 0x66, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x1a,
	0x70, 0x61, 0x79, 0x73, 0x75, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f,
	0x66, 0x65, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x56, 0x69, 0x65, 0x77, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x17, 0x70, 0x61, 0x79, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x46, 0x65, 0x65, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x74, 0x12, 0x4e, 0x0a, 0x17, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x18, 0x25, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x14, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x46, 0x69, 0x78, 0x65, 0x64, 0x46, 0x65, 0x65, 0x54, 0x61, 0x72, 0x69,
	0x66, 0x66, 0x12, 0x71, 0x0a, 0x2a, 0x70, 0x61, 0x79, 0x73, 0x75, 0x70, 0x65, 0x72, 0x5f, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x5f,
	0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x5f, 0x66, 0x78, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74,
	0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52,
	0x24, 0x70, 0x61, 0x79, 0x73, 0x75, 0x70, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x46,
	0x69, 0x78, 0x65, 0x64, 0x46, 0x65, 0x65, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x46, 0x78, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x71, 0x0a, 0x2a, 0x70, 0x61, 0x79, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x66,
	0x65, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x5f, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x63,
	0x6f, 0x73, 0x74, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x4d, 0x6f, 0x6e,
	0x65, 0x79, 0x52, 0x24, 0x70, 0x61, 0x79, 0x73, 0x75, 0x70, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x46, 0x69, 0x78, 0x65, 0x64, 0x46, 0x65, 0x65, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66,
	0x53, 0x65, 0x6c, 0x66, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x77, 0x0a, 0x2d, 0x70, 0x61, 0x79, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x5f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56,
	0x69, 0x65, 0x77, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x27, 0x70, 0x61, 0x79, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x46, 0x69, 0x78, 0x65, 0x64, 0x46, 0x65, 0x65,
	0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x74, 0x12, 0x45, 0x0a, 0x12, 0x70, 0x61, 0x79, 0x73, 0x75, 0x70, 0x65, 0x72, 0x5f, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x69, 0x65,
	0x77, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x10, 0x70, 0x61, 0x79, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x46, 0x69, 0x78, 0x65, 0x64, 0x46, 0x65, 0x65, 0x12, 0x57, 0x0a, 0x1c, 0x70, 0x61, 0x79, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x66,
	0x78, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x69,
	0x65, 0x77, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x18, 0x70, 0x61, 0x79, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x46, 0x69, 0x78, 0x65, 0x64, 0x46, 0x65, 0x65, 0x46, 0x78, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x74, 0x12, 0x36, 0x0a, 0x0a, 0x66, 0x65, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x09,
	0x66, 0x65, 0x65, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x41, 0x0a, 0x10, 0x66, 0x65, 0x65,
	0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x2c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x0e, 0x66, 0x65,
	0x65, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x38, 0x0a, 0x0b,
	0x6e, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x56, 0x69, 0x65, 0x77, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x0a, 0x6e, 0x65, 0x74, 0x52,
	0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x12, 0x58, 0x0a, 0x1c, 0x70, 0x61, 0x79, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x19, 0x70, 0x61, 0x79, 0x73, 0x75, 0x70, 0x65, 0x72, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74,
	0x12, 0x4b, 0x0a, 0x15, 0x70, 0x61, 0x79, 0x73, 0x75, 0x70, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56,
	0x69, 0x65, 0x77, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x13, 0x70, 0x61, 0x79, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x63, 0x0a,
	0x22, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f,
	0x67, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x4d, 0x6f, 0x6e,
	0x65, 0x79, 0x52, 0x1e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x47, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x12, 0x65, 0x0a, 0x23, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x6e,
	0x75, 0x65, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56,
	0x69, 0x65, 0x77, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x1f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x47, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x76, 0x65,
	0x6e, 0x75, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x58, 0x0a, 0x1c, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x73,
	0x73, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56,
	0x69, 0x65, 0x77, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x19, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x47, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x76, 0x65,
	0x6e, 0x75, 0x65, 0x12, 0x4c, 0x0a, 0x16, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x33, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x13, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x54, 0x61, 0x78, 0x46, 0x65,
	0x65, 0x12, 0x57, 0x0a, 0x1c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x52, 0x18, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x54,
	0x61, 0x78, 0x46, 0x65, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x59, 0x0a, 0x1d, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x61, 0x78,
	0x5f, 0x66, 0x65, 0x65, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x35, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x56, 0x69, 0x65, 0x77, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x19, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x54, 0x61, 0x78, 0x46, 0x65, 0x65, 0x4f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x52, 0x0a, 0x19, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x69,
	0x66, 0x66, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x4d, 0x6f, 0x6e, 0x65,
	0x79, 0x52, 0x16, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x46, 0x65, 0x65, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x12, 0x5b, 0x0a, 0x1e, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x5f, 0x66, 0x65, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x18, 0x37, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x56, 0x69, 0x65, 0x77, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x1a, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x46, 0x69, 0x78, 0x65, 0x64, 0x46, 0x65, 0x65,
	0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x12, 0x49, 0x0a, 0x14, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x5f, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x18, 0x38,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x12, 0x72,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x47, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75,
	0x65, 0x12, 0x4e, 0x0a, 0x17, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x73,
	0x73, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x66, 0x78, 0x18, 0x39, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x14, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x47, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x46,
	0x78, 0x12, 0x50, 0x0a, 0x18, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x18, 0x3a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x15, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x46, 0x65, 0x65, 0x54, 0x61, 0x72,
	0x69, 0x66, 0x66, 0x12, 0x6e, 0x0a, 0x28, 0x70, 0x61, 0x79, 0x73, 0x75, 0x70, 0x65, 0x72, 0x5f,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x66, 0x65,
	0x65, 0x5f, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18,
	0x3b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x23,
	0x70, 0x61, 0x79, 0x73, 0x75, 0x70, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x46, 0x65, 0x65, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x74, 0x12, 0x7e, 0x0a, 0x31, 0x70, 0x61, 0x79, 0x73, 0x75, 0x70, 0x65, 0x72, 0x5f,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x5f, 0x73,
	0x65, 0x6c, 0x66, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x69,
	0x65, 0x77, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x2a, 0x70, 0x61, 0x79, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x46, 0x69, 0x78,
	0x65, 0x64, 0x46, 0x65, 0x65, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x53, 0x65, 0x6c, 0x66, 0x43,
	0x6f, 0x73, 0x74, 0x12, 0x5f, 0x0a, 0x20, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x66, 0x65, 0x65,
	0x5f, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x69, 0x65,
	0x77, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x1c, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x46, 0x69, 0x78, 0x65, 0x64, 0x46, 0x65, 0x65, 0x54, 0x61,
	0x72, 0x69, 0x66, 0x66, 0x12, 0x79, 0x0a, 0x2e, 0x70, 0x61, 0x79, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x5f,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x28, 0x70, 0x61, 0x79, 0x73, 0x75, 0x70, 0x65, 0x72, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x46, 0x69, 0x78, 0x65, 0x64,
	0x46, 0x65, 0x65, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12,
	0x3d, 0x0a, 0x0e, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x66, 0x65,
	0x65, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x52, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x54, 0x61, 0x78, 0x46, 0x65, 0x65, 0x12, 0x66,
	0x0a, 0x24, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x66, 0x65, 0x65,
	0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x1f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x54, 0x61, 0x78,
	0x46, 0x65, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x46, 0x65, 0x65, 0x12, 0x77, 0x0a, 0x2d, 0x70, 0x61, 0x79, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x66, 0x65,
	0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x69, 0x65,
	0x77, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x27, 0x70, 0x61, 0x79, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x54, 0x61, 0x78, 0x46, 0x65, 0x65, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x65, 0x65, 0x12,
	0x48, 0x0a, 0x14, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x66, 0x65,
	0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x42, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x69, 0x65,
	0x77, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x11, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x54, 0x61,
	0x78, 0x46, 0x65, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x4d, 0x0a, 0x16, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x76, 0x65,
	0x6e, 0x75, 0x65, 0x18, 0x43, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x4d, 0x6f, 0x6e,
	0x65, 0x79, 0x52, 0x14, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x12, 0x43, 0x0a, 0x11, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x44, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x0f, 0x72, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x46, 0x65, 0x65, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x4e, 0x0a,
	0x17, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x45, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x69,
	0x65, 0x77, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x14, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x46,
	0x65, 0x65, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x58, 0x0a,
	0x1c, 0x70, 0x61, 0x79, 0x73, 0x75, 0x70, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x46, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x19, 0x70, 0x61,
	0x79, 0x73, 0x75, 0x70, 0x65, 0x72, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x2c, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x72, 0x18, 0x47, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x52, 0x06, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x48,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12,
	0x38, 0x0a, 0x18, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x49, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x16, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x37, 0x0a, 0x0c, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x38, 0x0a, 0x06, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x4b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x52, 0x06, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x4a, 0x0a, 0x0c,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x4c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x63, 0x63, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x63, 0x63, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x4e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x68, 0x69, 0x67, 0x68,
	0x5f, 0x72, 0x69, 0x73, 0x6b, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x48,
	0x69, 0x67, 0x68, 0x52, 0x69, 0x73, 0x6b, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x50, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x3a,
	0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x51,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x0b, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x18, 0x52, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x3a, 0x0a, 0x1a, 0x69, 0x73, 0x5f, 0x69,
	0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6d, 0x69, 0x73, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x53, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x69, 0x73,
	0x49, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x42, 0x69, 0x6e, 0x12, 0x44, 0x0a, 0x1f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f,
	0x62, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x54, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x61,
	0x74, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x18, 0x55, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76,
	0x61, 0x74, 0x50, 0x61, 0x79, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x56, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x69, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0d,
	0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x57, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x4e, 0x0a, 0x17, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x76, 0x61, 0x74, 0x18, 0x58, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x14, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x56, 0x61,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x59, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x07, 0x74, 0x61, 0x78, 0x52, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x1a,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x17, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x54,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63,
	0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x65,
	0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x75, 0x72,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72,
	0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x6f,
	0x79, 0x61, 0x6c, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x5d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x5e, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12,
	0x2a, 0x0a, 0x11, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65,
	0x5f, 0x76, 0x61, 0x74, 0x18, 0x5f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x56, 0x61, 0x74, 0x12, 0x46, 0x0a, 0x0e, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x60, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x12, 0x3a, 0x0a, 0x19, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x61, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e,
	0x67, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x2a, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x61,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x62, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x75,
	0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x22, 0x5e, 0x0a, 0x10, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x6a, 0x0a, 0x0a, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x30, 0x0a, 0x06, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x06, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22, 0x51, 0x0a, 0x0f, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x74, 0x6f, 0x22, 0x14, 0x0a, 0x02, 0x49, 0x64,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x2e, 0x0a, 0x08, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d,
	0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x74, 0x6f,
	0x22, 0x96, 0x04, 0x0a, 0x1a, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x54, 0x61, 0x72,
	0x69, 0x66, 0x66, 0x52, 0x61, 0x74, 0x65, 0x73, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c,
	0x0a, 0x12, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x5f, 0x66, 0x65, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x65, 0x12, 0x28, 0x0a, 0x10,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x66, 0x65, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x46, 0x69,
	0x78, 0x65, 0x64, 0x46, 0x65, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x46, 0x69, 0x78, 0x65, 0x64, 0x46, 0x65, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x5f,
	0x66, 0x65, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x70, 0x73, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x73, 0x5f, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x70,
	0x73, 0x46, 0x69, 0x78, 0x65, 0x64, 0x46, 0x65, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x70, 0x73, 0x5f,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x73, 0x46, 0x69, 0x78, 0x65,
	0x64, 0x46, 0x65, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x30, 0x0a, 0x14,
	0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x48, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x63, 0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x63, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x84, 0x02, 0x0a, 0x1f, 0x4d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x52, 0x61, 0x74, 0x65,
	0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1f, 0x0a,
	0x0b, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c,
	0x0a, 0x12, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x5f, 0x66, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x65, 0x12, 0x28, 0x0a, 0x10,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x66, 0x65, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x46, 0x69,
	0x78, 0x65, 0x64, 0x46, 0x65, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x46, 0x69, 0x78, 0x65, 0x64, 0x46, 0x65, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x2d, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x62, 0x79, 0x5f,
	0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x69, 0x73, 0x50, 0x61, 0x69, 0x64, 0x42, 0x79, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x22, 0x95, 0x04, 0x0a, 0x1b, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x54, 0x61, 0x72,
	0x69, 0x66, 0x66, 0x52, 0x61, 0x74, 0x65, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x40, 0x0a, 0x06, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x52, 0x61, 0x74, 0x65, 0x73, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x12, 0x48, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x62, 0x61, 0x63, 0x6b,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x52,
	0x61, 0x74, 0x65, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x48, 0x0a, 0x06,
	0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x54,
	0x61, 0x72, 0x69, 0x66, 0x66, 0x52, 0x61, 0x74, 0x65, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06,
	0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x5e, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x61,
	0x6c, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x52, 0x61, 0x74, 0x65, 0x73, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x2e, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c,
	0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x63, 0x63, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x63, 0x63, 0x43, 0x6f, 0x64,
	0x65, 0x1a, 0x63, 0x0a, 0x0b, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x3e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x52, 0x61, 0x74, 0x65, 0x73, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x61,
	0x6c, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc0, 0x02, 0x0a, 0x03, 0x4b, 0x65, 0x79,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6b, 0x65,
	0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x74, 0x6f,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x54, 0x6f, 0x12, 0x3b,
	0x0a, 0x0b, 0x72, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x72, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x65, 0x64, 0x41, 0x74, 0x22, 0x98, 0x0a, 0x0a, 0x0e,
	0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x3b, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x37,
	0x0a, 0x09, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x74, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x54, 0x6f, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x42, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x19, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x5f, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x36, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2f,
	0x0a, 0x13, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x06, 0x70, 0x61, 0x69, 0x64, 0x41, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x61,
	0x75, 0x74, 0x6f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x61, 0x75, 0x74, 0x6f, 0x69, 0x6e, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x46, 0x72, 0x6f, 0x6d, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x74, 0x6f, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x54, 0x6f, 0x12, 0x20,
	0x0a, 0x0c, 0x62, 0x32, 0x62, 0x5f, 0x76, 0x61, 0x74, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x62, 0x32, 0x62, 0x56, 0x61, 0x74, 0x42, 0x61, 0x73, 0x65,
	0x12, 0x20, 0x0a, 0x0c, 0x62, 0x32, 0x62, 0x5f, 0x76, 0x61, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x62, 0x32, 0x62, 0x56, 0x61, 0x74, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x32, 0x62, 0x5f, 0x76, 0x61, 0x74, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x62, 0x32, 0x62, 0x56,
	0x61, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x65, 0x65, 0x73,
	0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x74, 0x18, 0x23,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x66, 0x65, 0x65, 0x73, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x74, 0x22, 0xcc, 0x01, 0x0a, 0x15, 0x50, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x2c, 0x0a, 0x12, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x61,
	0x79, 0x6f, 0x75, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x86, 0x02, 0x0a, 0x0f, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x69, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x64, 0x65, 0x62, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x63, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x72,
	0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xe6,
	0x07, 0x0a, 0x0c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x61, 0x74, 0x5f,
	0x70, 0x61, 0x79, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x61, 0x74,
	0x50, 0x61, 0x79, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x15, 0x76, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x76, 0x61, 0x74, 0x49, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x33, 0x0a, 0x16, 0x76, 0x61, 0x74, 0x5f,
	0x69, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x76, 0x61, 0x74, 0x49, 0x6e, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x21, 0x0a,
	0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x61, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x61, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x69, 0x65, 0x77,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x69, 0x65, 0x77, 0x55, 0x72, 0x6c, 0x12,
	0x40, 0x0a, 0x1c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x72,
	0x6c, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x63,
	0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x2d, 0x0a, 0x12,
	0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x72,
	0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x6e,
	0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69,
	0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x3c, 0x0a, 0x10, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0x45, 0x0a, 0x0f, 0x48, 0x61, 0x73, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x22, 0xee, 0x02, 0x0a,
	0x0c, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x0e, 0x0a,
	0x02, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x65, 0x6e, 0x12, 0x0e, 0x0a,
	0x02, 0x72, 0x75, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x72, 0x75, 0x12, 0x0e, 0x0a,
	0x02, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x65, 0x73, 0x12, 0x0e, 0x0a,
	0x02, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x64, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x7a, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x7a, 0x68, 0x12, 0x0e, 0x0a,
	0x02, 0x66, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x66, 0x72, 0x12, 0x0e, 0x0a,
	0x02, 0x61, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x61, 0x72, 0x12, 0x0e, 0x0a,
	0x02, 0x70, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x70, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x70, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x70, 0x6c, 0x12, 0x0e, 0x0a,
	0x02, 0x65, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x65, 0x6c, 0x12, 0x0e, 0x0a,
	0x02, 0x6b, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6b, 0x6f, 0x12, 0x0e, 0x0a,
	0x02, 0x6a, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6a, 0x61, 0x12, 0x0e, 0x0a,
	0x02, 0x76, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x76, 0x6c, 0x12, 0x0e, 0x0a,
	0x02, 0x68, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x68, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x74, 0x68, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x68, 0x12, 0x0e, 0x0a,
	0x02, 0x63, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x63, 0x73, 0x12, 0x0e, 0x0a,
	0x02, 0x62, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x62, 0x67, 0x12, 0x0e, 0x0a,
	0x02, 0x66, 0x69, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x66, 0x69, 0x12, 0x0e, 0x0a,
	0x02, 0x73, 0x76, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x73, 0x76, 0x12, 0x0e, 0x0a,
	0x02, 0x64, 0x61, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x64, 0x61, 0x12, 0x0e, 0x0a,
	0x02, 0x74, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x72, 0x22, 0x67, 0x0a,
	0x0f, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2d, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x55, 0x72, 0x6c, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x25, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x61,
	0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x4f, 0x6e, 0x65,
	0x46, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x22, 0x8a, 0x01, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x11, 0x69, 0x73, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x22, 0xf8, 0x03, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x56,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f,
	0x67, 0x6f, 0x12, 0x3d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x5c, 0x0a, 0x0f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x56, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0e, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x2d, 0x0a, 0x06, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x06, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x12, 0x2c,
	0x0a, 0x12, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x6d, 0x69, 0x6e, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2c, 0x0a, 0x12,
	0x6d, 0x61, 0x78, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x65,
	0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x1a, 0x37, 0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x89,
	0x02, 0x0a, 0x14, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79,
	0x50, 0x61, 0x79, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x79,
	0x6c, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x55, 0x72, 0x6c,
	0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x74, 0x6d, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x74, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x74, 0x6d, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x74, 0x6d, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x12,
	0x21, 0x0a, 0x0c, 0x75, 0x74, 0x6d, 0x5f, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x74, 0x6d, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69,
	0x67, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x22, 0x4c, 0x0a, 0x0a, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x7a, 0x69, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x7a, 0x69, 0x70, 0x22, 0xe7, 0x04, 0x0a, 0x21, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x3b,
	0x0a, 0x1a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x17, 0x75, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x0c, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x49, 0x70, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x14, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x5f,
	0x76, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x61, 0x73, 0x56, 0x61,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03,
	0x76, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x76, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x13, 0x76, 0x61, 0x74, 0x49, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x61, 0x74, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x76, 0x61, 0x74, 0x52, 0x61,
	0x74, 0x65, 0x22, 0xc0, 0x04, 0x0a, 0x10, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x2f, 0x0a, 0x13, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x61, 0x74, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x74, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x76, 0x61, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x61, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e,
	0x67, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x2b, 0x0a, 0x11, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0xd1, 0x01, 0x0a, 0x15, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x4d, 0x69, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xc8, 0x02, 0x0a, 0x08, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x39,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x22, 0x32, 0x0a, 0x0c, 0x52, 0x6f, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xe9, 0x02, 0x0a, 0x17, 0x41, 0x63, 0x74,
	0x4f, 0x66, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x66,
	0x65, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x46, 0x65, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2d,
	0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x20, 0x0a,
	0x0c, 0x62, 0x32, 0x62, 0x5f, 0x76, 0x61, 0x74, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x62, 0x32, 0x62, 0x56, 0x61, 0x74, 0x42, 0x61, 0x73, 0x65, 0x12,
	0x20, 0x0a, 0x0c, 0x62, 0x32, 0x62, 0x5f, 0x76, 0x61, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x62, 0x32, 0x62, 0x56, 0x61, 0x74, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x32, 0x62, 0x5f, 0x76, 0x61, 0x74, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x62, 0x32, 0x62, 0x56, 0x61,
	0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x65, 0x65, 0x73, 0x5f,
	0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x10, 0x66, 0x65, 0x65, 0x73, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x11, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa7, 0x02, 0x0a, 0x0d, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72,
	0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x76, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xfb,
	0x01, 0x0a, 0x10, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xdb, 0x06, 0x0a,
	0x0d, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x34,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67,
	0x50, 0x6c, 0x61, 0x6e, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x52,
	0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x75, 0x72,
	0x72, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x3c, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x32, 0x0a, 0x05, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69,
	0x6e, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x05, 0x74, 0x72,
	0x69, 0x61, 0x6c, 0x12, 0x3f, 0x0a, 0x0c, 0x67, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61,
	0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x0b, 0x67, 0x72, 0x61, 0x63, 0x65, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x1a, 0x37, 0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x7f, 0x0a, 0x13, 0x52, 0x65,
	0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x12, 0x34, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x75,
	0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52,
	0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x3f, 0x0a, 0x13, 0x52,
	0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x86, 0x06, 0x0a,
	0x15, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x52,
	0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x04, 0x70, 0x6c,
	0x61, 0x6e, 0x12, 0x42, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x52,
	0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x08, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x08, 0x69, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x61, 0x72,
	0x64, 0x70, 0x61, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x63, 0x61, 0x72, 0x64, 0x70, 0x61, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x49,
	0x64, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x61, 0x72, 0x64, 0x70, 0x61, 0x79, 0x5f, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x63, 0x61, 0x72, 0x64, 0x70, 0x61, 0x79, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x61, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x08, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x41, 0x74, 0x12, 0x42, 0x0a, 0x0f, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x12,
	0x3b, 0x0a, 0x0b, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0a, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x41, 0x74, 0x12, 0x27, 0x0a, 0x0f,
	0x72, 0x65, 0x6e, 0x65, 0x77, 0x61, 0x6c, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x61, 0x6c, 0x50, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x22, 0xcb, 0x01, 0x0a, 0x11, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x90, 0x01, 0x0a, 0x1d, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e,
	0x67, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x22, 0xac, 0x01, 0x0a, 0x1c, 0x52, 0x65, 0x63, 0x75, 0x72,
	0x72, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x43, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x4e, 0x61, 0x6d,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x37, 0x0a, 0x09,
	0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x94, 0x01, 0x0a, 0x0e, 0x43, 0x61, 0x72, 0x64, 0x50, 0x61,
	0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x7a, 0x69,
	0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x7a, 0x69, 0x70, 0x22, 0x6f, 0x0a, 0x0b,
	0x43, 0x61, 0x72, 0x64, 0x50, 0x61, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0xb8, 0x01,
	0x0a, 0x14, 0x43, 0x61, 0x72, 0x64, 0x50, 0x61, 0x79, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x50, 0x61, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x12, 0x42, 0x0a, 0x10, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x50, 0x61, 0x79,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0f, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x9f, 0x01, 0x0a, 0x1e, 0x43, 0x61, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x50, 0x61, 0x79, 0x42, 0x61, 0x6e, 0x6b,
	0x43, 0x61, 0x72, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x68,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x73, 0x73, 0x75, 0x69, 0x6e, 0x67, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x69, 0x73, 0x73, 0x75, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x5f,
	0x70, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x73, 0x6b, 0x65,
	0x64, 0x50, 0x61, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xc3, 0x01, 0x0a, 0x24, 0x43,
	0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x50, 0x61, 0x79, 0x43, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x63, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x63, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x72, 0x63, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x63, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x22, 0x5f, 0x0a, 0x0f, 0x43, 0x61, 0x72, 0x64, 0x50, 0x61, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x65, 0x22, 0x27, 0x0a, 0x15, 0x43, 0x61, 0x72, 0x64, 0x50, 0x61, 0x79, 0x45, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xd6, 0x02, 0x0a, 0x1a, 0x43,
	0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x50, 0x61, 0x79, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x63, 0x6c,
	0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x63, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x13, 0x0a, 0x05, 0x69, 0x73, 0x5f, 0x33, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x69, 0x73, 0x33, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x72, 0x6e,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x72, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x35, 0x0a, 0x23, 0x43, 0x61, 0x72, 0x64, 0x50, 0x61, 0x79, 0x43, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x44,
	0x61, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3a, 0x0a, 0x28, 0x43, 0x61,
	0x72, 0x64, 0x50, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x63,
	0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xf5, 0x03, 0x0a, 0x1c, 0x43, 0x61, 0x72, 0x64, 0x50,
	0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72,
	0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64,
	0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x13,
	0x0a, 0x05, 0x69, 0x73, 0x5f, 0x33, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69,
	0x73, 0x33, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x72, 0x6e, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x72, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x44, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x61, 0x72, 0x64,
	0x50, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x63, 0x75, 0x72,
	0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x52,
	0x06, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x55, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x50, 0x61, 0x79, 0x43,
	0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf1,
	0x04, 0x0a, 0x16, 0x43, 0x61, 0x72, 0x64, 0x50, 0x61, 0x79, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x44, 0x0a, 0x0e, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x61, 0x72, 0x64,
	0x50, 0x61, 0x79, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x0d, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x25, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x0c, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x61, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x50, 0x61, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x43,
	0x61, 0x72, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0b, 0x63, 0x61, 0x72, 0x64,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x64, 0x0a, 0x16, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x50, 0x61,
	0x79, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x15, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a,
	0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x50, 0x61,
	0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x0f, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x50, 0x61, 0x79, 0x45, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0e, 0x65, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x0c,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x61, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x50, 0x61, 0x79, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x4c, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x50, 0x61, 0x79, 0x43, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61,
	0x74, 0x61, 0x22, 0xa5, 0x02, 0x0a, 0x1f, 0x43, 0x61, 0x72, 0x64, 0x50, 0x61, 0x79, 0x52, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x61, 0x75, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x61, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x63,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x05, 0x69, 0x73, 0x5f, 0x33, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x33, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x72, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x72, 0x6e, 0x22, 0x5d, 0x0a, 0x20, 0x43, 0x61,
	0x72, 0x64, 0x50, 0x61, 0x79, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x29,
	0x0a, 0x10, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x8d, 0x04, 0x0a, 0x15, 0x43, 0x61,
	0x72, 0x64, 0x50, 0x61, 0x79, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x12, 0x44, 0x0a, 0x0e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x50, 0x61, 0x79, 0x4d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x0d, 0x6d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x4c, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x43, 0x61, 0x72, 0x64, 0x50, 0x61, 0x79, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x43, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x49,
	0x0a, 0x0b, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x61,
	0x72, 0x64, 0x50, 0x61, 0x79, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x72,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4a,
	0x0a, 0x0c, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x43,
	0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x50, 0x61, 0x79, 0x42, 0x61,
	0x6e, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0b, 0x63,
	0x61, 0x72, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x08, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x50, 0x61, 0x79, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x12, 0x47, 0x0a, 0x0f, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x50, 0x61, 0x79, 0x45, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0e, 0x65, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x5e, 0x0a, 0x15, 0x57, 0x65, 0x62,
	0x48, 0x6f, 0x6f, 0x6b, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x52, 0x65, 0x74, 0x72, 0x79, 0x42, 0x0e, 0x5a, 0x0c, 0x2e, 0x2f, 0x3b,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_billing_proto_rawDescOnce sync.Once
	file_billing_proto_rawDescData = file_billing_proto_rawDesc
)

func file_billing_proto_rawDescGZIP() []byte {
	file_billing_proto_rawDescOnce.Do(func() {
		file_billing_proto_rawDescData = protoimpl.X.CompressGZIP(file_billing_proto_rawDescData)
	})
	return file_billing_proto_rawDescData
}

var file_billing_proto_msgTypes = make([]protoimpl.MessageInfo, 199)
var file_billing_proto_goTypes = []interface{}{
	(*Name)(nil),                                          // 0: billing.Name
	(*OrderCreateRequest)(nil),                            // 1: billing.OrderCreateRequest
	(*ProjectRedirectSettings)(nil),                       // 2: billing.ProjectRedirectSettings
	(*Project)(nil),                                       // 3: billing.Project
	(*WebHookTesting)(nil),                                // 4: billing.WebHookTesting
	(*ProductsTesting)(nil),                               // 5: billing.ProductsTesting
	(*VirtualCurrencyTesting)(nil),                        // 6: billing.VirtualCurrencyTesting
	(*KeysTesting)(nil),                                   // 7: billing.KeysTesting
	(*ProjectOrder)(nil),                                  // 8: billing.ProjectOrder
	(*MerchantContact)(nil),                               // 9: billing.MerchantContact
	(*MerchantContactTechnical)(nil),                      // 10: billing.MerchantContactTechnical
	(*MerchantContactAuthorized)(nil),                     // 11: billing.MerchantContactAuthorized
	(*MerchantBanking)(nil),                               // 12: billing.MerchantBanking
	(*MerchantLastPayout)(nil),                            // 13: billing.MerchantLastPayout
	(*MerchantUser)(nil),                                  // 14: billing.MerchantUser
	(*MerchantCompanyInfo)(nil),                           // 15: billing.MerchantCompanyInfo
	(*MerchantCompletedSteps)(nil),                        // 16: billing.MerchantCompletedSteps
	(*MerchantAgreementSignatureDataSignUrl)(nil),         // 17: billing.MerchantAgreementSignatureDataSignUrl
	(*MerchantAgreementSignatureData)(nil),                // 18: billing.MerchantAgreementSignatureData
	(*MerchantTariff)(nil),                                // 19: billing.MerchantTariff
	(*Merchant)(nil),                                      // 20: billing.Merchant
	(*MerchantShortInfo)(nil),                             // 21: billing.MerchantShortInfo
	(*MerchantCommon)(nil),                                // 22: billing.MerchantCommon
	(*SystemNotificationStatuses)(nil),                    // 23: billing.SystemNotificationStatuses
	(*Notification)(nil),                                  // 24: billing.Notification
	(*OrderPlatformFee)(nil),                              // 25: billing.OrderPlatformFee
	(*OrderTax)(nil),                                      // 26: billing.OrderTax
	(*OrderBillingAddress)(nil),                           // 27: billing.OrderBillingAddress
	(*OrderUser)(nil),                                     // 28: billing.OrderUser
	(*OrderNotificationCancellation)(nil),                 // 29: billing.OrderNotificationCancellation
	(*Order)(nil),                                         // 30: billing.Order
	(*OrderRecurringSettings)(nil),                        // 31: billing.OrderRecurringSettings
	(*ParentOrder)(nil),                                   // 32: billing.ParentOrder
	(*CountryRestriction)(nil),                            // 33: billing.CountryRestriction
	(*OrderItem)(nil),                                     // 34: billing.OrderItem
	(*OrderPaginate)(nil),                                 // 35: billing.OrderPaginate
	(*PaymentMethodOrder)(nil),                            // 36: billing.PaymentMethodOrder
	(*PaymentMethodParams)(nil),                           // 37: billing.PaymentMethodParams
	(*PaymentSystem)(nil),                                 // 38: billing.PaymentSystem
	(*PaymentMethodCard)(nil),                             // 39: billing.PaymentMethodCard
	(*PaymentMethodWallet)(nil),                           // 40: billing.PaymentMethodWallet
	(*PaymentMethodCrypto)(nil),                           // 41: billing.PaymentMethodCrypto
	(*ProjectPaymentMethod)(nil),                          // 42: billing.ProjectPaymentMethod
	(*PaymentMethod)(nil),                                 // 43: billing.PaymentMethod
	(*CardExpire)(nil),                                    // 44: billing.CardExpire
	(*SavedCard)(nil),                                     // 45: billing.SavedCard
	(*PaymentFormPaymentMethod)(nil),                      // 46: billing.PaymentFormPaymentMethod
	(*MerchantPaymentMethodPerTransactionCommission)(nil), // 47: billing.MerchantPaymentMethodPerTransactionCommission
	(*MerchantPaymentMethodCommissions)(nil),              // 48: billing.MerchantPaymentMethodCommissions
	(*MerchantPaymentMethodIntegration)(nil),              // 49: billing.MerchantPaymentMethodIntegration
	(*MerchantPaymentMethodIdentification)(nil),           // 50: billing.MerchantPaymentMethodIdentification
	(*MerchantPaymentMethod)(nil),                         // 51: billing.MerchantPaymentMethod
	(*RefundPayerData)(nil),                               // 52: billing.RefundPayerData
	(*RefundOrder)(nil),                                   // 53: billing.RefundOrder
	(*Refund)(nil),                                        // 54: billing.Refund
	(*MerchantPaymentMethodHistory)(nil),                  // 55: billing.MerchantPaymentMethodHistory
	(*CustomerIdentity)(nil),                              // 56: billing.CustomerIdentity
	(*CustomerIpHistory)(nil),                             // 57: billing.CustomerIpHistory
	(*CustomerAddressHistory)(nil),                        // 58: billing.CustomerAddressHistory
	(*CustomerStringValueHistory)(nil),                    // 59: billing.CustomerStringValueHistory
	(*Customer)(nil),                                      // 60: billing.Customer
	(*PaymentActivityItem)(nil),                           // 61: billing.PaymentActivityItem
	(*PaymentActivityItemCount)(nil),                      // 62: billing.PaymentActivityItemCount
	(*PaymentActivityItemLastTxnAt)(nil),                  // 63: billing.PaymentActivityItemLastTxnAt
	(*PaymentActivityItemRevenue)(nil),                    // 64: billing.PaymentActivityItemRevenue
	(*TokenUserEmailValue)(nil),                           // 65: billing.TokenUserEmailValue
	(*TokenUserPhoneValue)(nil),                           // 66: billing.TokenUserPhoneValue
	(*TokenUserIpValue)(nil),                              // 67: billing.TokenUserIpValue
	(*TokenUserLocaleValue)(nil),                          // 68: billing.TokenUserLocaleValue
	(*TokenUserValue)(nil),                                // 69: billing.TokenUserValue
	(*TokenUser)(nil),                                     // 70: billing.TokenUser
	(*TokenSettingsReturnUrl)(nil),                        // 71: billing.TokenSettingsReturnUrl
	(*TokenSettingsItem)(nil),                             // 72: billing.TokenSettingsItem
	(*TokenSettings)(nil),                                 // 73: billing.TokenSettings
	(*OrderIssuer)(nil),                                   // 74: billing.OrderIssuer
	(*OrderNotificationRefund)(nil),                       // 75: billing.OrderNotificationRefund
	(*GetCountryRequest)(nil),                             // 76: billing.GetCountryRequest
	(*CountryVatThreshold)(nil),                           // 77: billing.CountryVatThreshold
	(*Country)(nil),                                       // 78: billing.Country
	(*CountriesList)(nil),                                 // 79: billing.CountriesList
	(*GetPriceGroupRequest)(nil),                          // 80: billing.GetPriceGroupRequest
	(*PriceGroup)(nil),                                    // 81: billing.PriceGroup
	(*ZipCodeState)(nil),                                  // 82: billing.ZipCodeState
	(*ZipCode)(nil),                                       // 83: billing.ZipCode
	(*PaymentChannelCostSystem)(nil),                      // 84: billing.PaymentChannelCostSystem
	(*PaymentChannelCostSystemRequest)(nil),               // 85: billing.PaymentChannelCostSystemRequest
	(*PaymentChannelCostSystemList)(nil),                  // 86: billing.PaymentChannelCostSystemList
	(*PaymentChannelCostMerchant)(nil),                    // 87: billing.PaymentChannelCostMerchant
	(*PaymentChannelCostMerchantRequest)(nil),             // 88: billing.PaymentChannelCostMerchantRequest
	(*PaymentChannelCostMerchantList)(nil),                // 89: billing.PaymentChannelCostMerchantList
	(*PaymentChannelCostMerchantListRequest)(nil),         // 90: billing.PaymentChannelCostMerchantListRequest
	(*MoneyBackCostSystem)(nil),                           // 91: billing.MoneyBackCostSystem
	(*MoneyBackCostSystemRequest)(nil),                    // 92: billing.MoneyBackCostSystemRequest
	(*MoneyBackCostSystemList)(nil),                       // 93: billing.MoneyBackCostSystemList
	(*MoneyBackCostMerchant)(nil),                         // 94: billing.MoneyBackCostMerchant
	(*MoneyBackCostMerchantRequest)(nil),                  // 95: billing.MoneyBackCostMerchantRequest
	(*PaymentCostDeleteRequest)(nil),                      // 96: billing.PaymentCostDeleteRequest
	(*MoneyBackCostMerchantList)(nil),                     // 97: billing.MoneyBackCostMerchantList
	(*MoneyBackCostMerchantListRequest)(nil),              // 98: billing.MoneyBackCostMerchantListRequest
	(*AccountingEntrySource)(nil),                         // 99: billing.AccountingEntrySource
	(*AccountingEntry)(nil),                               // 100: billing.AccountingEntry
	(*RoyaltyReportTotals)(nil),                           // 101: billing.RoyaltyReportTotals
	(*RoyaltyReportProductSummaryItem)(nil),               // 102: billing.RoyaltyReportProductSummaryItem
	(*RoyaltyReportCorrectionItem)(nil),                   // 103: billing.RoyaltyReportCorrectionItem
	(*RoyaltyReportSummary)(nil),                          // 104: billing.RoyaltyReportSummary
	(*RoyaltyReport)(nil),                                 // 105: billing.RoyaltyReport
	(*RoyaltyReportChanges)(nil),                          // 106: billing.RoyaltyReportChanges
	(*VatTransaction)(nil),                                // 107: billing.VatTransaction
	(*VatReport)(nil),                                     // 108: billing.VatReport
	(*AnnualTurnover)(nil),                                // 109: billing.AnnualTurnover
	(*OrderViewMoney)(nil),                                // 110: billing.OrderViewMoney
	(*OrderViewMerchantInfo)(nil),                         // 111: billing.OrderViewMerchantInfo
	(*OrderViewReportSummary)(nil),                        // 112: billing.OrderViewReportSummary
	(*OrderViewPublic)(nil),                               // 113: billing.OrderViewPublic
	(*OrderViewPrivate)(nil),                              // 114: billing.OrderViewPrivate
	(*RecommendedPrice)(nil),                              // 115: billing.RecommendedPrice
	(*PriceTable)(nil),                                    // 116: billing.PriceTable
	(*PriceTableRange)(nil),                               // 117: billing.PriceTableRange
	(*Id)(nil),                                            // 118: billing.Id
	(*RangeInt)(nil),                                      // 119: billing.RangeInt
	(*MerchantTariffRatesPayment)(nil),                    // 120: billing.MerchantTariffRatesPayment
	(*MerchantTariffRatesSettingsItem)(nil),               // 121: billing.MerchantTariffRatesSettingsItem
	(*MerchantTariffRatesSettings)(nil),                   // 122: billing.MerchantTariffRatesSettings
	(*Key)(nil),                                           // 123: billing.Key
	(*PayoutDocument)(nil),                                // 124: billing.PayoutDocument
	(*PayoutDocumentChanges)(nil),                         // 125: billing.PayoutDocumentChanges
	(*MerchantBalance)(nil),                               // 126: billing.MerchantBalance
	(*OrderReceipt)(nil),                                  // 127: billing.OrderReceipt
	(*OrderReceiptItem)(nil),                              // 128: billing.OrderReceiptItem
	(*HasCurrencyItem)(nil),                               // 129: billing.HasCurrencyItem
	(*LocalizedUrl)(nil),                                  // 130: billing.LocalizedUrl
	(*ImageCollection)(nil),                               // 131: billing.ImageCollection
	(*ProductPrice)(nil),                                  // 132: billing.ProductPrice
	(*ProjectVirtualCurrency)(nil),                        // 133: billing.ProjectVirtualCurrency
	(*OrderCreateByPaylink)(nil),                          // 134: billing.OrderCreateByPaylink
	(*UserIpData)(nil),                                    // 135: billing.UserIpData
	(*PaymentFormDataChangeResponseItem)(nil),             // 136: billing.PaymentFormDataChangeResponseItem
	(*OperatingCompany)(nil),                              // 137: billing.OperatingCompany
	(*PaymentMinLimitSystem)(nil),                         // 138: billing.PaymentMinLimitSystem
	(*UserRole)(nil),                                      // 139: billing.UserRole
	(*RoleListItem)(nil),                                  // 140: billing.RoleListItem
	(*ActOfCompletionDocument)(nil),                       // 141: billing.ActOfCompletionDocument
	(*BrowserCookie)(nil),                                 // 142: billing.BrowserCookie
	(*MerchantDocument)(nil),                              // 143: billing.MerchantDocument
	(*RecurringPlan)(nil),                                 // 144: billing.RecurringPlan
	(*RecurringPlanCharge)(nil),                           // 145: billing.RecurringPlanCharge
	(*RecurringPlanPeriod)(nil),                           // 146: billing.RecurringPlanPeriod
	(*RecurringSubscription)(nil),                         // 147: billing.RecurringSubscription
	(*SubscriptionOrder)(nil),                             // 148: billing.SubscriptionOrder
	(*RecurringSubscriptionCustomer)(nil),                 // 149: billing.RecurringSubscriptionCustomer
	(*RecurringSubscriptionProject)(nil),                  // 150: billing.RecurringSubscriptionProject
	(*CardPayAddress)(nil),                                // 151: billing.CardPayAddress
	(*CardPayItem)(nil),                                   // 152: billing.CardPayItem
	(*CardPayMerchantOrder)(nil),                          // 153: billing.CardPayMerchantOrder
	(*CallbackCardPayBankCardAccount)(nil),                // 154: billing.CallbackCardPayBankCardAccount
	(*CallbackCardPayCryptoCurrencyAccount)(nil),          // 155: billing.CallbackCardPayCryptoCurrencyAccount
	(*CardPayCustomer)(nil),                               // 156: billing.CardPayCustomer
	(*CardPayEWalletAccount)(nil),                         // 157: billing.CardPayEWalletAccount
	(*CallbackCardPayPaymentData)(nil),                    // 158: billing.CallbackCardPayPaymentData
	(*CardPayCallbackRecurringDataFilling)(nil),           // 159: billing.CardPayCallbackRecurringDataFilling
	(*CardPayCallbackRecurringDataSubscription)(nil),      // 160: billing.CardPayCallbackRecurringDataSubscription
	(*CardPayCallbackRecurringData)(nil),                  // 161: billing.CardPayCallbackRecurringData
	(*CardPayPaymentCallback)(nil),                        // 162: billing.CardPayPaymentCallback
	(*CardPayRefundCallbackRefundData)(nil),               // 163: billing.CardPayRefundCallbackRefundData
	(*CardPayRefundCallbackPaymentData)(nil),              // 164: billing.CardPayRefundCallbackPaymentData
	(*CardPayRefundCallback)(nil),                         // 165: billing.CardPayRefundCallback
	(*WebHookPaymentMessage)(nil),                         // 166: billing.WebHookPaymentMessage
	nil,                                                   // 167: billing.OrderCreateRequest.RawParamsEntry
	nil,                                                   // 168: billing.OrderCreateRequest.MetadataEntry
	nil,                                                   // 169: billing.OrderCreateRequest.PrivateMetadataEntry
	nil,                                                   // 170: billing.Project.NameEntry
	nil,                                                   // 171: billing.Project.FullDescriptionEntry
	nil,                                                   // 172: billing.Project.ShortDescriptionEntry
	nil,                                                   // 173: billing.Project.FormDefaultTextEntry
	nil,                                                   // 174: billing.ProjectOrder.NameEntry
	nil,                                                   // 175: billing.ProjectOrder.FormDefaultTextEntry
	nil,                                                   // 176: billing.MerchantTariff.MinimalPayoutEntry
	nil,                                                   // 177: billing.Merchant.PaymentMethodsEntry
	nil,                                                   // 178: billing.OrderUser.MetadataEntry
	nil,                                                   // 179: billing.Order.MetadataEntry
	nil,                                                   // 180: billing.Order.PrivateMetadataEntry
	nil,                                                   // 181: billing.Order.ProjectParamsEntry
	nil,                                                   // 182: billing.Order.PaymentMethodTxnParamsEntry
	nil,                                                   // 183: billing.Order.PaymentRequisitesEntry
	nil,                                                   // 184: billing.Order.IsNotificationsSentEntry
	nil,                                                   // 185: billing.OrderItem.MetadataEntry
	nil,                                                   // 186: billing.PaymentMethod.TestSettingsEntry
	nil,                                                   // 187: billing.PaymentMethod.ProductionSettingsEntry
	nil,                                                   // 188: billing.Customer.MetadataEntry
	nil,                                                   // 189: billing.Customer.PaymentActivityEntry
	nil,                                                   // 190: billing.TokenUser.MetadataEntry
	nil,                                                   // 191: billing.TokenSettings.MetadataEntry
	nil,                                                   // 192: billing.MerchantTariffRatesSettings.PayoutEntry
	nil,                                                   // 193: billing.MerchantTariffRatesSettings.MinimalPayoutEntry
	nil,                                                   // 194: billing.ProjectVirtualCurrency.NameEntry
	nil,                                                   // 195: billing.ProjectVirtualCurrency.SuccessMessageEntry
	nil,                                                   // 196: billing.RecurringPlan.NameEntry
	nil,                                                   // 197: billing.RecurringPlan.DescriptionEntry
	nil,                                                   // 198: billing.RecurringSubscriptionProject.NameEntry
	(*timestamp.Timestamp)(nil),                           // 199: google.protobuf.Timestamp
}
var file_billing_proto_depIdxs = []int32{
	167, // 0: billing.OrderCreateRequest.raw_params:type_name -> billing.OrderCreateRequest.RawParamsEntry
	168, // 1: billing.OrderCreateRequest.metadata:type_name -> billing.OrderCreateRequest.MetadataEntry
	169, // 2: billing.OrderCreateRequest.private_metadata:type_name -> billing.OrderCreateRequest.PrivateMetadataEntry
	28,  // 3: billing.OrderCreateRequest.user:type_name -> billing.OrderUser
	170, // 4: billing.Project.name:type_name -> billing.Project.NameEntry
	199, // 5: billing.Project.created_at:type_name -> google.protobuf.Timestamp
	199, // 6: billing.Project.updated_at:type_name -> google.protobuf.Timestamp
	171, // 7: billing.Project.full_description:type_name -> billing.Project.FullDescriptionEntry
	172, // 8: billing.Project.short_description:type_name -> billing.Project.ShortDescriptionEntry
	129, // 9: billing.Project.currencies:type_name -> billing.HasCurrencyItem
	131, // 10: billing.Project.cover:type_name -> billing.ImageCollection
	133, // 11: billing.Project.virtual_currency:type_name -> billing.ProjectVirtualCurrency
	2,   // 12: billing.Project.redirect_settings:type_name -> billing.ProjectRedirectSettings
	4,   // 13: billing.Project.webhook_testing:type_name -> billing.WebHookTesting
	173, // 14: billing.Project.form_default_text:type_name -> billing.Project.FormDefaultTextEntry
	5,   // 15: billing.WebHookTesting.products:type_name -> billing.ProductsTesting
	6,   // 16: billing.WebHookTesting.virtual_currency:type_name -> billing.VirtualCurrencyTesting
	7,   // 17: billing.WebHookTesting.keys:type_name -> billing.KeysTesting
	174, // 18: billing.ProjectOrder.name:type_name -> billing.ProjectOrder.NameEntry
	2,   // 19: billing.ProjectOrder.redirect_settings:type_name -> billing.ProjectRedirectSettings
	199, // 20: billing.ProjectOrder.first_payment_at:type_name -> google.protobuf.Timestamp
	175, // 21: billing.ProjectOrder.form_default_text:type_name -> billing.ProjectOrder.FormDefaultTextEntry
	11,  // 22: billing.MerchantContact.authorized:type_name -> billing.MerchantContactAuthorized
	10,  // 23: billing.MerchantContact.technical:type_name -> billing.MerchantContactTechnical
	199, // 24: billing.MerchantLastPayout.date:type_name -> google.protobuf.Timestamp
	199, // 25: billing.MerchantUser.registration_date:type_name -> google.protobuf.Timestamp
	199, // 26: billing.MerchantAgreementSignatureDataSignUrl.expires_at:type_name -> google.protobuf.Timestamp
	17,  // 27: billing.MerchantAgreementSignatureData.merchant_sign_url:type_name -> billing.MerchantAgreementSignatureDataSignUrl
	17,  // 28: billing.MerchantAgreementSignatureData.ps_sign_url:type_name -> billing.MerchantAgreementSignatureDataSignUrl
	120, // 29: billing.MerchantTariff.payment:type_name -> billing.MerchantTariffRatesPayment
	121, // 30: billing.MerchantTariff.payout:type_name -> billing.MerchantTariffRatesSettingsItem
	121, // 31: billing.MerchantTariff.chargeback:type_name -> billing.MerchantTariffRatesSettingsItem
	121, // 32: billing.MerchantTariff.refund:type_name -> billing.MerchantTariffRatesSettingsItem
	176, // 33: billing.MerchantTariff.minimal_payout:type_name -> billing.MerchantTariff.MinimalPayoutEntry
	14,  // 34: billing.Merchant.user:type_name -> billing.MerchantUser
	15,  // 35: billing.Merchant.company:type_name -> billing.MerchantCompanyInfo
	9,   // 36: billing.Merchant.contacts:type_name -> billing.MerchantContact
	12,  // 37: billing.Merchant.banking:type_name -> billing.MerchantBanking
	199, // 38: billing.Merchant.created_at:type_name -> google.protobuf.Timestamp
	199, // 39: billing.Merchant.updated_at:type_name -> google.protobuf.Timestamp
	199, // 40: billing.Merchant.first_payment_at:type_name -> google.protobuf.Timestamp
	13,  // 41: billing.Merchant.last_payout:type_name -> billing.MerchantLastPayout
	177, // 42: billing.Merchant.payment_methods:type_name -> billing.Merchant.PaymentMethodsEntry
	18,  // 43: billing.Merchant.agreement_signature_data:type_name -> billing.MerchantAgreementSignatureData
	16,  // 44: billing.Merchant.steps:type_name -> billing.MerchantCompletedSteps
	199, // 45: billing.Merchant.received_date:type_name -> google.protobuf.Timestamp
	199, // 46: billing.Merchant.status_last_updated_at:type_name -> google.protobuf.Timestamp
	19,  // 47: billing.Merchant.tariff:type_name -> billing.MerchantTariff
	14,  // 48: billing.MerchantShortInfo.user:type_name -> billing.MerchantUser
	15,  // 49: billing.MerchantShortInfo.company:type_name -> billing.MerchantCompanyInfo
	9,   // 50: billing.MerchantShortInfo.contacts:type_name -> billing.MerchantContact
	12,  // 51: billing.MerchantShortInfo.banking:type_name -> billing.MerchantBanking
	199, // 52: billing.MerchantShortInfo.created_at:type_name -> google.protobuf.Timestamp
	126, // 53: billing.MerchantShortInfo.balance:type_name -> billing.MerchantBalance
	199, // 54: billing.MerchantShortInfo.status_last_updated_at:type_name -> google.protobuf.Timestamp
	199, // 55: billing.MerchantShortInfo.first_payment_at:type_name -> google.protobuf.Timestamp
	23,  // 56: billing.Notification.statuses:type_name -> billing.SystemNotificationStatuses
	199, // 57: billing.Notification.created_at:type_name -> google.protobuf.Timestamp
	199, // 58: billing.Notification.updated_at:type_name -> google.protobuf.Timestamp
	27,  // 59: billing.OrderUser.address:type_name -> billing.OrderBillingAddress
	178, // 60: billing.OrderUser.metadata:type_name -> billing.OrderUser.MetadataEntry
	199, // 61: billing.Order.created_at:type_name -> google.protobuf.Timestamp
	199, // 62: billing.Order.updated_at:type_name -> google.protobuf.Timestamp
	199, // 63: billing.Order.canceled_at:type_name -> google.protobuf.Timestamp
	29,  // 64: billing.Order.cancellation:type_name -> billing.OrderNotificationCancellation
	199, // 65: billing.Order.refunded_at:type_name -> google.protobuf.Timestamp
	74,  // 66: billing.Order.issuer:type_name -> billing.OrderIssuer
	28,  // 67: billing.Order.user:type_name -> billing.OrderUser
	27,  // 68: billing.Order.billing_address:type_name -> billing.OrderBillingAddress
	26,  // 69: billing.Order.tax:type_name -> billing.OrderTax
	36,  // 70: billing.Order.payment_method:type_name -> billing.PaymentMethodOrder
	34,  // 71: billing.Order.items:type_name -> billing.OrderItem
	75,  // 72: billing.Order.refund:type_name -> billing.OrderNotificationRefund
	179, // 73: billing.Order.metadata:type_name -> billing.Order.MetadataEntry
	180, // 74: billing.Order.private_metadata:type_name -> billing.Order.PrivateMetadataEntry
	8,   // 75: billing.Order.project:type_name -> billing.ProjectOrder
	199, // 76: billing.Order.project_last_requested_at:type_name -> google.protobuf.Timestamp
	181, // 77: billing.Order.project_params:type_name -> billing.Order.ProjectParamsEntry
	199, // 78: billing.Order.payment_method_order_closed_at:type_name -> google.protobuf.Timestamp
	182, // 79: billing.Order.payment_method_txn_params:type_name -> billing.Order.PaymentMethodTxnParamsEntry
	183, // 80: billing.Order.payment_requisites:type_name -> billing.Order.PaymentRequisitesEntry
	199, // 81: billing.Order.expire_date_to_form_input:type_name -> google.protobuf.Timestamp
	184, // 82: billing.Order.is_notifications_sent:type_name -> billing.Order.IsNotificationsSentEntry
	33,  // 83: billing.Order.country_restriction:type_name -> billing.CountryRestriction
	32,  // 84: billing.Order.parent_order:type_name -> billing.ParentOrder
	199, // 85: billing.Order.parent_payment_at:type_name -> google.protobuf.Timestamp
	111, // 86: billing.Order.merchant_info:type_name -> billing.OrderViewMerchantInfo
	110, // 87: billing.Order.net_revenue:type_name -> billing.OrderViewMoney
	110, // 88: billing.Order.fee:type_name -> billing.OrderViewMoney
	31,  // 89: billing.Order.recurring_settings:type_name -> billing.OrderRecurringSettings
	185, // 90: billing.OrderItem.metadata:type_name -> billing.OrderItem.MetadataEntry
	199, // 91: billing.OrderItem.created_at:type_name -> google.protobuf.Timestamp
	199, // 92: billing.OrderItem.updated_at:type_name -> google.protobuf.Timestamp
	30,  // 93: billing.OrderPaginate.items:type_name -> billing.Order
	37,  // 94: billing.PaymentMethodOrder.params:type_name -> billing.PaymentMethodParams
	39,  // 95: billing.PaymentMethodOrder.card:type_name -> billing.PaymentMethodCard
	40,  // 96: billing.PaymentMethodOrder.wallet:type_name -> billing.PaymentMethodWallet
	41,  // 97: billing.PaymentMethodOrder.crypto_currency:type_name -> billing.PaymentMethodCrypto
	199, // 98: billing.PaymentSystem.created_at:type_name -> google.protobuf.Timestamp
	199, // 99: billing.PaymentSystem.updated_at:type_name -> google.protobuf.Timestamp
	199, // 100: billing.ProjectPaymentMethod.created_at:type_name -> google.protobuf.Timestamp
	186, // 101: billing.PaymentMethod.test_settings:type_name -> billing.PaymentMethod.TestSettingsEntry
	187, // 102: billing.PaymentMethod.production_settings:type_name -> billing.PaymentMethod.ProductionSettingsEntry
	199, // 103: billing.PaymentMethod.created_at:type_name -> google.protobuf.Timestamp
	199, // 104: billing.PaymentMethod.updated_at:type_name -> google.protobuf.Timestamp
	44,  // 105: billing.SavedCard.expire:type_name -> billing.CardExpire
	45,  // 106: billing.PaymentFormPaymentMethod.saved_cards:type_name -> billing.SavedCard
	47,  // 107: billing.MerchantPaymentMethodCommissions.per_transaction:type_name -> billing.MerchantPaymentMethodPerTransactionCommission
	50,  // 108: billing.MerchantPaymentMethod.payment_method:type_name -> billing.MerchantPaymentMethodIdentification
	48,  // 109: billing.MerchantPaymentMethod.commission:type_name -> billing.MerchantPaymentMethodCommissions
	49,  // 110: billing.MerchantPaymentMethod.integration:type_name -> billing.MerchantPaymentMethodIntegration
	53,  // 111: billing.Refund.original_order:type_name -> billing.RefundOrder
	199, // 112: billing.Refund.created_at:type_name -> google.protobuf.Timestamp
	199, // 113: billing.Refund.updated_at:type_name -> google.protobuf.Timestamp
	52,  // 114: billing.Refund.payer_data:type_name -> billing.RefundPayerData
	51,  // 115: billing.MerchantPaymentMethodHistory.paymentMethod:type_name -> billing.MerchantPaymentMethod
	199, // 116: billing.MerchantPaymentMethodHistory.created_at:type_name -> google.protobuf.Timestamp
	199, // 117: billing.CustomerIdentity.created_at:type_name -> google.protobuf.Timestamp
	199, // 118: billing.CustomerIpHistory.created_at:type_name -> google.protobuf.Timestamp
	27,  // 119: billing.CustomerIpHistory.address:type_name -> billing.OrderBillingAddress
	199, // 120: billing.CustomerAddressHistory.created_at:type_name -> google.protobuf.Timestamp
	199, // 121: billing.CustomerStringValueHistory.created_at:type_name -> google.protobuf.Timestamp
	27,  // 122: billing.Customer.address:type_name -> billing.OrderBillingAddress
	56,  // 123: billing.Customer.identity:type_name -> billing.CustomerIdentity
	57,  // 124: billing.Customer.ip_history:type_name -> billing.CustomerIpHistory
	58,  // 125: billing.Customer.address_history:type_name -> billing.CustomerAddressHistory
	59,  // 126: billing.Customer.locale_history:type_name -> billing.CustomerStringValueHistory
	59,  // 127: billing.Customer.accept_language_history:type_name -> billing.CustomerStringValueHistory
	188, // 128: billing.Customer.metadata:type_name -> billing.Customer.MetadataEntry
	199, // 129: billing.Customer.created_at:type_name -> google.protobuf.Timestamp
	199, // 130: billing.Customer.updated_at:type_name -> google.protobuf.Timestamp
	189, // 131: billing.Customer.payment_activity:type_name -> billing.Customer.PaymentActivityEntry
	62,  // 132: billing.PaymentActivityItem.count:type_name -> billing.PaymentActivityItemCount
	63,  // 133: billing.PaymentActivityItem.last_txn_at:type_name -> billing.PaymentActivityItemLastTxnAt
	64,  // 134: billing.PaymentActivityItem.revenue:type_name -> billing.PaymentActivityItemRevenue
	199, // 135: billing.PaymentActivityItemLastTxnAt.payment:type_name -> google.protobuf.Timestamp
	199, // 136: billing.PaymentActivityItemLastTxnAt.refund:type_name -> google.protobuf.Timestamp
	65,  // 137: billing.TokenUser.email:type_name -> billing.TokenUserEmailValue
	66,  // 138: billing.TokenUser.phone:type_name -> billing.TokenUserPhoneValue
	69,  // 139: billing.TokenUser.name:type_name -> billing.TokenUserValue
	67,  // 140: billing.TokenUser.ip:type_name -> billing.TokenUserIpValue
	68,  // 141: billing.TokenUser.locale:type_name -> billing.TokenUserLocaleValue
	27,  // 142: billing.TokenUser.address:type_name -> billing.OrderBillingAddress
	190, // 143: billing.TokenUser.metadata:type_name -> billing.TokenUser.MetadataEntry
	71,  // 144: billing.TokenSettings.return_url:type_name -> billing.TokenSettingsReturnUrl
	191, // 145: billing.TokenSettings.metadata:type_name -> billing.TokenSettings.MetadataEntry
	77,  // 146: billing.Country.vat_threshold:type_name -> billing.CountryVatThreshold
	199, // 147: billing.Country.created_at:type_name -> google.protobuf.Timestamp
	199, // 148: billing.Country.updated_at:type_name -> google.protobuf.Timestamp
	78,  // 149: billing.CountriesList.countries:type_name -> billing.Country
	199, // 150: billing.PriceGroup.created_at:type_name -> google.protobuf.Timestamp
	199, // 151: billing.PriceGroup.updated_at:type_name -> google.protobuf.Timestamp
	82,  // 152: billing.ZipCode.state:type_name -> billing.ZipCodeState
	199, // 153: billing.ZipCode.created_at:type_name -> google.protobuf.Timestamp
	199, // 154: billing.PaymentChannelCostSystem.created_at:type_name -> google.protobuf.Timestamp
	199, // 155: billing.PaymentChannelCostSystem.updated_at:type_name -> google.protobuf.Timestamp
	84,  // 156: billing.PaymentChannelCostSystemList.items:type_name -> billing.PaymentChannelCostSystem
	199, // 157: billing.PaymentChannelCostMerchant.created_at:type_name -> google.protobuf.Timestamp
	199, // 158: billing.PaymentChannelCostMerchant.updated_at:type_name -> google.protobuf.Timestamp
	87,  // 159: billing.PaymentChannelCostMerchantList.items:type_name -> billing.PaymentChannelCostMerchant
	199, // 160: billing.MoneyBackCostSystem.created_at:type_name -> google.protobuf.Timestamp
	199, // 161: billing.MoneyBackCostSystem.updated_at:type_name -> google.protobuf.Timestamp
	91,  // 162: billing.MoneyBackCostSystemList.items:type_name -> billing.MoneyBackCostSystem
	199, // 163: billing.MoneyBackCostMerchant.created_at:type_name -> google.protobuf.Timestamp
	199, // 164: billing.MoneyBackCostMerchant.updated_at:type_name -> google.protobuf.Timestamp
	94,  // 165: billing.MoneyBackCostMerchantList.items:type_name -> billing.MoneyBackCostMerchant
	99,  // 166: billing.AccountingEntry.source:type_name -> billing.AccountingEntrySource
	199, // 167: billing.AccountingEntry.created_at:type_name -> google.protobuf.Timestamp
	199, // 168: billing.AccountingEntry.available_on:type_name -> google.protobuf.Timestamp
	199, // 169: billing.RoyaltyReportCorrectionItem.entry_date:type_name -> google.protobuf.Timestamp
	102, // 170: billing.RoyaltyReportSummary.products_items:type_name -> billing.RoyaltyReportProductSummaryItem
	102, // 171: billing.RoyaltyReportSummary.products_total:type_name -> billing.RoyaltyReportProductSummaryItem
	103, // 172: billing.RoyaltyReportSummary.corrections:type_name -> billing.RoyaltyReportCorrectionItem
	103, // 173: billing.RoyaltyReportSummary.rolling_reserves:type_name -> billing.RoyaltyReportCorrectionItem
	199, // 174: billing.RoyaltyReport.created_at:type_name -> google.protobuf.Timestamp
	199, // 175: billing.RoyaltyReport.updated_at:type_name -> google.protobuf.Timestamp
	199, // 176: billing.RoyaltyReport.payout_date:type_name -> google.protobuf.Timestamp
	199, // 177: billing.RoyaltyReport.period_from:type_name -> google.protobuf.Timestamp
	199, // 178: billing.RoyaltyReport.period_to:type_name -> google.protobuf.Timestamp
	199, // 179: billing.RoyaltyReport.accept_expire_at:type_name -> google.protobuf.Timestamp
	199, // 180: billing.RoyaltyReport.accepted_at:type_name -> google.protobuf.Timestamp
	101, // 181: billing.RoyaltyReport.totals:type_name -> billing.RoyaltyReportTotals
	104, // 182: billing.RoyaltyReport.summary:type_name -> billing.RoyaltyReportSummary
	199, // 183: billing.RoyaltyReport.dispute_started_at:type_name -> google.protobuf.Timestamp
	199, // 184: billing.RoyaltyReport.dispute_closed_at:type_name -> google.protobuf.Timestamp
	199, // 185: billing.RoyaltyReportChanges.created_at:type_name -> google.protobuf.Timestamp
	27,  // 186: billing.VatTransaction.billing_address:type_name -> billing.OrderBillingAddress
	199, // 187: billing.VatTransaction.date_time:type_name -> google.protobuf.Timestamp
	199, // 188: billing.VatReport.date_from:type_name -> google.protobuf.Timestamp
	199, // 189: billing.VatReport.date_to:type_name -> google.protobuf.Timestamp
	199, // 190: billing.VatReport.pay_until_date:type_name -> google.protobuf.Timestamp
	199, // 191: billing.VatReport.created_at:type_name -> google.protobuf.Timestamp
	199, // 192: billing.VatReport.updated_at:type_name -> google.protobuf.Timestamp
	199, // 193: billing.VatReport.paid_at:type_name -> google.protobuf.Timestamp
	110, // 194: billing.OrderViewReportSummary.charge:type_name -> billing.OrderViewMoney
	110, // 195: billing.OrderViewReportSummary.gross:type_name -> billing.OrderViewMoney
	110, // 196: billing.OrderViewReportSummary.vat:type_name -> billing.OrderViewMoney
	110, // 197: billing.OrderViewReportSummary.fees:type_name -> billing.OrderViewMoney
	110, // 198: billing.OrderViewReportSummary.revenue:type_name -> billing.OrderViewMoney
	8,   // 199: billing.OrderViewPublic.project:type_name -> billing.ProjectOrder
	199, // 200: billing.OrderViewPublic.created_at:type_name -> google.protobuf.Timestamp
	36,  // 201: billing.OrderViewPublic.payment_method:type_name -> billing.PaymentMethodOrder
	199, // 202: billing.OrderViewPublic.transaction_date:type_name -> google.protobuf.Timestamp
	28,  // 203: billing.OrderViewPublic.user:type_name -> billing.OrderUser
	27,  // 204: billing.OrderViewPublic.billing_address:type_name -> billing.OrderBillingAddress
	110, // 205: billing.OrderViewPublic.gross_revenue:type_name -> billing.OrderViewMoney
	110, // 206: billing.OrderViewPublic.tax_fee:type_name -> billing.OrderViewMoney
	110, // 207: billing.OrderViewPublic.tax_fee_currency_exchange_fee:type_name -> billing.OrderViewMoney
	110, // 208: billing.OrderViewPublic.tax_fee_total:type_name -> billing.OrderViewMoney
	110, // 209: billing.OrderViewPublic.method_fee_total:type_name -> billing.OrderViewMoney
	110, // 210: billing.OrderViewPublic.method_fee_tariff:type_name -> billing.OrderViewMoney
	110, // 211: billing.OrderViewPublic.method_fixed_fee_tariff:type_name -> billing.OrderViewMoney
	110, // 212: billing.OrderViewPublic.paysuper_fixed_fee:type_name -> billing.OrderViewMoney
	110, // 213: billing.OrderViewPublic.fees_total:type_name -> billing.OrderViewMoney
	110, // 214: billing.OrderViewPublic.fees_total_local:type_name -> billing.OrderViewMoney
	110, // 215: billing.OrderViewPublic.net_revenue:type_name -> billing.OrderViewMoney
	110, // 216: billing.OrderViewPublic.refund_gross_revenue:type_name -> billing.OrderViewMoney
	110, // 217: billing.OrderViewPublic.method_refund_fee_tariff:type_name -> billing.OrderViewMoney
	110, // 218: billing.OrderViewPublic.merchant_refund_fixed_fee_tariff:type_name -> billing.OrderViewMoney
	110, // 219: billing.OrderViewPublic.refund_tax_fee:type_name -> billing.OrderViewMoney
	110, // 220: billing.OrderViewPublic.refund_tax_fee_currency_exchange_fee:type_name -> billing.OrderViewMoney
	110, // 221: billing.OrderViewPublic.paysuper_refund_tax_fee_currency_exchange_fee:type_name -> billing.OrderViewMoney
	110, // 222: billing.OrderViewPublic.refund_reverse_revenue:type_name -> billing.OrderViewMoney
	110, // 223: billing.OrderViewPublic.refund_fees_total:type_name -> billing.OrderViewMoney
	110, // 224: billing.OrderViewPublic.refund_fees_total_local:type_name -> billing.OrderViewMoney
	74,  // 225: billing.OrderViewPublic.issuer:type_name -> billing.OrderIssuer
	34,  // 226: billing.OrderViewPublic.items:type_name -> billing.OrderItem
	32,  // 227: billing.OrderViewPublic.parent_order:type_name -> billing.ParentOrder
	75,  // 228: billing.OrderViewPublic.refund:type_name -> billing.OrderNotificationRefund
	29,  // 229: billing.OrderViewPublic.cancellation:type_name -> billing.OrderNotificationCancellation
	110, // 230: billing.OrderViewPublic.order_charge:type_name -> billing.OrderViewMoney
	111, // 231: billing.OrderViewPublic.merchant_info:type_name -> billing.OrderViewMerchantInfo
	110, // 232: billing.OrderViewPublic.payment_gross_revenue:type_name -> billing.OrderViewMoney
	110, // 233: billing.OrderViewPublic.payment_refund_gross_revenue:type_name -> billing.OrderViewMoney
	110, // 234: billing.OrderViewPublic.refund_tax_fee_total:type_name -> billing.OrderViewMoney
	112, // 235: billing.OrderViewPublic.report_summary:type_name -> billing.OrderViewReportSummary
	8,   // 236: billing.OrderViewPrivate.project:type_name -> billing.ProjectOrder
	199, // 237: billing.OrderViewPrivate.created_at:type_name -> google.protobuf.Timestamp
	36,  // 238: billing.OrderViewPrivate.payment_method:type_name -> billing.PaymentMethodOrder
	199, // 239: billing.OrderViewPrivate.transaction_date:type_name -> google.protobuf.Timestamp
	28,  // 240: billing.OrderViewPrivate.user:type_name -> billing.OrderUser
	27,  // 241: billing.OrderViewPrivate.billing_address:type_name -> billing.OrderBillingAddress
	110, // 242: billing.OrderViewPrivate.payment_gross_revenue_local:type_name -> billing.OrderViewMoney
	110, // 243: billing.OrderViewPrivate.payment_gross_revenue_origin:type_name -> billing.OrderViewMoney
	110, // 244: billing.OrderViewPrivate.payment_gross_revenue:type_name -> billing.OrderViewMoney
	110, // 245: billing.OrderViewPrivate.payment_tax_fee:type_name -> billing.OrderViewMoney
	110, // 246: billing.OrderViewPrivate.payment_tax_fee_local:type_name -> billing.OrderViewMoney
	110, // 247: billing.OrderViewPrivate.payment_tax_fee_origin:type_name -> billing.OrderViewMoney
	110, // 248: billing.OrderViewPrivate.payment_tax_fee_currency_exchange_fee:type_name -> billing.OrderViewMoney
	110, // 249: billing.OrderViewPrivate.payment_tax_fee_total:type_name -> billing.OrderViewMoney
	110, // 250: billing.OrderViewPrivate.payment_gross_revenue_fx:type_name -> billing.OrderViewMoney
	110, // 251: billing.OrderViewPrivate.payment_gross_revenue_fx_tax_fee:type_name -> billing.OrderViewMoney
	110, // 252: billing.OrderViewPrivate.payment_gross_revenue_fx_profit:type_name -> billing.OrderViewMoney
	110, // 253: billing.OrderViewPrivate.gross_revenue:type_name -> billing.OrderViewMoney
	110, // 254: billing.OrderViewPrivate.tax_fee:type_name -> billing.OrderViewMoney
	110, // 255: billing.OrderViewPrivate.tax_fee_currency_exchange_fee:type_name -> billing.OrderViewMoney
	110, // 256: billing.OrderViewPrivate.tax_fee_total:type_name -> billing.OrderViewMoney
	110, // 257: billing.OrderViewPrivate.method_fee_total:type_name -> billing.OrderViewMoney
	110, // 258: billing.OrderViewPrivate.method_fee_tariff:type_name -> billing.OrderViewMoney
	110, // 259: billing.OrderViewPrivate.paysuper_method_fee_tariff_self_cost:type_name -> billing.OrderViewMoney
	110, // 260: billing.OrderViewPrivate.paysuper_method_fee_profit:type_name -> billing.OrderViewMoney
	110, // 261: billing.OrderViewPrivate.method_fixed_fee_tariff:type_name -> billing.OrderViewMoney
	110, // 262: billing.OrderViewPrivate.paysuper_method_fixed_fee_tariff_fx_profit:type_name -> billing.OrderViewMoney
	110, // 263: billing.OrderViewPrivate.paysuper_method_fixed_fee_tariff_self_cost:type_name -> billing.OrderViewMoney
	110, // 264: billing.OrderViewPrivate.paysuper_method_fixed_fee_tariff_total_profit:type_name -> billing.OrderViewMoney
	110, // 265: billing.OrderViewPrivate.paysuper_fixed_fee:type_name -> billing.OrderViewMoney
	110, // 266: billing.OrderViewPrivate.paysuper_fixed_fee_fx_profit:type_name -> billing.OrderViewMoney
	110, // 267: billing.OrderViewPrivate.fees_total:type_name -> billing.OrderViewMoney
	110, // 268: billing.OrderViewPrivate.fees_total_local:type_name -> billing.OrderViewMoney
	110, // 269: billing.OrderViewPrivate.net_revenue:type_name -> billing.OrderViewMoney
	110, // 270: billing.OrderViewPrivate.paysuper_method_total_profit:type_name -> billing.OrderViewMoney
	110, // 271: billing.OrderViewPrivate.paysuper_total_profit:type_name -> billing.OrderViewMoney
	110, // 272: billing.OrderViewPrivate.payment_refund_gross_revenue_local:type_name -> billing.OrderViewMoney
	110, // 273: billing.OrderViewPrivate.payment_refund_gross_revenue_origin:type_name -> billing.OrderViewMoney
	110, // 274: billing.OrderViewPrivate.payment_refund_gross_revenue:type_name -> billing.OrderViewMoney
	110, // 275: billing.OrderViewPrivate.payment_refund_tax_fee:type_name -> billing.OrderViewMoney
	110, // 276: billing.OrderViewPrivate.payment_refund_tax_fee_local:type_name -> billing.OrderViewMoney
	110, // 277: billing.OrderViewPrivate.payment_refund_tax_fee_origin:type_name -> billing.OrderViewMoney
	110, // 278: billing.OrderViewPrivate.payment_refund_fee_tariff:type_name -> billing.OrderViewMoney
	110, // 279: billing.OrderViewPrivate.method_refund_fixed_fee_tariff:type_name -> billing.OrderViewMoney
	110, // 280: billing.OrderViewPrivate.refund_gross_revenue:type_name -> billing.OrderViewMoney
	110, // 281: billing.OrderViewPrivate.refund_gross_revenue_fx:type_name -> billing.OrderViewMoney
	110, // 282: billing.OrderViewPrivate.method_refund_fee_tariff:type_name -> billing.OrderViewMoney
	110, // 283: billing.OrderViewPrivate.paysuper_method_refund_fee_tariff_profit:type_name -> billing.OrderViewMoney
	110, // 284: billing.OrderViewPrivate.paysuper_method_refund_fixed_fee_tariff_self_cost:type_name -> billing.OrderViewMoney
	110, // 285: billing.OrderViewPrivate.merchant_refund_fixed_fee_tariff:type_name -> billing.OrderViewMoney
	110, // 286: billing.OrderViewPrivate.paysuper_method_refund_fixed_fee_tariff_profit:type_name -> billing.OrderViewMoney
	110, // 287: billing.OrderViewPrivate.refund_tax_fee:type_name -> billing.OrderViewMoney
	110, // 288: billing.OrderViewPrivate.refund_tax_fee_currency_exchange_fee:type_name -> billing.OrderViewMoney
	110, // 289: billing.OrderViewPrivate.paysuper_refund_tax_fee_currency_exchange_fee:type_name -> billing.OrderViewMoney
	110, // 290: billing.OrderViewPrivate.refund_tax_fee_total:type_name -> billing.OrderViewMoney
	110, // 291: billing.OrderViewPrivate.refund_reverse_revenue:type_name -> billing.OrderViewMoney
	110, // 292: billing.OrderViewPrivate.refund_fees_total:type_name -> billing.OrderViewMoney
	110, // 293: billing.OrderViewPrivate.refund_fees_total_local:type_name -> billing.OrderViewMoney
	110, // 294: billing.OrderViewPrivate.paysuper_refund_total_profit:type_name -> billing.OrderViewMoney
	74,  // 295: billing.OrderViewPrivate.issuer:type_name -> billing.OrderIssuer
	34,  // 296: billing.OrderViewPrivate.items:type_name -> billing.OrderItem
	32,  // 297: billing.OrderViewPrivate.parent_order:type_name -> billing.ParentOrder
	75,  // 298: billing.OrderViewPrivate.refund:type_name -> billing.OrderNotificationRefund
	29,  // 299: billing.OrderViewPrivate.cancellation:type_name -> billing.OrderNotificationCancellation
	110, // 300: billing.OrderViewPrivate.order_charge:type_name -> billing.OrderViewMoney
	111, // 301: billing.OrderViewPrivate.merchant_info:type_name -> billing.OrderViewMerchantInfo
	110, // 302: billing.OrderViewPrivate.order_charge_before_vat:type_name -> billing.OrderViewMoney
	112, // 303: billing.OrderViewPrivate.report_summary:type_name -> billing.OrderViewReportSummary
	117, // 304: billing.PriceTable.ranges:type_name -> billing.PriceTableRange
	121, // 305: billing.MerchantTariffRatesSettings.refund:type_name -> billing.MerchantTariffRatesSettingsItem
	121, // 306: billing.MerchantTariffRatesSettings.chargeback:type_name -> billing.MerchantTariffRatesSettingsItem
	192, // 307: billing.MerchantTariffRatesSettings.payout:type_name -> billing.MerchantTariffRatesSettings.PayoutEntry
	193, // 308: billing.MerchantTariffRatesSettings.minimal_payout:type_name -> billing.MerchantTariffRatesSettings.MinimalPayoutEntry
	199, // 309: billing.Key.created_at:type_name -> google.protobuf.Timestamp
	199, // 310: billing.Key.reserved_to:type_name -> google.protobuf.Timestamp
	199, // 311: billing.Key.redeemed_at:type_name -> google.protobuf.Timestamp
	199, // 312: billing.PayoutDocument.period_from:type_name -> google.protobuf.Timestamp
	199, // 313: billing.PayoutDocument.period_to:type_name -> google.protobuf.Timestamp
	12,  // 314: billing.PayoutDocument.destination:type_name -> billing.MerchantBanking
	15,  // 315: billing.PayoutDocument.company:type_name -> billing.MerchantCompanyInfo
	199, // 316: billing.PayoutDocument.created_at:type_name -> google.protobuf.Timestamp
	199, // 317: billing.PayoutDocument.updated_at:type_name -> google.protobuf.Timestamp
	199, // 318: billing.PayoutDocument.arrival_date:type_name -> google.protobuf.Timestamp
	199, // 319: billing.PayoutDocument.paid_at:type_name -> google.protobuf.Timestamp
	199, // 320: billing.PayoutDocumentChanges.created_at:type_name -> google.protobuf.Timestamp
	199, // 321: billing.MerchantBalance.created_at:type_name -> google.protobuf.Timestamp
	128, // 322: billing.OrderReceipt.items:type_name -> billing.OrderReceiptItem
	130, // 323: billing.ImageCollection.images:type_name -> billing.LocalizedUrl
	194, // 324: billing.ProjectVirtualCurrency.name:type_name -> billing.ProjectVirtualCurrency.NameEntry
	195, // 325: billing.ProjectVirtualCurrency.success_message:type_name -> billing.ProjectVirtualCurrency.SuccessMessageEntry
	132, // 326: billing.ProjectVirtualCurrency.prices:type_name -> billing.ProductPrice
	135, // 327: billing.PaymentFormDataChangeResponseItem.user_ip_data:type_name -> billing.UserIpData
	34,  // 328: billing.PaymentFormDataChangeResponseItem.items:type_name -> billing.OrderItem
	199, // 329: billing.OperatingCompany.created_at:type_name -> google.protobuf.Timestamp
	199, // 330: billing.OperatingCompany.updated_at:type_name -> google.protobuf.Timestamp
	199, // 331: billing.PaymentMinLimitSystem.created_at:type_name -> google.protobuf.Timestamp
	199, // 332: billing.PaymentMinLimitSystem.updated_at:type_name -> google.protobuf.Timestamp
	199, // 333: billing.UserRole.created_at:type_name -> google.protobuf.Timestamp
	199, // 334: billing.UserRole.updated_at:type_name -> google.protobuf.Timestamp
	199, // 335: billing.MerchantDocument.created_at:type_name -> google.protobuf.Timestamp
	196, // 336: billing.RecurringPlan.name:type_name -> billing.RecurringPlan.NameEntry
	145, // 337: billing.RecurringPlan.charge:type_name -> billing.RecurringPlanCharge
	197, // 338: billing.RecurringPlan.description:type_name -> billing.RecurringPlan.DescriptionEntry
	146, // 339: billing.RecurringPlan.expiration:type_name -> billing.RecurringPlanPeriod
	146, // 340: billing.RecurringPlan.trial:type_name -> billing.RecurringPlanPeriod
	146, // 341: billing.RecurringPlan.grace_period:type_name -> billing.RecurringPlanPeriod
	199, // 342: billing.RecurringPlan.created_at:type_name -> google.protobuf.Timestamp
	199, // 343: billing.RecurringPlan.updated_at:type_name -> google.protobuf.Timestamp
	199, // 344: billing.RecurringPlan.deleted_at:type_name -> google.protobuf.Timestamp
	146, // 345: billing.RecurringPlanCharge.period:type_name -> billing.RecurringPlanPeriod
	144, // 346: billing.RecurringSubscription.plan:type_name -> billing.RecurringPlan
	149, // 347: billing.RecurringSubscription.customer:type_name -> billing.RecurringSubscriptionCustomer
	150, // 348: billing.RecurringSubscription.project:type_name -> billing.RecurringSubscriptionProject
	199, // 349: billing.RecurringSubscription.created_at:type_name -> google.protobuf.Timestamp
	199, // 350: billing.RecurringSubscription.updated_at:type_name -> google.protobuf.Timestamp
	199, // 351: billing.RecurringSubscription.expire_at:type_name -> google.protobuf.Timestamp
	199, // 352: billing.RecurringSubscription.last_payment_at:type_name -> google.protobuf.Timestamp
	199, // 353: billing.RecurringSubscription.canceled_at:type_name -> google.protobuf.Timestamp
	199, // 354: billing.SubscriptionOrder.date:type_name -> google.protobuf.Timestamp
	198, // 355: billing.RecurringSubscriptionProject.name:type_name -> billing.RecurringSubscriptionProject.NameEntry
	152, // 356: billing.CardPayMerchantOrder.items:type_name -> billing.CardPayItem
	151, // 357: billing.CardPayMerchantOrder.shipping_address:type_name -> billing.CardPayAddress
	159, // 358: billing.CardPayCallbackRecurringData.filing:type_name -> billing.CardPayCallbackRecurringDataFilling
	160, // 359: billing.CardPayCallbackRecurringData.subscription:type_name -> billing.CardPayCallbackRecurringDataSubscription
	153, // 360: billing.CardPayPaymentCallback.merchant_order:type_name -> billing.CardPayMerchantOrder
	154, // 361: billing.CardPayPaymentCallback.card_account:type_name -> billing.CallbackCardPayBankCardAccount
	155, // 362: billing.CardPayPaymentCallback.cryptocurrency_account:type_name -> billing.CallbackCardPayCryptoCurrencyAccount
	156, // 363: billing.CardPayPaymentCallback.customer:type_name -> billing.CardPayCustomer
	157, // 364: billing.CardPayPaymentCallback.ewallet_account:type_name -> billing.CardPayEWalletAccount
	158, // 365: billing.CardPayPaymentCallback.payment_data:type_name -> billing.CallbackCardPayPaymentData
	161, // 366: billing.CardPayPaymentCallback.recurring_data:type_name -> billing.CardPayCallbackRecurringData
	153, // 367: billing.CardPayRefundCallback.merchant_order:type_name -> billing.CardPayMerchantOrder
	164, // 368: billing.CardPayRefundCallback.payment_data:type_name -> billing.CardPayRefundCallbackPaymentData
	163, // 369: billing.CardPayRefundCallback.refund_data:type_name -> billing.CardPayRefundCallbackRefundData
	154, // 370: billing.CardPayRefundCallback.card_account:type_name -> billing.CallbackCardPayBankCardAccount
	156, // 371: billing.CardPayRefundCallback.customer:type_name -> billing.CardPayCustomer
	157, // 372: billing.CardPayRefundCallback.ewallet_account:type_name -> billing.CardPayEWalletAccount
	30,  // 373: billing.WebHookPaymentMessage.order:type_name -> billing.Order
	51,  // 374: billing.Merchant.PaymentMethodsEntry.value:type_name -> billing.MerchantPaymentMethod
	37,  // 375: billing.PaymentMethod.TestSettingsEntry.value:type_name -> billing.PaymentMethodParams
	37,  // 376: billing.PaymentMethod.ProductionSettingsEntry.value:type_name -> billing.PaymentMethodParams
	61,  // 377: billing.Customer.PaymentActivityEntry.value:type_name -> billing.PaymentActivityItem
	121, // 378: billing.MerchantTariffRatesSettings.PayoutEntry.value:type_name -> billing.MerchantTariffRatesSettingsItem
	379, // [379:379] is the sub-list for method output_type
	379, // [379:379] is the sub-list for method input_type
	379, // [379:379] is the sub-list for extension type_name
	379, // [379:379] is the sub-list for extension extendee
	0,   // [0:379] is the sub-list for field type_name
}

func init() { file_billing_proto_init() }
func file_billing_proto_init() {
	if File_billing_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_billing_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Name); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectRedirectSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Project); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebHookTesting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductsTesting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualCurrencyTesting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeysTesting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerchantContact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerchantContactTechnical); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerchantContactAuthorized); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerchantBanking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerchantLastPayout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerchantUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerchantCompanyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerchantCompletedSteps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerchantAgreementSignatureDataSignUrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerchantAgreementSignatureData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerchantTariff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Merchant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerchantShortInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerchantCommon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemNotificationStatuses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderPlatformFee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderTax); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderBillingAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderNotificationCancellation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Order); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderRecurringSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParentOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountryRestriction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderPaginate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentMethodOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentMethodParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentSystem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentMethodCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentMethodWallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentMethodCrypto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectPaymentMethod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentMethod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardExpire); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SavedCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentFormPaymentMethod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerchantPaymentMethodPerTransactionCommission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerchantPaymentMethodCommissions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerchantPaymentMethodIntegration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerchantPaymentMethodIdentification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerchantPaymentMethod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefundPayerData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefundOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Refund); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerchantPaymentMethodHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerIdentity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerIpHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerAddressHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerStringValueHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Customer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentActivityItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentActivityItemCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentActivityItemLastTxnAt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentActivityItemRevenue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenUserEmailValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenUserPhoneValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenUserIpValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenUserLocaleValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenUserValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenSettingsReturnUrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenSettingsItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderIssuer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderNotificationRefund); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCountryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountryVatThreshold); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Country); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountriesList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPriceGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriceGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZipCodeState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZipCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentChannelCostSystem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentChannelCostSystemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentChannelCostSystemList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentChannelCostMerchant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentChannelCostMerchantRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentChannelCostMerchantList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentChannelCostMerchantListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoneyBackCostSystem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoneyBackCostSystemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoneyBackCostSystemList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoneyBackCostMerchant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoneyBackCostMerchantRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentCostDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoneyBackCostMerchantList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoneyBackCostMerchantListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountingEntrySource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountingEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoyaltyReportTotals); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoyaltyReportProductSummaryItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoyaltyReportCorrectionItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoyaltyReportSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoyaltyReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoyaltyReportChanges); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VatTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VatReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnnualTurnover); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderViewMoney); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderViewMerchantInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderViewReportSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderViewPublic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderViewPrivate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecommendedPrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriceTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriceTableRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Id); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RangeInt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerchantTariffRatesPayment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerchantTariffRatesSettingsItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerchantTariffRatesSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Key); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayoutDocument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayoutDocumentChanges); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerchantBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderReceipt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderReceiptItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HasCurrencyItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalizedUrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageCollection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductPrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectVirtualCurrency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderCreateByPaylink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserIpData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentFormDataChangeResponseItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperatingCompany); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentMinLimitSystem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRole); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoleListItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActOfCompletionDocument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrowserCookie); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerchantDocument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecurringPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecurringPlanCharge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecurringPlanPeriod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecurringSubscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriptionOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecurringSubscriptionCustomer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecurringSubscriptionProject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardPayAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardPayItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardPayMerchantOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallbackCardPayBankCardAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallbackCardPayCryptoCurrencyAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardPayCustomer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardPayEWalletAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallbackCardPayPaymentData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardPayCallbackRecurringDataFilling); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardPayCallbackRecurringDataSubscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardPayCallbackRecurringData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardPayPaymentCallback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardPayRefundCallbackRefundData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardPayRefundCallbackPaymentData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardPayRefundCallback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebHookPaymentMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_billing_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   199,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_billing_proto_goTypes,
		DependencyIndexes: file_billing_proto_depIdxs,
		MessageInfos:      file_billing_proto_msgTypes,
	}.Build()
	File_billing_proto = out.File
	file_billing_proto_rawDesc = nil
	file_billing_proto_goTypes = nil
	file_billing_proto_depIdxs = nil
}
