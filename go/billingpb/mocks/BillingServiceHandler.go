// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	billingpb "github.com/paysuper/paysuper-proto/go/billingpb"

	mock "github.com/stretchr/testify/mock"
)

// BillingServiceHandler is an autogenerated mock type for the BillingServiceHandler type
type BillingServiceHandler struct {
	mock.Mock
}

// AcceptInvite provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) AcceptInvite(_a0 context.Context, _a1 *billingpb.AcceptInviteRequest, _a2 *billingpb.AcceptInviteResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.AcceptInviteRequest, *billingpb.AcceptInviteResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddMerchantDocument provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) AddMerchantDocument(_a0 context.Context, _a1 *billingpb.MerchantDocument, _a2 *billingpb.AddMerchantDocumentResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.MerchantDocument, *billingpb.AddMerchantDocumentResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddOperatingCompany provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) AddOperatingCompany(_a0 context.Context, _a1 *billingpb.OperatingCompany, _a2 *billingpb.EmptyResponseWithStatus) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.OperatingCompany, *billingpb.EmptyResponseWithStatus) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddRecurringPlan provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) AddRecurringPlan(_a0 context.Context, _a1 *billingpb.RecurringPlan, _a2 *billingpb.AddRecurringPlanResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.RecurringPlan, *billingpb.AddRecurringPlanResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AutoAcceptRoyaltyReports provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) AutoAcceptRoyaltyReports(_a0 context.Context, _a1 *billingpb.EmptyRequest, _a2 *billingpb.EmptyResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.EmptyRequest, *billingpb.EmptyResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AutoCreatePayoutDocuments provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) AutoCreatePayoutDocuments(_a0 context.Context, _a1 *billingpb.EmptyRequest, _a2 *billingpb.EmptyResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.EmptyRequest, *billingpb.EmptyResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CalcAnnualTurnovers provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) CalcAnnualTurnovers(_a0 context.Context, _a1 *billingpb.EmptyRequest, _a2 *billingpb.EmptyResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.EmptyRequest, *billingpb.EmptyResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CancelRedeemKeyForOrder provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) CancelRedeemKeyForOrder(_a0 context.Context, _a1 *billingpb.KeyForOrderRequest, _a2 *billingpb.EmptyResponseWithStatus) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.KeyForOrderRequest, *billingpb.EmptyResponseWithStatus) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChangeCodeInOrder provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) ChangeCodeInOrder(_a0 context.Context, _a1 *billingpb.ChangeCodeInOrderRequest, _a2 *billingpb.ChangeCodeInOrderResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.ChangeCodeInOrderRequest, *billingpb.ChangeCodeInOrderResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChangeMerchant provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) ChangeMerchant(_a0 context.Context, _a1 *billingpb.OnboardingRequest, _a2 *billingpb.ChangeMerchantResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.OnboardingRequest, *billingpb.ChangeMerchantResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChangeMerchantData provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) ChangeMerchantData(_a0 context.Context, _a1 *billingpb.ChangeMerchantDataRequest, _a2 *billingpb.ChangeMerchantDataResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.ChangeMerchantDataRequest, *billingpb.ChangeMerchantDataResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChangeMerchantManualPayouts provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) ChangeMerchantManualPayouts(_a0 context.Context, _a1 *billingpb.ChangeMerchantManualPayoutsRequest, _a2 *billingpb.ChangeMerchantManualPayoutsResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.ChangeMerchantManualPayoutsRequest, *billingpb.ChangeMerchantManualPayoutsResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChangeMerchantPaymentMethod provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) ChangeMerchantPaymentMethod(_a0 context.Context, _a1 *billingpb.MerchantPaymentMethodRequest, _a2 *billingpb.MerchantPaymentMethodResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.MerchantPaymentMethodRequest, *billingpb.MerchantPaymentMethodResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChangeMerchantStatus provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) ChangeMerchantStatus(_a0 context.Context, _a1 *billingpb.MerchantChangeStatusRequest, _a2 *billingpb.ChangeMerchantStatusResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.MerchantChangeStatusRequest, *billingpb.ChangeMerchantStatusResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChangeProject provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) ChangeProject(_a0 context.Context, _a1 *billingpb.Project, _a2 *billingpb.ChangeProjectResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.Project, *billingpb.ChangeProjectResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChangeRoleForAdminUser provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) ChangeRoleForAdminUser(_a0 context.Context, _a1 *billingpb.ChangeRoleForAdminUserRequest, _a2 *billingpb.EmptyResponseWithStatus) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.ChangeRoleForAdminUserRequest, *billingpb.EmptyResponseWithStatus) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChangeRoleForMerchantUser provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) ChangeRoleForMerchantUser(_a0 context.Context, _a1 *billingpb.ChangeRoleForMerchantUserRequest, _a2 *billingpb.EmptyResponseWithStatus) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.ChangeRoleForMerchantUserRequest, *billingpb.EmptyResponseWithStatus) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChangeRoyaltyReport provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) ChangeRoyaltyReport(_a0 context.Context, _a1 *billingpb.ChangeRoyaltyReportRequest, _a2 *billingpb.ResponseError) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.ChangeRoyaltyReportRequest, *billingpb.ResponseError) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CheckInviteToken provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) CheckInviteToken(_a0 context.Context, _a1 *billingpb.CheckInviteTokenRequest, _a2 *billingpb.CheckInviteTokenResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.CheckInviteTokenRequest, *billingpb.CheckInviteTokenResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CheckProjectRequestSignature provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) CheckProjectRequestSignature(_a0 context.Context, _a1 *billingpb.CheckProjectRequestSignatureRequest, _a2 *billingpb.CheckProjectRequestSignatureResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.CheckProjectRequestSignatureRequest, *billingpb.CheckProjectRequestSignatureResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CheckSkuAndKeyProject provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) CheckSkuAndKeyProject(_a0 context.Context, _a1 *billingpb.CheckSkuAndKeyProjectRequest, _a2 *billingpb.EmptyResponseWithStatus) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.CheckSkuAndKeyProjectRequest, *billingpb.EmptyResponseWithStatus) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ConfirmUserEmail provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) ConfirmUserEmail(_a0 context.Context, _a1 *billingpb.ConfirmUserEmailRequest, _a2 *billingpb.ConfirmUserEmailResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.ConfirmUserEmailRequest, *billingpb.ConfirmUserEmailResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateAccountingEntry provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) CreateAccountingEntry(_a0 context.Context, _a1 *billingpb.CreateAccountingEntryRequest, _a2 *billingpb.CreateAccountingEntryResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.CreateAccountingEntryRequest, *billingpb.CreateAccountingEntryResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateNotification provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) CreateNotification(_a0 context.Context, _a1 *billingpb.NotificationRequest, _a2 *billingpb.CreateNotificationResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.NotificationRequest, *billingpb.CreateNotificationResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateOrUpdateKeyProduct provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) CreateOrUpdateKeyProduct(_a0 context.Context, _a1 *billingpb.CreateOrUpdateKeyProductRequest, _a2 *billingpb.KeyProductResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.CreateOrUpdateKeyProductRequest, *billingpb.KeyProductResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateOrUpdatePaylink provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) CreateOrUpdatePaylink(_a0 context.Context, _a1 *billingpb.CreatePaylinkRequest, _a2 *billingpb.GetPaylinkResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.CreatePaylinkRequest, *billingpb.GetPaylinkResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateOrUpdatePaymentMethod provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) CreateOrUpdatePaymentMethod(_a0 context.Context, _a1 *billingpb.PaymentMethod, _a2 *billingpb.ChangePaymentMethodResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.PaymentMethod, *billingpb.ChangePaymentMethodResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateOrUpdatePaymentMethodProductionSettings provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) CreateOrUpdatePaymentMethodProductionSettings(_a0 context.Context, _a1 *billingpb.ChangePaymentMethodParamsRequest, _a2 *billingpb.ChangePaymentMethodParamsResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.ChangePaymentMethodParamsRequest, *billingpb.ChangePaymentMethodParamsResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateOrUpdatePaymentMethodTestSettings provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) CreateOrUpdatePaymentMethodTestSettings(_a0 context.Context, _a1 *billingpb.ChangePaymentMethodParamsRequest, _a2 *billingpb.ChangePaymentMethodParamsResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.ChangePaymentMethodParamsRequest, *billingpb.ChangePaymentMethodParamsResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateOrUpdateProduct provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) CreateOrUpdateProduct(_a0 context.Context, _a1 *billingpb.Product, _a2 *billingpb.Product) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.Product, *billingpb.Product) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateOrUpdateUserProfile provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) CreateOrUpdateUserProfile(_a0 context.Context, _a1 *billingpb.UserProfile, _a2 *billingpb.CreateOrUpdateUserProfileResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.UserProfile, *billingpb.CreateOrUpdateUserProfileResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreatePageReview provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) CreatePageReview(_a0 context.Context, _a1 *billingpb.CreatePageReviewRequest, _a2 *billingpb.CheckProjectRequestSignatureResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.CreatePageReviewRequest, *billingpb.CheckProjectRequestSignatureResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreatePayoutDocument provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) CreatePayoutDocument(_a0 context.Context, _a1 *billingpb.CreatePayoutDocumentRequest, _a2 *billingpb.CreatePayoutDocumentResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.CreatePayoutDocumentRequest, *billingpb.CreatePayoutDocumentResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateRefund provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) CreateRefund(_a0 context.Context, _a1 *billingpb.CreateRefundRequest, _a2 *billingpb.CreateRefundResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.CreateRefundRequest, *billingpb.CreateRefundResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateRoyaltyReport provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) CreateRoyaltyReport(_a0 context.Context, _a1 *billingpb.CreateRoyaltyReportRequest, _a2 *billingpb.CreateRoyaltyReportRequest) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.CreateRoyaltyReportRequest, *billingpb.CreateRoyaltyReportRequest) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateToken provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) CreateToken(_a0 context.Context, _a1 *billingpb.TokenRequest, _a2 *billingpb.TokenResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.TokenRequest, *billingpb.TokenResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAdminUser provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) DeleteAdminUser(_a0 context.Context, _a1 *billingpb.AdminRoleRequest, _a2 *billingpb.EmptyResponseWithStatus) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.AdminRoleRequest, *billingpb.EmptyResponseWithStatus) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCustomerCard provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) DeleteCustomerCard(_a0 context.Context, _a1 *billingpb.DeleteCustomerCardRequest, _a2 *billingpb.EmptyResponseWithStatus) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.DeleteCustomerCardRequest, *billingpb.EmptyResponseWithStatus) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteKeyProduct provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) DeleteKeyProduct(_a0 context.Context, _a1 *billingpb.RequestKeyProductMerchant, _a2 *billingpb.EmptyResponseWithStatus) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.RequestKeyProductMerchant, *billingpb.EmptyResponseWithStatus) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteMerchantUser provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) DeleteMerchantUser(_a0 context.Context, _a1 *billingpb.MerchantRoleRequest, _a2 *billingpb.EmptyResponseWithStatus) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.MerchantRoleRequest, *billingpb.EmptyResponseWithStatus) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteMoneyBackCostMerchant provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) DeleteMoneyBackCostMerchant(_a0 context.Context, _a1 *billingpb.PaymentCostDeleteRequest, _a2 *billingpb.ResponseError) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.PaymentCostDeleteRequest, *billingpb.ResponseError) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteMoneyBackCostSystem provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) DeleteMoneyBackCostSystem(_a0 context.Context, _a1 *billingpb.PaymentCostDeleteRequest, _a2 *billingpb.ResponseError) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.PaymentCostDeleteRequest, *billingpb.ResponseError) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeletePaylink provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) DeletePaylink(_a0 context.Context, _a1 *billingpb.PaylinkRequest, _a2 *billingpb.EmptyResponseWithStatus) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.PaylinkRequest, *billingpb.EmptyResponseWithStatus) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeletePaymentChannelCostMerchant provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) DeletePaymentChannelCostMerchant(_a0 context.Context, _a1 *billingpb.PaymentCostDeleteRequest, _a2 *billingpb.ResponseError) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.PaymentCostDeleteRequest, *billingpb.ResponseError) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeletePaymentChannelCostSystem provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) DeletePaymentChannelCostSystem(_a0 context.Context, _a1 *billingpb.PaymentCostDeleteRequest, _a2 *billingpb.ResponseError) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.PaymentCostDeleteRequest, *billingpb.ResponseError) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeletePaymentMethodProductionSettings provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) DeletePaymentMethodProductionSettings(_a0 context.Context, _a1 *billingpb.GetPaymentMethodSettingsRequest, _a2 *billingpb.ChangePaymentMethodParamsResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetPaymentMethodSettingsRequest, *billingpb.ChangePaymentMethodParamsResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeletePaymentMethodTestSettings provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) DeletePaymentMethodTestSettings(_a0 context.Context, _a1 *billingpb.GetPaymentMethodSettingsRequest, _a2 *billingpb.ChangePaymentMethodParamsResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetPaymentMethodSettingsRequest, *billingpb.ChangePaymentMethodParamsResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteProduct provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) DeleteProduct(_a0 context.Context, _a1 *billingpb.RequestProduct, _a2 *billingpb.EmptyResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.RequestProduct, *billingpb.EmptyResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteProject provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) DeleteProject(_a0 context.Context, _a1 *billingpb.GetProjectRequest, _a2 *billingpb.ChangeProjectResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetProjectRequest, *billingpb.ChangeProjectResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteRecurringPlan provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) DeleteRecurringPlan(_a0 context.Context, _a1 *billingpb.DeleteRecurringPlanRequest, _a2 *billingpb.DeleteRecurringPlanResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.DeleteRecurringPlanRequest, *billingpb.DeleteRecurringPlanResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteRecurringSubscription provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) DeleteRecurringSubscription(_a0 context.Context, _a1 *billingpb.DeleteRecurringSubscriptionRequest, _a2 *billingpb.EmptyResponseWithStatus) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.DeleteRecurringSubscriptionRequest, *billingpb.EmptyResponseWithStatus) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSavedCard provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) DeleteSavedCard(_a0 context.Context, _a1 *billingpb.DeleteSavedCardRequest, _a2 *billingpb.EmptyResponseWithStatus) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.DeleteSavedCardRequest, *billingpb.EmptyResponseWithStatus) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeserializeCookie provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) DeserializeCookie(_a0 context.Context, _a1 *billingpb.DeserializeCookieRequest, _a2 *billingpb.DeserializeCookieResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.DeserializeCookieRequest, *billingpb.DeserializeCookieResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DisableRecurringPlan provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) DisableRecurringPlan(_a0 context.Context, _a1 *billingpb.DisableRecurringPlanRequest, _a2 *billingpb.DisableRecurringPlanResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.DisableRecurringPlanRequest, *billingpb.DisableRecurringPlanResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EnableRecurringPlan provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) EnableRecurringPlan(_a0 context.Context, _a1 *billingpb.EnableRecurringPlanRequest, _a2 *billingpb.EnableRecurringPlanResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.EnableRecurringPlanRequest, *billingpb.EnableRecurringPlanResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAllOrders provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) FindAllOrders(_a0 context.Context, _a1 *billingpb.ListOrdersRequest, _a2 *billingpb.ListOrdersResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.ListOrdersRequest, *billingpb.ListOrdersResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAllOrdersPrivate provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) FindAllOrdersPrivate(_a0 context.Context, _a1 *billingpb.ListOrdersRequest, _a2 *billingpb.ListOrdersPrivateResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.ListOrdersRequest, *billingpb.ListOrdersPrivateResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAllOrdersPublic provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) FindAllOrdersPublic(_a0 context.Context, _a1 *billingpb.ListOrdersRequest, _a2 *billingpb.ListOrdersPublicResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.ListOrdersRequest, *billingpb.ListOrdersPublicResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByZipCode provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) FindByZipCode(_a0 context.Context, _a1 *billingpb.FindByZipCodeRequest, _a2 *billingpb.FindByZipCodeResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.FindByZipCodeRequest, *billingpb.FindByZipCodeResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindExpiredSubscriptions provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) FindExpiredSubscriptions(_a0 context.Context, _a1 *billingpb.FindExpiredSubscriptionsRequest, _a2 *billingpb.FindExpiredSubscriptionsResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.FindExpiredSubscriptionsRequest, *billingpb.FindExpiredSubscriptionsResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindSubscriptions provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) FindSubscriptions(_a0 context.Context, _a1 *billingpb.FindSubscriptionsRequest, _a2 *billingpb.FindSubscriptionsResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.FindSubscriptionsRequest, *billingpb.FindSubscriptionsResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FinishRedeemKeyForOrder provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) FinishRedeemKeyForOrder(_a0 context.Context, _a1 *billingpb.KeyForOrderRequest, _a2 *billingpb.GetKeyForOrderRequestResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.KeyForOrderRequest, *billingpb.GetKeyForOrderRequestResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetActOfCompletion provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetActOfCompletion(_a0 context.Context, _a1 *billingpb.ActOfCompletionRequest, _a2 *billingpb.ActOfCompletionResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.ActOfCompletionRequest, *billingpb.ActOfCompletionResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetActsOfCompletionList provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetActsOfCompletionList(_a0 context.Context, _a1 *billingpb.ActsOfCompletionListRequest, _a2 *billingpb.ActsOfCompletionListResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.ActsOfCompletionListRequest, *billingpb.ActsOfCompletionListResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAdminByUserId provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetAdminByUserId(_a0 context.Context, _a1 *billingpb.CommonUserProfileRequest, _a2 *billingpb.UserRoleResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.CommonUserProfileRequest, *billingpb.UserRoleResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAdminUserRole provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetAdminUserRole(_a0 context.Context, _a1 *billingpb.AdminRoleRequest, _a2 *billingpb.UserRoleResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.AdminRoleRequest, *billingpb.UserRoleResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAdminUsers provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetAdminUsers(_a0 context.Context, _a1 *billingpb.EmptyRequest, _a2 *billingpb.GetAdminUsersResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.EmptyRequest, *billingpb.GetAdminUsersResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllMoneyBackCostMerchant provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetAllMoneyBackCostMerchant(_a0 context.Context, _a1 *billingpb.MoneyBackCostMerchantListRequest, _a2 *billingpb.MoneyBackCostMerchantListResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.MoneyBackCostMerchantListRequest, *billingpb.MoneyBackCostMerchantListResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllMoneyBackCostSystem provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetAllMoneyBackCostSystem(_a0 context.Context, _a1 *billingpb.EmptyRequest, _a2 *billingpb.MoneyBackCostSystemListResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.EmptyRequest, *billingpb.MoneyBackCostSystemListResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllPaymentChannelCostMerchant provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetAllPaymentChannelCostMerchant(_a0 context.Context, _a1 *billingpb.PaymentChannelCostMerchantListRequest, _a2 *billingpb.PaymentChannelCostMerchantListResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.PaymentChannelCostMerchantListRequest, *billingpb.PaymentChannelCostMerchantListResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllPaymentChannelCostSystem provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetAllPaymentChannelCostSystem(_a0 context.Context, _a1 *billingpb.EmptyRequest, _a2 *billingpb.PaymentChannelCostSystemListResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.EmptyRequest, *billingpb.PaymentChannelCostSystemListResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAvailableKeysCount provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetAvailableKeysCount(_a0 context.Context, _a1 *billingpb.GetPlatformKeyCountRequest, _a2 *billingpb.GetPlatformKeyCountResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetPlatformKeyCountRequest, *billingpb.GetPlatformKeyCountResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCommonUserProfile provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetCommonUserProfile(_a0 context.Context, _a1 *billingpb.CommonUserProfileRequest, _a2 *billingpb.CommonUserProfileResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.CommonUserProfileRequest, *billingpb.CommonUserProfileResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCountriesList provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetCountriesList(_a0 context.Context, _a1 *billingpb.EmptyRequest, _a2 *billingpb.CountriesList) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.EmptyRequest, *billingpb.CountriesList) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCountriesListForOrder provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetCountriesListForOrder(_a0 context.Context, _a1 *billingpb.GetCountriesListForOrderRequest, _a2 *billingpb.GetCountriesListForOrderResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetCountriesListForOrderRequest, *billingpb.GetCountriesListForOrderResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCountry provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetCountry(_a0 context.Context, _a1 *billingpb.GetCountryRequest, _a2 *billingpb.Country) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetCountryRequest, *billingpb.Country) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCustomerInfo provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetCustomerInfo(_a0 context.Context, _a1 *billingpb.GetCustomerInfoRequest, _a2 *billingpb.GetCustomerInfoResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetCustomerInfoRequest, *billingpb.GetCustomerInfoResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCustomerList provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetCustomerList(_a0 context.Context, _a1 *billingpb.ListCustomersRequest, _a2 *billingpb.ListCustomersResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.ListCustomersRequest, *billingpb.ListCustomersResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCustomerShortInfo provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetCustomerShortInfo(_a0 context.Context, _a1 *billingpb.GetCustomerShortInfoRequest, _a2 *billingpb.GetCustomerShortInfoResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetCustomerShortInfoRequest, *billingpb.GetCustomerShortInfoResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDashboardBaseReport provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetDashboardBaseReport(_a0 context.Context, _a1 *billingpb.GetDashboardBaseReportRequest, _a2 *billingpb.GetDashboardBaseReportResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetDashboardBaseReportRequest, *billingpb.GetDashboardBaseReportResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDashboardCustomerArpu provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetDashboardCustomerArpu(_a0 context.Context, _a1 *billingpb.DashboardCustomerReportArpuRequest, _a2 *billingpb.DashboardCustomerReportArpuResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.DashboardCustomerReportArpuRequest, *billingpb.DashboardCustomerReportArpuResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDashboardCustomersReport provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetDashboardCustomersReport(_a0 context.Context, _a1 *billingpb.DashboardCustomerReportRequest, _a2 *billingpb.GetDashboardCustomerReportResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.DashboardCustomerReportRequest, *billingpb.GetDashboardCustomerReportResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDashboardMainReport provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetDashboardMainReport(_a0 context.Context, _a1 *billingpb.GetDashboardMainRequest, _a2 *billingpb.GetDashboardMainResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetDashboardMainRequest, *billingpb.GetDashboardMainResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDashboardRevenueDynamicsReport provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetDashboardRevenueDynamicsReport(_a0 context.Context, _a1 *billingpb.GetDashboardMainRequest, _a2 *billingpb.GetDashboardRevenueDynamicsReportResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetDashboardMainRequest, *billingpb.GetDashboardRevenueDynamicsReportResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetKeyByID provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetKeyByID(_a0 context.Context, _a1 *billingpb.KeyForOrderRequest, _a2 *billingpb.GetKeyForOrderRequestResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.KeyForOrderRequest, *billingpb.GetKeyForOrderRequestResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetKeyProduct provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetKeyProduct(_a0 context.Context, _a1 *billingpb.RequestKeyProductMerchant, _a2 *billingpb.KeyProductResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.RequestKeyProductMerchant, *billingpb.KeyProductResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetKeyProductInfo provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetKeyProductInfo(_a0 context.Context, _a1 *billingpb.GetKeyProductInfoRequest, _a2 *billingpb.GetKeyProductInfoResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetKeyProductInfoRequest, *billingpb.GetKeyProductInfoResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetKeyProducts provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetKeyProducts(_a0 context.Context, _a1 *billingpb.ListKeyProductsRequest, _a2 *billingpb.ListKeyProductsResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.ListKeyProductsRequest, *billingpb.ListKeyProductsResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetKeyProductsForOrder provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetKeyProductsForOrder(_a0 context.Context, _a1 *billingpb.GetKeyProductsForOrderRequest, _a2 *billingpb.ListKeyProductsResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetKeyProductsForOrderRequest, *billingpb.ListKeyProductsResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetMerchantBalance provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetMerchantBalance(_a0 context.Context, _a1 *billingpb.GetMerchantBalanceRequest, _a2 *billingpb.GetMerchantBalanceResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetMerchantBalanceRequest, *billingpb.GetMerchantBalanceResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetMerchantBy provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetMerchantBy(_a0 context.Context, _a1 *billingpb.GetMerchantByRequest, _a2 *billingpb.GetMerchantResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetMerchantByRequest, *billingpb.GetMerchantResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetMerchantDocument provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetMerchantDocument(_a0 context.Context, _a1 *billingpb.GetMerchantDocumentRequest, _a2 *billingpb.GetMerchantDocumentResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetMerchantDocumentRequest, *billingpb.GetMerchantDocumentResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetMerchantDocuments provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetMerchantDocuments(_a0 context.Context, _a1 *billingpb.GetMerchantDocumentsRequest, _a2 *billingpb.GetMerchantDocumentsResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetMerchantDocumentsRequest, *billingpb.GetMerchantDocumentsResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetMerchantOnboardingCompleteData provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetMerchantOnboardingCompleteData(_a0 context.Context, _a1 *billingpb.SetMerchantS3AgreementRequest, _a2 *billingpb.GetMerchantOnboardingCompleteDataResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.SetMerchantS3AgreementRequest, *billingpb.GetMerchantOnboardingCompleteDataResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetMerchantPaymentMethod provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetMerchantPaymentMethod(_a0 context.Context, _a1 *billingpb.GetMerchantPaymentMethodRequest, _a2 *billingpb.GetMerchantPaymentMethodResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetMerchantPaymentMethodRequest, *billingpb.GetMerchantPaymentMethodResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetMerchantTariffRates provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetMerchantTariffRates(_a0 context.Context, _a1 *billingpb.GetMerchantTariffRatesRequest, _a2 *billingpb.GetMerchantTariffRatesResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetMerchantTariffRatesRequest, *billingpb.GetMerchantTariffRatesResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetMerchantUserRole provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetMerchantUserRole(_a0 context.Context, _a1 *billingpb.MerchantRoleRequest, _a2 *billingpb.UserRoleResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.MerchantRoleRequest, *billingpb.UserRoleResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetMerchantUsers provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetMerchantUsers(_a0 context.Context, _a1 *billingpb.GetMerchantUsersRequest, _a2 *billingpb.GetMerchantUsersResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetMerchantUsersRequest, *billingpb.GetMerchantUsersResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetMerchantsForUser provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetMerchantsForUser(_a0 context.Context, _a1 *billingpb.GetMerchantsForUserRequest, _a2 *billingpb.GetMerchantsForUserResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetMerchantsForUserRequest, *billingpb.GetMerchantsForUserResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetMoneyBackCostMerchant provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetMoneyBackCostMerchant(_a0 context.Context, _a1 *billingpb.MoneyBackCostMerchantRequest, _a2 *billingpb.MoneyBackCostMerchantResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.MoneyBackCostMerchantRequest, *billingpb.MoneyBackCostMerchantResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetMoneyBackCostSystem provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetMoneyBackCostSystem(_a0 context.Context, _a1 *billingpb.MoneyBackCostSystemRequest, _a2 *billingpb.MoneyBackCostSystemResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.MoneyBackCostSystemRequest, *billingpb.MoneyBackCostSystemResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetNotification provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetNotification(_a0 context.Context, _a1 *billingpb.GetNotificationRequest, _a2 *billingpb.Notification) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetNotificationRequest, *billingpb.Notification) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetOperatingCompaniesList provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetOperatingCompaniesList(_a0 context.Context, _a1 *billingpb.EmptyRequest, _a2 *billingpb.GetOperatingCompaniesListResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.EmptyRequest, *billingpb.GetOperatingCompaniesListResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetOperatingCompany provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetOperatingCompany(_a0 context.Context, _a1 *billingpb.GetOperatingCompanyRequest, _a2 *billingpb.GetOperatingCompanyResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetOperatingCompanyRequest, *billingpb.GetOperatingCompanyResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetOrderPrivate provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetOrderPrivate(_a0 context.Context, _a1 *billingpb.GetOrderRequest, _a2 *billingpb.GetOrderPrivateResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetOrderRequest, *billingpb.GetOrderPrivateResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetOrderPublic provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetOrderPublic(_a0 context.Context, _a1 *billingpb.GetOrderRequest, _a2 *billingpb.GetOrderPublicResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetOrderRequest, *billingpb.GetOrderPublicResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPaylink provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetPaylink(_a0 context.Context, _a1 *billingpb.PaylinkRequest, _a2 *billingpb.GetPaylinkResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.PaylinkRequest, *billingpb.GetPaylinkResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPaylinkStatByCountry provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetPaylinkStatByCountry(_a0 context.Context, _a1 *billingpb.GetPaylinkStatCommonRequest, _a2 *billingpb.GetPaylinkStatCommonGroupResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetPaylinkStatCommonRequest, *billingpb.GetPaylinkStatCommonGroupResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPaylinkStatByDate provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetPaylinkStatByDate(_a0 context.Context, _a1 *billingpb.GetPaylinkStatCommonRequest, _a2 *billingpb.GetPaylinkStatCommonGroupResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetPaylinkStatCommonRequest, *billingpb.GetPaylinkStatCommonGroupResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPaylinkStatByReferrer provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetPaylinkStatByReferrer(_a0 context.Context, _a1 *billingpb.GetPaylinkStatCommonRequest, _a2 *billingpb.GetPaylinkStatCommonGroupResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetPaylinkStatCommonRequest, *billingpb.GetPaylinkStatCommonGroupResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPaylinkStatByUtm provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetPaylinkStatByUtm(_a0 context.Context, _a1 *billingpb.GetPaylinkStatCommonRequest, _a2 *billingpb.GetPaylinkStatCommonGroupResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetPaylinkStatCommonRequest, *billingpb.GetPaylinkStatCommonGroupResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPaylinkStatTotal provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetPaylinkStatTotal(_a0 context.Context, _a1 *billingpb.GetPaylinkStatCommonRequest, _a2 *billingpb.GetPaylinkStatCommonResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetPaylinkStatCommonRequest, *billingpb.GetPaylinkStatCommonResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPaylinkTransactions provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetPaylinkTransactions(_a0 context.Context, _a1 *billingpb.GetPaylinkTransactionsRequest, _a2 *billingpb.TransactionsResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetPaylinkTransactionsRequest, *billingpb.TransactionsResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPaylinkURL provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetPaylinkURL(_a0 context.Context, _a1 *billingpb.GetPaylinkURLRequest, _a2 *billingpb.GetPaylinkUrlResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetPaylinkURLRequest, *billingpb.GetPaylinkUrlResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPaylinkUrlByShortLink provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetPaylinkUrlByShortLink(_a0 context.Context, _a1 *billingpb.GetPaylinkUrlByShortLinkRequest, _a2 *billingpb.GetPaylinkUrlByShortLinkResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetPaylinkUrlByShortLinkRequest, *billingpb.GetPaylinkUrlByShortLinkResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPaylinks provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetPaylinks(_a0 context.Context, _a1 *billingpb.GetPaylinksRequest, _a2 *billingpb.GetPaylinksResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetPaylinksRequest, *billingpb.GetPaylinksResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPaymentChannelCostMerchant provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetPaymentChannelCostMerchant(_a0 context.Context, _a1 *billingpb.PaymentChannelCostMerchantRequest, _a2 *billingpb.PaymentChannelCostMerchantResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.PaymentChannelCostMerchantRequest, *billingpb.PaymentChannelCostMerchantResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPaymentChannelCostSystem provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetPaymentChannelCostSystem(_a0 context.Context, _a1 *billingpb.PaymentChannelCostSystemRequest, _a2 *billingpb.PaymentChannelCostSystemResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.PaymentChannelCostSystemRequest, *billingpb.PaymentChannelCostSystemResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPaymentMethodProductionSettings provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetPaymentMethodProductionSettings(_a0 context.Context, _a1 *billingpb.GetPaymentMethodSettingsRequest, _a2 *billingpb.GetPaymentMethodSettingsResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetPaymentMethodSettingsRequest, *billingpb.GetPaymentMethodSettingsResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPaymentMethodTestSettings provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetPaymentMethodTestSettings(_a0 context.Context, _a1 *billingpb.GetPaymentMethodSettingsRequest, _a2 *billingpb.GetPaymentMethodSettingsResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetPaymentMethodSettingsRequest, *billingpb.GetPaymentMethodSettingsResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPaymentMinLimitsSystem provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetPaymentMinLimitsSystem(_a0 context.Context, _a1 *billingpb.EmptyRequest, _a2 *billingpb.GetPaymentMinLimitsSystemResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.EmptyRequest, *billingpb.GetPaymentMinLimitsSystemResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPayoutDocument provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetPayoutDocument(_a0 context.Context, _a1 *billingpb.GetPayoutDocumentRequest, _a2 *billingpb.PayoutDocumentResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetPayoutDocumentRequest, *billingpb.PayoutDocumentResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPayoutDocumentRoyaltyReports provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetPayoutDocumentRoyaltyReports(_a0 context.Context, _a1 *billingpb.GetPayoutDocumentRequest, _a2 *billingpb.ListRoyaltyReportsResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetPayoutDocumentRequest, *billingpb.ListRoyaltyReportsResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPayoutDocuments provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetPayoutDocuments(_a0 context.Context, _a1 *billingpb.GetPayoutDocumentsRequest, _a2 *billingpb.GetPayoutDocumentsResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetPayoutDocumentsRequest, *billingpb.GetPayoutDocumentsResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPlatforms provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetPlatforms(_a0 context.Context, _a1 *billingpb.ListPlatformsRequest, _a2 *billingpb.ListPlatformsResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.ListPlatformsRequest, *billingpb.ListPlatformsResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPriceGroup provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetPriceGroup(_a0 context.Context, _a1 *billingpb.GetPriceGroupRequest, _a2 *billingpb.PriceGroup) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetPriceGroupRequest, *billingpb.PriceGroup) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPriceGroupByCountry provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetPriceGroupByCountry(_a0 context.Context, _a1 *billingpb.PriceGroupByCountryRequest, _a2 *billingpb.PriceGroup) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.PriceGroupByCountryRequest, *billingpb.PriceGroup) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPriceGroupByRegion provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetPriceGroupByRegion(_a0 context.Context, _a1 *billingpb.GetPriceGroupByRegionRequest, _a2 *billingpb.GetPriceGroupByRegionResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetPriceGroupByRegionRequest, *billingpb.GetPriceGroupByRegionResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPriceGroupCurrencies provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetPriceGroupCurrencies(_a0 context.Context, _a1 *billingpb.EmptyRequest, _a2 *billingpb.PriceGroupCurrenciesResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.EmptyRequest, *billingpb.PriceGroupCurrenciesResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPriceGroupCurrencyByRegion provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetPriceGroupCurrencyByRegion(_a0 context.Context, _a1 *billingpb.PriceGroupByRegionRequest, _a2 *billingpb.PriceGroupCurrenciesResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.PriceGroupByRegionRequest, *billingpb.PriceGroupCurrenciesResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetProduct provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetProduct(_a0 context.Context, _a1 *billingpb.RequestProduct, _a2 *billingpb.GetProductResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.RequestProduct, *billingpb.GetProductResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetProductPrices provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetProductPrices(_a0 context.Context, _a1 *billingpb.RequestProduct, _a2 *billingpb.ProductPricesResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.RequestProduct, *billingpb.ProductPricesResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetProductsForOrder provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetProductsForOrder(_a0 context.Context, _a1 *billingpb.GetProductsForOrderRequest, _a2 *billingpb.ListProductsResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetProductsForOrderRequest, *billingpb.ListProductsResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetProject provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetProject(_a0 context.Context, _a1 *billingpb.GetProjectRequest, _a2 *billingpb.ChangeProjectResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetProjectRequest, *billingpb.ChangeProjectResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetRecommendedPriceByConversion provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetRecommendedPriceByConversion(_a0 context.Context, _a1 *billingpb.RecommendedPriceRequest, _a2 *billingpb.RecommendedPriceResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.RecommendedPriceRequest, *billingpb.RecommendedPriceResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetRecommendedPriceByPriceGroup provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetRecommendedPriceByPriceGroup(_a0 context.Context, _a1 *billingpb.RecommendedPriceRequest, _a2 *billingpb.RecommendedPriceResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.RecommendedPriceRequest, *billingpb.RecommendedPriceResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetRecommendedPriceTable provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetRecommendedPriceTable(_a0 context.Context, _a1 *billingpb.RecommendedPriceTableRequest, _a2 *billingpb.RecommendedPriceTableResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.RecommendedPriceTableRequest, *billingpb.RecommendedPriceTableResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetRecurringPlan provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetRecurringPlan(_a0 context.Context, _a1 *billingpb.GetRecurringPlanRequest, _a2 *billingpb.GetRecurringPlanResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetRecurringPlanRequest, *billingpb.GetRecurringPlanResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetRecurringPlanStat provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetRecurringPlanStat(_a0 context.Context, _a1 *billingpb.GetRecurringPlanStatRequest, _a2 *billingpb.GetRecurringPlanStatResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetRecurringPlanStatRequest, *billingpb.GetRecurringPlanStatResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetRecurringPlans provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetRecurringPlans(_a0 context.Context, _a1 *billingpb.GetRecurringPlansRequest, _a2 *billingpb.GetRecurringPlansResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetRecurringPlansRequest, *billingpb.GetRecurringPlansResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetRefund provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetRefund(_a0 context.Context, _a1 *billingpb.GetRefundRequest, _a2 *billingpb.CreateRefundResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetRefundRequest, *billingpb.CreateRefundResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetRoleList provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetRoleList(_a0 context.Context, _a1 *billingpb.GetRoleListRequest, _a2 *billingpb.GetRoleListResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetRoleListRequest, *billingpb.GetRoleListResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetRoyaltyReport provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetRoyaltyReport(_a0 context.Context, _a1 *billingpb.GetRoyaltyReportRequest, _a2 *billingpb.GetRoyaltyReportResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetRoyaltyReportRequest, *billingpb.GetRoyaltyReportResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetSubscription provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetSubscription(_a0 context.Context, _a1 *billingpb.GetSubscriptionRequest, _a2 *billingpb.GetSubscriptionResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetSubscriptionRequest, *billingpb.GetSubscriptionResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetSubscriptionsOrders provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetSubscriptionsOrders(_a0 context.Context, _a1 *billingpb.GetSubscriptionsOrdersRequest, _a2 *billingpb.GetSubscriptionsOrdersResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetSubscriptionsOrdersRequest, *billingpb.GetSubscriptionsOrdersResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUserProfile provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetUserProfile(_a0 context.Context, _a1 *billingpb.GetUserProfileRequest, _a2 *billingpb.GetUserProfileResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetUserProfileRequest, *billingpb.GetUserProfileResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetVatReport provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetVatReport(_a0 context.Context, _a1 *billingpb.VatReportRequest, _a2 *billingpb.VatReportResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.VatReportRequest, *billingpb.VatReportResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetVatReportTransactions provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetVatReportTransactions(_a0 context.Context, _a1 *billingpb.VatTransactionsRequest, _a2 *billingpb.PrivateTransactionsResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.VatTransactionsRequest, *billingpb.PrivateTransactionsResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetVatReportsDashboard provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetVatReportsDashboard(_a0 context.Context, _a1 *billingpb.EmptyRequest, _a2 *billingpb.VatReportsResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.EmptyRequest, *billingpb.VatReportsResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetVatReportsForCountry provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) GetVatReportsForCountry(_a0 context.Context, _a1 *billingpb.VatReportsRequest, _a2 *billingpb.VatReportsResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.VatReportsRequest, *billingpb.VatReportsResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IncrPaylinkVisits provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) IncrPaylinkVisits(_a0 context.Context, _a1 *billingpb.PaylinkRequestById, _a2 *billingpb.EmptyResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.PaylinkRequestById, *billingpb.EmptyResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InviteUserAdmin provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) InviteUserAdmin(_a0 context.Context, _a1 *billingpb.InviteUserAdminRequest, _a2 *billingpb.InviteUserAdminResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.InviteUserAdminRequest, *billingpb.InviteUserAdminResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InviteUserMerchant provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) InviteUserMerchant(_a0 context.Context, _a1 *billingpb.InviteUserMerchantRequest, _a2 *billingpb.InviteUserMerchantResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.InviteUserMerchantRequest, *billingpb.InviteUserMerchantResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IsOrderCanBePaying provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) IsOrderCanBePaying(_a0 context.Context, _a1 *billingpb.IsOrderCanBePayingRequest, _a2 *billingpb.IsOrderCanBePayingResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.IsOrderCanBePayingRequest, *billingpb.IsOrderCanBePayingResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListMerchantPaymentMethods provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) ListMerchantPaymentMethods(_a0 context.Context, _a1 *billingpb.ListMerchantPaymentMethodsRequest, _a2 *billingpb.ListingMerchantPaymentMethod) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.ListMerchantPaymentMethodsRequest, *billingpb.ListingMerchantPaymentMethod) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListMerchants provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) ListMerchants(_a0 context.Context, _a1 *billingpb.MerchantListingRequest, _a2 *billingpb.MerchantListingResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.MerchantListingRequest, *billingpb.MerchantListingResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListMerchantsForAgreement provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) ListMerchantsForAgreement(_a0 context.Context, _a1 *billingpb.MerchantListingRequest, _a2 *billingpb.ListMerchantsForAgreementResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.MerchantListingRequest, *billingpb.ListMerchantsForAgreementResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListNotifications provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) ListNotifications(_a0 context.Context, _a1 *billingpb.ListingNotificationRequest, _a2 *billingpb.Notifications) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.ListingNotificationRequest, *billingpb.Notifications) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListProducts provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) ListProducts(_a0 context.Context, _a1 *billingpb.ListProductsRequest, _a2 *billingpb.ListProductsResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.ListProductsRequest, *billingpb.ListProductsResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListProjects provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) ListProjects(_a0 context.Context, _a1 *billingpb.ListProjectsRequest, _a2 *billingpb.ListProjectsResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.ListProjectsRequest, *billingpb.ListProjectsResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListRefunds provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) ListRefunds(_a0 context.Context, _a1 *billingpb.ListRefundsRequest, _a2 *billingpb.ListRefundsResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.ListRefundsRequest, *billingpb.ListRefundsResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListRoyaltyReportOrders provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) ListRoyaltyReportOrders(_a0 context.Context, _a1 *billingpb.ListRoyaltyReportOrdersRequest, _a2 *billingpb.TransactionsResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.ListRoyaltyReportOrdersRequest, *billingpb.TransactionsResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListRoyaltyReports provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) ListRoyaltyReports(_a0 context.Context, _a1 *billingpb.ListRoyaltyReportsRequest, _a2 *billingpb.ListRoyaltyReportsResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.ListRoyaltyReportsRequest, *billingpb.ListRoyaltyReportsResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MarkNotificationAsRead provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) MarkNotificationAsRead(_a0 context.Context, _a1 *billingpb.GetNotificationRequest, _a2 *billingpb.Notification) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetNotificationRequest, *billingpb.Notification) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MerchantReviewRoyaltyReport provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) MerchantReviewRoyaltyReport(_a0 context.Context, _a1 *billingpb.MerchantReviewRoyaltyReportRequest, _a2 *billingpb.ResponseError) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.MerchantReviewRoyaltyReportRequest, *billingpb.ResponseError) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NotifyWebhookTestResults provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) NotifyWebhookTestResults(_a0 context.Context, _a1 *billingpb.NotifyWebhookTestResultsRequest, _a2 *billingpb.EmptyResponseWithStatus) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.NotifyWebhookTestResultsRequest, *billingpb.EmptyResponseWithStatus) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrderCreateByPaylink provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) OrderCreateByPaylink(_a0 context.Context, _a1 *billingpb.OrderCreateByPaylink, _a2 *billingpb.OrderCreateProcessResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.OrderCreateByPaylink, *billingpb.OrderCreateProcessResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrderCreateProcess provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) OrderCreateProcess(_a0 context.Context, _a1 *billingpb.OrderCreateRequest, _a2 *billingpb.OrderCreateProcessResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.OrderCreateRequest, *billingpb.OrderCreateProcessResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrderReCreateProcess provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) OrderReCreateProcess(_a0 context.Context, _a1 *billingpb.OrderReCreateProcessRequest, _a2 *billingpb.OrderCreateProcessResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.OrderReCreateProcessRequest, *billingpb.OrderCreateProcessResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrderReceipt provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) OrderReceipt(_a0 context.Context, _a1 *billingpb.OrderReceiptRequest, _a2 *billingpb.OrderReceiptResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.OrderReceiptRequest, *billingpb.OrderReceiptResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PaymentCallbackProcess provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) PaymentCallbackProcess(_a0 context.Context, _a1 *billingpb.PaymentNotifyRequest, _a2 *billingpb.PaymentNotifyResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.PaymentNotifyRequest, *billingpb.PaymentNotifyResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PaymentCreateProcess provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) PaymentCreateProcess(_a0 context.Context, _a1 *billingpb.PaymentCreateRequest, _a2 *billingpb.PaymentCreateResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.PaymentCreateRequest, *billingpb.PaymentCreateResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PaymentFormJsonDataProcess provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) PaymentFormJsonDataProcess(_a0 context.Context, _a1 *billingpb.PaymentFormJsonDataRequest, _a2 *billingpb.PaymentFormJsonDataResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.PaymentFormJsonDataRequest, *billingpb.PaymentFormJsonDataResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PaymentFormLanguageChanged provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) PaymentFormLanguageChanged(_a0 context.Context, _a1 *billingpb.PaymentFormUserChangeLangRequest, _a2 *billingpb.PaymentFormDataChangeResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.PaymentFormUserChangeLangRequest, *billingpb.PaymentFormDataChangeResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PaymentFormPaymentAccountChanged provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) PaymentFormPaymentAccountChanged(_a0 context.Context, _a1 *billingpb.PaymentFormUserChangePaymentAccountRequest, _a2 *billingpb.PaymentFormDataChangeResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.PaymentFormUserChangePaymentAccountRequest, *billingpb.PaymentFormDataChangeResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PaymentFormPlatformChanged provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) PaymentFormPlatformChanged(_a0 context.Context, _a1 *billingpb.PaymentFormUserChangePlatformRequest, _a2 *billingpb.PaymentFormDataChangeResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.PaymentFormUserChangePlatformRequest, *billingpb.PaymentFormDataChangeResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PayoutDocumentPdfUploaded provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) PayoutDocumentPdfUploaded(_a0 context.Context, _a1 *billingpb.PayoutDocumentPdfUploadedRequest, _a2 *billingpb.PayoutDocumentPdfUploadedResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.PayoutDocumentPdfUploadedRequest, *billingpb.PayoutDocumentPdfUploadedResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PayoutFinanceDone provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) PayoutFinanceDone(_a0 context.Context, _a1 *billingpb.ReportFinanceDoneRequest, _a2 *billingpb.EmptyResponseWithStatus) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.ReportFinanceDoneRequest, *billingpb.EmptyResponseWithStatus) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Ping provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) Ping(_a0 context.Context, _a1 *billingpb.EmptyRequest, _a2 *billingpb.EmptyResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.EmptyRequest, *billingpb.EmptyResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProcessBillingAddress provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) ProcessBillingAddress(_a0 context.Context, _a1 *billingpb.ProcessBillingAddressRequest, _a2 *billingpb.ProcessBillingAddressResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.ProcessBillingAddressRequest, *billingpb.ProcessBillingAddressResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProcessRefundCallback provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) ProcessRefundCallback(_a0 context.Context, _a1 *billingpb.CallbackRequest, _a2 *billingpb.PaymentNotifyResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.CallbackRequest, *billingpb.PaymentNotifyResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProcessVatReports provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) ProcessVatReports(_a0 context.Context, _a1 *billingpb.ProcessVatReportsRequest, _a2 *billingpb.EmptyResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.ProcessVatReportsRequest, *billingpb.EmptyResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PublishKeyProduct provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) PublishKeyProduct(_a0 context.Context, _a1 *billingpb.PublishKeyProductRequest, _a2 *billingpb.KeyProductResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.PublishKeyProductRequest, *billingpb.KeyProductResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RefreshMerchantApiToken provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) RefreshMerchantApiToken(_a0 context.Context, _a1 *billingpb.RefreshMerchantApiTokenRequest, _a2 *billingpb.RefreshMerchantApiTokenResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.RefreshMerchantApiTokenRequest, *billingpb.RefreshMerchantApiTokenResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ResendInviteAdmin provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) ResendInviteAdmin(_a0 context.Context, _a1 *billingpb.ResendInviteAdminRequest, _a2 *billingpb.EmptyResponseWithStatus) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.ResendInviteAdminRequest, *billingpb.EmptyResponseWithStatus) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ResendInviteMerchant provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) ResendInviteMerchant(_a0 context.Context, _a1 *billingpb.ResendInviteMerchantRequest, _a2 *billingpb.EmptyResponseWithStatus) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.ResendInviteMerchantRequest, *billingpb.EmptyResponseWithStatus) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReserveKeyForOrder provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) ReserveKeyForOrder(_a0 context.Context, _a1 *billingpb.PlatformKeyReserveRequest, _a2 *billingpb.PlatformKeyReserveResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.PlatformKeyReserveRequest, *billingpb.PlatformKeyReserveResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RoyaltyReportFinanceDone provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) RoyaltyReportFinanceDone(_a0 context.Context, _a1 *billingpb.ReportFinanceDoneRequest, _a2 *billingpb.EmptyResponseWithStatus) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.ReportFinanceDoneRequest, *billingpb.EmptyResponseWithStatus) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RoyaltyReportPdfUploaded provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) RoyaltyReportPdfUploaded(_a0 context.Context, _a1 *billingpb.RoyaltyReportPdfUploadedRequest, _a2 *billingpb.RoyaltyReportPdfUploadedResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.RoyaltyReportPdfUploadedRequest, *billingpb.RoyaltyReportPdfUploadedResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendOrderToWebHookNotifier provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) SendOrderToWebHookNotifier(_a0 context.Context, _a1 *billingpb.GetOrderRequest, _a2 *billingpb.ResponseError) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetOrderRequest, *billingpb.ResponseError) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendWebhookToMerchant provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) SendWebhookToMerchant(_a0 context.Context, _a1 *billingpb.OrderCreateRequest, _a2 *billingpb.SendWebhookToMerchantResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.OrderCreateRequest, *billingpb.SendWebhookToMerchantResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetAllPaymentChannelCostMerchant provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) SetAllPaymentChannelCostMerchant(_a0 context.Context, _a1 *billingpb.SetAllPaymentChannelCostMerchantRequest, _a2 *billingpb.SetAllPaymentChannelCostMerchantResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.SetAllPaymentChannelCostMerchantRequest, *billingpb.SetAllPaymentChannelCostMerchantResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetCustomerPaymentActivity provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) SetCustomerPaymentActivity(_a0 context.Context, _a1 *billingpb.SetCustomerPaymentActivityRequest, _a2 *billingpb.EmptyResponseWithStatus) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.SetCustomerPaymentActivityRequest, *billingpb.EmptyResponseWithStatus) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetMerchantAcceptedStatus provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) SetMerchantAcceptedStatus(_a0 context.Context, _a1 *billingpb.SetMerchantAcceptedStatusRequest, _a2 *billingpb.SetMerchantAcceptedStatusResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.SetMerchantAcceptedStatusRequest, *billingpb.SetMerchantAcceptedStatusResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetMerchantOperatingCompany provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) SetMerchantOperatingCompany(_a0 context.Context, _a1 *billingpb.SetMerchantOperatingCompanyRequest, _a2 *billingpb.SetMerchantOperatingCompanyResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.SetMerchantOperatingCompanyRequest, *billingpb.SetMerchantOperatingCompanyResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetMerchantS3Agreement provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) SetMerchantS3Agreement(_a0 context.Context, _a1 *billingpb.SetMerchantS3AgreementRequest, _a2 *billingpb.ChangeMerchantDataResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.SetMerchantS3AgreementRequest, *billingpb.ChangeMerchantDataResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetMerchantTariffRates provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) SetMerchantTariffRates(_a0 context.Context, _a1 *billingpb.SetMerchantTariffRatesRequest, _a2 *billingpb.CheckProjectRequestSignatureResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.SetMerchantTariffRatesRequest, *billingpb.CheckProjectRequestSignatureResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetMoneyBackCostMerchant provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) SetMoneyBackCostMerchant(_a0 context.Context, _a1 *billingpb.MoneyBackCostMerchant, _a2 *billingpb.MoneyBackCostMerchantResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.MoneyBackCostMerchant, *billingpb.MoneyBackCostMerchantResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetMoneyBackCostSystem provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) SetMoneyBackCostSystem(_a0 context.Context, _a1 *billingpb.MoneyBackCostSystem, _a2 *billingpb.MoneyBackCostSystemResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.MoneyBackCostSystem, *billingpb.MoneyBackCostSystemResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetPaymentChannelCostMerchant provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) SetPaymentChannelCostMerchant(_a0 context.Context, _a1 *billingpb.PaymentChannelCostMerchant, _a2 *billingpb.PaymentChannelCostMerchantResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.PaymentChannelCostMerchant, *billingpb.PaymentChannelCostMerchantResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetPaymentChannelCostSystem provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) SetPaymentChannelCostSystem(_a0 context.Context, _a1 *billingpb.PaymentChannelCostSystem, _a2 *billingpb.PaymentChannelCostSystemResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.PaymentChannelCostSystem, *billingpb.PaymentChannelCostSystemResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetPaymentMinLimitSystem provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) SetPaymentMinLimitSystem(_a0 context.Context, _a1 *billingpb.PaymentMinLimitSystem, _a2 *billingpb.EmptyResponseWithStatus) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.PaymentMinLimitSystem, *billingpb.EmptyResponseWithStatus) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetSubscriptionRenewalPending provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) SetSubscriptionRenewalPending(_a0 context.Context, _a1 *billingpb.SetSubscriptionRenewalPendingRequest, _a2 *billingpb.EmptyResponseWithStatus) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.SetSubscriptionRenewalPendingRequest, *billingpb.EmptyResponseWithStatus) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetUserNotifyNewRegion provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) SetUserNotifyNewRegion(_a0 context.Context, _a1 *billingpb.SetUserNotifyRequest, _a2 *billingpb.EmptyResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.SetUserNotifyRequest, *billingpb.EmptyResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetUserNotifySales provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) SetUserNotifySales(_a0 context.Context, _a1 *billingpb.SetUserNotifyRequest, _a2 *billingpb.EmptyResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.SetUserNotifyRequest, *billingpb.EmptyResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnPublishKeyProduct provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) UnPublishKeyProduct(_a0 context.Context, _a1 *billingpb.UnPublishKeyProductRequest, _a2 *billingpb.KeyProductResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.UnPublishKeyProductRequest, *billingpb.KeyProductResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateCountry provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) UpdateCountry(_a0 context.Context, _a1 *billingpb.Country, _a2 *billingpb.Country) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.Country, *billingpb.Country) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateOrder provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) UpdateOrder(_a0 context.Context, _a1 *billingpb.Order, _a2 *billingpb.EmptyResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.Order, *billingpb.EmptyResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePayoutDocument provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) UpdatePayoutDocument(_a0 context.Context, _a1 *billingpb.UpdatePayoutDocumentRequest, _a2 *billingpb.PayoutDocumentResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.UpdatePayoutDocumentRequest, *billingpb.PayoutDocumentResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePriceGroup provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) UpdatePriceGroup(_a0 context.Context, _a1 *billingpb.PriceGroup, _a2 *billingpb.PriceGroup) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.PriceGroup, *billingpb.PriceGroup) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateProductPrices provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) UpdateProductPrices(_a0 context.Context, _a1 *billingpb.UpdateProductPricesRequest, _a2 *billingpb.ResponseError) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.UpdateProductPricesRequest, *billingpb.ResponseError) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateRecurringPlan provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) UpdateRecurringPlan(_a0 context.Context, _a1 *billingpb.RecurringPlan, _a2 *billingpb.UpdateRecurringPlanResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.RecurringPlan, *billingpb.UpdateRecurringPlanResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateVatReportStatus provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) UpdateVatReportStatus(_a0 context.Context, _a1 *billingpb.UpdateVatReportStatusRequest, _a2 *billingpb.ResponseError) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.UpdateVatReportStatusRequest, *billingpb.ResponseError) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UploadKeysFile provides a mock function with given fields: _a0, _a1, _a2
func (_m *BillingServiceHandler) UploadKeysFile(_a0 context.Context, _a1 *billingpb.PlatformKeysFileRequest, _a2 *billingpb.PlatformKeysFileResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.PlatformKeysFileRequest, *billingpb.PlatformKeysFileResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
