// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	client "github.com/micro/go-micro/client"
	billingpb "github.com/paysuper/paysuper-proto/go/billingpb"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// BillingService is an autogenerated mock type for the BillingService type
type BillingService struct {
	mock.Mock
}

// AcceptInvite provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) AcceptInvite(ctx context.Context, in *billingpb.AcceptInviteRequest, opts ...client.CallOption) (*billingpb.AcceptInviteResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.AcceptInviteResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.AcceptInviteRequest, ...client.CallOption) *billingpb.AcceptInviteResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.AcceptInviteResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.AcceptInviteRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddMerchantDocument provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) AddMerchantDocument(ctx context.Context, in *billingpb.MerchantDocument, opts ...client.CallOption) (*billingpb.AddMerchantDocumentResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.AddMerchantDocumentResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.MerchantDocument, ...client.CallOption) *billingpb.AddMerchantDocumentResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.AddMerchantDocumentResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.MerchantDocument, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddOperatingCompany provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) AddOperatingCompany(ctx context.Context, in *billingpb.OperatingCompany, opts ...client.CallOption) (*billingpb.EmptyResponseWithStatus, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.EmptyResponseWithStatus
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.OperatingCompany, ...client.CallOption) *billingpb.EmptyResponseWithStatus); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.EmptyResponseWithStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.OperatingCompany, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddRecurringPlan provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) AddRecurringPlan(ctx context.Context, in *billingpb.RecurringPlan, opts ...client.CallOption) (*billingpb.AddRecurringPlanResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.AddRecurringPlanResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.RecurringPlan, ...client.CallOption) *billingpb.AddRecurringPlanResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.AddRecurringPlanResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.RecurringPlan, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AutoAcceptRoyaltyReports provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) AutoAcceptRoyaltyReports(ctx context.Context, in *billingpb.EmptyRequest, opts ...client.CallOption) (*billingpb.EmptyResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.EmptyResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.EmptyRequest, ...client.CallOption) *billingpb.EmptyResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.EmptyResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.EmptyRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AutoCreatePayoutDocuments provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) AutoCreatePayoutDocuments(ctx context.Context, in *billingpb.EmptyRequest, opts ...client.CallOption) (*billingpb.EmptyResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.EmptyResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.EmptyRequest, ...client.CallOption) *billingpb.EmptyResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.EmptyResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.EmptyRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CalcAnnualTurnovers provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) CalcAnnualTurnovers(ctx context.Context, in *billingpb.EmptyRequest, opts ...client.CallOption) (*billingpb.EmptyResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.EmptyResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.EmptyRequest, ...client.CallOption) *billingpb.EmptyResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.EmptyResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.EmptyRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelRedeemKeyForOrder provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) CancelRedeemKeyForOrder(ctx context.Context, in *billingpb.KeyForOrderRequest, opts ...client.CallOption) (*billingpb.EmptyResponseWithStatus, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.EmptyResponseWithStatus
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.KeyForOrderRequest, ...client.CallOption) *billingpb.EmptyResponseWithStatus); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.EmptyResponseWithStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.KeyForOrderRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangeCodeInOrder provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) ChangeCodeInOrder(ctx context.Context, in *billingpb.ChangeCodeInOrderRequest, opts ...client.CallOption) (*billingpb.ChangeCodeInOrderResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.ChangeCodeInOrderResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.ChangeCodeInOrderRequest, ...client.CallOption) *billingpb.ChangeCodeInOrderResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.ChangeCodeInOrderResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.ChangeCodeInOrderRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangeMerchant provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) ChangeMerchant(ctx context.Context, in *billingpb.OnboardingRequest, opts ...client.CallOption) (*billingpb.ChangeMerchantResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.ChangeMerchantResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.OnboardingRequest, ...client.CallOption) *billingpb.ChangeMerchantResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.ChangeMerchantResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.OnboardingRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangeMerchantData provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) ChangeMerchantData(ctx context.Context, in *billingpb.ChangeMerchantDataRequest, opts ...client.CallOption) (*billingpb.ChangeMerchantDataResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.ChangeMerchantDataResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.ChangeMerchantDataRequest, ...client.CallOption) *billingpb.ChangeMerchantDataResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.ChangeMerchantDataResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.ChangeMerchantDataRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangeMerchantManualPayouts provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) ChangeMerchantManualPayouts(ctx context.Context, in *billingpb.ChangeMerchantManualPayoutsRequest, opts ...client.CallOption) (*billingpb.ChangeMerchantManualPayoutsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.ChangeMerchantManualPayoutsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.ChangeMerchantManualPayoutsRequest, ...client.CallOption) *billingpb.ChangeMerchantManualPayoutsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.ChangeMerchantManualPayoutsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.ChangeMerchantManualPayoutsRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangeMerchantPaymentMethod provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) ChangeMerchantPaymentMethod(ctx context.Context, in *billingpb.MerchantPaymentMethodRequest, opts ...client.CallOption) (*billingpb.MerchantPaymentMethodResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.MerchantPaymentMethodResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.MerchantPaymentMethodRequest, ...client.CallOption) *billingpb.MerchantPaymentMethodResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.MerchantPaymentMethodResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.MerchantPaymentMethodRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangeMerchantStatus provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) ChangeMerchantStatus(ctx context.Context, in *billingpb.MerchantChangeStatusRequest, opts ...client.CallOption) (*billingpb.ChangeMerchantStatusResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.ChangeMerchantStatusResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.MerchantChangeStatusRequest, ...client.CallOption) *billingpb.ChangeMerchantStatusResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.ChangeMerchantStatusResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.MerchantChangeStatusRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangeProject provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) ChangeProject(ctx context.Context, in *billingpb.Project, opts ...client.CallOption) (*billingpb.ChangeProjectResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.ChangeProjectResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.Project, ...client.CallOption) *billingpb.ChangeProjectResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.ChangeProjectResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.Project, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangeRoleForAdminUser provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) ChangeRoleForAdminUser(ctx context.Context, in *billingpb.ChangeRoleForAdminUserRequest, opts ...client.CallOption) (*billingpb.EmptyResponseWithStatus, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.EmptyResponseWithStatus
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.ChangeRoleForAdminUserRequest, ...client.CallOption) *billingpb.EmptyResponseWithStatus); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.EmptyResponseWithStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.ChangeRoleForAdminUserRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangeRoleForMerchantUser provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) ChangeRoleForMerchantUser(ctx context.Context, in *billingpb.ChangeRoleForMerchantUserRequest, opts ...client.CallOption) (*billingpb.EmptyResponseWithStatus, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.EmptyResponseWithStatus
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.ChangeRoleForMerchantUserRequest, ...client.CallOption) *billingpb.EmptyResponseWithStatus); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.EmptyResponseWithStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.ChangeRoleForMerchantUserRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangeRoyaltyReport provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) ChangeRoyaltyReport(ctx context.Context, in *billingpb.ChangeRoyaltyReportRequest, opts ...client.CallOption) (*billingpb.ResponseError, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.ResponseError
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.ChangeRoyaltyReportRequest, ...client.CallOption) *billingpb.ResponseError); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.ResponseError)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.ChangeRoyaltyReportRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckInviteToken provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) CheckInviteToken(ctx context.Context, in *billingpb.CheckInviteTokenRequest, opts ...client.CallOption) (*billingpb.CheckInviteTokenResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.CheckInviteTokenResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.CheckInviteTokenRequest, ...client.CallOption) *billingpb.CheckInviteTokenResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.CheckInviteTokenResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.CheckInviteTokenRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckProjectRequestSignature provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) CheckProjectRequestSignature(ctx context.Context, in *billingpb.CheckProjectRequestSignatureRequest, opts ...client.CallOption) (*billingpb.CheckProjectRequestSignatureResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.CheckProjectRequestSignatureResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.CheckProjectRequestSignatureRequest, ...client.CallOption) *billingpb.CheckProjectRequestSignatureResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.CheckProjectRequestSignatureResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.CheckProjectRequestSignatureRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckSkuAndKeyProject provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) CheckSkuAndKeyProject(ctx context.Context, in *billingpb.CheckSkuAndKeyProjectRequest, opts ...client.CallOption) (*billingpb.EmptyResponseWithStatus, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.EmptyResponseWithStatus
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.CheckSkuAndKeyProjectRequest, ...client.CallOption) *billingpb.EmptyResponseWithStatus); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.EmptyResponseWithStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.CheckSkuAndKeyProjectRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConfirmUserEmail provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) ConfirmUserEmail(ctx context.Context, in *billingpb.ConfirmUserEmailRequest, opts ...client.CallOption) (*billingpb.ConfirmUserEmailResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.ConfirmUserEmailResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.ConfirmUserEmailRequest, ...client.CallOption) *billingpb.ConfirmUserEmailResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.ConfirmUserEmailResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.ConfirmUserEmailRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAccountingEntry provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) CreateAccountingEntry(ctx context.Context, in *billingpb.CreateAccountingEntryRequest, opts ...client.CallOption) (*billingpb.CreateAccountingEntryResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.CreateAccountingEntryResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.CreateAccountingEntryRequest, ...client.CallOption) *billingpb.CreateAccountingEntryResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.CreateAccountingEntryResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.CreateAccountingEntryRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateNotification provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) CreateNotification(ctx context.Context, in *billingpb.NotificationRequest, opts ...client.CallOption) (*billingpb.CreateNotificationResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.CreateNotificationResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.NotificationRequest, ...client.CallOption) *billingpb.CreateNotificationResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.CreateNotificationResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.NotificationRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOrUpdateKeyProduct provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) CreateOrUpdateKeyProduct(ctx context.Context, in *billingpb.CreateOrUpdateKeyProductRequest, opts ...client.CallOption) (*billingpb.KeyProductResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.KeyProductResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.CreateOrUpdateKeyProductRequest, ...client.CallOption) *billingpb.KeyProductResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.KeyProductResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.CreateOrUpdateKeyProductRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOrUpdatePaylink provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) CreateOrUpdatePaylink(ctx context.Context, in *billingpb.CreatePaylinkRequest, opts ...client.CallOption) (*billingpb.GetPaylinkResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.GetPaylinkResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.CreatePaylinkRequest, ...client.CallOption) *billingpb.GetPaylinkResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.GetPaylinkResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.CreatePaylinkRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOrUpdatePaymentMethod provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) CreateOrUpdatePaymentMethod(ctx context.Context, in *billingpb.PaymentMethod, opts ...client.CallOption) (*billingpb.ChangePaymentMethodResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.ChangePaymentMethodResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.PaymentMethod, ...client.CallOption) *billingpb.ChangePaymentMethodResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.ChangePaymentMethodResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.PaymentMethod, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOrUpdatePaymentMethodProductionSettings provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) CreateOrUpdatePaymentMethodProductionSettings(ctx context.Context, in *billingpb.ChangePaymentMethodParamsRequest, opts ...client.CallOption) (*billingpb.ChangePaymentMethodParamsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.ChangePaymentMethodParamsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.ChangePaymentMethodParamsRequest, ...client.CallOption) *billingpb.ChangePaymentMethodParamsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.ChangePaymentMethodParamsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.ChangePaymentMethodParamsRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOrUpdatePaymentMethodTestSettings provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) CreateOrUpdatePaymentMethodTestSettings(ctx context.Context, in *billingpb.ChangePaymentMethodParamsRequest, opts ...client.CallOption) (*billingpb.ChangePaymentMethodParamsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.ChangePaymentMethodParamsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.ChangePaymentMethodParamsRequest, ...client.CallOption) *billingpb.ChangePaymentMethodParamsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.ChangePaymentMethodParamsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.ChangePaymentMethodParamsRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOrUpdateProduct provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) CreateOrUpdateProduct(ctx context.Context, in *billingpb.Product, opts ...client.CallOption) (*billingpb.Product, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.Product
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.Product, ...client.CallOption) *billingpb.Product); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.Product, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOrUpdateUserProfile provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) CreateOrUpdateUserProfile(ctx context.Context, in *billingpb.UserProfile, opts ...client.CallOption) (*billingpb.CreateOrUpdateUserProfileResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.CreateOrUpdateUserProfileResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.UserProfile, ...client.CallOption) *billingpb.CreateOrUpdateUserProfileResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.CreateOrUpdateUserProfileResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.UserProfile, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePageReview provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) CreatePageReview(ctx context.Context, in *billingpb.CreatePageReviewRequest, opts ...client.CallOption) (*billingpb.CheckProjectRequestSignatureResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.CheckProjectRequestSignatureResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.CreatePageReviewRequest, ...client.CallOption) *billingpb.CheckProjectRequestSignatureResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.CheckProjectRequestSignatureResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.CreatePageReviewRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePayoutDocument provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) CreatePayoutDocument(ctx context.Context, in *billingpb.CreatePayoutDocumentRequest, opts ...client.CallOption) (*billingpb.CreatePayoutDocumentResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.CreatePayoutDocumentResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.CreatePayoutDocumentRequest, ...client.CallOption) *billingpb.CreatePayoutDocumentResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.CreatePayoutDocumentResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.CreatePayoutDocumentRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRefund provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) CreateRefund(ctx context.Context, in *billingpb.CreateRefundRequest, opts ...client.CallOption) (*billingpb.CreateRefundResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.CreateRefundResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.CreateRefundRequest, ...client.CallOption) *billingpb.CreateRefundResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.CreateRefundResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.CreateRefundRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRoyaltyReport provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) CreateRoyaltyReport(ctx context.Context, in *billingpb.CreateRoyaltyReportRequest, opts ...client.CallOption) (*billingpb.CreateRoyaltyReportRequest, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.CreateRoyaltyReportRequest
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.CreateRoyaltyReportRequest, ...client.CallOption) *billingpb.CreateRoyaltyReportRequest); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.CreateRoyaltyReportRequest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.CreateRoyaltyReportRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateToken provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) CreateToken(ctx context.Context, in *billingpb.TokenRequest, opts ...client.CallOption) (*billingpb.TokenResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.TokenResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.TokenRequest, ...client.CallOption) *billingpb.TokenResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.TokenResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.TokenRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAdminUser provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) DeleteAdminUser(ctx context.Context, in *billingpb.AdminRoleRequest, opts ...client.CallOption) (*billingpb.EmptyResponseWithStatus, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.EmptyResponseWithStatus
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.AdminRoleRequest, ...client.CallOption) *billingpb.EmptyResponseWithStatus); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.EmptyResponseWithStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.AdminRoleRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCustomerCard provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) DeleteCustomerCard(ctx context.Context, in *billingpb.DeleteCustomerCardRequest, opts ...client.CallOption) (*billingpb.EmptyResponseWithStatus, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.EmptyResponseWithStatus
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.DeleteCustomerCardRequest, ...client.CallOption) *billingpb.EmptyResponseWithStatus); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.EmptyResponseWithStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.DeleteCustomerCardRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteKeyProduct provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) DeleteKeyProduct(ctx context.Context, in *billingpb.RequestKeyProductMerchant, opts ...client.CallOption) (*billingpb.EmptyResponseWithStatus, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.EmptyResponseWithStatus
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.RequestKeyProductMerchant, ...client.CallOption) *billingpb.EmptyResponseWithStatus); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.EmptyResponseWithStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.RequestKeyProductMerchant, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMerchantUser provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) DeleteMerchantUser(ctx context.Context, in *billingpb.MerchantRoleRequest, opts ...client.CallOption) (*billingpb.EmptyResponseWithStatus, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.EmptyResponseWithStatus
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.MerchantRoleRequest, ...client.CallOption) *billingpb.EmptyResponseWithStatus); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.EmptyResponseWithStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.MerchantRoleRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMoneyBackCostMerchant provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) DeleteMoneyBackCostMerchant(ctx context.Context, in *billingpb.PaymentCostDeleteRequest, opts ...client.CallOption) (*billingpb.ResponseError, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.ResponseError
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.PaymentCostDeleteRequest, ...client.CallOption) *billingpb.ResponseError); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.ResponseError)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.PaymentCostDeleteRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMoneyBackCostSystem provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) DeleteMoneyBackCostSystem(ctx context.Context, in *billingpb.PaymentCostDeleteRequest, opts ...client.CallOption) (*billingpb.ResponseError, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.ResponseError
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.PaymentCostDeleteRequest, ...client.CallOption) *billingpb.ResponseError); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.ResponseError)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.PaymentCostDeleteRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePaylink provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) DeletePaylink(ctx context.Context, in *billingpb.PaylinkRequest, opts ...client.CallOption) (*billingpb.EmptyResponseWithStatus, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.EmptyResponseWithStatus
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.PaylinkRequest, ...client.CallOption) *billingpb.EmptyResponseWithStatus); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.EmptyResponseWithStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.PaylinkRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePaymentChannelCostMerchant provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) DeletePaymentChannelCostMerchant(ctx context.Context, in *billingpb.PaymentCostDeleteRequest, opts ...client.CallOption) (*billingpb.ResponseError, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.ResponseError
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.PaymentCostDeleteRequest, ...client.CallOption) *billingpb.ResponseError); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.ResponseError)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.PaymentCostDeleteRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePaymentChannelCostSystem provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) DeletePaymentChannelCostSystem(ctx context.Context, in *billingpb.PaymentCostDeleteRequest, opts ...client.CallOption) (*billingpb.ResponseError, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.ResponseError
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.PaymentCostDeleteRequest, ...client.CallOption) *billingpb.ResponseError); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.ResponseError)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.PaymentCostDeleteRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePaymentMethodProductionSettings provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) DeletePaymentMethodProductionSettings(ctx context.Context, in *billingpb.GetPaymentMethodSettingsRequest, opts ...client.CallOption) (*billingpb.ChangePaymentMethodParamsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.ChangePaymentMethodParamsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetPaymentMethodSettingsRequest, ...client.CallOption) *billingpb.ChangePaymentMethodParamsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.ChangePaymentMethodParamsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.GetPaymentMethodSettingsRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePaymentMethodTestSettings provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) DeletePaymentMethodTestSettings(ctx context.Context, in *billingpb.GetPaymentMethodSettingsRequest, opts ...client.CallOption) (*billingpb.ChangePaymentMethodParamsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.ChangePaymentMethodParamsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetPaymentMethodSettingsRequest, ...client.CallOption) *billingpb.ChangePaymentMethodParamsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.ChangePaymentMethodParamsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.GetPaymentMethodSettingsRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProduct provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) DeleteProduct(ctx context.Context, in *billingpb.RequestProduct, opts ...client.CallOption) (*billingpb.EmptyResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.EmptyResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.RequestProduct, ...client.CallOption) *billingpb.EmptyResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.EmptyResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.RequestProduct, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProject provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) DeleteProject(ctx context.Context, in *billingpb.GetProjectRequest, opts ...client.CallOption) (*billingpb.ChangeProjectResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.ChangeProjectResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetProjectRequest, ...client.CallOption) *billingpb.ChangeProjectResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.ChangeProjectResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.GetProjectRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRecurringPlan provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) DeleteRecurringPlan(ctx context.Context, in *billingpb.DeleteRecurringPlanRequest, opts ...client.CallOption) (*billingpb.DeleteRecurringPlanResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.DeleteRecurringPlanResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.DeleteRecurringPlanRequest, ...client.CallOption) *billingpb.DeleteRecurringPlanResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.DeleteRecurringPlanResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.DeleteRecurringPlanRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRecurringSubscription provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) DeleteRecurringSubscription(ctx context.Context, in *billingpb.DeleteRecurringSubscriptionRequest, opts ...client.CallOption) (*billingpb.EmptyResponseWithStatus, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.EmptyResponseWithStatus
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.DeleteRecurringSubscriptionRequest, ...client.CallOption) *billingpb.EmptyResponseWithStatus); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.EmptyResponseWithStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.DeleteRecurringSubscriptionRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSavedCard provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) DeleteSavedCard(ctx context.Context, in *billingpb.DeleteSavedCardRequest, opts ...client.CallOption) (*billingpb.EmptyResponseWithStatus, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.EmptyResponseWithStatus
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.DeleteSavedCardRequest, ...client.CallOption) *billingpb.EmptyResponseWithStatus); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.EmptyResponseWithStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.DeleteSavedCardRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeserializeCookie provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) DeserializeCookie(ctx context.Context, in *billingpb.DeserializeCookieRequest, opts ...client.CallOption) (*billingpb.DeserializeCookieResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.DeserializeCookieResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.DeserializeCookieRequest, ...client.CallOption) *billingpb.DeserializeCookieResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.DeserializeCookieResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.DeserializeCookieRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisableRecurringPlan provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) DisableRecurringPlan(ctx context.Context, in *billingpb.DisableRecurringPlanRequest, opts ...client.CallOption) (*billingpb.DisableRecurringPlanResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.DisableRecurringPlanResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.DisableRecurringPlanRequest, ...client.CallOption) *billingpb.DisableRecurringPlanResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.DisableRecurringPlanResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.DisableRecurringPlanRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableRecurringPlan provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) EnableRecurringPlan(ctx context.Context, in *billingpb.EnableRecurringPlanRequest, opts ...client.CallOption) (*billingpb.EnableRecurringPlanResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.EnableRecurringPlanResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.EnableRecurringPlanRequest, ...client.CallOption) *billingpb.EnableRecurringPlanResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.EnableRecurringPlanResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.EnableRecurringPlanRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllOrders provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) FindAllOrders(ctx context.Context, in *billingpb.ListOrdersRequest, opts ...client.CallOption) (*billingpb.ListOrdersResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.ListOrdersResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.ListOrdersRequest, ...client.CallOption) *billingpb.ListOrdersResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.ListOrdersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.ListOrdersRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllOrdersPrivate provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) FindAllOrdersPrivate(ctx context.Context, in *billingpb.ListOrdersRequest, opts ...client.CallOption) (*billingpb.ListOrdersPrivateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.ListOrdersPrivateResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.ListOrdersRequest, ...client.CallOption) *billingpb.ListOrdersPrivateResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.ListOrdersPrivateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.ListOrdersRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllOrdersPublic provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) FindAllOrdersPublic(ctx context.Context, in *billingpb.ListOrdersRequest, opts ...client.CallOption) (*billingpb.ListOrdersPublicResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.ListOrdersPublicResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.ListOrdersRequest, ...client.CallOption) *billingpb.ListOrdersPublicResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.ListOrdersPublicResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.ListOrdersRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByZipCode provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) FindByZipCode(ctx context.Context, in *billingpb.FindByZipCodeRequest, opts ...client.CallOption) (*billingpb.FindByZipCodeResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.FindByZipCodeResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.FindByZipCodeRequest, ...client.CallOption) *billingpb.FindByZipCodeResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.FindByZipCodeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.FindByZipCodeRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindExpiredSubscriptions provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) FindExpiredSubscriptions(ctx context.Context, in *billingpb.FindExpiredSubscriptionsRequest, opts ...client.CallOption) (*billingpb.FindExpiredSubscriptionsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.FindExpiredSubscriptionsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.FindExpiredSubscriptionsRequest, ...client.CallOption) *billingpb.FindExpiredSubscriptionsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.FindExpiredSubscriptionsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.FindExpiredSubscriptionsRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindSubscriptions provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) FindSubscriptions(ctx context.Context, in *billingpb.FindSubscriptionsRequest, opts ...client.CallOption) (*billingpb.FindSubscriptionsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.FindSubscriptionsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.FindSubscriptionsRequest, ...client.CallOption) *billingpb.FindSubscriptionsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.FindSubscriptionsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.FindSubscriptionsRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FinishRedeemKeyForOrder provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) FinishRedeemKeyForOrder(ctx context.Context, in *billingpb.KeyForOrderRequest, opts ...client.CallOption) (*billingpb.GetKeyForOrderRequestResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.GetKeyForOrderRequestResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.KeyForOrderRequest, ...client.CallOption) *billingpb.GetKeyForOrderRequestResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.GetKeyForOrderRequestResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.KeyForOrderRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetActOfCompletion provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetActOfCompletion(ctx context.Context, in *billingpb.ActOfCompletionRequest, opts ...client.CallOption) (*billingpb.ActOfCompletionResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.ActOfCompletionResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.ActOfCompletionRequest, ...client.CallOption) *billingpb.ActOfCompletionResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.ActOfCompletionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.ActOfCompletionRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetActsOfCompletionList provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetActsOfCompletionList(ctx context.Context, in *billingpb.ActsOfCompletionListRequest, opts ...client.CallOption) (*billingpb.ActsOfCompletionListResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.ActsOfCompletionListResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.ActsOfCompletionListRequest, ...client.CallOption) *billingpb.ActsOfCompletionListResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.ActsOfCompletionListResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.ActsOfCompletionListRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAdminByUserId provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetAdminByUserId(ctx context.Context, in *billingpb.CommonUserProfileRequest, opts ...client.CallOption) (*billingpb.UserRoleResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.UserRoleResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.CommonUserProfileRequest, ...client.CallOption) *billingpb.UserRoleResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.UserRoleResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.CommonUserProfileRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAdminUserRole provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetAdminUserRole(ctx context.Context, in *billingpb.AdminRoleRequest, opts ...client.CallOption) (*billingpb.UserRoleResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.UserRoleResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.AdminRoleRequest, ...client.CallOption) *billingpb.UserRoleResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.UserRoleResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.AdminRoleRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAdminUsers provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetAdminUsers(ctx context.Context, in *billingpb.EmptyRequest, opts ...client.CallOption) (*billingpb.GetAdminUsersResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.GetAdminUsersResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.EmptyRequest, ...client.CallOption) *billingpb.GetAdminUsersResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.GetAdminUsersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.EmptyRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllMoneyBackCostMerchant provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetAllMoneyBackCostMerchant(ctx context.Context, in *billingpb.MoneyBackCostMerchantListRequest, opts ...client.CallOption) (*billingpb.MoneyBackCostMerchantListResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.MoneyBackCostMerchantListResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.MoneyBackCostMerchantListRequest, ...client.CallOption) *billingpb.MoneyBackCostMerchantListResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.MoneyBackCostMerchantListResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.MoneyBackCostMerchantListRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllMoneyBackCostSystem provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetAllMoneyBackCostSystem(ctx context.Context, in *billingpb.EmptyRequest, opts ...client.CallOption) (*billingpb.MoneyBackCostSystemListResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.MoneyBackCostSystemListResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.EmptyRequest, ...client.CallOption) *billingpb.MoneyBackCostSystemListResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.MoneyBackCostSystemListResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.EmptyRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllPaymentChannelCostMerchant provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetAllPaymentChannelCostMerchant(ctx context.Context, in *billingpb.PaymentChannelCostMerchantListRequest, opts ...client.CallOption) (*billingpb.PaymentChannelCostMerchantListResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.PaymentChannelCostMerchantListResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.PaymentChannelCostMerchantListRequest, ...client.CallOption) *billingpb.PaymentChannelCostMerchantListResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.PaymentChannelCostMerchantListResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.PaymentChannelCostMerchantListRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllPaymentChannelCostSystem provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetAllPaymentChannelCostSystem(ctx context.Context, in *billingpb.EmptyRequest, opts ...client.CallOption) (*billingpb.PaymentChannelCostSystemListResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.PaymentChannelCostSystemListResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.EmptyRequest, ...client.CallOption) *billingpb.PaymentChannelCostSystemListResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.PaymentChannelCostSystemListResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.EmptyRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAvailableKeysCount provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetAvailableKeysCount(ctx context.Context, in *billingpb.GetPlatformKeyCountRequest, opts ...client.CallOption) (*billingpb.GetPlatformKeyCountResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.GetPlatformKeyCountResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetPlatformKeyCountRequest, ...client.CallOption) *billingpb.GetPlatformKeyCountResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.GetPlatformKeyCountResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.GetPlatformKeyCountRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCommonUserProfile provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetCommonUserProfile(ctx context.Context, in *billingpb.CommonUserProfileRequest, opts ...client.CallOption) (*billingpb.CommonUserProfileResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.CommonUserProfileResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.CommonUserProfileRequest, ...client.CallOption) *billingpb.CommonUserProfileResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.CommonUserProfileResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.CommonUserProfileRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCountriesList provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetCountriesList(ctx context.Context, in *billingpb.EmptyRequest, opts ...client.CallOption) (*billingpb.CountriesList, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.CountriesList
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.EmptyRequest, ...client.CallOption) *billingpb.CountriesList); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.CountriesList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.EmptyRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCountriesListForOrder provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetCountriesListForOrder(ctx context.Context, in *billingpb.GetCountriesListForOrderRequest, opts ...client.CallOption) (*billingpb.GetCountriesListForOrderResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.GetCountriesListForOrderResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetCountriesListForOrderRequest, ...client.CallOption) *billingpb.GetCountriesListForOrderResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.GetCountriesListForOrderResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.GetCountriesListForOrderRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCountry provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetCountry(ctx context.Context, in *billingpb.GetCountryRequest, opts ...client.CallOption) (*billingpb.Country, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.Country
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetCountryRequest, ...client.CallOption) *billingpb.Country); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.Country)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.GetCountryRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCustomerInfo provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetCustomerInfo(ctx context.Context, in *billingpb.GetCustomerInfoRequest, opts ...client.CallOption) (*billingpb.GetCustomerInfoResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.GetCustomerInfoResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetCustomerInfoRequest, ...client.CallOption) *billingpb.GetCustomerInfoResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.GetCustomerInfoResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.GetCustomerInfoRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCustomerList provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetCustomerList(ctx context.Context, in *billingpb.ListCustomersRequest, opts ...client.CallOption) (*billingpb.ListCustomersResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.ListCustomersResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.ListCustomersRequest, ...client.CallOption) *billingpb.ListCustomersResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.ListCustomersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.ListCustomersRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCustomerShortInfo provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetCustomerShortInfo(ctx context.Context, in *billingpb.GetCustomerShortInfoRequest, opts ...client.CallOption) (*billingpb.GetCustomerShortInfoResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.GetCustomerShortInfoResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetCustomerShortInfoRequest, ...client.CallOption) *billingpb.GetCustomerShortInfoResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.GetCustomerShortInfoResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.GetCustomerShortInfoRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDashboardBaseReport provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetDashboardBaseReport(ctx context.Context, in *billingpb.GetDashboardBaseReportRequest, opts ...client.CallOption) (*billingpb.GetDashboardBaseReportResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.GetDashboardBaseReportResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetDashboardBaseReportRequest, ...client.CallOption) *billingpb.GetDashboardBaseReportResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.GetDashboardBaseReportResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.GetDashboardBaseReportRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDashboardCustomerArpu provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetDashboardCustomerArpu(ctx context.Context, in *billingpb.DashboardCustomerReportArpuRequest, opts ...client.CallOption) (*billingpb.DashboardCustomerReportArpuResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.DashboardCustomerReportArpuResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.DashboardCustomerReportArpuRequest, ...client.CallOption) *billingpb.DashboardCustomerReportArpuResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.DashboardCustomerReportArpuResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.DashboardCustomerReportArpuRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDashboardCustomersReport provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetDashboardCustomersReport(ctx context.Context, in *billingpb.DashboardCustomerReportRequest, opts ...client.CallOption) (*billingpb.GetDashboardCustomerReportResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.GetDashboardCustomerReportResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.DashboardCustomerReportRequest, ...client.CallOption) *billingpb.GetDashboardCustomerReportResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.GetDashboardCustomerReportResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.DashboardCustomerReportRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDashboardMainReport provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetDashboardMainReport(ctx context.Context, in *billingpb.GetDashboardMainRequest, opts ...client.CallOption) (*billingpb.GetDashboardMainResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.GetDashboardMainResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetDashboardMainRequest, ...client.CallOption) *billingpb.GetDashboardMainResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.GetDashboardMainResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.GetDashboardMainRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDashboardRevenueDynamicsReport provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetDashboardRevenueDynamicsReport(ctx context.Context, in *billingpb.GetDashboardMainRequest, opts ...client.CallOption) (*billingpb.GetDashboardRevenueDynamicsReportResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.GetDashboardRevenueDynamicsReportResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetDashboardMainRequest, ...client.CallOption) *billingpb.GetDashboardRevenueDynamicsReportResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.GetDashboardRevenueDynamicsReportResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.GetDashboardMainRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetKeyByID provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetKeyByID(ctx context.Context, in *billingpb.KeyForOrderRequest, opts ...client.CallOption) (*billingpb.GetKeyForOrderRequestResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.GetKeyForOrderRequestResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.KeyForOrderRequest, ...client.CallOption) *billingpb.GetKeyForOrderRequestResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.GetKeyForOrderRequestResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.KeyForOrderRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetKeyProduct provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetKeyProduct(ctx context.Context, in *billingpb.RequestKeyProductMerchant, opts ...client.CallOption) (*billingpb.KeyProductResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.KeyProductResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.RequestKeyProductMerchant, ...client.CallOption) *billingpb.KeyProductResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.KeyProductResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.RequestKeyProductMerchant, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetKeyProductInfo provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetKeyProductInfo(ctx context.Context, in *billingpb.GetKeyProductInfoRequest, opts ...client.CallOption) (*billingpb.GetKeyProductInfoResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.GetKeyProductInfoResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetKeyProductInfoRequest, ...client.CallOption) *billingpb.GetKeyProductInfoResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.GetKeyProductInfoResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.GetKeyProductInfoRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetKeyProducts provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetKeyProducts(ctx context.Context, in *billingpb.ListKeyProductsRequest, opts ...client.CallOption) (*billingpb.ListKeyProductsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.ListKeyProductsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.ListKeyProductsRequest, ...client.CallOption) *billingpb.ListKeyProductsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.ListKeyProductsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.ListKeyProductsRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetKeyProductsForOrder provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetKeyProductsForOrder(ctx context.Context, in *billingpb.GetKeyProductsForOrderRequest, opts ...client.CallOption) (*billingpb.ListKeyProductsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.ListKeyProductsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetKeyProductsForOrderRequest, ...client.CallOption) *billingpb.ListKeyProductsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.ListKeyProductsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.GetKeyProductsForOrderRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMerchantBalance provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetMerchantBalance(ctx context.Context, in *billingpb.GetMerchantBalanceRequest, opts ...client.CallOption) (*billingpb.GetMerchantBalanceResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.GetMerchantBalanceResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetMerchantBalanceRequest, ...client.CallOption) *billingpb.GetMerchantBalanceResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.GetMerchantBalanceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.GetMerchantBalanceRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMerchantBy provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetMerchantBy(ctx context.Context, in *billingpb.GetMerchantByRequest, opts ...client.CallOption) (*billingpb.GetMerchantResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.GetMerchantResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetMerchantByRequest, ...client.CallOption) *billingpb.GetMerchantResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.GetMerchantResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.GetMerchantByRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMerchantDocument provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetMerchantDocument(ctx context.Context, in *billingpb.GetMerchantDocumentRequest, opts ...client.CallOption) (*billingpb.GetMerchantDocumentResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.GetMerchantDocumentResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetMerchantDocumentRequest, ...client.CallOption) *billingpb.GetMerchantDocumentResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.GetMerchantDocumentResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.GetMerchantDocumentRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMerchantDocuments provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetMerchantDocuments(ctx context.Context, in *billingpb.GetMerchantDocumentsRequest, opts ...client.CallOption) (*billingpb.GetMerchantDocumentsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.GetMerchantDocumentsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetMerchantDocumentsRequest, ...client.CallOption) *billingpb.GetMerchantDocumentsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.GetMerchantDocumentsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.GetMerchantDocumentsRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMerchantOnboardingCompleteData provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetMerchantOnboardingCompleteData(ctx context.Context, in *billingpb.SetMerchantS3AgreementRequest, opts ...client.CallOption) (*billingpb.GetMerchantOnboardingCompleteDataResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.GetMerchantOnboardingCompleteDataResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.SetMerchantS3AgreementRequest, ...client.CallOption) *billingpb.GetMerchantOnboardingCompleteDataResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.GetMerchantOnboardingCompleteDataResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.SetMerchantS3AgreementRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMerchantPaymentMethod provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetMerchantPaymentMethod(ctx context.Context, in *billingpb.GetMerchantPaymentMethodRequest, opts ...client.CallOption) (*billingpb.GetMerchantPaymentMethodResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.GetMerchantPaymentMethodResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetMerchantPaymentMethodRequest, ...client.CallOption) *billingpb.GetMerchantPaymentMethodResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.GetMerchantPaymentMethodResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.GetMerchantPaymentMethodRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMerchantTariffRates provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetMerchantTariffRates(ctx context.Context, in *billingpb.GetMerchantTariffRatesRequest, opts ...client.CallOption) (*billingpb.GetMerchantTariffRatesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.GetMerchantTariffRatesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetMerchantTariffRatesRequest, ...client.CallOption) *billingpb.GetMerchantTariffRatesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.GetMerchantTariffRatesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.GetMerchantTariffRatesRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMerchantUserRole provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetMerchantUserRole(ctx context.Context, in *billingpb.MerchantRoleRequest, opts ...client.CallOption) (*billingpb.UserRoleResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.UserRoleResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.MerchantRoleRequest, ...client.CallOption) *billingpb.UserRoleResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.UserRoleResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.MerchantRoleRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMerchantUsers provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetMerchantUsers(ctx context.Context, in *billingpb.GetMerchantUsersRequest, opts ...client.CallOption) (*billingpb.GetMerchantUsersResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.GetMerchantUsersResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetMerchantUsersRequest, ...client.CallOption) *billingpb.GetMerchantUsersResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.GetMerchantUsersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.GetMerchantUsersRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMerchantsForUser provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetMerchantsForUser(ctx context.Context, in *billingpb.GetMerchantsForUserRequest, opts ...client.CallOption) (*billingpb.GetMerchantsForUserResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.GetMerchantsForUserResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetMerchantsForUserRequest, ...client.CallOption) *billingpb.GetMerchantsForUserResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.GetMerchantsForUserResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.GetMerchantsForUserRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMoneyBackCostMerchant provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetMoneyBackCostMerchant(ctx context.Context, in *billingpb.MoneyBackCostMerchantRequest, opts ...client.CallOption) (*billingpb.MoneyBackCostMerchantResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.MoneyBackCostMerchantResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.MoneyBackCostMerchantRequest, ...client.CallOption) *billingpb.MoneyBackCostMerchantResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.MoneyBackCostMerchantResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.MoneyBackCostMerchantRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMoneyBackCostSystem provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetMoneyBackCostSystem(ctx context.Context, in *billingpb.MoneyBackCostSystemRequest, opts ...client.CallOption) (*billingpb.MoneyBackCostSystemResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.MoneyBackCostSystemResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.MoneyBackCostSystemRequest, ...client.CallOption) *billingpb.MoneyBackCostSystemResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.MoneyBackCostSystemResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.MoneyBackCostSystemRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNotification provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetNotification(ctx context.Context, in *billingpb.GetNotificationRequest, opts ...client.CallOption) (*billingpb.Notification, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.Notification
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetNotificationRequest, ...client.CallOption) *billingpb.Notification); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.Notification)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.GetNotificationRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOperatingCompaniesList provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetOperatingCompaniesList(ctx context.Context, in *billingpb.EmptyRequest, opts ...client.CallOption) (*billingpb.GetOperatingCompaniesListResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.GetOperatingCompaniesListResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.EmptyRequest, ...client.CallOption) *billingpb.GetOperatingCompaniesListResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.GetOperatingCompaniesListResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.EmptyRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOperatingCompany provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetOperatingCompany(ctx context.Context, in *billingpb.GetOperatingCompanyRequest, opts ...client.CallOption) (*billingpb.GetOperatingCompanyResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.GetOperatingCompanyResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetOperatingCompanyRequest, ...client.CallOption) *billingpb.GetOperatingCompanyResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.GetOperatingCompanyResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.GetOperatingCompanyRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderPrivate provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetOrderPrivate(ctx context.Context, in *billingpb.GetOrderRequest, opts ...client.CallOption) (*billingpb.GetOrderPrivateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.GetOrderPrivateResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetOrderRequest, ...client.CallOption) *billingpb.GetOrderPrivateResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.GetOrderPrivateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.GetOrderRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderPublic provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetOrderPublic(ctx context.Context, in *billingpb.GetOrderRequest, opts ...client.CallOption) (*billingpb.GetOrderPublicResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.GetOrderPublicResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetOrderRequest, ...client.CallOption) *billingpb.GetOrderPublicResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.GetOrderPublicResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.GetOrderRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaylink provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetPaylink(ctx context.Context, in *billingpb.PaylinkRequest, opts ...client.CallOption) (*billingpb.GetPaylinkResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.GetPaylinkResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.PaylinkRequest, ...client.CallOption) *billingpb.GetPaylinkResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.GetPaylinkResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.PaylinkRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaylinkStatByCountry provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetPaylinkStatByCountry(ctx context.Context, in *billingpb.GetPaylinkStatCommonRequest, opts ...client.CallOption) (*billingpb.GetPaylinkStatCommonGroupResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.GetPaylinkStatCommonGroupResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetPaylinkStatCommonRequest, ...client.CallOption) *billingpb.GetPaylinkStatCommonGroupResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.GetPaylinkStatCommonGroupResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.GetPaylinkStatCommonRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaylinkStatByDate provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetPaylinkStatByDate(ctx context.Context, in *billingpb.GetPaylinkStatCommonRequest, opts ...client.CallOption) (*billingpb.GetPaylinkStatCommonGroupResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.GetPaylinkStatCommonGroupResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetPaylinkStatCommonRequest, ...client.CallOption) *billingpb.GetPaylinkStatCommonGroupResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.GetPaylinkStatCommonGroupResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.GetPaylinkStatCommonRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaylinkStatByReferrer provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetPaylinkStatByReferrer(ctx context.Context, in *billingpb.GetPaylinkStatCommonRequest, opts ...client.CallOption) (*billingpb.GetPaylinkStatCommonGroupResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.GetPaylinkStatCommonGroupResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetPaylinkStatCommonRequest, ...client.CallOption) *billingpb.GetPaylinkStatCommonGroupResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.GetPaylinkStatCommonGroupResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.GetPaylinkStatCommonRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaylinkStatByUtm provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetPaylinkStatByUtm(ctx context.Context, in *billingpb.GetPaylinkStatCommonRequest, opts ...client.CallOption) (*billingpb.GetPaylinkStatCommonGroupResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.GetPaylinkStatCommonGroupResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetPaylinkStatCommonRequest, ...client.CallOption) *billingpb.GetPaylinkStatCommonGroupResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.GetPaylinkStatCommonGroupResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.GetPaylinkStatCommonRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaylinkStatTotal provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetPaylinkStatTotal(ctx context.Context, in *billingpb.GetPaylinkStatCommonRequest, opts ...client.CallOption) (*billingpb.GetPaylinkStatCommonResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.GetPaylinkStatCommonResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetPaylinkStatCommonRequest, ...client.CallOption) *billingpb.GetPaylinkStatCommonResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.GetPaylinkStatCommonResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.GetPaylinkStatCommonRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaylinkTransactions provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetPaylinkTransactions(ctx context.Context, in *billingpb.GetPaylinkTransactionsRequest, opts ...client.CallOption) (*billingpb.TransactionsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.TransactionsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetPaylinkTransactionsRequest, ...client.CallOption) *billingpb.TransactionsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.TransactionsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.GetPaylinkTransactionsRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaylinkURL provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetPaylinkURL(ctx context.Context, in *billingpb.GetPaylinkURLRequest, opts ...client.CallOption) (*billingpb.GetPaylinkUrlResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.GetPaylinkUrlResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetPaylinkURLRequest, ...client.CallOption) *billingpb.GetPaylinkUrlResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.GetPaylinkUrlResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.GetPaylinkURLRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaylinkUrlByShortLink provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetPaylinkUrlByShortLink(ctx context.Context, in *billingpb.GetPaylinkUrlByShortLinkRequest, opts ...client.CallOption) (*billingpb.GetPaylinkUrlByShortLinkResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.GetPaylinkUrlByShortLinkResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetPaylinkUrlByShortLinkRequest, ...client.CallOption) *billingpb.GetPaylinkUrlByShortLinkResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.GetPaylinkUrlByShortLinkResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.GetPaylinkUrlByShortLinkRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaylinks provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetPaylinks(ctx context.Context, in *billingpb.GetPaylinksRequest, opts ...client.CallOption) (*billingpb.GetPaylinksResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.GetPaylinksResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetPaylinksRequest, ...client.CallOption) *billingpb.GetPaylinksResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.GetPaylinksResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.GetPaylinksRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaymentChannelCostMerchant provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetPaymentChannelCostMerchant(ctx context.Context, in *billingpb.PaymentChannelCostMerchantRequest, opts ...client.CallOption) (*billingpb.PaymentChannelCostMerchantResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.PaymentChannelCostMerchantResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.PaymentChannelCostMerchantRequest, ...client.CallOption) *billingpb.PaymentChannelCostMerchantResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.PaymentChannelCostMerchantResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.PaymentChannelCostMerchantRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaymentChannelCostSystem provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetPaymentChannelCostSystem(ctx context.Context, in *billingpb.PaymentChannelCostSystemRequest, opts ...client.CallOption) (*billingpb.PaymentChannelCostSystemResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.PaymentChannelCostSystemResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.PaymentChannelCostSystemRequest, ...client.CallOption) *billingpb.PaymentChannelCostSystemResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.PaymentChannelCostSystemResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.PaymentChannelCostSystemRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaymentMethodProductionSettings provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetPaymentMethodProductionSettings(ctx context.Context, in *billingpb.GetPaymentMethodSettingsRequest, opts ...client.CallOption) (*billingpb.GetPaymentMethodSettingsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.GetPaymentMethodSettingsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetPaymentMethodSettingsRequest, ...client.CallOption) *billingpb.GetPaymentMethodSettingsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.GetPaymentMethodSettingsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.GetPaymentMethodSettingsRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaymentMethodTestSettings provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetPaymentMethodTestSettings(ctx context.Context, in *billingpb.GetPaymentMethodSettingsRequest, opts ...client.CallOption) (*billingpb.GetPaymentMethodSettingsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.GetPaymentMethodSettingsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetPaymentMethodSettingsRequest, ...client.CallOption) *billingpb.GetPaymentMethodSettingsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.GetPaymentMethodSettingsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.GetPaymentMethodSettingsRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaymentMinLimitsSystem provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetPaymentMinLimitsSystem(ctx context.Context, in *billingpb.EmptyRequest, opts ...client.CallOption) (*billingpb.GetPaymentMinLimitsSystemResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.GetPaymentMinLimitsSystemResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.EmptyRequest, ...client.CallOption) *billingpb.GetPaymentMinLimitsSystemResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.GetPaymentMinLimitsSystemResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.EmptyRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPayoutDocument provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetPayoutDocument(ctx context.Context, in *billingpb.GetPayoutDocumentRequest, opts ...client.CallOption) (*billingpb.PayoutDocumentResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.PayoutDocumentResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetPayoutDocumentRequest, ...client.CallOption) *billingpb.PayoutDocumentResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.PayoutDocumentResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.GetPayoutDocumentRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPayoutDocumentRoyaltyReports provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetPayoutDocumentRoyaltyReports(ctx context.Context, in *billingpb.GetPayoutDocumentRequest, opts ...client.CallOption) (*billingpb.ListRoyaltyReportsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.ListRoyaltyReportsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetPayoutDocumentRequest, ...client.CallOption) *billingpb.ListRoyaltyReportsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.ListRoyaltyReportsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.GetPayoutDocumentRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPayoutDocuments provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetPayoutDocuments(ctx context.Context, in *billingpb.GetPayoutDocumentsRequest, opts ...client.CallOption) (*billingpb.GetPayoutDocumentsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.GetPayoutDocumentsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetPayoutDocumentsRequest, ...client.CallOption) *billingpb.GetPayoutDocumentsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.GetPayoutDocumentsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.GetPayoutDocumentsRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPlatforms provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetPlatforms(ctx context.Context, in *billingpb.ListPlatformsRequest, opts ...client.CallOption) (*billingpb.ListPlatformsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.ListPlatformsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.ListPlatformsRequest, ...client.CallOption) *billingpb.ListPlatformsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.ListPlatformsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.ListPlatformsRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPriceGroup provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetPriceGroup(ctx context.Context, in *billingpb.GetPriceGroupRequest, opts ...client.CallOption) (*billingpb.PriceGroup, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.PriceGroup
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetPriceGroupRequest, ...client.CallOption) *billingpb.PriceGroup); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.PriceGroup)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.GetPriceGroupRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPriceGroupByCountry provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetPriceGroupByCountry(ctx context.Context, in *billingpb.PriceGroupByCountryRequest, opts ...client.CallOption) (*billingpb.PriceGroup, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.PriceGroup
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.PriceGroupByCountryRequest, ...client.CallOption) *billingpb.PriceGroup); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.PriceGroup)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.PriceGroupByCountryRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPriceGroupByRegion provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetPriceGroupByRegion(ctx context.Context, in *billingpb.GetPriceGroupByRegionRequest, opts ...client.CallOption) (*billingpb.GetPriceGroupByRegionResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.GetPriceGroupByRegionResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetPriceGroupByRegionRequest, ...client.CallOption) *billingpb.GetPriceGroupByRegionResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.GetPriceGroupByRegionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.GetPriceGroupByRegionRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPriceGroupCurrencies provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetPriceGroupCurrencies(ctx context.Context, in *billingpb.EmptyRequest, opts ...client.CallOption) (*billingpb.PriceGroupCurrenciesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.PriceGroupCurrenciesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.EmptyRequest, ...client.CallOption) *billingpb.PriceGroupCurrenciesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.PriceGroupCurrenciesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.EmptyRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPriceGroupCurrencyByRegion provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetPriceGroupCurrencyByRegion(ctx context.Context, in *billingpb.PriceGroupByRegionRequest, opts ...client.CallOption) (*billingpb.PriceGroupCurrenciesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.PriceGroupCurrenciesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.PriceGroupByRegionRequest, ...client.CallOption) *billingpb.PriceGroupCurrenciesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.PriceGroupCurrenciesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.PriceGroupByRegionRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProduct provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetProduct(ctx context.Context, in *billingpb.RequestProduct, opts ...client.CallOption) (*billingpb.GetProductResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.GetProductResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.RequestProduct, ...client.CallOption) *billingpb.GetProductResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.GetProductResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.RequestProduct, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductPrices provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetProductPrices(ctx context.Context, in *billingpb.RequestProduct, opts ...client.CallOption) (*billingpb.ProductPricesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.ProductPricesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.RequestProduct, ...client.CallOption) *billingpb.ProductPricesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.ProductPricesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.RequestProduct, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductsForOrder provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetProductsForOrder(ctx context.Context, in *billingpb.GetProductsForOrderRequest, opts ...client.CallOption) (*billingpb.ListProductsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.ListProductsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetProductsForOrderRequest, ...client.CallOption) *billingpb.ListProductsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.ListProductsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.GetProductsForOrderRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProject provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetProject(ctx context.Context, in *billingpb.GetProjectRequest, opts ...client.CallOption) (*billingpb.ChangeProjectResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.ChangeProjectResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetProjectRequest, ...client.CallOption) *billingpb.ChangeProjectResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.ChangeProjectResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.GetProjectRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRecommendedPriceByConversion provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetRecommendedPriceByConversion(ctx context.Context, in *billingpb.RecommendedPriceRequest, opts ...client.CallOption) (*billingpb.RecommendedPriceResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.RecommendedPriceResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.RecommendedPriceRequest, ...client.CallOption) *billingpb.RecommendedPriceResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.RecommendedPriceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.RecommendedPriceRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRecommendedPriceByPriceGroup provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetRecommendedPriceByPriceGroup(ctx context.Context, in *billingpb.RecommendedPriceRequest, opts ...client.CallOption) (*billingpb.RecommendedPriceResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.RecommendedPriceResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.RecommendedPriceRequest, ...client.CallOption) *billingpb.RecommendedPriceResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.RecommendedPriceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.RecommendedPriceRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRecommendedPriceTable provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetRecommendedPriceTable(ctx context.Context, in *billingpb.RecommendedPriceTableRequest, opts ...client.CallOption) (*billingpb.RecommendedPriceTableResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.RecommendedPriceTableResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.RecommendedPriceTableRequest, ...client.CallOption) *billingpb.RecommendedPriceTableResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.RecommendedPriceTableResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.RecommendedPriceTableRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRecurringPlan provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetRecurringPlan(ctx context.Context, in *billingpb.GetRecurringPlanRequest, opts ...client.CallOption) (*billingpb.GetRecurringPlanResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.GetRecurringPlanResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetRecurringPlanRequest, ...client.CallOption) *billingpb.GetRecurringPlanResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.GetRecurringPlanResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.GetRecurringPlanRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRecurringPlanStat provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetRecurringPlanStat(ctx context.Context, in *billingpb.GetRecurringPlanStatRequest, opts ...client.CallOption) (*billingpb.GetRecurringPlanStatResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.GetRecurringPlanStatResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetRecurringPlanStatRequest, ...client.CallOption) *billingpb.GetRecurringPlanStatResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.GetRecurringPlanStatResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.GetRecurringPlanStatRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRecurringPlans provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetRecurringPlans(ctx context.Context, in *billingpb.GetRecurringPlansRequest, opts ...client.CallOption) (*billingpb.GetRecurringPlansResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.GetRecurringPlansResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetRecurringPlansRequest, ...client.CallOption) *billingpb.GetRecurringPlansResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.GetRecurringPlansResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.GetRecurringPlansRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRefund provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetRefund(ctx context.Context, in *billingpb.GetRefundRequest, opts ...client.CallOption) (*billingpb.CreateRefundResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.CreateRefundResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetRefundRequest, ...client.CallOption) *billingpb.CreateRefundResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.CreateRefundResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.GetRefundRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRoleList provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetRoleList(ctx context.Context, in *billingpb.GetRoleListRequest, opts ...client.CallOption) (*billingpb.GetRoleListResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.GetRoleListResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetRoleListRequest, ...client.CallOption) *billingpb.GetRoleListResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.GetRoleListResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.GetRoleListRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRoyaltyReport provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetRoyaltyReport(ctx context.Context, in *billingpb.GetRoyaltyReportRequest, opts ...client.CallOption) (*billingpb.GetRoyaltyReportResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.GetRoyaltyReportResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetRoyaltyReportRequest, ...client.CallOption) *billingpb.GetRoyaltyReportResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.GetRoyaltyReportResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.GetRoyaltyReportRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSubscription provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetSubscription(ctx context.Context, in *billingpb.GetSubscriptionRequest, opts ...client.CallOption) (*billingpb.GetSubscriptionResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.GetSubscriptionResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetSubscriptionRequest, ...client.CallOption) *billingpb.GetSubscriptionResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.GetSubscriptionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.GetSubscriptionRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSubscriptionsOrders provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetSubscriptionsOrders(ctx context.Context, in *billingpb.GetSubscriptionsOrdersRequest, opts ...client.CallOption) (*billingpb.GetSubscriptionsOrdersResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.GetSubscriptionsOrdersResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetSubscriptionsOrdersRequest, ...client.CallOption) *billingpb.GetSubscriptionsOrdersResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.GetSubscriptionsOrdersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.GetSubscriptionsOrdersRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserProfile provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetUserProfile(ctx context.Context, in *billingpb.GetUserProfileRequest, opts ...client.CallOption) (*billingpb.GetUserProfileResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.GetUserProfileResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetUserProfileRequest, ...client.CallOption) *billingpb.GetUserProfileResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.GetUserProfileResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.GetUserProfileRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVatReport provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetVatReport(ctx context.Context, in *billingpb.VatReportRequest, opts ...client.CallOption) (*billingpb.VatReportResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.VatReportResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.VatReportRequest, ...client.CallOption) *billingpb.VatReportResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.VatReportResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.VatReportRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVatReportTransactions provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetVatReportTransactions(ctx context.Context, in *billingpb.VatTransactionsRequest, opts ...client.CallOption) (*billingpb.PrivateTransactionsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.PrivateTransactionsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.VatTransactionsRequest, ...client.CallOption) *billingpb.PrivateTransactionsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.PrivateTransactionsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.VatTransactionsRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVatReportsDashboard provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetVatReportsDashboard(ctx context.Context, in *billingpb.EmptyRequest, opts ...client.CallOption) (*billingpb.VatReportsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.VatReportsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.EmptyRequest, ...client.CallOption) *billingpb.VatReportsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.VatReportsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.EmptyRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVatReportsForCountry provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetVatReportsForCountry(ctx context.Context, in *billingpb.VatReportsRequest, opts ...client.CallOption) (*billingpb.VatReportsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.VatReportsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.VatReportsRequest, ...client.CallOption) *billingpb.VatReportsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.VatReportsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.VatReportsRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncrPaylinkVisits provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) IncrPaylinkVisits(ctx context.Context, in *billingpb.PaylinkRequestById, opts ...client.CallOption) (*billingpb.EmptyResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.EmptyResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.PaylinkRequestById, ...client.CallOption) *billingpb.EmptyResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.EmptyResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.PaylinkRequestById, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InviteUserAdmin provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) InviteUserAdmin(ctx context.Context, in *billingpb.InviteUserAdminRequest, opts ...client.CallOption) (*billingpb.InviteUserAdminResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.InviteUserAdminResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.InviteUserAdminRequest, ...client.CallOption) *billingpb.InviteUserAdminResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.InviteUserAdminResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.InviteUserAdminRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InviteUserMerchant provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) InviteUserMerchant(ctx context.Context, in *billingpb.InviteUserMerchantRequest, opts ...client.CallOption) (*billingpb.InviteUserMerchantResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.InviteUserMerchantResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.InviteUserMerchantRequest, ...client.CallOption) *billingpb.InviteUserMerchantResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.InviteUserMerchantResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.InviteUserMerchantRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsOrderCanBePaying provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) IsOrderCanBePaying(ctx context.Context, in *billingpb.IsOrderCanBePayingRequest, opts ...client.CallOption) (*billingpb.IsOrderCanBePayingResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.IsOrderCanBePayingResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.IsOrderCanBePayingRequest, ...client.CallOption) *billingpb.IsOrderCanBePayingResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.IsOrderCanBePayingResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.IsOrderCanBePayingRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMerchantPaymentMethods provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) ListMerchantPaymentMethods(ctx context.Context, in *billingpb.ListMerchantPaymentMethodsRequest, opts ...client.CallOption) (*billingpb.ListingMerchantPaymentMethod, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.ListingMerchantPaymentMethod
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.ListMerchantPaymentMethodsRequest, ...client.CallOption) *billingpb.ListingMerchantPaymentMethod); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.ListingMerchantPaymentMethod)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.ListMerchantPaymentMethodsRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMerchants provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) ListMerchants(ctx context.Context, in *billingpb.MerchantListingRequest, opts ...client.CallOption) (*billingpb.MerchantListingResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.MerchantListingResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.MerchantListingRequest, ...client.CallOption) *billingpb.MerchantListingResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.MerchantListingResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.MerchantListingRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMerchantsForAgreement provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) ListMerchantsForAgreement(ctx context.Context, in *billingpb.MerchantListingRequest, opts ...client.CallOption) (*billingpb.ListMerchantsForAgreementResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.ListMerchantsForAgreementResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.MerchantListingRequest, ...client.CallOption) *billingpb.ListMerchantsForAgreementResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.ListMerchantsForAgreementResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.MerchantListingRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNotifications provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) ListNotifications(ctx context.Context, in *billingpb.ListingNotificationRequest, opts ...client.CallOption) (*billingpb.Notifications, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.Notifications
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.ListingNotificationRequest, ...client.CallOption) *billingpb.Notifications); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.Notifications)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.ListingNotificationRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProducts provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) ListProducts(ctx context.Context, in *billingpb.ListProductsRequest, opts ...client.CallOption) (*billingpb.ListProductsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.ListProductsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.ListProductsRequest, ...client.CallOption) *billingpb.ListProductsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.ListProductsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.ListProductsRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProjects provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) ListProjects(ctx context.Context, in *billingpb.ListProjectsRequest, opts ...client.CallOption) (*billingpb.ListProjectsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.ListProjectsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.ListProjectsRequest, ...client.CallOption) *billingpb.ListProjectsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.ListProjectsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.ListProjectsRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRefunds provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) ListRefunds(ctx context.Context, in *billingpb.ListRefundsRequest, opts ...client.CallOption) (*billingpb.ListRefundsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.ListRefundsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.ListRefundsRequest, ...client.CallOption) *billingpb.ListRefundsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.ListRefundsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.ListRefundsRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRoyaltyReportOrders provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) ListRoyaltyReportOrders(ctx context.Context, in *billingpb.ListRoyaltyReportOrdersRequest, opts ...client.CallOption) (*billingpb.TransactionsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.TransactionsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.ListRoyaltyReportOrdersRequest, ...client.CallOption) *billingpb.TransactionsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.TransactionsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.ListRoyaltyReportOrdersRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRoyaltyReports provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) ListRoyaltyReports(ctx context.Context, in *billingpb.ListRoyaltyReportsRequest, opts ...client.CallOption) (*billingpb.ListRoyaltyReportsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.ListRoyaltyReportsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.ListRoyaltyReportsRequest, ...client.CallOption) *billingpb.ListRoyaltyReportsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.ListRoyaltyReportsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.ListRoyaltyReportsRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MarkNotificationAsRead provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) MarkNotificationAsRead(ctx context.Context, in *billingpb.GetNotificationRequest, opts ...client.CallOption) (*billingpb.Notification, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.Notification
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetNotificationRequest, ...client.CallOption) *billingpb.Notification); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.Notification)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.GetNotificationRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MerchantReviewRoyaltyReport provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) MerchantReviewRoyaltyReport(ctx context.Context, in *billingpb.MerchantReviewRoyaltyReportRequest, opts ...client.CallOption) (*billingpb.ResponseError, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.ResponseError
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.MerchantReviewRoyaltyReportRequest, ...client.CallOption) *billingpb.ResponseError); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.ResponseError)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.MerchantReviewRoyaltyReportRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NotifyWebhookTestResults provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) NotifyWebhookTestResults(ctx context.Context, in *billingpb.NotifyWebhookTestResultsRequest, opts ...client.CallOption) (*billingpb.EmptyResponseWithStatus, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.EmptyResponseWithStatus
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.NotifyWebhookTestResultsRequest, ...client.CallOption) *billingpb.EmptyResponseWithStatus); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.EmptyResponseWithStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.NotifyWebhookTestResultsRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderCreateByPaylink provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) OrderCreateByPaylink(ctx context.Context, in *billingpb.OrderCreateByPaylink, opts ...client.CallOption) (*billingpb.OrderCreateProcessResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.OrderCreateProcessResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.OrderCreateByPaylink, ...client.CallOption) *billingpb.OrderCreateProcessResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.OrderCreateProcessResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.OrderCreateByPaylink, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderCreateProcess provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) OrderCreateProcess(ctx context.Context, in *billingpb.OrderCreateRequest, opts ...client.CallOption) (*billingpb.OrderCreateProcessResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.OrderCreateProcessResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.OrderCreateRequest, ...client.CallOption) *billingpb.OrderCreateProcessResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.OrderCreateProcessResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.OrderCreateRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderReCreateProcess provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) OrderReCreateProcess(ctx context.Context, in *billingpb.OrderReCreateProcessRequest, opts ...client.CallOption) (*billingpb.OrderCreateProcessResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.OrderCreateProcessResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.OrderReCreateProcessRequest, ...client.CallOption) *billingpb.OrderCreateProcessResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.OrderCreateProcessResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.OrderReCreateProcessRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderReceipt provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) OrderReceipt(ctx context.Context, in *billingpb.OrderReceiptRequest, opts ...client.CallOption) (*billingpb.OrderReceiptResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.OrderReceiptResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.OrderReceiptRequest, ...client.CallOption) *billingpb.OrderReceiptResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.OrderReceiptResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.OrderReceiptRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PaymentCallbackProcess provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) PaymentCallbackProcess(ctx context.Context, in *billingpb.PaymentNotifyRequest, opts ...client.CallOption) (*billingpb.PaymentNotifyResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.PaymentNotifyResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.PaymentNotifyRequest, ...client.CallOption) *billingpb.PaymentNotifyResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.PaymentNotifyResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.PaymentNotifyRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PaymentCreateProcess provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) PaymentCreateProcess(ctx context.Context, in *billingpb.PaymentCreateRequest, opts ...client.CallOption) (*billingpb.PaymentCreateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.PaymentCreateResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.PaymentCreateRequest, ...client.CallOption) *billingpb.PaymentCreateResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.PaymentCreateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.PaymentCreateRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PaymentFormJsonDataProcess provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) PaymentFormJsonDataProcess(ctx context.Context, in *billingpb.PaymentFormJsonDataRequest, opts ...client.CallOption) (*billingpb.PaymentFormJsonDataResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.PaymentFormJsonDataResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.PaymentFormJsonDataRequest, ...client.CallOption) *billingpb.PaymentFormJsonDataResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.PaymentFormJsonDataResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.PaymentFormJsonDataRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PaymentFormLanguageChanged provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) PaymentFormLanguageChanged(ctx context.Context, in *billingpb.PaymentFormUserChangeLangRequest, opts ...client.CallOption) (*billingpb.PaymentFormDataChangeResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.PaymentFormDataChangeResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.PaymentFormUserChangeLangRequest, ...client.CallOption) *billingpb.PaymentFormDataChangeResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.PaymentFormDataChangeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.PaymentFormUserChangeLangRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PaymentFormPaymentAccountChanged provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) PaymentFormPaymentAccountChanged(ctx context.Context, in *billingpb.PaymentFormUserChangePaymentAccountRequest, opts ...client.CallOption) (*billingpb.PaymentFormDataChangeResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.PaymentFormDataChangeResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.PaymentFormUserChangePaymentAccountRequest, ...client.CallOption) *billingpb.PaymentFormDataChangeResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.PaymentFormDataChangeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.PaymentFormUserChangePaymentAccountRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PaymentFormPlatformChanged provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) PaymentFormPlatformChanged(ctx context.Context, in *billingpb.PaymentFormUserChangePlatformRequest, opts ...client.CallOption) (*billingpb.PaymentFormDataChangeResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.PaymentFormDataChangeResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.PaymentFormUserChangePlatformRequest, ...client.CallOption) *billingpb.PaymentFormDataChangeResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.PaymentFormDataChangeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.PaymentFormUserChangePlatformRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PayoutDocumentPdfUploaded provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) PayoutDocumentPdfUploaded(ctx context.Context, in *billingpb.PayoutDocumentPdfUploadedRequest, opts ...client.CallOption) (*billingpb.PayoutDocumentPdfUploadedResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.PayoutDocumentPdfUploadedResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.PayoutDocumentPdfUploadedRequest, ...client.CallOption) *billingpb.PayoutDocumentPdfUploadedResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.PayoutDocumentPdfUploadedResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.PayoutDocumentPdfUploadedRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PayoutFinanceDone provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) PayoutFinanceDone(ctx context.Context, in *billingpb.ReportFinanceDoneRequest, opts ...client.CallOption) (*billingpb.EmptyResponseWithStatus, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.EmptyResponseWithStatus
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.ReportFinanceDoneRequest, ...client.CallOption) *billingpb.EmptyResponseWithStatus); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.EmptyResponseWithStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.ReportFinanceDoneRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ping provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) Ping(ctx context.Context, in *billingpb.EmptyRequest, opts ...client.CallOption) (*billingpb.EmptyResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.EmptyResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.EmptyRequest, ...client.CallOption) *billingpb.EmptyResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.EmptyResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.EmptyRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessBillingAddress provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) ProcessBillingAddress(ctx context.Context, in *billingpb.ProcessBillingAddressRequest, opts ...client.CallOption) (*billingpb.ProcessBillingAddressResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.ProcessBillingAddressResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.ProcessBillingAddressRequest, ...client.CallOption) *billingpb.ProcessBillingAddressResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.ProcessBillingAddressResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.ProcessBillingAddressRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessRefundCallback provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) ProcessRefundCallback(ctx context.Context, in *billingpb.CallbackRequest, opts ...client.CallOption) (*billingpb.PaymentNotifyResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.PaymentNotifyResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.CallbackRequest, ...client.CallOption) *billingpb.PaymentNotifyResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.PaymentNotifyResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.CallbackRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessVatReports provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) ProcessVatReports(ctx context.Context, in *billingpb.ProcessVatReportsRequest, opts ...client.CallOption) (*billingpb.EmptyResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.EmptyResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.ProcessVatReportsRequest, ...client.CallOption) *billingpb.EmptyResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.EmptyResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.ProcessVatReportsRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PublishKeyProduct provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) PublishKeyProduct(ctx context.Context, in *billingpb.PublishKeyProductRequest, opts ...client.CallOption) (*billingpb.KeyProductResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.KeyProductResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.PublishKeyProductRequest, ...client.CallOption) *billingpb.KeyProductResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.KeyProductResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.PublishKeyProductRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RefreshMerchantApiToken provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) RefreshMerchantApiToken(ctx context.Context, in *billingpb.RefreshMerchantApiTokenRequest, opts ...client.CallOption) (*billingpb.RefreshMerchantApiTokenResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.RefreshMerchantApiTokenResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.RefreshMerchantApiTokenRequest, ...client.CallOption) *billingpb.RefreshMerchantApiTokenResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.RefreshMerchantApiTokenResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.RefreshMerchantApiTokenRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResendInviteAdmin provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) ResendInviteAdmin(ctx context.Context, in *billingpb.ResendInviteAdminRequest, opts ...client.CallOption) (*billingpb.EmptyResponseWithStatus, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.EmptyResponseWithStatus
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.ResendInviteAdminRequest, ...client.CallOption) *billingpb.EmptyResponseWithStatus); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.EmptyResponseWithStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.ResendInviteAdminRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResendInviteMerchant provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) ResendInviteMerchant(ctx context.Context, in *billingpb.ResendInviteMerchantRequest, opts ...client.CallOption) (*billingpb.EmptyResponseWithStatus, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.EmptyResponseWithStatus
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.ResendInviteMerchantRequest, ...client.CallOption) *billingpb.EmptyResponseWithStatus); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.EmptyResponseWithStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.ResendInviteMerchantRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReserveKeyForOrder provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) ReserveKeyForOrder(ctx context.Context, in *billingpb.PlatformKeyReserveRequest, opts ...client.CallOption) (*billingpb.PlatformKeyReserveResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.PlatformKeyReserveResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.PlatformKeyReserveRequest, ...client.CallOption) *billingpb.PlatformKeyReserveResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.PlatformKeyReserveResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.PlatformKeyReserveRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RoyaltyReportFinanceDone provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) RoyaltyReportFinanceDone(ctx context.Context, in *billingpb.ReportFinanceDoneRequest, opts ...client.CallOption) (*billingpb.EmptyResponseWithStatus, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.EmptyResponseWithStatus
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.ReportFinanceDoneRequest, ...client.CallOption) *billingpb.EmptyResponseWithStatus); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.EmptyResponseWithStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.ReportFinanceDoneRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RoyaltyReportPdfUploaded provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) RoyaltyReportPdfUploaded(ctx context.Context, in *billingpb.RoyaltyReportPdfUploadedRequest, opts ...client.CallOption) (*billingpb.RoyaltyReportPdfUploadedResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.RoyaltyReportPdfUploadedResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.RoyaltyReportPdfUploadedRequest, ...client.CallOption) *billingpb.RoyaltyReportPdfUploadedResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.RoyaltyReportPdfUploadedResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.RoyaltyReportPdfUploadedRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendOrderToWebHookNotifier provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) SendOrderToWebHookNotifier(ctx context.Context, in *billingpb.GetOrderRequest, opts ...client.CallOption) (*billingpb.ResponseError, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.ResponseError
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.GetOrderRequest, ...client.CallOption) *billingpb.ResponseError); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.ResponseError)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.GetOrderRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendWebhookToMerchant provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) SendWebhookToMerchant(ctx context.Context, in *billingpb.OrderCreateRequest, opts ...client.CallOption) (*billingpb.SendWebhookToMerchantResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.SendWebhookToMerchantResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.OrderCreateRequest, ...client.CallOption) *billingpb.SendWebhookToMerchantResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.SendWebhookToMerchantResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.OrderCreateRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetAllPaymentChannelCostMerchant provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) SetAllPaymentChannelCostMerchant(ctx context.Context, in *billingpb.SetAllPaymentChannelCostMerchantRequest, opts ...client.CallOption) (*billingpb.SetAllPaymentChannelCostMerchantResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.SetAllPaymentChannelCostMerchantResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.SetAllPaymentChannelCostMerchantRequest, ...client.CallOption) *billingpb.SetAllPaymentChannelCostMerchantResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.SetAllPaymentChannelCostMerchantResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.SetAllPaymentChannelCostMerchantRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetCustomerPaymentActivity provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) SetCustomerPaymentActivity(ctx context.Context, in *billingpb.SetCustomerPaymentActivityRequest, opts ...client.CallOption) (*billingpb.EmptyResponseWithStatus, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.EmptyResponseWithStatus
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.SetCustomerPaymentActivityRequest, ...client.CallOption) *billingpb.EmptyResponseWithStatus); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.EmptyResponseWithStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.SetCustomerPaymentActivityRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetMerchantAcceptedStatus provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) SetMerchantAcceptedStatus(ctx context.Context, in *billingpb.SetMerchantAcceptedStatusRequest, opts ...client.CallOption) (*billingpb.SetMerchantAcceptedStatusResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.SetMerchantAcceptedStatusResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.SetMerchantAcceptedStatusRequest, ...client.CallOption) *billingpb.SetMerchantAcceptedStatusResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.SetMerchantAcceptedStatusResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.SetMerchantAcceptedStatusRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetMerchantOperatingCompany provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) SetMerchantOperatingCompany(ctx context.Context, in *billingpb.SetMerchantOperatingCompanyRequest, opts ...client.CallOption) (*billingpb.SetMerchantOperatingCompanyResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.SetMerchantOperatingCompanyResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.SetMerchantOperatingCompanyRequest, ...client.CallOption) *billingpb.SetMerchantOperatingCompanyResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.SetMerchantOperatingCompanyResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.SetMerchantOperatingCompanyRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetMerchantS3Agreement provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) SetMerchantS3Agreement(ctx context.Context, in *billingpb.SetMerchantS3AgreementRequest, opts ...client.CallOption) (*billingpb.ChangeMerchantDataResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.ChangeMerchantDataResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.SetMerchantS3AgreementRequest, ...client.CallOption) *billingpb.ChangeMerchantDataResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.ChangeMerchantDataResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.SetMerchantS3AgreementRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetMerchantTariffRates provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) SetMerchantTariffRates(ctx context.Context, in *billingpb.SetMerchantTariffRatesRequest, opts ...client.CallOption) (*billingpb.CheckProjectRequestSignatureResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.CheckProjectRequestSignatureResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.SetMerchantTariffRatesRequest, ...client.CallOption) *billingpb.CheckProjectRequestSignatureResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.CheckProjectRequestSignatureResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.SetMerchantTariffRatesRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetMoneyBackCostMerchant provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) SetMoneyBackCostMerchant(ctx context.Context, in *billingpb.MoneyBackCostMerchant, opts ...client.CallOption) (*billingpb.MoneyBackCostMerchantResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.MoneyBackCostMerchantResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.MoneyBackCostMerchant, ...client.CallOption) *billingpb.MoneyBackCostMerchantResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.MoneyBackCostMerchantResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.MoneyBackCostMerchant, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetMoneyBackCostSystem provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) SetMoneyBackCostSystem(ctx context.Context, in *billingpb.MoneyBackCostSystem, opts ...client.CallOption) (*billingpb.MoneyBackCostSystemResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.MoneyBackCostSystemResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.MoneyBackCostSystem, ...client.CallOption) *billingpb.MoneyBackCostSystemResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.MoneyBackCostSystemResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.MoneyBackCostSystem, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetPaymentChannelCostMerchant provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) SetPaymentChannelCostMerchant(ctx context.Context, in *billingpb.PaymentChannelCostMerchant, opts ...client.CallOption) (*billingpb.PaymentChannelCostMerchantResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.PaymentChannelCostMerchantResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.PaymentChannelCostMerchant, ...client.CallOption) *billingpb.PaymentChannelCostMerchantResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.PaymentChannelCostMerchantResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.PaymentChannelCostMerchant, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetPaymentChannelCostSystem provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) SetPaymentChannelCostSystem(ctx context.Context, in *billingpb.PaymentChannelCostSystem, opts ...client.CallOption) (*billingpb.PaymentChannelCostSystemResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.PaymentChannelCostSystemResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.PaymentChannelCostSystem, ...client.CallOption) *billingpb.PaymentChannelCostSystemResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.PaymentChannelCostSystemResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.PaymentChannelCostSystem, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetPaymentMinLimitSystem provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) SetPaymentMinLimitSystem(ctx context.Context, in *billingpb.PaymentMinLimitSystem, opts ...client.CallOption) (*billingpb.EmptyResponseWithStatus, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.EmptyResponseWithStatus
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.PaymentMinLimitSystem, ...client.CallOption) *billingpb.EmptyResponseWithStatus); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.EmptyResponseWithStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.PaymentMinLimitSystem, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetSubscriptionRenewalPending provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) SetSubscriptionRenewalPending(ctx context.Context, in *billingpb.SetSubscriptionRenewalPendingRequest, opts ...client.CallOption) (*billingpb.EmptyResponseWithStatus, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.EmptyResponseWithStatus
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.SetSubscriptionRenewalPendingRequest, ...client.CallOption) *billingpb.EmptyResponseWithStatus); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.EmptyResponseWithStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.SetSubscriptionRenewalPendingRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetUserNotifyNewRegion provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) SetUserNotifyNewRegion(ctx context.Context, in *billingpb.SetUserNotifyRequest, opts ...client.CallOption) (*billingpb.EmptyResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.EmptyResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.SetUserNotifyRequest, ...client.CallOption) *billingpb.EmptyResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.EmptyResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.SetUserNotifyRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetUserNotifySales provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) SetUserNotifySales(ctx context.Context, in *billingpb.SetUserNotifyRequest, opts ...client.CallOption) (*billingpb.EmptyResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.EmptyResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.SetUserNotifyRequest, ...client.CallOption) *billingpb.EmptyResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.EmptyResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.SetUserNotifyRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnPublishKeyProduct provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) UnPublishKeyProduct(ctx context.Context, in *billingpb.UnPublishKeyProductRequest, opts ...client.CallOption) (*billingpb.KeyProductResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.KeyProductResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.UnPublishKeyProductRequest, ...client.CallOption) *billingpb.KeyProductResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.KeyProductResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.UnPublishKeyProductRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCountry provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) UpdateCountry(ctx context.Context, in *billingpb.Country, opts ...client.CallOption) (*billingpb.Country, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.Country
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.Country, ...client.CallOption) *billingpb.Country); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.Country)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.Country, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrder provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) UpdateOrder(ctx context.Context, in *billingpb.Order, opts ...client.CallOption) (*billingpb.EmptyResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.EmptyResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.Order, ...client.CallOption) *billingpb.EmptyResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.EmptyResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.Order, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePayoutDocument provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) UpdatePayoutDocument(ctx context.Context, in *billingpb.UpdatePayoutDocumentRequest, opts ...client.CallOption) (*billingpb.PayoutDocumentResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.PayoutDocumentResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.UpdatePayoutDocumentRequest, ...client.CallOption) *billingpb.PayoutDocumentResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.PayoutDocumentResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.UpdatePayoutDocumentRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePriceGroup provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) UpdatePriceGroup(ctx context.Context, in *billingpb.PriceGroup, opts ...client.CallOption) (*billingpb.PriceGroup, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.PriceGroup
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.PriceGroup, ...client.CallOption) *billingpb.PriceGroup); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.PriceGroup)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.PriceGroup, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProductPrices provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) UpdateProductPrices(ctx context.Context, in *billingpb.UpdateProductPricesRequest, opts ...client.CallOption) (*billingpb.ResponseError, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.ResponseError
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.UpdateProductPricesRequest, ...client.CallOption) *billingpb.ResponseError); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.ResponseError)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.UpdateProductPricesRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRecurringPlan provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) UpdateRecurringPlan(ctx context.Context, in *billingpb.RecurringPlan, opts ...client.CallOption) (*billingpb.UpdateRecurringPlanResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.UpdateRecurringPlanResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.RecurringPlan, ...client.CallOption) *billingpb.UpdateRecurringPlanResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.UpdateRecurringPlanResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.RecurringPlan, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateVatReportStatus provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) UpdateVatReportStatus(ctx context.Context, in *billingpb.UpdateVatReportStatusRequest, opts ...client.CallOption) (*billingpb.ResponseError, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.ResponseError
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.UpdateVatReportStatusRequest, ...client.CallOption) *billingpb.ResponseError); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.ResponseError)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.UpdateVatReportStatusRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadKeysFile provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) UploadKeysFile(ctx context.Context, in *billingpb.PlatformKeysFileRequest, opts ...client.CallOption) (*billingpb.PlatformKeysFileResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billingpb.PlatformKeysFileResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.PlatformKeysFileRequest, ...client.CallOption) *billingpb.PlatformKeysFileResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.PlatformKeysFileResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.PlatformKeysFileRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
