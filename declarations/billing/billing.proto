syntax = "proto3";

option go_package = "./;billingpb";
package billing;

import "google/protobuf/timestamp.proto";

message Name {
  // @inject_tag: bson:"EN" json:"EN" structure:"EN"
  string en = 1;
  // @inject_tag: bson:"RU" json:"RU" structure:"RU"
  string ru = 2;
}

// @summary A payment order data about a customer and payment
message OrderCreateRequest {
  // @inject_tag: query:"PO_PROJECT_ID" form:"PO_PROJECT_ID" json:"project"  validate:"omitempty,hexadecimal" required:"true"
  //
  // The unique identifier for the Project found in the merchant account in the PaySuper Dashboard.
  string project_id = 1;
  // @inject_tag: query:"PO_SIGNATURE" form:"PO_SIGNATURE" json:"-" validate:"omitempty,alphanum"
  string signature = 2;
  // @inject_tag: query:"PO_AMOUNT" form:"PO_AMOUNT" json:"amount" validate:"omitempty,numeric,gte=0"
  //
  // The order amount as a positive number. It is required for a simple checkout payment.
  double amount = 3;
  // @inject_tag: query:"PO_CURRENCY" form:"PO_CURRENCY" json:"currency" validate:"omitempty,alpha,len=3"
  //
  // The currency of the order. Three-letter Currency Code ISO 4217, in uppercase. If provided, the amount will be processed in this currency. It is required for a payment when the type equals to simple.
  string currency = 4;
  // @inject_tag: "PO_ACCOUNT" form:"PO_ACCOUNT" json:"account"`
  //
  // The customer account in the merchant project.
  string account = 5;
  // @inject_tag: query:"PO_DESCRIPTION" form:"PO_DESCRIPTION" json:"description" validate:"omitempty,max=255"
  //
  // The arbitrary order description.
  string description = 7;
  // @inject_tag: query:"PO_PAYMENT_METHOD" form:"PO_PAYMENT_METHOD" json:"payment_method" validate:"omitempty,max=255"
  string payment_method = 8;
  // @inject_tag: query:"PO_URL_VERIFY" form:"PO_URL_VERIFY" json:"-" validate:"omitempty,url"
  string url_verify = 9;
  // @inject_tag: query:"PO_URL_NOTIFY" form:"PO_URL_NOTIFY" json:"-" validate:"omitempty,url"
  string url_notify = 10;
  // @inject_tag: query:"PO_URL_SUCCESS" form:"PO_URL_SUCCESS" json:"url_success" validate:"omitempty,url"
  //
  // The redirect URL for the successful payment. You need to enable the dynamic notify URLs option in the Project Settings to use this field.
  string url_success = 11;
  // @inject_tag: query:"PO_URL_FAIL" form:"PO_URL_FAIL" json:"url_fail" validate:"omitempty,url"
  //
  // The redirect URL for the failed payment. You need to enable the dynamic notify URLs option in the Project Settings to use this field.
  string url_fail = 12;
  // @inject_tag: query:"PO_PAYER_EMAIL" form:"PO_PAYER_EMAIL" json:"-" validate:"omitempty,email"
  string payer_email = 13;
  // @inject_tag: query:"PO_PAYER_PHONE" form:"PO_PAYER_PHONE" json:"-" validate:"omitempty,max=255"
  string payer_phone = 14;
  // @inject_tag: query:"PO_REGION" form:"PO_REGION" json:"-" validate:"omitempty,alpha,len=2"
  string region = 15;
  // @inject_tag: json:"-"
  map<string, string> raw_params = 18;
  // @inject_tag: json:"-"
  string raw_body = 19;
  // @inject_tag: json:"-"
  bool is_json = 20;
  // @inject_tag: json:"-"
  string language = 21;
  // @inject_tag: json:"products" validate:"omitempty,eq=1,dive,hexadecimal,len=24"
  //
  // The list of unique identifiers of Products being in the Project. It is required if a payment type is equal to product or key.
  repeated string products = 22;
  // @inject_tag: json:"metadata" validate:"omitempty,dive,keys,max=255,endkeys,max=255"
  //
  // A string-value description that you can attach to the order object. It can be useful for storing additional information about your customer payment.
  map<string, string> metadata = 23;
  // @inject_tag: json:"-"
  map<string, string> private_metadata = 24;
  // @inject_tag: json:"-"
  string receipt_number = 25; // payer receipt number from create order request
  // @inject_tag: json:"-"
  string receipt_url = 26; // payer receipt url from create order request
  // @inject_tag: json:"-"
  string issuer_url = 27;
  // @inject_tag: json:"-"
  bool is_embedded = 28;
  // An encrypted string that represents certain details of your customer (such as the customer ID, email and others), a game and purchase parameters. The token overrides the corresponding parameters (including required parameters) in an order object.
  string token = 29;
  // The customer data.
  OrderUser user = 30;
  // @inject_tag: json:"order" validate:"omitempty,uuid"
  //
  // The PaySuper unique identifier for the order.
  string psp_order_uuid = 31;
  // @inject_tag: validate="required,oneof=simple product key virtual_currency" json:"type" required:"true"
  //
  // The order type. It depends on your sales option (Game Keys, Virtual Items, Virtual Currency the simple checkout). For products created as Game Keys use the key type, as Virtual Items - the product type, as Virtual Currency - the virtual_currency type, for a simple checkout - the simple type. Enum values: key, product, virtual_currency, simple.
  string type = 32;
  // The default platform's name for which the customer buys a key. This field is used only for the key type. Enum values: steam, gog, uplay, origin, psn, xbox, nintendo, itch, egs.
  string platform_id = 33;
  //@inject_tag: bson:"issuer_reference" json:"-"
  string issuer_reference = 34;
  //@inject_tag: bson:"issuer_reference_type" json:"-"
  string issuer_reference_type = 35;
  //@inject_tag: bson:"utm_source" json:"-"
  string utm_source = 36;
  //@inject_tag: bson:"utm_medium" json:"-"
  string utm_medium = 37;
  //@inject_tag: bson:"utm_campaign" json:"-"
  string utm_campaign = 38;
  //@inject_tag: bson:"-" json:"-"
  bool is_buy_for_virtual_currency = 39;
  // @inject_tag: json:"-"
  string cookie = 40;
  //@inject_tag: json:"-" bson:"-"
  //
  //The redirect button messages after the successful or failed payment. If it has an empty value the redirect message will be set at OK.
  string button_caption = 41;
  //@inject_tag: bson:"testing_case" json:"testing_case" validate:"omitempty,oneof=correct_payment non_existing_user existing_user invalid_signature"
  //
  // The webhook testing mode. Available values: correct_payment, non_existing_user, existing_user, invalid_signature.
  string testing_case = 42;
  //@inject_tag: json:"form_mode"
  //
  //The opening mode of the payment form on the project side. Available values: embed, iframe, standalone. Default value: embed.
  string form_mode = 43;
  //@inject_tag: json:"recurring_plan_id" query:"PO_RECURRING_PLAN_ID" form:"PO_RECURRING_PLAN_ID" validate:"omitempty"
  //
  // Identifier of recurring plan.
  string recurring_plan_id = 44;
}

message ProjectRedirectSettings {
  //@inject_tag: json:"mode" bson:"mode" validate:"required,oneof=disable successful fail any"
  //
  //The mode to redirect the customer from the payment form after the payment. Available values: disable, successful, fail, any.
  string mode = 1;
  //@inject_tag: json:"delay" bson:"delay" validate:"omitempty,numeric,gte=0"
  //
  //The delay before the customer's redirection to the return URL. Default value is 0.
  int32 delay = 2;
  //@inject_tag: json:"usage" bson:"usage" validate:"required,oneof=standalone iframe embed any"
  //
  //The redirection feature could be used in different representations of the payment form. Default value is any. Available values: standalone, iframe, embed, any.
  string usage = 3;
  //@inject_tag: json:"button_caption" bson:"button_caption" validate:"omitempty,max=18"
  //
  //The redirect button messages after the successful or failed payment. If it has an empty value the redirect message will be set at OK.
  string button_caption = 4;
}

message Project {
  // @inject_tag: json:"id" validate:"omitempty,hexadecimal,len=24" faker:"objectIdString"
  //
  // The unique identifier for the project.
  string id = 1;
  // @inject_tag: json:"merchant_id" validate:"required,hexadecimal,len=24" required:"true" faker:"objectIdString" param:"merchant_id"
  //
  // The unique identifier for the project's merchant.
  string merchant_id = 2;
  // @inject_tag: json:"name" validate:"required" required:"true"
  //
  // The list of the project's localized names.
  map<string, string> name = 3;
  //@inject_tag: json:"-"
  string reserved_4 = 4;
  //@inject_tag: json:"-" validate:"omitempty,len=3"
  string callback_currency = 5;
  //@inject_tag: json:"callback_protocol" validate:"omitempty,oneof=default empty"
  //
  // The protocol of the payment notification. Available values: default - the webhook protocol that is set in the Project notification settings, empty - the webhook is not sent and the payment is immediately marked as successful in the PaySuper system.
  string callback_protocol = 6;
  //@inject_tag: json:"-" validate:"omitempty,dive,url"
  repeated string create_order_allowed_urls = 7;
  //@inject_tag: json:"-"
  bool allow_dynamic_notify_urls = 8;
  //@inject_tag: json:"-"
  bool allow_dynamic_redirect_urls = 9;
  //@inject_tag: json:"limits_currency" validate:"omitempty,len=3"
  //
  // The currency of the limit amount.
  string limits_currency = 10;
  // @inject_tag: json:"min_payment_amount" validate:"omitempty,numeric,gte=0"
  //
  // The minimum order amount.
  double min_payment_amount = 11;
  // @inject_tag: json:"max_payment_amount" validate:"omitempty,numeric,gte=0"
  //
  // The maximum order amount.
  double max_payment_amount = 12;
  // @inject_tag: json:"-" validate:"omitempty,dive,email"
  repeated string notify_emails = 13;
  // @inject_tag: json:"-"
  bool is_products_checkout = 14;
  // @inject_tag: json:"secret_key" validate:"omitempty,max=255"
  //
  // The project's secret key for sign notification requests
  string secret_key = 15;
  // @inject_tag: json:"-"
  bool signature_required = 16;
  // @inject_tag: json:"-"
  bool send_notify_email = 17;
  // @inject_tag: json:"-" validate:"omitempty,url"
  string url_check_account = 18;
  // @inject_tag: json:"url_process_payment" validate:"omitempty,url"
  //
  // The URL configured on the merchant project to get webhooks from PaySuper.
  string url_process_payment = 19;
  // @inject_tag: json:"url_redirect_fail" validate:"omitempty,url"
  //
  // The default URL to redirect a customer after the failed payment.
  string url_redirect_fail = 20;
  // @inject_tag: json:"url_redirect_success" validate:"omitempty,url"
  //
  // The default URL to redirect a customer after the successful payment.
  string url_redirect_success = 21;
  // @inject_tag: json:"status" validate:"omitempty,numeric,oneof=0 1 2 3 4"
  //
  // The project's status. Available values: 0 - the new project,
  //1 - the project successfully completed integration tests,
  //2 - the project failed some integration tests,
  //3 - the project is on production,
  //4 - the project is removed.
  int32 status = 22;
  // @inject_tag: json:"created_at"
  //
  // The date of the project creation.
  google.protobuf.Timestamp created_at = 23;
  // @inject_tag: json:"updated_at"
  //
  // The date of the project last update.
  google.protobuf.Timestamp updated_at = 24;
  // @inject_tag: json:"products_count"
  //
  // The number of products in the project.
  int64 products_count = 25;
  // @inject_tag: json:"-" validate:"omitempty,url"
  string url_chargeback_payment = 26;
  // @inject_tag: json:"-" validate:"omitempty,url"
  string url_cancel_payment = 27;
  // @inject_tag: json:"-" validate:"omitempty,url"
  string url_fraud_payment = 28;
  // @inject_tag: json:"-" validate:"omitempty,url"
  string url_refund_payment = 29;
  //@inject_tag: json:"localizations"
  //
  // The list of languages for the project's and its products descriptions localization.
  repeated string localizations = 30;
  //@inject_tag: json:"full_description"
  //
  // The localized extended descriptions of the project.
  map<string, string> full_description = 31;
  //@inject_tag: json:"short_description"
  //
  // The localized concise descriptions of the project.
  map<string, string> short_description = 32;
  //@inject_tag: json:"currencies" validate:"omitempty,dive"
  //
  //The list of the project's currencies.
  repeated HasCurrencyItem currencies = 33;
  //@inject_tag: json:"cover"
  //
  // The project's covers for each localization.
  ImageCollection cover = 34;
  //@inject_tag: json:"virtual_currency" validate:"omitempty,dive"
  //
  // The virtual currency settings.
  ProjectVirtualCurrency virtual_currency = 35;
  // @inject_tag: json:"vat_payer" bson:"vat_payer" validate:"oneof=buyer seller nobody"
  //
  // The responsible for VAT. Available values: buyer (VAT is added to the order charge), seller (VAT is included in the order charge), nobody (VAT exempt).
  string vat_payer = 36;
  //@inject_tag: json:"redirect_settings" bson:"redirect_settings" validate:"omitempty,dive"
  //
  //The customer's redirection settings for the successful or failed payment.
  ProjectRedirectSettings redirect_settings = 37;
  //@inject_tag: json:"webhook_testing"
  //
  // The object contains webhooks' tests results of various test cases.
  WebHookTesting webhook_testing = 38;
  //@inject_tag: json:"webhook_mode" validate:"omitempty,oneof=default pre_approval"
  //
  // The webhooks mode. Available values: default, pre_approval.
  string webhook_mode = 39;
  //@inject_tag: json:"form_default_text"
  //
  // The localized default text on payment form ("In-game purchase").
  map<string, string> form_default_text = 40;
}

message WebHookTesting {
  //@inject_tag: json:"products" bson:"products"
  //
  // The webhooks' testing results for the product.
  ProductsTesting products = 1;
  //@inject_tag: json:"virtual_currency" bson:"virtual_currency"
  //
  // The webhooks' testing results for the virtual currency.
  VirtualCurrencyTesting virtual_currency = 2;
  //@inject_tag: json:"keys" bson:"keys"
  //
  // The webhooks' testing results for the key.
  KeysTesting keys = 3;
}

message ProductsTesting {
  //@inject_tag: json:"non_existing_user" bson:"non_existing_user"
  //
  // Has a true value if the webhook's test case for the user that does not exist in the merchant's storage has passed.
  bool non_existing_user = 1;
  //@inject_tag: json:"existing_user" bson:"existing_user"
  //
  // Has a true value if the webhook's test case for the user that exists in the merchant's storage has passed.
  bool existing_user = 2;
  //@inject_tag: json:"correct_payment" bson:"correct_payment"
  //
  // Has a true value if the webhook's test case for the correctly completed payment has passed.
  bool correct_payment = 3;
  //@inject_tag: json:"incorrect_payment" bson:"incorrect_payment"
  //
  // Has a true value if the webhook's test case for the incorrectly completed payment has passed.
  bool incorrect_payment = 4;
}

message VirtualCurrencyTesting {
  //@inject_tag: json:"non_existing_user" bson:"non_existing_user"
  //
  // Has a true value if the webhook's test case for the user that does not exist in the merchant's storage has passed.
  bool non_existing_user = 1;
  //@inject_tag: json:"existing_user" bson:"existing_user"
  //
  // Has a true value if the webhook's test case for the user that exists in the merchant's storage has passed.
  bool existing_user = 2;
  //@inject_tag: json:"correct_payment" bson:"correct_payment"
  //
  // Has a true value if the webhook's test case for the correctly completed payment has passed.
  bool correct_payment = 3;
  //@inject_tag: json:"incorrect_payment" bson:"incorrect_payment"
  //
  // Has a true value if the webhook's test case for the incorrectly completed payment has passed.
  bool incorrect_payment = 4;
}

message KeysTesting {
  //@inject_tag: json:"is_passed" bson:"is_passed"
  //
  // Has a true value if the webhook's test case for the key has passed.
  bool is_passed = 1;
}

message ProjectOrder {
  // @inject_tag: json:"id" faker:"objectIdString"
  //
  // The unique identifier for the project.
  string id = 1;
  // @inject_tag: json:"merchant_id" faker:"objectIdString"
  //
  // The unique identifier for the merchant.
  string merchant_id = 2;
  // The list of the project's localized names.
  map<string, string> name = 3;
  // The redirect URL for the successful payment.
  string url_success = 4;
  // The redirect URL for the failed payment.
  string url_fail = 5;
  // @inject_tag: json:"-"
  repeated string notify_emails = 6;
  // @inject_tag: json:"-"
  string secret_key = 7;
  // @inject_tag: json:"-"
  bool send_notify_email = 8;
  // The default URL to send a request to the merchant project for the payment data verification.
  string url_check_account = 9;
  // The default URL to send a notification request to the merchant project.
  string url_process_payment = 10;
  // The protocol of the payment notification. Available values: default - the webhook protocol that is set in the Project notification settings, empty - the webhook is not sent and the payment is immediately marked as successful in the PaySuper system.
  string callback_protocol = 11;
  // @inject_tag: json:"-"
  string url_chargeback_payment = 12;
  // @inject_tag: json:"-"
  string url_cancel_payment = 13;
  // @inject_tag: json:"-"
  string url_fraud_payment = 14;
  // @inject_tag: json:"-"
  string url_refund_payment = 15;
  // The project's status. Available values: 0 - the new project,
  //1 - the project successfully completed integration tests,
  //2 - the project failed some integration tests,
  //3 - the project is on production,
  //4 - the project is removed.
  int32 status = 16;
  // @inject_tag: json:"-"
  string merchant_royalty_currency = 17;
  //@inject_tag: json:"redirect_settings" bson:"redirect_settings" validate:"required,dive"
  //
  //The customer's redirection settings for the successful or failed payment.
  ProjectRedirectSettings redirect_settings = 18;
  //@inject_tag: json:"first_payment_at" bson:"first_payment_at"
  //
  // Date of first payment for merchant.
  google.protobuf.Timestamp first_payment_at = 19;
  //@inject_tag: json:"form_default_text"
  //
  // The localized default text on payment form ("In-game purchase").
  map<string, string> form_default_text = 20;
}

message MerchantContact {
  // @inject_tag: validate:"required" json:"authorized" required:"true"
  //
  // Information about contacts of the merchant's authorised person.
  MerchantContactAuthorized authorized = 1;
  // @inject_tag: validate:"required" json:"technical" required:"true"
  //
  // Information about contacts of the merchant's technical person.
  MerchantContactTechnical technical = 2;
}

message MerchantContactTechnical {
  // @inject_tag: json:"name" validate:"required,company_name,max=60" required:"true"
  //
  // The technical person's full name.
  string name = 1;
  // @inject_tag: json:"email" validate:"required,email,max=100" required:"true"
  //
  // The technical person's email address.
  string email = 2;
  // @inject_tag: json:"phone" validate:"required,numeric,max=20" required:"true"
  //
  // The technical person's phone.
  string phone = 3;
}

message MerchantContactAuthorized {
  // @inject_tag: json:"name" validate:"required,company_name,max=60" required:"true"
  //
  // The authorised person's full name.
  string name = 1;
  // @inject_tag: json:"email" validate:"required,email,max=100" required:"true"
  //
  // The authorised person's email address.
  string email = 2;
  // @inject_tag: json:"phone" validate:"required,numeric,max=20" required:"true"
  //
  // The authorised person's phone.
  string phone = 3;
  // @inject_tag: json:"position" validate:"required,company_name,max=30"
  //
  // The authorised person's position in the company.
  string position = 4;
}

message MerchantBanking {
  // @inject_tag: json:"currency" validate:"required,alpha,len=3" required:"true"
  //
  // The merchant's bank account currency.
  string currency = 1;
  // @inject_tag: json:"name" validate:"required,city,max=60" required:"true"
  //
  // The merchant's bank name.
  string name = 2;
  // @inject_tag: json:"address" validate:"required,max=120" required:"true"
  //
  // The merchant's bank address.
  string address = 3;
  // @inject_tag: json:"account_number" bson:"account_number" validate:"required,iban" required:"true"
  //
  // The merchant's bank account number.
  string account_number = 4;
  // @inject_tag: json:"swift" validate:"required,swift" required:"true"
  //
  // The merchant's bank SWIFT code.
  string swift = 5;
  // @inject_tag: json:"details"
  //
  // Additional details about the merchant's bank account.
  string details = 6;
  // @inject_tag: json:"correspondent_account" bson:"correspondent_account" validate:"omitempty,numeric,max=30"
  //
  // The merchant's bank's correspondent account number.
  string correspondent_account = 7;
  // @inject_tag: json:"-" bson:"-"
  //
  // DONT USE, DEPRECATED!
  // The merchant's default processing currency, used as fallback currency for prices in virtual item, virtual currency, game key and other.
  string processing_default_currency = 8;
}

message MerchantLastPayout {
  // @inject_tag: json:"date"
  //
  // The date of the last payout to the merchant.
  google.protobuf.Timestamp date = 1;
  // @inject_tag: json:"amount"
  //
  // The amount of the last payout to the merchant.
  double amount = 2;
}

message MerchantUser {
  // @inject_tag: json:"id" validate:"required" required:"true"
  //
  // The unique identifier for the merchant's owner.
  string id = 1;
  // @inject_tag: json:"email" validate:"required,email" required:"true"
  //
  // The merchant's owner email address.
  string email = 2;
  // @inject_tag: json:"first_name"
  //
  // The merchant's owner first name.
  string first_name = 3;
  // @inject_tag: json:"last_name"
  //
  // The merchant's owner last name.
  string last_name = 4;
  // @inject_tag: json:"profile_id"
  //
  // The primary onboarding profile identifier for the merchant's owner.
  string profile_id = 5;
  // @inject_tag: json:"registration_date"
  //
  // The confirmation date of the merchant's owner email.
  google.protobuf.Timestamp registration_date = 6;
}

message MerchantCompanyInfo {
  // @inject_tag: json:"name" validate:"required,company_name,max=60" required:"true"
  //
  // The merchant's company name.
  string name = 1;
  // @inject_tag: json:"alternative_name" bson:"alternative_name" validate:"required,company_name,max=60" required:"true"
  //
  // The merchant's company alternative name.
  string alternative_name = 2;
  // @inject_tag: json:"website" validate:"required,url" required:"true"
  //
  // The merchant's company website.
  string website = 3;
  // @inject_tag: json:"country" validate:"required,alpha,len=2" required:"true"
  //
  // The merchant's company country. Two-letter country code in ISO 3166-1, in uppercase (for instance US).
  string country = 4;
  // @inject_tag: json:"state"
  //
  // The merchant's company state.
  string state = 5;
  // @inject_tag: json:"zip" validate:"required,max=30" required:"true"
  //
  // The merchant's company ZIP code.
  string zip = 6;
  // @inject_tag: json:"city" validate:"required,city,max=60"
  //
  // The merchant's company city.
  string city = 7;
  // @inject_tag: json:"address" validate:"required,max=100"
  //
  // The merchant's company address.
  string address = 8;
  // @inject_tag: json:"address_additional" bson:"address_additional" validate:"omitempty,max=100"
  //
  // The merchant's company additional address.
  string address_additional = 9;
  // @inject_tag: json:"registration_number" bson:"registration_number" validate:"required,max=100" required:"true"
  //
  // The merchant's company registration number.
  string registration_number = 10;
  // @inject_tag: json:"tax_id" bson:"tax_id"
  //
  // The merchant's company tax number.
  string tax_id = 11;
  // @inject_tag: json:"trademark" bson:"trademark"
  //
  // The merchant's trade mark.
  string trademark = 12;
}

message MerchantCompletedSteps {
  // Has a true value if the company data is filled out.
  bool company = 1;
  // Has a true value if the contacts data is filled out.
  bool contacts = 2;
  // Has a true value if the banking data is filled out.
  bool banking = 3;
  // Has a true value if the tariff data is filled out.
  bool tariff = 4;
}

message MerchantAgreementSignatureDataSignUrl {
  string sign_url = 1;
  google.protobuf.Timestamp expires_at = 2;
}

message MerchantAgreementSignatureData {
  string details_url = 1;
  string files_url = 2;
  string signature_request_id = 3;
  string merchant_signature_id = 4;
  string ps_signature_id = 5;
  MerchantAgreementSignatureDataSignUrl merchant_sign_url = 6;
  MerchantAgreementSignatureDataSignUrl ps_sign_url = 7;
}

message MerchantTariff {
  // @inject_tag: json:"payment"
  //
  // The merchant's tariffs for payments.
  repeated billing.MerchantTariffRatesPayment payment = 1;
  // @inject_tag: json:"payout"
  //
  // The merchant's tariffs for payout.
  MerchantTariffRatesSettingsItem payout = 2;
  // @inject_tag: json:"home_region"
  //
  // The merchant's region name.
  string home_region = 3;
  // @inject_tag: json:"chargeback" bson:"chargeback"
  //
  // The merchant's tariffs for chargeback.
  repeated MerchantTariffRatesSettingsItem chargeback = 4;
  // @inject_tag: json:"-" bson:"refund"
  repeated MerchantTariffRatesSettingsItem refund = 5;
  //@inject_tag: json:"minimal_payout" bson:"minimal_payout"
  //
  // The merchant's minimal payout amounts.
  map<string, float> minimal_payout = 6;
}

message Merchant {
  // @inject_tag: bson:"_id" faker:"objectIdString"
  //
  // The unique identifier for the merchant.
  string id = 1;
  // @inject_tag: json:"user"
  //
  // Information about the merchant owner from the primary onboarding profile.
  MerchantUser user = 2;
  // @inject_tag: json:"company"
  //
  // Information about the merchant's company.
  MerchantCompanyInfo company = 3;
  // @inject_tag: json:"contacts"
  //
  // The merchant's contacts.
  MerchantContact contacts = 15;
  // @inject_tag: json:"banking"
  //
  // The merchant's banking data.
  MerchantBanking banking = 16;
  // @inject_tag: json:"status"
  //
  // The merchant's status. Available values: 0 - The merchant've just been created and the merchant profile have not been filled yet.
  //3 - The agreement with the merchant is signed by the merchant owner.
  //4 - The agreement with the merchant is signed by PaySuper.
  //5 - The merchant is removed.
  //6 - The merchant is marked as a fraud and will be removed.
  //7 - The merchant must fill the onboarding.
  //8 - The merchant has passed the onboarding and is waiting the agreement to be signed.
  int32 status = 17;
  // @inject_tag: json:"created_at"
  //
  // The date of the merchant creation.
  google.protobuf.Timestamp created_at = 18;
  // @inject_tag: json:"updated_at"
  //
  // The date of the merchant last update.
  google.protobuf.Timestamp updated_at = 19;
  // @inject_tag: json:"first_payment_at"
  google.protobuf.Timestamp first_payment_at = 20;
  // @inject_tag: json:"-"
  bool is_vat_enabled = 21;
  // @inject_tag: json:"-"
  bool is_commission_to_user_enabled = 22;
  // @inject_tag: json:"has_merchant_signature"
  //
  // Has a true value if the merchant has signed the license agreement.
  bool has_merchant_signature = 23;
  // @inject_tag: json:"has_psp_signature"
  //
  // Has a true value if PaySuper has signed the license agreement.
  bool has_psp_signature = 24;
  // @inject_tag: json:"-"
  MerchantLastPayout last_payout = 25;
  // @inject_tag: json:"is_signed"
  //
  // Has a true value if the license agreement is completely signed.
  bool is_signed = 26;
  // @inject_tag: json:"-"
  map<string, MerchantPaymentMethod> payment_methods = 28;
  // @inject_tag: json:"-"
  int32 agreement_type = 29;
  // @inject_tag: json:"-"
  bool agreement_sent_via_mail = 30;
  // @inject_tag: json:"-"
  string mail_tracking_link = 31;
  // @inject_tag: json:"-"
  string s3_agreement_name = 32;
  // @inject_tag: json:"payout_cost_amount" bson:"payout_cost_amount" validate:"numeric,gte=0"
  //
  // The payout cost.
  double payout_cost_amount = 33;
  //@inject_tag: json:"payout_cost_currency" bson:"payout_cost_currency" validate:"required,alpha,len=3" required:"true"
  //
  // The currency of the payout cost.
  string payout_cost_currency = 34;
  // @inject_tag: json:"min_payout_amount" bson:"min_payout_amount" validate:"numeric,gte=0"
  //
  // The minimum payout amount.
  double min_payout_amount = 35;
  // @inject_tag: json:"rolling_reserve_amount" bson:"rolling_reserve_amount" validate:"numeric,gte=0,lte=100"
  //
  // The rolling reserve threshold.
  double rolling_reserve_threshold = 36;
  // @inject_tag: json:"rolling_reserve_days" bson:"rolling_reserve_days" validate:"numeric,gte=0"
  //
  // The rolling reserve period.
  int32 rolling_reserve_days = 37;
  // @inject_tag: json:"rolling_reserve_chargeback_transactions_threshold" bson:"rolling_reserve_chargeback_transactions_threshold" validate:"numeric,gte=0,lte=100"
  //
  // The rolling reserve threshold for the chargeback transactions.
  double rolling_reserve_chargeback_transactions_threshold = 38;
  // @inject_tag: json:"item_min_cost_amount" bson:"item_min_cost_amount" validate:"numeric,gte=0"
  //
  // The minimum cost of the item.
  double item_min_cost_amount = 39;
  //@inject_tag: json:"item_min_cost_currency" bson:"item_min_cost_currency" validate:"required,alpha,len=3" required:"true"
  //
  // The currency of the minimum cost of the item.
  string item_min_cost_currency = 40;
  // The merchant authorisation token to connect to the Centrifugo channel.
  string centrifugo_token = 41;
  //@inject_tag: json:"-"
  MerchantAgreementSignatureData agreement_signature_data = 43;
  //@inject_tag: json:"-"
  MerchantCompletedSteps steps = 46;
  //@inject_tag: json:"agreement_template"
  //
  // The unique identifier for the HelloSign template of the license agreement.
  string agreement_template = 47;
  // @inject_tag: json:"received_date"
  //
  // The date when the merchant owner has signed the license agreement.
  google.protobuf.Timestamp received_date = 48;
  // @inject_tag: json:"status_last_updated_at"
  //
  // The date when the merchant's status has been last updated.
  google.protobuf.Timestamp status_last_updated_at = 49;
  // @inject_tag: json:"has_projects"
  //
  // Has a true value if the merchant has created projects.
  bool has_projects = 50;
  // @inject_tag: json:"agreement_number"
  //
  // The license agreement number.
  string agreement_number = 51;
  // @inject_tag: json:"minimal_payout_limit"
  //
  // The minimum payout limit.
  float minimal_payout_limit = 52;
  // @inject_tag: json:"tariff"
  //
  // The merchant's tariff data selected in the Onboarding.
  MerchantTariff tariff = 53;
  // @inject_tag: json:"manual_payouts_enabled"
  //
  // Has a true value if the merchant can manually make a payout.
  bool manual_payouts_enabled = 54;
  // @inject_tag: json:"mcc_code"
  //
  // The Merchant Category Code (MCC) is a four-digit number listed in ISO 18245.
  string mcc_code = 55;
  // @inject_tag: json:"operating_company_id" faker:"objectIdString"
  //
  // The unique identifier for the operating company.
  string operating_company_id = 56;
  // @inject_tag: json:"merchant_operations_type" validate:"oneof=high-risk low-risk"
  //
  // The merchant's operations type. Available values: low-risk, high-risk.
  string merchant_operations_type = 57;
  // @inject_tag: json:"dont_charge_vat"
  //
  // Has a true value if the merchant doesn't pay any taxes.
  bool dont_charge_vat = 58;
  // @inject_tag: json:"api_token"
  //
  // The merchant token for making S2S API requests.
  string api_token = 59;
}

message MerchantShortInfo {
  // @inject_tag: bson:"_id" faker:"objectIdString"
  //
  // The unique identifier for the merchant.
  string id = 1;
  // @inject_tag: json:"user"
  //
  // Information about the merchant owner from the primary onboarding profile.
  MerchantUser user = 2;
  // @inject_tag: json:"company"
  //
  // Information about the merchant's company.
  MerchantCompanyInfo company = 3;
  // @inject_tag: json:"contacts"
  //
  // The merchant's contacts.
  MerchantContact contacts = 4;
  // @inject_tag: json:"banking"
  //
  // The merchant's banking data.
  MerchantBanking banking = 5;
  // @inject_tag: json:"status"
  //
  // The merchant's status. Available values: 0 - The merchant've just been created and the merchant profile have not been filled yet.
  //3 - The agreement with the merchant is signed by the merchant owner.
  //4 - The agreement with the merchant is signed by PaySuper.
  //5 - The merchant is removed.
  //6 - The merchant is marked as a fraud and will be removed.
  //7 - The merchant must fill the onboarding.
  //8 - The merchant has passed the onboarding and is waiting the agreement to be signed.
  int32 status = 6;
  // @inject_tag: json:"created_at"
  //
  // The date of the merchant creation.
  google.protobuf.Timestamp created_at = 7;
  // @inject_tag: json:"balance"
  //
  // The balance of merchant for payout.
  billing.MerchantBalance balance = 8;
  // @inject_tag: json:"status_last_updated_at"
  //
  // The date when the merchant's status has been last updated.
  google.protobuf.Timestamp status_last_updated_at = 9;
  //@inject_tag: json:"first_payment_at"
  //
  // Date of first payment for merchant.
  google.protobuf.Timestamp first_payment_at = 10;
}

message MerchantCommon {
  // @inject_tag: bson:"_id"
  string id = 1;
  // @inject_tag: json:"name"
  string name = 2;
  // @inject_tag: json:"currency"
  string currency = 3;
  // @inject_tag: json:"status"
  int32 status = 4;
  // @inject_tag: json:"has_projects"
  bool has_projects = 5;
}

message SystemNotificationStatuses {
  // @inject_tag: json:"from"
  //
  // The before changes status.
  int32 from = 1;
  // @inject_tag: json:"to"
  //
  // The after changes status.
  int32 to = 2;
}

message Notification {
  // @inject_tag: json:"id" faker:"objectIdString"
  //
  // The unique identifier for the notification.
  string id = 1;
  // @inject_tag: json:"message"
  //
  // The notification message.
  string message = 3;
  // @inject_tag: json:"merchant_id" faker:"objectIdString"
  //
  // The unique identifier for the merchant who is the recipient of the notification.
  string merchant_id = 4;
  // @inject_tag: json:"user_id" faker:"objectIdString"
  //
  // The unique identifier for the user who is the sender of the notification.
  string user_id = 5;
  // @inject_tag: json:"is_system"
  //
  // Has a true value if the notification is generated automatically.
  bool is_system = 6;
  // @inject_tag: json:"is_read"
  //
  // Has a true value if the recipient has read the notification.
  bool is_read = 7;
  // @inject_tag: json:"statuses"
  //
  // The system notification statuses. Has a null value if it's not the system notification.
  SystemNotificationStatuses statuses = 8;
  // @inject_tag: json:"created_at"
  //
  // The date of the notification creation.
  google.protobuf.Timestamp created_at = 9;
  // @inject_tag: json:"updated_at"
  //
  // The date of the notification last update.
  google.protobuf.Timestamp updated_at = 10;
}

message OrderPlatformFee {
  float amount = 1;
  string currency = 2;
  float effective_rate = 3;
}

message OrderTax {
  // @inject_tag: json:"type"
  //
  // The type of the tax.
  string type = 1;
  // @inject_tag: json:"rate"
  //
  // The tax rate.
  double rate = 2;
  // @inject_tag: json:"amount"
  //
  // The tax amount.
  double amount = 3;
  // @inject_tag: json:"currency"
  //
  // The tax currency. Three-letter currency code ISO 4217, in uppercase.
  string currency = 4;
}

message OrderBillingAddress {
  // @inject_tag: validate:"omitempty,alpha,len=2"
  //
  // The customer's country. Two-letter country code in ISO 3166-1, in uppercase (for instance US).
  string country = 1;
  // The customer’s city.
  string city = 2;
  // @inject_tag: bson:"postal_code"
  //
  // The customer's postal code.
  string postal_code = 3;
  // The customer's state code in ISO 3166-2.
  string state = 4;
}

message OrderUser {
  // @inject_tag: json:"-" faker:"objectIdString"
  string id = 1;
  // @inject_tag: json:"-"
  string object = 2;
  // @inject_tag: json:"external_id" bson:"external_id"
  //
  // The unique identifier for the customer in the merchant project.
  string external_id = 3;
  // @inject_tag: json:"name"
  //
  // The customer's name.
  string name = 4;
  // @inject_tag: json:"email" validate:"omitempty,email"
  //
  // The customer's email address.
  string email = 5;
  // @inject_tag: json:"email_verified" bson:"email_verified"
  //
  // Whether the customer's email address has been verified on the merchant side.
  bool email_verified = 6;
  // @inject_tag: json:"phone" validate:"omitempty,phone"
  //
  // The customer's phone number.
  string phone = 7;
  // @inject_tag: json:"phone_verified" bson:"phone_verified"
  //
  // Whether the customer's phone number has been verified on the merchant side.
  bool phone_verified = 8;
  // @inject_tag: json:"ip" validate:"omitempty,ip"
  //
  // The customer's IP address.
  string ip = 9;
  // @inject_tag: json:"locale" validate:"omitempty,alpha,len=2"
  //
  // The customer's locale name. The language code in ISO 639-1 (for instance en-US).
  string locale = 10;
  // @inject_tag: json:"address"
  //
  // The customer's address details.
  OrderBillingAddress address = 11;
  // @inject_tag: json:"metadata"
  //
  // A string-value description that you can attach to the customer's object. It can be useful for storing additional information about your customer's payment.
  map<string, string> metadata = 12;
  // @inject_tag: json:"-"
  string tech_email = 13;
  //@inject_tag: json:"-" bson:"notify_new_region"
  bool notify_new_region = 14;
  //@inject_tag: json:"-" bson:"notify_new_region_email"
  string notify_new_region_email = 15;
  // @inject_tag: json:"id" bson:"uuid"
  string uuid = 16;
}

message OrderNotificationCancellation {
  //@inject_tag: json:"code" bson:"code"
  //
  // The internal identity for the cancellation reason in PaySuper.
  string code = 1;
  //@inject_tag: json:"reason" bson:"reason"
  //
  // The cancellation reason.
  string reason = 2;
}

message Order {
  // @inject_tag: json:"-" bson:"_id" faker:"objectIdString"
  string id = 1; // unique internal order identifier in Protocol One
  // @inject_tag: json:"id" bson:"uuid"
  //
  // The public unique identifier for the order in PaySuper.
  string uuid = 2;
  // @inject_tag: json:"transaction" bson:"pm_order_id"
  //
  // The unique identifier for the order in the payment system.
  string transaction = 3;
  // @inject_tag: json:"object" bson:"object"
  //
  // The system constant that contains the returned object's type.
  string object = 4;
  // @inject_tag: json:"status" bson:"status"
  //
  // The current status of the order. Available values: created, processed, canceled, rejected, refunded, chargeback, pending.
  string status = 5;
  // @inject_tag: json:"-" bson:"private_status"
  int32 private_status = 6; // order status
  // @inject_tag: json:"description" bson:"description"
  //
  // The order's description.
  string description = 7;
  // @inject_tag: bson:"created_at" bson:"created_at"
  //
  // The date of the order creation.
  google.protobuf.Timestamp created_at = 8;
  // @inject_tag: json:"-" bson:"updated_at"
  google.protobuf.Timestamp updated_at = 9; // date of last update order data
  //@inject_tag: json:"canceled_at" bson:"canceled_at"
  //
  // The date of the order cancellation.
  google.protobuf.Timestamp canceled_at = 10;
  //@inject_tag: json:"canceled" bson:"canceled"
  //
  // Has a true value if the order is cancelled.
  bool canceled = 11;
  //@inject_tag: json:"cancellation" bson:"cancellation"
  //
  // The notification of cancellation.
  OrderNotificationCancellation cancellation = 12;
  //@inject_tag: json:"refunded" bson:"refunded"
  //
  // Has a true value if the order is refunded.
  bool refunded = 13;
  //@inject_tag: json:"refunded_at" bson:"refunded_at"
  //
  // The date of the order refund.
  google.protobuf.Timestamp refunded_at = 14;
  // @inject_tag: json:"receipt_email" bson:"receipt_email"
  //
  // The customer's email that is used for the payment receipt.
  string receipt_email = 15;
  // @inject_tag: json:"receipt_phone" bson:"receipt_phone"
  //
  // The customer's phone who receives the payment receipt.
  string receipt_phone = 16;
  // @inject_tag: json:"receipt_number" bson:"receipt_number"
  //
  // The unique identifier for the order's receipt.
  string receipt_number = 17;
  // @inject_tag: json:"receipt_url" bson:"receipt_url"
  //
  // The URL in PaySuper service for online access to the receipt.
  string receipt_url = 18;
  //@inject_tag: json:"agreement_version" bson:"agreement_version" validate:"required"
  //
  // The license agreement version.
  string agreement_version = 19;
  //@inject_tag: json:"agreement_accepted" bson:"agreement_accepted" validate:"required"
  //
  // Has a true value if the customer has accepted the license agreement.
  bool agreement_accepted = 20;
  //@inject_tag: json:"notify_sale" bson:"notify_sale" validate:"required"
  //
  // Has a true value if the customer has agreed to receive the sales notifications.
  bool notify_sale = 21;
  //@inject_tag: json:"notify_sale_email" bson:"notify_sale_email"
  //
  // The customer's email for the sales notifications.
  string notify_sale_email = 22;
  //@inject_tag: json:"issuer" bson:"issuer" validate:"required"
  //
  // The order issuer data.
  OrderIssuer issuer = 23;
  //@inject_tag: json:"amount" bson:"total_payment_amount"
  //
  // The total payment amount including all commissions.
  double total_payment_amount = 24;
  //@inject_tag: json:"currency" bson:"currency" validate:"required,alpha,len=3"
  //
  // The order currency. Three-letter Currency Code ISO 4217, in uppercase.
  string currency = 25;
  //@inject_tag: json:"user" bson:"user"
  //
  // The customer data.
  OrderUser user = 26;
  //@inject_tag: json:"billing_address" bson:"billing_address"
  //
  // The customer's billing address entered in payment form.
  OrderBillingAddress billing_address = 27;
  //@inject_tag: json:"tax" bson:"tax"
  //
  // The tax in the order.
  OrderTax tax = 28;
  // @inject_tag: json:"method" bson:"payment_method"
  //
  // The payment method data.
  PaymentMethodOrder payment_method = 29;
  // @inject_tag: json:"items" bson:"items" validate="omitempty,gte=1,dive"
  //
  // The list of products in the order.
  repeated OrderItem items = 30;
  //@inject_tag: json:"refund" bson:"refund" validate:"omitempty,dive"
  //
  // The notification of the refund. Has a null value if the order is not refunded.
  OrderNotificationRefund refund = 31;
  // @inject_tag: json:"metadata" bson:"metadata"
  //
  // Additional information that was sent as a string-value description from the merchant's project while the payment order creation.
  map<string, string> metadata = 32;
  // @inject_tag: json:"-" bson:"private_metadata"
  map<string, string> private_metadata = 33;
  // @inject_tag: json:"-" bson:"project"
  ProjectOrder project = 34; // object described main entities of project in Protocol One payment solution
  // @inject_tag: json:"-" bson:"project_last_requested_at"
  google.protobuf.Timestamp project_last_requested_at = 37; // date of last notification request to project
  // @inject_tag: json:"-" bson:"project_params"
  map<string, string> project_params = 38; // any project params which received from project in request of create of order
  // @inject_tag: json:"-" bson:"pm_order_close_date"
  google.protobuf.Timestamp payment_method_order_closed_at = 39; // date of ended payment operation in payment system
  // @inject_tag: json:"-" bson:"created_by_json"
  bool is_json_request = 40; // is order create by json request
  // @inject_tag: json:"original_amount" bson:"private_amount" validate:"required,numeric,gt=0"
  //
  // The order amount excluding commissions.
  double order_amount = 41;
  // @inject_tag: json:"-" bson:"pm_account"
  string payment_method_payer_account = 42; // account of payer in payment system
  // @inject_tag: json:"-" bson:"pm_txn_params"
  map<string, string> payment_method_txn_params = 43; // any params received in request of payment system about payment
  // @inject_tag: json:"-" bson:"payment_requisites"
  map<string, string> payment_requisites = 44;
  // @inject_tag: json:"-" bson:"expire_date_to_form_input"
  google.protobuf.Timestamp expire_date_to_form_input = 45;
  // @inject_tag: json:"-" bson:"user_address_data_required"
  bool user_address_data_required = 46;
  // @inject_tag: json:"-" bson:"products" validate:"omitempty,gte=1,dive,hexadecimal,len=24"
  repeated string products = 47;
  // @inject_tag: json:"-" bson:"is_notifications_sent"
  map<string, bool> is_notifications_sent = 48;
  // @inject_tag: json:"-" bson:"country_restriction"
  CountryRestriction country_restriction = 49;
  //@inject_tag: json:"country" bson:"country" validate:"omitempty,alpha,len=2"
  //
  // The customer's country code. Two-letter country code in ISO 3166-1, in uppercase.
  string country_code = 50;
  // @inject_tag: json:"-"
  ParentOrder parent_order = 51;
  // @inject_tag: json:"-"
  google.protobuf.Timestamp parent_payment_at = 52;
  // @inject_tag: json:"-"
  string type = 53;
  // @inject_tag: json:"-"
  bool is_vat_deduction = 54;
  // @inject_tag: validate="oneof=simple product key virtual_currency" json:"type"
  //
  // The type of the order's product. Available values: simple, product, key, virtual_currency.
  string product_type = 69;
  // @inject_tag: json:"platform_id"
  //
  // The default platform's name for which the customer buys a key. This field is used only for the key type. Available values: steam, gog, uplay, origin, psn, xbox, nintendo, itch, egs.
  string platform_id = 70;
  // @inject_tag: json:"-" bson:"keys"
  repeated string keys = 71;
  // @inject_tag: json:"-"
  bool is_key_product_notified = 72;
  // @inject_tag: json:"receipt_id" bson:"receipt_id"
  //
  // The public unique identifier for the receipt.
  string receipt_id = 73;
  // @inject_tag: json:"virtual_currency_amount" bson:"virtual_currency_amount"
  //
  // The amount in the project's virtual currency.
  double virtual_currency_amount = 74;
  // @inject_tag: json:"is_buy_for_virtual_currency" bson:"is_buy_for_virtual_currency"
  //
  // Has a true value if the order amount was in the project's virtual currency.
  bool is_buy_for_virtual_currency = 75;
  // @inject_tag: json:"-"
  string mcc_code = 76;
  // @inject_tag: json:"-"
  string operating_company_id = 77;
  // @inject_tag: json:"-"
  bool is_high_risk = 78;
  // @inject_tag: json:"-"
  bool is_currency_predefined = 79;
  // @inject_tag: json:"charge_currency"
  //
  // The currency of the order charge. It can differ from the order currency because it also depends on the customer's card currency.
  string charge_currency = 80;
  // @inject_tag: json:"charge_amount"
  //
  // The total amount of the order charge.
  double charge_amount = 81;
  // @inject_tag: json:"-"
  string payment_ip_country = 82;
  // @inject_tag: json:"-"
  bool is_ip_country_mismatch_bin = 83;
  // @inject_tag: json:"-"
  bool billing_country_changed_by_user = 84;
  // @inject_tag: json:"-"
  bool is_refund_allowed = 85;
  // @inject_tag: json:"vat_payer" bson:"vat_payer" validate:"oneof=buyer seller nobody"
  //
  // The responsible for VAT. Available values: buyer (VAT is added to the order charge), seller (VAT is included in the order charge), nobody (VAT exempt).
  string vat_payer = 86;
  // @inject_tag: json:"is_production"
  //
  // Has a true value for a production payment and false for a test payment that goes through a test sandbox.
  bool is_production = 87;
  // @inject_tag: json:"testing_case"
  //
  // The webhook testing mode. Available values: correct_payment, non_existing_user, existing_user, invalid_signature.
  string testing_case = 88;
  //@inject_tag: json:"form_mode"
  //
  //The opening mode of the payment form on the project side. Available values: embed, iframe, standalone. Default value: embed.
  string form_mode = 89;
  // @inject_tag: json:"merchant_info" bson:"merchant_info"
  //
  // The merchant's company data.
  OrderViewMerchantInfo merchant_info = 90;
  // @inject_tag: json:"-"
  //
  // The royalty report's identifier which include this order
  string royalty_report_id = 91;
  // @inject_tag: json:"net_revenue"
  //
  // Net revenue for order
  OrderViewMoney net_revenue = 92;
  // @inject_tag: json:"fee"
  //
  // Fee for order
  OrderViewMoney fee = 93;
  // @inject_tag: json:"-" faker:"-"
  //
  // DEPRECATED! Use the recurring_plan_id property
  // Recurring settings for order
  OrderRecurringSettings recurring_settings = 94;
  // @inject_tag: json:"recurring" faker:"-"
  //
  // DEPRECATED! Use the recurring_subscription_id property
  // Exists recurring for order
  bool recurring = 95;
  // @inject_tag: json:"recurring_id" faker:"-"
  //
  // DEPRECATED! Use the recurring_subscription_id property
  // Recurring identity for order
  string recurring_id = 96;
  // @inject_tag: json:"recurring_subscription_id"
  //
  // Identity of recurring subscription for order
  string recurring_subscription_id = 97;
  // @inject_tag: json:"recurring_plan_id"
  //
  // Identity of recurring plan for order
  string recurring_plan_id = 98;
}

// Use for order receipt
message OrderRecurringSettings {
  //@inject_tag: json:"period" validate:"required,oneof=day week month" required:"true" bson:"period"
  //
  // Recurring period of order. Available values: day, week, month.
  string period = 1;
  //@inject_tag: json:"date_end" validate:"omitempty,date" bson:"date_end"
  //
  // End date of recurring period for order.
  string date_end = 2;
  //@inject_tag: json:"interval" bson:"interval"
  //
  // he frequency interval of recurring period.
  int32 interval = 3;
}

message ParentOrder {
  // @inject_tag: json:"id" faker:"objectIdString"
  //
  // The internal unique identifier for the order in PaySuper.
  string id = 51;
  // @inject_tag: json:"uuid"
  //
  // The public unique identifier for the order in PaySuper.
  string uuid = 52;
}

message CountryRestriction {
  //@inject_tag: json:"iso_code_a2" bson:"iso_code_a2" validate:"alpha,len=2"
  string iso_code_a2 = 1;
  //@inject_tag: json:"payments_allowed" bson:"payments_allowed"
  bool payments_allowed = 2;
  //@inject_tag: json:"change_allowed" bson:"change_allowed"
  bool change_allowed = 3;
}

message OrderItem {
  //@inject_tag: validate:"required,hexadecimal,len=24" json:"id" bson:"_id" required:"true" faker:"objectIdString"
  //
  // The unique identifier for the item.
  string id = 1;
  //@inject_tag: validate:"required" json:"object" bson:"object" required:"true"
  //
  // String representing the item’s type.
  string object = 2;
  //@inject_tag: validate:"required" json:"sku" bson:"sku" required:"true"
  //
  // The SKU of the product.
  string sku = 3;
  //@inject_tag: validate:"required" json:"name" bson:"name" required:"true"
  //
  // The item's name.
  string name = 4;
  //@inject_tag: validate:"required" json:"description" bson:"description" required:"true"
  //
  // The item's description.
  string description = 5;
  // @inject_tag: validate:"required,numeric,gt=0" json:"amount" bson:"amount" required:"true"
  //
  // The item's price.
  double amount = 6;
  //@inject_tag: validate:"required,alpha,len=3" json:"currency" bson:"currency" required:"true"
  //
  // The item's price currency. Three-letter Currency Code ISO 4217, in uppercase.
  string currency = 7;
  //@inject_tag: validate:"dive,omitempty,uri" json:"images" bson:"images"
  //
  // The item's images URL list.
  repeated string images = 8;
  //@inject_tag: validate:"omitempty,url" json:"url" bson:"url"
  //
  // The item's URL in the merchant project.
  string url = 9;
  //@inject_tag: json:"metadata" bson:"metadata"
  //
  // The string-value description for the item.
  map<string, string> metadata = 10;
  //@inject_tag: json:"created_at" bson:"created_at"
  //
  // The date of the product creation.
  google.protobuf.Timestamp created_at = 11;
  //@inject_tag: json:"updated_at" bson:"updated_at"
  //
  // The date of the product last update.
  google.protobuf.Timestamp updated_at = 12;
  //@inject_tag: validate:"omitempty,min=3" json:"platform_id" bson:"platform_id"
  //
  // The unique identifier for the platform.
  string platform_id = 13;
  //@inject_tag: validate:"omitempty,min=5" json:"code" bson:"code"
  //
  // The activation code.
  string code = 14;
}

message OrderPaginate {
  // @inject_tag: json:"count"
  int32 count = 1; // total count of selected orders
  // @inject_tag: json:"items"
  repeated Order items = 2; // array of selected orders
}

message PaymentMethodOrder {
  // @inject_tag: json:"-" bson:"_id" faker:"objectIdString"
  string id = 1;
  // @inject_tag: json:"title" bson:"name"
  //
  // The payment method's name.
  string name = 2;
  // @inject_tag: bson:"external_id" json:"external_id"
  //
  // The unique identifier for the payment method in the payment system.
  string external_id = 3;
  // @inject_tag: json:"-" bson:"params"
  PaymentMethodParams params = 4;
  // @inject_tag: bson:"payment_system_id" json:"payment_system_id" faker:"objectIdString"
  //
  // The unique identifier for the payment system in PaySuper.
  string payment_system_id = 5;
  // @inject_tag: json:"type" bson:"group_alias"
  //
  // The payment method's group alias.
  string group = 6;
  // @inject_tag: json:"saved" bson:"saved"
  //
  // Has a true value if contains a saved card as a payment method.
  bool saved = 7;
  //@inject_tag: json:"card" bson:"card"
  //
  // Information about the card payment method.
  PaymentMethodCard card = 8;
  //@inject_tag: json:"wallet" bson:"wallet"
  //
  // Information about the wallet payment method.
  PaymentMethodWallet wallet = 9;
  //@inject_tag: json:"crypto_currency" bson:"crypto_currency"
  //
  // Information about the crypto payment method.
  PaymentMethodCrypto crypto_currency = 10;
  // @inject_tag: json:"handler" bson:"handler"
  //
  // The unique identifier for handler of the payment system in PaySuper.
  string handler = 11;
  // @inject_tag: json:"refund_allowed" bson:"refund_allowed"
  //
  // Has a true value if the payment method allows a refund.
  bool refund_allowed = 12;
  // @inject_tag: json:"recurring_allowed" bson:"recurring_allowed"
  //
  // Has a true value if the payment method allows a recurring.
  bool recurring_allowed = 13;
}

message PaymentMethodParams {
  // @inject_tag: bson:"currency" json:"currency" validate:"required,alpha,len=3"
  //
  // The currency of the payment method. Three-letter Currency Code ISO 4217, in uppercase.
  string currency = 1;
  // @inject_tag: bson:"terminal_id" json:"-" validate:"omitempty,alphanum"
  string terminal_id = 2;
  // @inject_tag: bson:"secret" json:"-" validate:"omitempty"
  string secret = 3;
  // @inject_tag: bson:"secret_callback" json:"-" validate:"omitempty"
  string secret_callback = 5;
  // @inject_tag: bson:"api_url" json:"-"
  string api_url = 6;
  // @inject_tag: bson:"mcc_code" json:"mcc_code" validate:"required,numeric,len=4"
  //
  // The Merchant Category Code (MCC) is a four-digit number listed in ISO 18245.
  string mcc_code = 7;
  // @inject_tag: bson:"operating_company_id" json:"operating_company_id" validate:"required,hexadecimal,len=24"
  //
  // The unique identifier for the operating company.
  string operating_company_id = 8;
  // @inject_tag: bson:"brand" json:"brand" validate:"required"
  //
  // The list of the card issuer brands.
  repeated string brand = 9;
}

message PaymentSystem {
  // @inject_tag: bson:"_id" structure:"_id,bsonobjectid" faker:"objectIdString"
  string id = 1;
  string name = 2;
  // @inject_tag: bson:"country" structure:"country"
  string Country = 3;
  // @inject_tag: bson:"accounting_currency" structure:"accounting_currency"
  string accounting_currency = 4;
  // @inject_tag: bson:"accounting_period" structure:"accounting_period"
  string accounting_period = 5;
  // @inject_tag: bson:"is_active" structure:"is_active"
  bool is_active = 6;
  // @inject_tag: bson:"created_at" structure:"created_at,timestamp"
  google.protobuf.Timestamp created_at = 7;
  // @inject_tag: bson:"updated_at" structure:"updated_at,timestamp"
  google.protobuf.Timestamp updated_at = 8;
  // @inject_tag: bson:"handler" json:"handler" validate:"omitempty,alphanum"
  string handler = 9;
}

message PaymentMethodCard {
  //@inject_tag: json:"first6" bson:"first6"
  //
  // The first 6 digits of the card number.
  string first6 = 1;
  //@inject_tag: json:"last4" bson:"last4"
  //
  // The last 4 digits of the card number.
  string last4 = 2;
  //@inject_tag: json:"masked" bson:"masked"
  //
  // The mask for a customer’s card number.
  string masked = 3;
  //@inject_tag: json:"expiry_month" bson:"expiry_month"
  //
  // The validity month of the card.
  string expiry_month = 4;
  //@inject_tag: json:"expiry_year" bson:"expiry_year"
  //
  // The validity year of the card.
  string expiry_year = 5;
  //@inject_tag: json:"brand" bson:"brand"
  //
  // The brand of the card issuer.
  string brand = 6;
  //@inject_tag: json:"fingerprint" bson:"fingerprint"
  //
  // The internal fingerprint for given card.
  string fingerprint = 7;
  //@inject_tag: json:"secure3d" bson:"secure3d"
  //
  // Has a true value if 3D-secure is used for the payment.
  bool secure3d = 8;
}

message PaymentMethodWallet {
  //@inject_tag: json:"brand" bson:"brand"
  //
  // The name of the wallet.
  string brand = 1;
  //@inject_tag: json:"account" bson:"account"
  //
  // The customer identity in the wallet.
  string account = 2;
}

message PaymentMethodCrypto {
  //@inject_tag: json:"brand" bson:"brand"
  //
  // The name of the crypto currency.
  string brand = 1;
  //@inject_tag: json:"address" bson:"address"
  //
  // The customer’s address in the crypto currency.
  string address = 2;
}

message ProjectPaymentMethod {
  // @inject_tag: bson:"_id" faker:"objectIdString"
  string id = 1;
  // @inject_tag: bson:"terminal"
  string terminal = 2;
  // @inject_tag: bson:"password"
  string password = 3;
  // @inject_tag: bson:"callback_password"
  string callback_password = 4;
  // @inject_tag: bson:"created_at"
  google.protobuf.Timestamp created_at = 5;
}

message PaymentMethod {
    // @inject_tag: bson:"_id" json:"id" validate:"omitempty,hexadecimal,len=24" faker:"objectIdString"
    //
    // The unique identifier for the payment method.
    string id = 1;
    // @inject_tag: bson:"name" json:"name" validate:"required,omitempty,alphanum"
    //
    // The payment method's name.
    string name = 2;
    // @inject_tag: bson:"group_alias" json:"group_alias" validate:"omitempty,alphanum"
    //
    // The payment method's group alias.
    string group = 3;
    // @inject_tag: bson:"external_id" json:"external_id" validate:"omitempty,alphanum"
    //
    // The unique identifier for the payment method in the payment system.
    string external_id = 5;
    // @inject_tag: bson:"min_payment_amount" json:"min_payment_amount" validate:"omitempty,numeric,gte=0"
    //
    // The minimum payment amount.
    double min_payment_amount = 7;
    // @inject_tag: bson:"max_payment_amount" json:"max_payment_amount" validate:"omitempty,numeric,gte=0"
    //
    // The maximum payment amount.
    double max_payment_amount = 8;
    // @inject_tag: bson:"type" json:"type" validate:"omitempty,alpha,gte=0"
    //
    // The payment method's type. Available values: bank_card, ewallet, crypto.
    string type = 9;
    // @inject_tag: bson:"account_regexp" json:"account_regexp" validate:"omitempty"
    //
    // The regexp mask for checking the main requisite of the payment method.
    string account_regexp = 10;
    // @inject_tag: bson:"is_active" json:"is_active" validate:"omitempty"
    //
    // Has a true value if the payment method is active.
    bool is_active = 11;
    // @inject_tag: bson:"payment_system_id" json:"payment_system_id" validate:"required,hexadecimal,len=24" faker:"objectIdString"
    //
    // The unique identifier for the payment method in PaySuper.
    string payment_system_id = 12;
    // @inject_tag: bson:"test_settings" json:"test_settings" validate:"omitempty"
    //
    // The payment method's parameters for projects with payments in the test mode.
    map<string, PaymentMethodParams> test_settings = 13;
    // @inject_tag: bson:"production_settings" json:"production_settings" validate:"omitempty"
    //
    // The payment method's parameters for projects with payments in the production mode.
    map<string, PaymentMethodParams> production_settings = 14;
    // @inject_tag: bson:"created_at" json:"created_at" validate:"omitempty"
    //
    // The date of the payment method creation.
    google.protobuf.Timestamp created_at = 15;
    // @inject_tag: bson:"updated_at" json:"updated_at" validate:"omitempty"
    //
    // The date of the payment method last update.
    google.protobuf.Timestamp updated_at = 16;
    // @inject_tag: json:"refund_allowed" bson:"refund_allowed"
    //
    // Has a true value if the payment method allows a refund.
    bool refund_allowed = 17;
    // @inject_tag: json:"recurring_allowed" bson:"recurring_allowed"
    //
    // Has a true value if the payment method allows a recurring.
    bool recurring_allowed = 18;
    //@inject_tag: json:"limits_currency" validate:"omitempty,len=3"
    //
    // The currency of the limit amount.
    string limits_currency = 19;
}

message CardExpire {
  // @inject_tag: bson:"month"
  //
  // The card expiration month.
  string month = 1;
  // @inject_tag: bson:"year"
  //
  // The card expiration year.
  string year = 2;
}

message SavedCard {
  // The unique identifier of the saved card.
  string id = 1;
  // The card number.
  string pan = 2;
  // The cardholder’s name.
  string card_holder = 3;
  // The card expiration.
  CardExpire expire = 4;
}

message PaymentFormPaymentMethod {
  // The unique identifier for the payment method.
  string id = 1;
  // The payment method's name.
  string name = 2;
  // The payment method's type. Available values: bank_card, ewallet, crypto.
  string type = 3;
  // @inject_tag: json:"group_alias"
  //
  // The payment method's group alias.
  string group = 4;
  // The regexp mask for checking the main requisite of a payment method.
  string account_regexp = 5;
  // @inject_tag: json:"has_saved_cards"
  //
  // Has a true value if contains a saved card as a payment method.
  bool has_saved_cards = 6;
  // @inject_tag: json:"saved_cards,omitempty"
  //
  // The saved cards' data.
  repeated SavedCard saved_cards = 7;
}

message MerchantPaymentMethodPerTransactionCommission {
  // @inject_tag: validate:"omitempty,numeric,gte=0" json:"-"
  double fee = 1;
  // @inject_tag: json:"-"
  string currency = 2;
}

message MerchantPaymentMethodCommissions {
  // @inject_tag: validate:"omitempty,numeric,gte=0,lte=100" json:"-"
  double fee = 1;
  // @inject_tag: validate:"required" json:"-"
  MerchantPaymentMethodPerTransactionCommission per_transaction = 2;
}

message MerchantPaymentMethodIntegration {
  // @inject_tag: json:"terminal_id"
  string terminal_id = 1;
  // @inject_tag: json:"terminal_password"
  string terminal_password = 2;
  // @inject_tag: json:"terminal_callback_password"
  string terminal_callback_password = 3;
  // @inject_tag: json:"integrated"
  bool integrated = 4;
}

message MerchantPaymentMethodIdentification {
  // @inject_tag: validate:"required,hexadecimal,len=24" json:"-" faker:"objectIdString"
  string id = 1;
  // @inject_tag: validate:"required" json:"-"
  string name = 2;
}

message MerchantPaymentMethod {
  MerchantPaymentMethodIdentification payment_method = 3;
  MerchantPaymentMethodCommissions commission = 4;
  MerchantPaymentMethodIntegration integration = 5;
  bool is_active = 6;
}

message RefundPayerData {
  // The customer's country.
  string country = 1;
  // The customer's ZIP code.
  string zip = 2;
  // The customer's state.
  string state = 3;
}

message RefundOrder {
  // @inject_tag: faker:"objectIdString"
  //
  // The unique identifier for the refund in PaySuper.
  string id = 1;
  // The public unique identifier for the refund in PaySuper.
  string uuid = 2;
}

message Refund {
  // @inject_tag: faker:"objectIdString"
  //
  // The unique identifier for the refund in PaySuper.
  string id = 1;
  // The initial order data.
  RefundOrder original_order = 2;
  // The unique identifier for the refund in the payment system.
  string external_id = 3;
  // The refund amount.
  double amount = 4;
  // @inject_tag: faker:"objectIdString"
  //
  // The unique identifier for the user initiated an action on the return.
  string creatorId = 5;
  // The refund reason. Available values: Customer's request, Redeem chargeback, Purchase not provided, Card data was stolen.
  string reason = 6;
  // The refund's currency. Three-letter currency code ISO 4217, in uppercase.
  string currency = 7;
  // The refund status. Available values: 0 - created, 1 - rejected on the payment system side, 2 - in process on the payment system side, 3 - successfully completed.
  int32 status = 8;
  // The date of the refund creation.
  google.protobuf.Timestamp created_at = 9;
  // The date of the refund last update.
  google.protobuf.Timestamp updated_at = 10;
  // The customer data.
  RefundPayerData payer_data = 11;
  // The refund tax fee.
  float sales_tax = 12;
  // Has a true value if this refund is a chargeback.
  bool is_chargeback = 13;
  // @inject_tag: faker:"objectIdString"
  //
  // The unique identifier for the original order for which the refund was made.
  string created_order_id = 14;
}

message MerchantPaymentMethodHistory {
  // @inject_tag: validate:"required,hexadecimal,len=24" faker:"objectIdString"
  string id = 1;
  // @inject_tag: validate:"required,hexadecimal,len=24" faker:"objectIdString"
  string merchant_id = 2;
  // @inject_tag: validate:"required" json:"-"
  MerchantPaymentMethod paymentMethod = 3;
  // @inject_tag: json:"created_at" validate:"required"
  google.protobuf.Timestamp created_at = 4;
  // @inject_tag: validate:"required,hexadecimal,len=24" faker:"objectIdString"
  string user_id = 5;
}

message CustomerIdentity {
  // @inject_tag: faker:"objectIdString"
  string merchant_id = 1;
  // @inject_tag: faker:"objectIdString"
  string project_id = 2;
  string type = 3;
  string value = 4;
  bool verified = 5;
  google.protobuf.Timestamp created_at = 6;
}

message CustomerIpHistory {
  //@inject_tag: json:"-"
  bytes ip = 1;
  google.protobuf.Timestamp created_at = 2;
  //@inject_tag: json:"ip" bson:"ip_string"
  string ip_string = 3;
  //@inject_tag: json:"address" bson:"address"
  OrderBillingAddress address = 4;
}

message CustomerAddressHistory {
  string country = 1;
  string city = 2;
  string postal_code = 3;
  string state = 4;
  google.protobuf.Timestamp created_at = 5;
}

message CustomerStringValueHistory {
  string value = 1;
  google.protobuf.Timestamp created_at = 2;
}

message Customer {
  // @inject_tag: faker:"objectIdString"
  string id = 1;
  string tech_email = 2;
  string external_id = 3;
  string email = 4;
  bool email_verified = 5;
  string phone = 6;
  bool phone_verified = 7;
  string name = 8;
  bytes ip = 9;
  string locale = 10;
  string accept_language = 11;
  // @inject_tag: json:"-"
  string user_agent = 12;
  OrderBillingAddress address = 13;
  repeated CustomerIdentity identity = 14;
  // @inject_tag: json:"ip_history"
  repeated CustomerIpHistory ip_history = 15;
  // @inject_tag: json:"-"
  repeated CustomerAddressHistory address_history = 16;
  // @inject_tag: json:"-"
  repeated CustomerStringValueHistory locale_history = 17;
  // @inject_tag: json:"-"
  repeated CustomerStringValueHistory accept_language_history = 18;
  // @inject_tag: json:"metadata"
  map<string, string> metadata = 19;
  // @inject_tag: json:"-"
  google.protobuf.Timestamp created_at = 20;
  // @inject_tag: json:"-"
  google.protobuf.Timestamp updated_at = 21;
  //@inject_tag: json:"notify_sale" bson:"notify_sale"
  bool notify_sale = 22;
  //@inject_tag: json:"notify_sale_email" bson:"notify_sale_email"
  string notify_sale_email = 23;
  //@inject_tag: json:"notify_new_region" bson:"notify_new_region"
  bool notify_new_region = 24;
  //@inject_tag: json:"notify_new_region_email" bson:"notify_new_region_email"
  string notify_new_region_email = 25;
  //@inject_tag: json:"-" bson:"ip_string"
  string ip_string = 26;
  //@inject_tag: json:"-" bson:"payment_activity"
  map<string, PaymentActivityItem> payment_activity = 27;
  //@inject_tag: json:"uuid" bson:"uuid"
  string uuid = 28;
}

message PaymentActivityItem {
  //@inject_tag: bson:"count"
  PaymentActivityItemCount count = 2;
  //@inject_tag: bson:"last_txn_at"
  PaymentActivityItemLastTxnAt last_txn_at = 3;
  //@inject_tag: bson:"revenue"
  PaymentActivityItemRevenue revenue = 4;
}

message PaymentActivityItemCount {
  //@inject_tag: bson:"payment"
  int64 payment = 1;
  //@inject_tag: bson:"refund"
  int64 refund = 2;
}

message PaymentActivityItemLastTxnAt {
  //@inject_tag: bson:"payment"
  google.protobuf.Timestamp payment = 1;
  //@inject_tag: bson:"refund"
  google.protobuf.Timestamp refund = 2;
}

message PaymentActivityItemRevenue {
  //@inject_tag: bson:"payment"
  double payment = 1;
  //@inject_tag: bson:"refund"
  double refund = 2;
  //@inject_tag: bson:"total"
  double total = 3;
}

message TokenUserEmailValue {
  //@inject_tag: validate:"omitempty,email"
  //
  // The customer’s email address.
  string value = 1;
  // Whether the email has been verified on the merchant side.
  bool verified = 2;
}

message TokenUserPhoneValue {
  //@inject_tag: validate:"omitempty,phone"
  //
  // The customer’s phone.
  string value = 1;
  // Whether the phone has been verified on the merchant side.
  bool verified = 2;
}

message TokenUserIpValue {
  //@inject_tag: validate:"omitempty,ip"
  //
  // The customer’s IP address.
  string value = 1;
}

message TokenUserLocaleValue {
  //@inject_tag: validate:"omitempty,locale,min=5"
  //
  // The customer’s locale name. The Accept-Language format by RFC 7231.
  string value = 1;
}

message TokenUserValue {
  // The customer’s name.
  string value = 1;
}

message TokenUser {
  //@inject_tag: validate:"required" required:"true"
  //
  // The unique identifier for the customer in the merchant project.
  string id = 1;
  // The customer’s email data.
  TokenUserEmailValue email = 2;
  // The customer’s phone data.
  TokenUserPhoneValue phone = 4;
  // The customer’s name data.
  TokenUserValue name = 6;
  // The customer’s IP address data.
  TokenUserIpValue ip = 7;
  // The customer’s locale data.
  TokenUserLocaleValue locale = 8;
  // The customer’s address data.
  OrderBillingAddress address = 9;
  // A string-value description that you can attach to the customer's object. It can be useful for storing additional information about your customer’s payment.
  map<string, string> metadata = 10;
  //@inject_tag: json:"-"
  string user_agent = 11;
  //@inject_tag: json:"-"
  string accept_language = 12;
}

message TokenSettingsReturnUrl {
  //@inject_tag: validate:"omitempty,url"
  //
  // The redirect URL for a successful payment.
  string success = 1;
  //@inject_tag: validate:"omitempty,url"
  //
  // The redirect URL for a failed payment.
  string fail = 2;
}

message TokenSettingsItem {
  //@inject_tag: validate:"required"
  string sku = 1;
  //@inject_tag: validate:"required,numeric,gt=0"
  double amount = 5;
  //@inject_tag: validate:"required,alpha,len=3"
  string currency = 4;
}

message TokenSettings {
  //@inject_tag: json:"project_id" validate:"required,hexadecimal,len=24" required:"true"
  //
  // The unique identifier for the Project found in the merchant account in the PaySuper Dashboard.
  string project_id = 2;
  //@inject_tag: json:"return_url"
  //
  // Redirect URLs.
  TokenSettingsReturnUrl return_url = 3;
  //@inject_tag: json:"currency" validate:"omitempty,alpha,len=3"
  //
  // The order currency. Three-letter Currency Code ISO 4217, in uppercase. It's required for a simple checkout payment.
  string currency = 4;
  //@inject_tag: json:"amount" validate:"omitempty,numeric,gt=0"
  //
  // The order amount. It's required for a simple checkout payment.
  double amount = 5;
  //@inject_tag: json:"-"
  string payment_method = 6;
  //@inject_tag: json:"description"
  //
  // An arbitrary order description.
  string description = 8;
  //@inject_tag: json:"products_ids" validate:"omitempty,eq=1,dive,hexadecimal,len=24"
  //
  // A list of unique identifiers for Project's products. It's required if a payment type equals to ‘product’ or ‘key’.
  repeated string products_ids = 9;
  //@inject_tag: json:"metadata"
  //
  // The string-value description that you can attach to the customer's object. It can be useful for storing additional information about your customer’s payment.
  map<string, string> metadata = 10;
  //@inject_tag: json:"platform_id"
  //
  // The default platform's name for which the customer buys a key. This field is used only for the key type. Available values: steam, gog, uplay, origin, psn, xbox, nintendo, itch, egs.
  string platform_id = 11;
  //@inject_tag: json:"type" validate:"required,oneof=simple key product virtual_currency" required:"true"
  //
  // The order type. It depends on your sales option: Game Keys, Virtual Items, Virtual Currency, Simple Checkout. Available values: key, product, virtual_currency, simple.
  string type = 12;
  //@inject_tag: json:"is_buy_for_virtual_currency"
  //
  // Has a true value if an order must be processed using a virtual currency.
  bool is_buy_for_virtual_currency = 13;
  //@inject_tag: json:"button_caption" bson:"button_caption" validate:"omitempty,max=18"
  //
  //The redirect button messages after the successful or failed payment. If it has an empty value the redirect message will be set at OK.
  string button_caption = 14;
  //@inject_tag: json:"recurring_plan_id" validate:"omitempty"
  //
  // Identifier of plan for the recurring subscription.
  string recurring_plan_id = 15;
}

message OrderIssuer {
  //@inject_tag: bson:"url" json:"url"
  //
  // The referrer URL.
  string url = 1;
  //@inject_tag: bson:"embedded" json:"embedded"
  //
  // Has a true value if the form is embedded.
  bool embedded = 2;
  //@inject_tag: bson:"reference" json:"reference"
  //
  // The unique identifier for the reference.
  string reference = 3;
  //@inject_tag: bson:"reference_type" json:"reference_type"
  //
  // The reference type.
  string reference_type = 4;
  //@inject_tag: bson:"utm_source" json:"utm_source"
  //
  // The UTM-tag of the advertising system, for example: Bing Ads, Google Adwords.
  string utm_source = 5;
  //@inject_tag: bson:"utm_medium" json:"utm_medium"
  //
  // The UTM-tag of the traffic type, e.g.: cpc, cpm, email newsletter.
  string utm_medium = 6;
  //@inject_tag: bson:"utm_campaign" json:"utm_campaign"
  //
  // The UTM-tag of the advertising campaign, for example: Online games, Simulation game.
  string utm_campaign = 7;
  //@inject_tag: bson:"referrer_host" json:"referrer_host"
  //
  // The referrer's host.
  string referrer_host = 8;
}

message OrderNotificationRefund {
  //@inject_tag: validate:"required,numeric,gt=0" json:"amount"
  //
  // The refund amount.
  double amount = 1;
  //@inject_tag: validate:"required,alpha,len=3" json:"currency"
  //
  // The refund's currency. Three-letter currency code ISO 4217, in uppercase.
  string currency = 2;
  //@inject_tag: json:"reason"
  //
  // The refund reason. Available values: Customer's request, Redeem chargeback, Purchase not provided, Card data was stolen.
  string reason = 3;
  //@inject_tag: json:"code"
  //
  // The internal identity for the refund reason in PaySuper.
  string code = 4;
  //@inject_tag: json:"receipt_number"
  //
  // The unique identifier for the refund's receipt.
  string receipt_number = 5;
  //@inject_tag: json:"receipt_url"
  //
  // The URL in PaySuper service for online access to the refund's receipt.
  string receipt_url = 6;
}

message GetCountryRequest {
  //@inject_tag: validate:"required,alpha,len=2"
  string iso_code = 1;
}

message CountryVatThreshold {
  // @inject_tag: json:"year" bson:"year" validate:"numeric,gte=0"
  //
  // The maximum value of the PaySuper's revenue (since the beginning of the year) from this country which subjects to VAT.
  double year = 1;
  // @inject_tag: json:"world" bson:"world" validate:"numeric,gte=0"
  //
  // The maximum value of the PaySuper's worldwide revenue (since the beginning of the year) which subjects to VAT.
  double world = 2;
}

message Country {
  //@inject_tag: json:"-" bson:"_id" validate:"omitempty,hexadecimal,len=24" faker:"objectIdString"
  string id = 1;
  //@inject_tag: json:"iso_code_a2" bson:"iso_code_a2" validate:"required,alpha,len=2"
  //
  // Two-letter country code in ISO 3166, in uppercase (for instance US).
  string iso_code_a2 = 2;
  //@inject_tag: json:"region" bson:"region" validate:"required"
  //
  // A PaySuper system's relative geographical area for this country.
  string region = 3;
  //@inject_tag: json:"currency" bson:"currency" validate:"required,alpha,len=3"
  //
  // The currency of the country. Three-letter Currency Code ISO 4217, in uppercase.
  string currency = 4;
  //@inject_tag: json:"payments_allowed" bson:"payments_allowed"
  //
  // Has a true value if a payment is allowed from this country.
  bool payments_allowed = 5;
  //@inject_tag: json:"change_allowed" bson:"change_allowed"
  //
  // Has a true value if the customer can select another country in case of the payments are disallowed for this country.
  bool change_allowed = 6;
  //@inject_tag: json:"vat_enabled" bson:"vat_enabled"
  //
  // Has a true value if VAT is calculated and paid for this country.
  bool vat_enabled = 7;
  //@inject_tag: json:"vat_currency" bson:"vat_currency" validate:"omitempty,alpha,len=3"
  //
  // VAT currency. It can differ from the country currency. Three-letter Currency Code ISO 4217, in uppercase.
  string vat_currency = 8;
  //@inject_tag: json:"price_group_id" bson:"price_group_id" validate:"required,hexadecimal,len=24"
  //
  // The unique identifier for the price group this country belongs to.
  string price_group_id = 9;
  // @inject_tag: json:"vat_threshold" bson:"vat_threshold" validate:"required,dive"
  //
  // VAT threshold for this country.
  CountryVatThreshold vat_threshold = 10;
  // @inject_tag: json:"vat_period_month" bson:"vat_period_month" validate:"numeric,gte=0,lte=12"
  //
  // The length of the taxation period in months.
  int32 vat_period_month = 11;
  // @inject_tag: json:"vat_deadline_days" bson:"vat_deadline_days" validate:"numeric,gte=0"
  //
  // The number of days after the taxation period end to pay VAT.
  int32 vat_deadline_days = 12;
  // @inject_tag: json:"vat_store_years" bson:"vat_store_years" validate:"numeric,gte=0"
  //
  // The number of years to store the VAT payment history for this country.
  int32 vat_store_years = 13;
  // @inject_tag: json:"vat_currency_rates_policy" bson:"vat_currency_rates_policy" validate:"omitempty,oneof=on-day last-day mid-month"
  //
  // The VAT calculation policy with a currency that differs from this country's VAT currency. Available values: on-day (the conversion rate on the day of payment), last-day (the conversion rate on the last day of a tax period), mid-month (the system reserved option of a conversion rate calculation. This option is disabled.).
  string vat_currency_rates_policy = 14;
  // @inject_tag: json:"vat_currency_rates_source" bson:"vat_currency_rates_source" validate:"alpha"
  //
  // The source of currency rates to calculate the tax amount.
  string vat_currency_rates_source = 15;
  //@inject_tag: json:"-" bson:"created_at"
  google.protobuf.Timestamp created_at = 16;
  //@inject_tag: json:"-" bson:"updated_at"
  google.protobuf.Timestamp updated_at = 17;
  //@inject_tag: json:"payer_tariff_region" bson:"payer_tariff_region"
  //
  // A PaySuper system's relative geographical area for this country. Available values: asia, europe, latin_america, russia_and_cis, worldwide.
  string payer_tariff_region = 18;
  //@inject_tag: json:"high_risk_payments_allowed" bson:"high_risk_payments_allowed"
  //
  // Has a true value if payments from this country are allowed. Has a false value for a high-risk merchant.
  bool high_risk_payments_allowed = 19;
  //@inject_tag: json:"high_risk_change_allowed" bson:"high_risk_change_allowed"
  //
  // Has a true value if the customer can select another country while the payments are disallowed for a country determined by their IP address.
  bool high_risk_change_allowed = 20;
}

message CountriesList {
  // A list of countries.
  repeated Country countries = 1;
}

message GetPriceGroupRequest {
  //@inject_tag: json:"id" bson:"_id" validate:"omitempty,hexadecimal,len=24"
  string id = 1;
}

message PriceGroup {
  //@inject_tag: json:"id" bson:"_id" validate:"required,hexadecimal,len=24" required:"true" faker:"objectIdString"
  //
  // The unique identifier for the price group.
  string id = 1;
  //@inject_tag: json:"currency" bson:"currency" validate:"required,alpha,len=3" required:"true"
  //
  // Three-letter Currency Code ISO 4217, in uppercase.
  string currency = 2;
  //@inject_tag: json:"region" bson:"region" validate:"omitempty,alpha"
  //
  // The region's name.
  string region = 3;
  //@inject_tag: validate:"required,numeric,gte=0" bson:"inflation_rate" json:"-"
  double inflation_rate = 4;
  //@inject_tag: validate:"required,numeric" bson:"fraction" json:"-"
  double fraction = 5;
  //@inject_tag: json:"-" bson:"created_at"
  google.protobuf.Timestamp created_at = 6;
  //@inject_tag: json:"-" bson:"updated_at"
  google.protobuf.Timestamp updated_at = 7;
  // @inject_tag: json:"is_active" bson:"is_active"
  //
  // Has a true value if the price group is active.
  bool is_active = 8;
}

message ZipCodeState {
  //@inject_tag: bson:"code"
  //
  // The state's postal code.
  string code = 1;
  //@inject_tag: bson:"name"
  //
  // The state's name.
  string name = 2;
}

message ZipCode {
  // The postal code.
  string zip = 1;
  // The country's name.
  string country = 2;
  // The city's name.
  string city = 3;
  // The state data.
  ZipCodeState state = 4;
  // The date this item was added.
  google.protobuf.Timestamp created_at = 5;
}

message PaymentChannelCostSystem {
  //@inject_tag: json:"id" bson:"_id" validate:"omitempty,hexadecimal,len=24" faker:"objectIdString"
  //
  // The unique identifier for the payment method.
  string id = 1;
  //@inject_tag: json:"name" bson:"name" validate:"required,alpha"
  //
  // The payment method's name.
  string name = 2;
  //@inject_tag: json:"region" bson:"region" validate:"required"
  //
  // The customer's region.
  string region = 3;
  //@inject_tag: json:"country" bson:"country" validate:"omitempty,alpha,len=2"
  //
  // The customer's country. Two-letter country code in ISO 3166-1, in uppercase (for instance US).
  string country = 4;
  // @inject_tag: json:"percent" bson:"percent" validate:"required,numeric,gte=0,lte=1"
  //
  // The fee of the payment method in percent.
  double percent = 5;
  // @inject_tag: json:"fix_amount" bson:"fix_amount" validate:"numeric,gte=0"
  //
  // The fixed fee of the payment method in the particular currency.
  double fix_amount = 6;
  //@inject_tag: json:"fix_amount_currency" bson:"fix_amount_currency" validate:"required,alpha,len=3"
  //
  // The currency of the fixed fee of the payment method. Three-letter currency code ISO 4217, in uppercase.
  string fix_amount_currency = 7;
  //@inject_tag: json:"created_at" bson:"created_at"
  //
  // The date of the rates record was created.
  google.protobuf.Timestamp created_at = 8;
  //@inject_tag: json:"updated_at" bson:"updated_at"
  //
  // The date of the rates record was last updated.
  google.protobuf.Timestamp updated_at = 9;
  // @inject_tag: json:"is_active" bson:"is_active"
  //
  // Has a true value if the rates record is active.
  bool is_active = 10;
  // @inject_tag: json:"mcc_code" bson:"mcc_code"
  //
  // The Merchant Category Code (MCC) is a four-digit number listed in ISO 18245.
  string mcc_code = 11;
  // @inject_tag: json:"operating_company_id" bson:"operating_company_id" faker:"objectIdString"
  //
  // The unique identifier for the operating company.
  string operating_company_id = 12;
}

message PaymentChannelCostSystemRequest {
  //@inject_tag: json:"name" bson:"name" validate:"required,alpha"
  string name = 1;
  //@inject_tag: json:"region" bson:"region" validate:"required"
  string region = 2;
  //@inject_tag: json:"country" bson:"country" validate:"omitempty,alpha,len=2"
  string country = 3;
  //@inject_tag: json:"mcc_code" bson:"mcc_code" validate:"required,numeric,len=4" query:"mcc_code"
  string mcc_code = 4;
  //@inject_tag: json:"operating_company_id" bson:"operating_company_id" validate:"required,hexadecimal,len=24" query:"operating_company_id"
  string operating_company_id = 5;
}

message PaymentChannelCostSystemList {
  //@inject_tag: json:"items"
  //
  // The system costs for payments.
  repeated PaymentChannelCostSystem items = 1;
}

message PaymentChannelCostMerchant {
  //@inject_tag: json:"id" bson:"_id" validate:"omitempty,hexadecimal,len=24" faker:"objectIdString"
  //
  // The unique identifier for the record about the merchant's tariffs.
  string id = 1;
  //@inject_tag: json:"merchant_id" bson:"merchant_id" validate:"required,hexadecimal,len=24" faker:"objectIdString"
  //
  // The unique identifier for the merchant.
  string merchant_id = 2;
  //@inject_tag: json:"name" bson:"name" validate:"required,name"
  //
  // The payment method's name.
  string name = 3;
  //@inject_tag: json:"payout_currency" bson:"payout_currency" validate:"required,alpha,len=3"
  //
  // The payout currency. Three-letter Currency Code ISO 4217, in uppercase.
  string payout_currency = 4;
  // @inject_tag: json:"min_amount" bson:"min_amount" validate:"omitempty,numeric,gte=0"
  //
  // The minimum payment amount.
  double min_amount = 5;
  //@inject_tag: json:"region" bson:"region" validate:"required"
  //
  // The customer's region.
  string region = 6;
  //@inject_tag: json:"country" bson:"country" validate:"omitempty,alpha,len=2"
  //
  // The customer's country. Two-letter country code in ISO 3166-1, in uppercase (for instance US).
  string country = 7;
  // @inject_tag: json:"method_percent" bson:"method_percent" validate:"required,numeric,gte=0,lte=1"
  //
  // The fee of the payment method in percent.
  double method_percent = 8;
  // @inject_tag: json:"method_fix_amount" bson:"method_fix_amount" validate:"numeric,gte=0"
  //
  // The fixed fee of the payment method in the particular currency.
  double method_fix_amount = 9;
  // @inject_tag: json:"method_fix_amount_currency" bson:"method_fix_amount_currency" validate:"required,alpha,len=3"
  //
  // The currency of the fixed fee of the payment method. Three-letter currency code ISO 4217, in uppercase.
  string method_fix_amount_currency = 10;
  // @inject_tag: json:"ps_percent" bson:"ps_percent" validate:"required,numeric,gte=0,lte=1"
  //
  // The PaySuper fee in percent.
  double ps_percent = 11;
  // @inject_tag: json:"ps_fixed_fee" bson:"ps_fixed_fee" validate:"numeric,gte=0"
  //
  // The PaySuper fixed fee in a particular currency.
  double ps_fixed_fee = 12;
  // @inject_tag: json:"ps_fixed_fee_currency" bson:"ps_fixed_fee_currency" validate:"required,alpha,len=3"
  //
  // The currency of the PaySuper fixed fee of the payment method. Three-letter currency code ISO 4217, in uppercase.
  string ps_fixed_fee_currency = 13;
  //@inject_tag: json:"created_at" bson:"created_at"
  //
  // The date of the rates record was created for the merchant.
  google.protobuf.Timestamp created_at = 14;
  //@inject_tag: json:"updated_at" bson:"updated_at"
  //
  // The date of the rates record was last updated for the merchant.
  google.protobuf.Timestamp updated_at = 15;
  // @inject_tag: json:"is_active" bson:"is_active"
  //
  // Has a true value if the rates record is active for the merchant.
  bool is_active = 16;
  // @inject_tag: json:"mcc_code" bson:"mcc_code"
  //
  // The Merchant Category Code (MCC) is a four-digit number listed in ISO 18245.
  string mcc_code = 17;
  // @inject_tag: json:"max_amount" bson:"max_amount" validate:"omitempty,numeric,gte=0"
  //
  // The maximum payment amount.
  double max_amount = 18;
}

message PaymentChannelCostMerchantRequest {
  //@inject_tag: json:"merchant_id" bson:"merchant_id" validate:"required,hexadecimal,len=24"
  string merchant_id = 1;
  //@inject_tag: json:"name" bson:"name" validate:"required,alpha" query:"name"
  string name = 2;
  //@inject_tag: json:"payout_currency" bson:"payout_currency" validate:"required,alpha,len=3" query:"payout_currency"
  string payout_currency = 3;
  // @inject_tag: json:"amount" bson:"amount" validate:"required,numeric,gte=0" query:"amount"
  double amount = 4;
  //@inject_tag: json:"region" bson:"region" validate:"required" query:"region"
  string region = 5;
  //@inject_tag: json:"country" bson:"country" validate:"omitempty,alpha,len=2" query:"country"
  string country = 6;
  //@inject_tag: json:"mcc_code" bson:"mcc_code" validate:"required,numeric,len=4" query:"mcc_code"
  string mcc_code = 7;
}

message PaymentChannelCostMerchantList {
  //@inject_tag: json:"items"
  //
  // The merchant costs for payments.
  repeated PaymentChannelCostMerchant items = 1;
}

message PaymentChannelCostMerchantListRequest {
  //@inject_tag: json:"merchant_id" bson:"merchant_id" validate:"required,hexadecimal,len=24"
  string merchant_id = 1;
}

message MoneyBackCostSystem {
  //@inject_tag: json:"id" bson:"_id" validate:"omitempty,hexadecimal,len=24" faker:"objectIdString"
  //
  // The unique identifier for the record about the merchant's tariffs.
  string id = 1;
  //@inject_tag: json:"name" bson:"name" validate:"required,alpha"
  //
  // The payment method's name.
  string name = 2;
  //@inject_tag: json:"payout_currency" bson:"payout_currency" validate:"required,alpha,len=3"
  //
  // The payout currency. Three-letter Currency Code ISO 4217, in uppercase.
  string payout_currency = 3;
  //@inject_tag: json:"undo_reason" bson:"undo_reason" validate:"required,alpha,oneof=refund reversal chargeback"
  //
  // The return reason. Available values: refund, reversal, chargeback.
  string undo_reason = 4;
  //@inject_tag: json:"region" bson:"region" validate:"required"
  //
  // The customer's region.
  string region = 5;
  //@inject_tag: json:"country" bson:"country" validate:"omitempty,alpha,len=2"
  //
  // The customer's country. Two-letter country code in ISO 3166-1, in uppercase (for instance US).
  string country = 6;
  // @inject_tag: json:"days_from" bson:"days_from" validate:"numeric,gte=0"
  //
  // The number of days after the payment operation.
  int32 days_from = 7;
  // @inject_tag: json:"payment_stage" bson:"payment_stage" validate:"numeric,gte=1"
  //
  // The payment stage.
  int32 payment_stage = 8;
  // @inject_tag: json:"percent" bson:"percent" validate:"numeric,gte=0,lte=1"
  //
  // The fee of the payment method in percent.
  double percent = 9;
  // @inject_tag: json:"fix_amount" bson:"fix_amount" validate:"numeric,gte=0"
  //
  // The fixed fee of the payment method in the particular currency.
  double fix_amount = 10;
  //@inject_tag: json:"created_at" bson:"created_at"
  //
  // The date of the rates record was created.
  google.protobuf.Timestamp created_at = 11;
  //@inject_tag: json:"updated_at" bson:"updated_at"
  //
  // The date of the rates record was last updated.
  google.protobuf.Timestamp updated_at = 12;
  // @inject_tag: json:"is_active" bson:"is_active"
  //
  // Has a true value if the rates record is active.
  bool is_active = 13;
  // @inject_tag: json:"mcc_code" bson:"mcc_code"
  //
  // The Merchant Category Code (MCC) is a four-digit number listed in ISO 18245.
  string mcc_code = 14;
  // @inject_tag: json:"operating_company_id" bson:"operating_company_id" faker:"objectIdString"
  //
  // The unique identifier for the operating company.
  string operating_company_id = 15;
  // @inject_tag: json:"fix_amount_currency" bson:"fix_amount_currency" validate:"required,alpha,len=3"
  //
  // The currency of the fixed fee of the payment method. Three-letter currency code ISO 4217, in uppercase.
  string fix_amount_currency = 16;
}

message MoneyBackCostSystemRequest {
  //@inject_tag: json:"name" bson:"name" validate:"required,alpha" query:"name"
  string name = 1;
  //@inject_tag: json:"payout_currency" bson:"payout_currency" validate:"required,alpha,len=3" query:"payout_currency"
  string payout_currency = 2;
  //@inject_tag: json:"undo_reason" bson:"undo_reason" validate:"required,alpha,oneof=refund reversal chargeback" query:"undo_reason"
  string undo_reason = 3;
  //@inject_tag: json:"region" bson:"region" validate:"required" query:"region"
  string region = 4;
  //@inject_tag: json:"country" bson:"country" validate:"omitempty,alpha,len=2" query:"country"
  string country = 5;
  // @inject_tag: json:"days" bson:"days" validate:"required,numeric,gte=0" query:"days"
  int32 days = 6;
  // @inject_tag: json:"payment_stage" bson:"payment_stage" validate:"numeric,gte=1" query:"payment_stage"
  int32 payment_stage = 7;
  //@inject_tag: json:"mcc_code" bson:"mcc_code" validate:"required,numeric,len=4" query:"mcc_code"
  string mcc_code = 8;
  //@inject_tag: json:"operating_company_id" bson:"operating_company_id" validate:"required,hexadecimal,len=24" query:"operating_company_id"
  string operating_company_id = 9;
}

message MoneyBackCostSystemList {
  //@inject_tag: json:"items"
  //
  // The system costs for the money back operations.
  repeated MoneyBackCostSystem items = 1;
}

message MoneyBackCostMerchant {
  //@inject_tag: json:"id" bson:"_id" validate:"omitempty,hexadecimal,len=24" faker:"objectIdString"
  //
  // The unique identifier for the record about the merchant's tariffs.
  string id = 1;
  //@inject_tag: json:"merchant_id" bson:"merchant_id" validate:"required,hexadecimal,len=24" faker:"objectIdString"
  //
  // The unique identifier for the merchant.
  string merchant_id = 2;
  //@inject_tag: json:"name" bson:"name" validate:"required,name"
  //
  // The payment method's name.
  string name = 3;
  //@inject_tag: json:"payout_currency" bson:"payout_currency" validate:"required,alpha,len=3"
  //
  // The payout currency. Three-letter Currency Code ISO 4217, in uppercase.
  string payout_currency = 4;
  //@inject_tag: json:"undo_reason" bson:"undo_reason" validate:"required,alpha,oneof=refund reversal chargeback"
  //
  // The return reason. Available values: refund, reversal, chargeback.
  string undo_reason = 5;
  //@inject_tag: json:"region" bson:"region" validate:"required"
  //
  // The customer's region.
  string region = 6;
  //@inject_tag: json:"country" bson:"country" validate:"omitempty,alpha,len=2"
  //
  // The customer's country. Two-letter country code in ISO 3166-1, in uppercase (for instance US).
  string country = 7;
  // @inject_tag: json:"days_from" bson:"days_from" validate:"numeric,gte=0"
  //
  // The number of days after the payment operation.
  int32 days_from = 8;
  // @inject_tag: json:"payment_stage" bson:"payment_stage" validate:"numeric,gte=1"
  //
  // The payment stage.
  int32 payment_stage = 9;
  // @inject_tag: json:"percent" bson:"percent" validate:"numeric,gte=0,lte=1"
  //
  // The fee of the payment method in percent.
  double percent = 10;
  // @inject_tag: json:"fix_amount" bson:"fix_amount" validate:"numeric,gte=0"
  //
  // The fixed fee of the payment method in the particular currency.
  double fix_amount = 11;
  // @inject_tag: json:"fix_amount_currency" bson:"fix_amount_currency" validate:"required,alpha,len=3"
  //
  // The currency of the fixed fee of the payment method. Three-letter currency code ISO 4217, in uppercase.
  string fix_amount_currency = 12;
  // @inject_tag: json:"is_paid_by_merchant" bson:"is_paid_by_merchant"
  //
  // Has a true value if the commission was paid by the merchant.
  bool is_paid_by_merchant = 13;
  //@inject_tag: json:"created_at" bson:"created_at"
  //
  // The date of the rates record was created for the merchant.
  google.protobuf.Timestamp created_at = 14;
  //@inject_tag: json:"updated_at" bson:"updated_at"
  //
  // The date of the rates record was last updated for the merchant.
  google.protobuf.Timestamp updated_at = 15;
  // @inject_tag: json:"is_active" bson:"is_active"
  //
  // Has a true value if the rates record is active for the merchant.
  bool is_active = 16;
  // @inject_tag: json:"mcc_code" bson:"mcc_code"
  //
  // The Merchant Category Code (MCC) is a four-digit number listed in ISO 18245.
  string mcc_code = 17;
}

message MoneyBackCostMerchantRequest {
  //@inject_tag: json:"merchant_id" bson:"merchant_id" validate:"required,hexadecimal,len=24"
  string merchant_id = 1;
  //@inject_tag: json:"name" bson:"name" validate:"required,alpha" query:"name"
  string name = 2;
  //@inject_tag: json:"payout_currency" bson:"payout_currency" validate:"required,alpha,len=3" query:"payout_currency"
  string payout_currency = 3;
  //@inject_tag: json:"undo_reason" bson:"undo_reason" validate:"required,alpha,oneof=refund reversal chargeback" query:"undo_reason"
  string undo_reason = 4;
  //@inject_tag: json:"region" bson:"region" validate:"required" query:"region"
  string region = 5;
  //@inject_tag: json:"country" bson:"country" validate:"omitempty,alpha,len=2" query:"country"
  string country = 6;
  // @inject_tag: json:"days" bson:"days" validate:"required,numeric,gte=0" query:"days"
  int32 days = 7;
  // @inject_tag: json:"payment_stage" bson:"payment_stage" validate:"numeric,gte=1" query:"payment_stage"
  int32 payment_stage = 8;
  //@inject_tag: json:"mcc_code" bson:"mcc_code" validate:"required,numeric,len=4" query:"mcc_code"
  string mcc_code = 9;
}

message PaymentCostDeleteRequest {
  //@inject_tag: json:"id" bson:"_id" validate:"required,hexadecimal,len=24"
  string id = 1;
}

message MoneyBackCostMerchantList {
  //@inject_tag: json:"items"
  //
  // The merchant costs for money back operations.
  repeated MoneyBackCostMerchant items = 1;
}

message MoneyBackCostMerchantListRequest {
  //@inject_tag: json:"merchant_id" bson:"merchant_id" validate:"required,hexadecimal,len=24"
  string merchant_id = 1;
}

message AccountingEntrySource {
  //@inject_tag: faker:"objectIdString"
  string id = 1;
  string type = 2;
}

message AccountingEntry {
  //@inject_tag: faker:"objectIdString"
  string id = 1;
  string object = 2;
  string type = 3;
  AccountingEntrySource source = 4;
  //@inject_tag: faker:"objectIdString"
  string merchant_id = 5;
  double amount = 6; // in royalty_currency
  string currency = 7; // royalty_currency (merchant payout currency)
  string reason = 8;
  string status = 9;
  string country = 10;
  double original_amount = 11;
  string original_currency = 12;
  double local_amount = 13;
  string local_currency = 14;
  google.protobuf.Timestamp created_at = 15;
  google.protobuf.Timestamp available_on = 16;
  string operating_company_id = 17;
  // The transaction amount in royalty currency rounded to 2 digits after decimal point
  double amount_rounded = 18;
  // The transaction amount in currency of accounting entry creation rounded to 2 digits after decimal point
  double original_amount_rounded = 19;
  // The transaction amount in customer's region currency rounded to 2 digits after decimal point
  double local_amount_rounded = 20;
}

message RoyaltyReportTotals {
  //@inject_tag: bson:"transactions_count"
  //
  // The total transactions.
  int32 transactions_count = 2;
  //@inject_tag: bson:"fee_amount"
  //
  // The amount of fees.
  double fee_amount = 3;
  //@inject_tag: bson:"vat_amount"
  //
  // The amount of VAT.
  double vat_amount = 4;
  //@inject_tag: bson:"payout_amount"
  //
  // The payout amount.
  double payout_amount = 5;
  //@inject_tag: bson:"rolling_reserve_total_amount"
  //
  // The rolling reserve amount.
  double rolling_reserve_amount = 6;
  //@inject_tag: bson:"correction_total_amount"
  //
  // The corrections amount.
  double correction_amount = 7;
  //@inject_tag: json:"b2b_vat_rate" bson:"b2b_vat_rate" validate:"numeric,gte=0"
  //
  // Effective rate of b2b_vat.
  double b2b_vat_rate = 8;
  //@inject_tag: json:"b2b_vat_base" bson:"b2b_vat_base" validate:"numeric,gte=0"
  //
  // The b2b vat base.
  double b2b_vat_base = 9;
  //@inject_tag: json:"b2b_vat_amount" bson:"b2b_vat_amount" validate:"numeric,gte=0"
  //
  // The b2b vat amount.
  double b2b_vat_amount = 10;
  //@inject_tag: json:"final_payout_amount" bson:"final_payout_amount" validate:"numeric,gte=0"
  //
  // The final payout amount.
  double final_payout_amount = 11;
}

message RoyaltyReportProductSummaryItem {
  //@inject_tag: bson:"product" json:"product"
  //
  // The name of the product or project.
  string product = 1;
  //@inject_tag: bson:"region" json:"region"
  //
  // The country's name. Two-letter country code in ISO 3166-1, in uppercase (for instance US).
  string region = 2;
  //@inject_tag: bson:"total_transactions" json:"total_transactions"
  //
  // The total number of transactions for the current product or project in the current country (including sales and returns).
  int32 total_transactions = 3;
  //@inject_tag: bson:"sales_count" json:"sales_count"
  //
  // The number of sales for the current product or project in the current country.
  int32 sales_count = 4;
  //@inject_tag: bson:"gross_sales_amount" json:"gross_sales_amount"
  //
  // The gross amount of sales for current product or project in the current country.
  double gross_sales_amount = 5;
  //@inject_tag: bson:"returns_count" json:"returns_count"
  //
  // The number of returns for current product or project in the current country.
  int32 returns_count = 6;
  //@inject_tag: bson:"gross_returns_amount" json:"gross_returns_amount"
  //
  // The gross amount of returns for current product or project in the current country.
  double gross_returns_amount = 7;
  //@inject_tag: bson:"gross_total_amount" json:"gross_total_amount"
  //
  // The total gross amount (sales minus returns) for current product or project in the current country.
  double gross_total_amount = 8;
  //@inject_tag: bson:"total_fees" json:"total_fees"
  //
  // The amount of fees for current product or project in the current country.
  double total_fees = 9;
  //@inject_tag: bson:"total_vat" json:"total_vat"
  //
  // The amount of VAT for current product or project in the current country.
  double total_vat = 10;
  //@inject_tag: bson:"payout_amount" json:"payout_amount"
  //
  // The payout amount for current product or project in the current country.
  double payout_amount = 11;
}

message RoyaltyReportCorrectionItem {
  //@inject_tag: bson:"accounting_entry_id" json:"accounting_entry_id" faker:"objectIdString"
  //
  // The unique identifier for the linked accounting entry.
  string accounting_entry_id = 1;
  //@inject_tag: bson:"amount" json:"amount"
  //
  // The amount of the correction.
  double amount = 2;
  //@inject_tag: bson:"currency" json:"currency"
  //
  // The currency of the correction. Three-letter Currency Code ISO 4217, in uppercase.
  string currency = 3;
  //@inject_tag: bson:"reason" json:"reason"
  //
  // The correction reason.
  string reason = 4;
  //@inject_tag: bson:"entry_date" json:"entry_date"
  //
  // The date of the correction.
  google.protobuf.Timestamp entry_date = 5;
}

message RoyaltyReportSummary {
  //@inject_tag: bson:"products_items" json:"products_items"
  //
  // The summary for each product (project) and country.
  repeated RoyaltyReportProductSummaryItem products_items = 1;
  //@inject_tag: bson:"products_total" json:"products_total"
  //
  // The summary totals for all product (project) and country.
  RoyaltyReportProductSummaryItem products_total = 2;
  //@inject_tag: bson:"corrections" json:"corrections"
  //
  // The list of the applied corrections (if any).
  repeated RoyaltyReportCorrectionItem corrections = 3;
  //@inject_tag: bson:"rolling_reserves" json:"rolling_reserves"
  //
  // The list of the applied rolling reserves (if any).
  repeated RoyaltyReportCorrectionItem rolling_reserves = 4;
}

message RoyaltyReport {
  //@inject_tag: bson:"_id" json:"id" faker:"objectIdString"
  //
  // The unique identifier for the royalty report.
  string id = 1;
  //@inject_tag: bson:"merchant_id" json:"merchant_id" faker:"objectIdString"
  //
  // The unique identifier for the merchant.
  string merchant_id = 2;
  //@inject_tag: bson:"created_at" json:"created_at"
  //
  // The date of the royalty report creation.
  google.protobuf.Timestamp created_at = 3;
  //@inject_tag: bson:"updated_at" json:"updated_at"
  //
  // The date of the royalty report last update.
  google.protobuf.Timestamp updated_at = 4;
  //@inject_tag: bson:"payout_date" json:"payout_date"
  //
  // The date when the report was paid.
  google.protobuf.Timestamp payout_date = 5;
  //@inject_tag: bson:"status" json:"status"
  //
  // The document status. Available values: skip, pending, in_progress, paid, canceled, failed.
  string status = 6;
  //@inject_tag: bson:"period_from" json:"period_from"
  //
  // The start date of the report time period.
  google.protobuf.Timestamp period_from = 7;
  //@inject_tag: bson:"period_to" json:"period_to"
  //
  // The end date of the report time period.
  google.protobuf.Timestamp period_to = 8;
  //@inject_tag: bson:"accept_expire_at" json:"accept_expire_at"
  //
  // The date when the royalty report will be auto-accepted (if the merchant hadn't accept it yet or started a dispute).
  google.protobuf.Timestamp accept_expire_at = 9;
  //@inject_tag: bson:"merchant_id" json:"accepted_at"
  //
  // The date when the royalty report was accepted.
  google.protobuf.Timestamp accepted_at = 10;
  //@inject_tag: bson:"totals" json:"totals"
  //
  // The totals section of the royalty report.
  RoyaltyReportTotals totals = 11;
  //@inject_tag: bson:"currency" json:"currency"
  //
  // The currency of the royalty report. Three-letter Currency Code ISO 4217, in uppercase.
  string currency = 12;
  //@inject_tag: bson:"summary" json:"summary"
  //
  // The summary section of the royalty report.
  RoyaltyReportSummary summary = 13;
  //@inject_tag: bson:"dispute_reason" json:"dispute_reason"
  //
  // The dispute reason (if any).
  string dispute_reason = 14;
  //@inject_tag: bson:"dispute_started_at" json:"dispute_closed_at"
  //
  // The start date of the dispute (if any).
  google.protobuf.Timestamp dispute_started_at = 15;
  //@inject_tag: bson:"dispute_closed_at" json:"dispute_closed_at"
  //
  // The resolution date of the dispute (if any).
  google.protobuf.Timestamp dispute_closed_at = 16;
  //@inject_tag: bson:"is_auto_accepted" json:"is_auto_accepted"
  //
  // Has a true value if the royalty report is auto-accepted.
  bool is_auto_accepted = 17;
  //@inject_tag: bson:"payout_document_id" json:"payout_document_id"
  //
  // The unique identifier for the payout document.
  string payout_document_id = 18;
  // @inject_tag: json:"operating_company_id" bson:"operating_company_id"
  //
  // The unique identifier for the operating company.
  string operating_company_id = 19;
  // @inject_tag: json:"string_period_from" bson:"string_period_from"
  //
  // Period from in string format.
  string string_period_from = 20;
  // @inject_tag: json:"string_period_to" bson:"string_period_to"
  //
  // Period to in string format.
  string string_period_to = 21;
  //@inject_tag: json:"merchant_name"
  //
  // The merchant name who owns the report.
  string merchant_name = 22;
}

message RoyaltyReportChanges {
  //@inject_tag: faker:"objectIdString"
  string id = 1;
  //@inject_tag: faker:"objectIdString"
  string royalty_report_id = 2;
  string source = 3;
  string ip = 4;
  string hash = 7;
  google.protobuf.Timestamp created_at = 8;
}

message VatTransaction {
  //@inject_tag: json:"id" bson:"_id" validate:"omitempty,hexadecimal,len=24"
  string id = 1;
  //@inject_tag: json:"order_id" bson:"order_id" validate:"required,hexadecimal,len=24"
  string order_id = 2;
  //@inject_tag: json:"transaction_id" bson:"transaction_id" validate:"required"
  string transaction_id = 3;
  //@inject_tag: json:"transaction_type" bson:"transaction_type" validate:"required,oneof=payment refund chargeback"
  string transaction_type = 4;
  // @inject_tag: json:"transaction_amount" bson:"transaction_amount" validate:"numeric,gte=0"
  double transaction_amount = 5;
  //@inject_tag: json:"transaction_currency" bson:"transaction_currency" validate:"required,alpha,len=3"
  string transaction_currency = 6;
  // @inject_tag: json:"vat_amount" bson:"vat_amount" validate:"numeric,gte=0"
  double vat_amount = 7;
  //@inject_tag: json:"vat_currency" bson:"vat_currency" validate:"required,alpha,len=3"
  string vat_currency = 8;
  // @inject_tag: json:"fees_amount" bson:"fees_amount" validate:"numeric,gte=0"
  double fees_amount = 9;
  //@inject_tag: json:"fees_currency" bson:"fees_currency" validate:"required,alpha,len=3"
  string fees_currency = 10;
  // @inject_tag: json:"local_transaction_amount" bson:"local_transaction_amount" validate:"omitempty,numeric,gte=0"
  double local_transaction_amount = 11;
  // @inject_tag: json:"local_vat_amount" bson:"local_vat_amount" validate:"omitempty,numeric,gte=0"
  double local_vat_amount = 12;
  // @inject_tag: json:"local_fees_amount" bson:"local_fees_amount" validate:"omitempty,numeric,gte=0"
  double local_fees_amount = 13;
  //@inject_tag: json:"local_currency" bson:"local_currency" validate:"required,alpha,len=3"
  string local_currency = 14;
  //@inject_tag: json:"local_amounts_approximate" bson:"local_amounts_alocal_amounts_approximatepproximated" validate:"required,alpha,len=3"
  bool local_amounts_approximate = 15;
  //@inject_tag: json:"billing_address_criteria" bson:"billing_address_criteria" validate:"required,oneof=ip bin language customer form"
  string billing_address_criteria = 16;
  //@inject_tag: json:"billing_address" bson:"billing_address" validate:"required,dive"
  OrderBillingAddress billing_address = 17;
  //@inject_tag: json:"user_id" bson:"user_id" validate:"omitempty,hexadecimal,len=24"
  string user_id = 18;
  //@inject_tag: json:"payment_method" bson:"payment_method" validate:"required"
  string payment_method = 19;
  //@inject_tag: json:"is_deduction" bson:"is_deduction"
  bool is_deduction = 20;
  //@inject_tag: json:"country" bson:"country" validate:"required,alpha,len=2"
  string country = 21;
  //@inject_tag: json:"date_time" bson:"date_time"
  google.protobuf.Timestamp date_time = 22;
}

message VatReport {
  //@inject_tag: json:"id" bson:"_id" validate:"omitempty,hexadecimal,len=24" faker:"objectIdString"
  //
  // The unique identifier for the VAT report.
  string id = 1;
  //@inject_tag: json:"country" bson:"country" validate:"required,alpha,len=2"
  //
  // The country's name. Two-letter country code in ISO 3166-1, in uppercase (for instance US).
  string country = 2;
  // @inject_tag: json:"vat_rate" bson:"vat_rate" validate:"numeric,gte=0,lte=1"
  //
  // VAT rate.
  double vat_rate = 3;
  //@inject_tag: json:"currency" bson:"currency" validate:"required,alpha,len=3"
  //
  // The rate currency. Three-letter Currency Code ISO 4217, in uppercase.
  string currency = 4;
  // @inject_tag: json:"transactions_count" bson:"transactions_count" validate:"numeric,gte=0"
  //
  // The total transactions.
  int32 transactions_count = 5;
  // @inject_tag: json:"gross_revenue" bson:"gross_revenue" validate:"numeric,gte=0"
  //
  // The gross revenue.
  double gross_revenue = 6;
  // @inject_tag: json:"vat_amount" bson:"vat_amount" validate:"numeric,gte=0"
  //
  // The amount of VAT.
  double vat_amount = 7;
  // @inject_tag: json:"fees_amount" bson:"fees_amount" validate:"numeric,gte=0"
  //
  // The total amount of fees.
  double fees_amount = 8;
  // @inject_tag: json:"deduction_amount" bson:"deduction_amount" validate:"numeric,gte=0"
  //
  // The deduction amount.
  double deduction_amount = 9;
  // @inject_tag: json:"correction_amount" bson:"correction_amount" validate:"numeric,lte=0"
  //
  // The correction amount.
  double correction_amount = 10;
  //@inject_tag: json:"status" bson:"status" validate:"required,alpha,oneof=threshold expired pending need_to_pay paid overdue canceled"
  //
  // The VAT report status. Available values: threshold, expired, pending, need_to_pay, paid, overdue, canceled.
  string status = 11;
  // @inject_tag: json:"country_annual_turnover" bson:"country_annual_turnover" validate:"numeric,gte=0"
  //
  // The annual turnover for the country.
  double country_annual_turnover = 12;
  // @inject_tag: json:"world_annual_turnover" bson:"world_annual_turnover" validate:"numeric,gte=0"
  //
  // The world annual turnover.
  double world_annual_turnover = 13;
  //@inject_tag: json:"amounts_approximate" bson:"amounts_approximate"
  //
  // Has a true value if the amounts are non-final due to the currency exchange rates delay.
  bool amounts_approximate = 14;
  //@inject_tag: json:"date_from" bson:"date_from"
  //
  // The start date of the period for the report.
  google.protobuf.Timestamp date_from = 15;
  //@inject_tag: json:"date_to" bson:"date_to"
  //
  // The end date of the period for the report.
  google.protobuf.Timestamp date_to = 16;
  //@inject_tag: json:"pay_until_date" bson:"pay_until_date"
  //
  // The deadline date of the VAT payment.
  google.protobuf.Timestamp pay_until_date = 17;
  //@inject_tag: json:"created_at" bson:"created_at"
  //
  // The date of the report creation.
  google.protobuf.Timestamp created_at = 18;
  //@inject_tag: json:"updated_at" bson:"updated_at"
  //
  // The date of the report last update.
  google.protobuf.Timestamp updated_at = 19;
  //@inject_tag: json:"paid_at" bson:"paid_at"
  //
  // The payment date.
  google.protobuf.Timestamp paid_at = 20;
  // @inject_tag: json:"operating_company_id" bson:"operating_company_id" faker:"objectIdString"
  //
  // The unique identifier for the operating company.
  string operating_company_id = 21;
}

message AnnualTurnover {
  //@inject_tag: json:"year" bson:"year" validate:"required,numeric,gte=2019"
  int32 year = 1;
  //@inject_tag: json:"country" bson:"country" validate:"omitempty,alpha,len=2"
  string country = 2;
  // @inject_tag: json:"amount" bson:"amount" validate:"numeric,gte=0"
  double amount = 3;
  //@inject_tag: json:"currency" bson:"currency" validate:"required,alpha,len=3"
  string currency = 4;
  // @inject_tag: json:"operating_company_id" bson:"operating_company_id"
  string operating_company_id = 5;
}

message OrderViewMoney {
  //@inject_tag: json:"-" bson:"amount"
  //
  // The amount value.
  double amount = 1;
  //@inject_tag: json:"currency" bson:"currency"
  //
  // The amount currency. Three-letter currency code in ISO 4217, in uppercase.
  string currency = 2;
  //@inject_tag: json:"amount" bson:"amount_rounded"
  //
  // The amount value.
  double amount_rounded = 3;
}

message OrderViewMerchantInfo {
  //@inject_tag: json:"company_name" bson:"company_name"
  //
  // The merchant's company name.
  string company_name = 1;
  //@inject_tag: json:"agreement_number" bson:"agreement_number"
  //
  // The merchant's license agreement number.
  string agreement_number = 2;
}

message OrderViewReportSummary {
  // @inject_tag: json:"status" bson:"status"
  //
  // The status for reports
  string status = 1;

  // @inject_tag: json:"charge" bson:"charge"
  //
  // Transaction charge for reports
  OrderViewMoney charge = 2;

  // @inject_tag: json:"gross" bson:"gross"
  //
  // Transaction gross for reports
  OrderViewMoney gross = 3;

  // @inject_tag: json:"vat" bson:"vat"
  //
  // Transaction vat for reports
  OrderViewMoney vat = 4;

  // @inject_tag: json:"fees" bson:"fees"
  //
  // Transaction fees for reports
  OrderViewMoney fees = 5;

  // @inject_tag: json:"revenue" bson:"revenue"
  //
  // Transaction revenue for reports
  OrderViewMoney revenue = 6;
}

message OrderViewPublic {
  // @inject_tag: json:"-" bson:"_id" faker:"objectIdString"
  string id = 1; // unique internal order identifier in Protocol One
  // @inject_tag: json:"uuid" bson:"uuid"
  //
  // The unique identifier for the order.
  string uuid = 2;
  // @inject_tag: json:"total_payment_amount" bson:"total_payment_amount"
  //
  // The total payment amount.
  double total_payment_amount = 3;
  // @inject_tag: json:"currency" bson:"currency"
  //
  // The currency of the payment. Three-letter currency code ISO 4217, in uppercase.
  string currency = 4;
  // @inject_tag: json:"project" bson:"project"
  //
  // The project data.
  ProjectOrder project = 5;
  // @inject_tag: bson:"created_at" bson:"created_at"
  //
  // The date in ISO 8601 of the order creation.
  google.protobuf.Timestamp created_at = 6;
  // @inject_tag: json:"transaction" bson:"pm_order_id"
  //
  // The unique identifier for the order in the payment system.
  string transaction = 7;
  // @inject_tag: json:"payment_method" bson:"payment_method"
  //
  // The payment method data.
  PaymentMethodOrder payment_method = 8;
  // @inject_tag: json:"country_code" bson:"country_code"
  //
  // Two-letter country code in ISO 3166-1, in uppercase.
  string country_code = 9;
  // @inject_tag: json:"merchant_id" bson:"merchant_id" faker:"objectIdString"
  //
  // The unique identifier for the merchant.
  string merchant_id = 10;
  // @inject_tag: json:"locale" bson:"locale"
  //
  // The customer’s locale name. Four-letter language code in ISO 639, for instance en-US.
  string locale = 11;
  // @inject_tag: json:"status" bson:"status"
  //
  // The current status of the order. Available values: created, processed, canceled, rejected, refunded, chargeback, pending.
  string status = 12;
  // @inject_tag: json:"transaction_date" bson:"pm_order_close_date"
  //
  // The date in ISO 8601 of the processed transaction.
  google.protobuf.Timestamp transaction_date = 13;
  // @inject_tag: json:"user" bson:"user"
  //
  // The customer data.
  OrderUser user = 14;
  // @inject_tag: json:"billing_address" bson:"billing_address"
  //
  // The customer's billing address.
  OrderBillingAddress billing_address = 15;
  // @inject_tag: json:"type" bson:"type"
  //
  // The order type. It depends on your sales option (Game Keys, Virtual Items, Virtual Currency, the simple checkout). Available values: key, product, virtual_currency, simple.
  string type = 16;
  // @inject_tag: json:"is_vat_deduction" bson:"is_vat_deduction"
  //
  // Has a true value if VAT can be deducted.
  bool is_vat_deduction = 17;
  // @inject_tag: json:"gross_revenue" bson:"gross_revenue"
  //
  // The gross revenue.
  OrderViewMoney gross_revenue = 18;
  // @inject_tag: json:"tax_fee" bson:"tax_fee"
  //
  // The tax fee.
  OrderViewMoney tax_fee = 19;
  // @inject_tag: json:"tax_fee_currency_exchange_fee" bson:"tax_fee_currency_exchange_fee"
  //
  // The tax fee for the currency exchange.
  OrderViewMoney tax_fee_currency_exchange_fee = 20;
  // @inject_tag: json:"tax_fee_total" bson:"tax_fee_total"
  //
  // The total tax fee.
  OrderViewMoney tax_fee_total = 21;
  // @inject_tag: json:"method_fee_total" bson:"method_fee_total"
  //
  // The method fee total.
  OrderViewMoney method_fee_total = 22;
  // @inject_tag: json:"method_fee_tariff" bson:"method_fee_tariff"
  //
  // The tariff for the method fee.
  OrderViewMoney method_fee_tariff = 23;
  // @inject_tag: json:"method_fixed_fee_tariff" bson:"method_fixed_fee_tariff"
  //
  // The tariff of the fixed method fee.
  OrderViewMoney method_fixed_fee_tariff = 24;
  // @inject_tag: json:"paysuper_fixed_fee" bson:"paysuper_fixed_fee"
  //
  // The PaySuper fixed fee.
  OrderViewMoney paysuper_fixed_fee = 25;
  // @inject_tag: json:"fees_total" bson:"fees_total"
  //
  // The total fees.
  OrderViewMoney fees_total = 26;
  // @inject_tag: json:"fees_total_local" bson:"fees_total_local"
  //
  // The total fees in the customer's region currency.
  OrderViewMoney fees_total_local = 27;
  // @inject_tag: json:"net_revenue" bson:"net_revenue"
  //
  // The net revenue.
  OrderViewMoney net_revenue = 28;
  // @inject_tag: json:"refund_gross_revenue" bson:"refund_gross_revenue"
  //
  // The gross revenue from the refund.
  OrderViewMoney refund_gross_revenue = 29;
  // @inject_tag: json:"method_refund_fee_tariff" bson:"method_refund_fee_tariff"
  //
  // The fee tariff for the method refund.
  OrderViewMoney method_refund_fee_tariff = 30;
  // @inject_tag: json:"merchant_refund_fixed_fee_tariff" bson:"merchant_refund_fixed_fee_tariff"
  //
  // The fixed fee tariff for the method refund.
  OrderViewMoney merchant_refund_fixed_fee_tariff = 31;
  // @inject_tag: json:"refund_tax_fee" bson:"refund_tax_fee"
  //
  // The tax fee of the refund.
  OrderViewMoney refund_tax_fee = 32;
  // @inject_tag: json:"refund_tax_fee_currency_exchange_fee" bson:"refund_tax_fee_currency_exchange_fee"
  //
  // The refund tax fee for the currency exchange fee.
  OrderViewMoney refund_tax_fee_currency_exchange_fee = 33;
  // @inject_tag: json:"paysuper_refund_tax_fee_currency_exchange_fee" bson:"paysuper_refund_tax_fee_currency_exchange_fee"
  //
  // The PaySuper refund tax fee for the currency exchange fee.
  OrderViewMoney paysuper_refund_tax_fee_currency_exchange_fee = 34;
  // @inject_tag: json:"refund_reverse_revenue" bson:"refund_reverse_revenue"
  //
  // The refund reverse revenue.
  OrderViewMoney refund_reverse_revenue = 35;
  // @inject_tag: json:"refund_fees_total" bson:"refund_fees_total"
  //
  // The refund total fees.
  OrderViewMoney refund_fees_total = 36;
  // @inject_tag: json:"refund_fees_total_local" bson:"refund_fees_total_local"
  //
  // The total fees of the refund in the customer's region currency.
  OrderViewMoney refund_fees_total_local = 37;
  // The order issuer data.
  OrderIssuer issuer = 38;
  // @inject_tag: json:"items" bson:"items"
  //
  // The list of the products.
  repeated OrderItem items = 39;
  //@inject_tag: json:"merchant_payout_currency" bson:"merchant_payout_currency"
  //
  // The merchant's payout currency.
  string merchant_payout_currency = 40;
  //@inject_tag: json:"parent_order" bson:"parent_order"
  //
  // The parent order data (for refunds only).
  ParentOrder parent_order = 41;
  //@inject_tag: json:"refund" bson:"refund"
  //
  // The notification of the refund. Has a null value if the order is not refunded.
  OrderNotificationRefund refund = 42;
  //@inject_tag: json:"cancellation" bson:"cancellation"
  //
  // The notification of the cancellation. Has a null value if the order is not cancelled.
  OrderNotificationCancellation cancellation = 43;
  // @inject_tag: json:"operating_company_id" bson:"operating_company_id"
  //
  // The unique identifier for the merchant's operating company.
  string operating_company_id = 44;
  // @inject_tag: json:"refund_allowed" bson:"refund_allowed"
  //
  // Has a true value if the refund is allowed.
  bool refund_allowed = 45;
  // @inject_tag: json:"order_charge" bson:"order_charge"
  //
  // The order charge.
  OrderViewMoney order_charge = 46;
  // @inject_tag: json:"payment_ip_country"
  //
  // The customer's country code by the customer's IP address.
  string payment_ip_country = 47;
  // @inject_tag: json:"is_ip_country_mismatch_bin" bson:"is_ip_country_mismatch_bin"
  //
  // Has a true value if the country from the card's BIN has not been matched to the country defined by the IP address (for card payments only).
  bool is_ip_country_mismatch_bin = 48;
  // @inject_tag: json:"billing_country_changed_by_user" bson:"billing_country_changed_by_user"
  //
  // Has a true value if the country was selected by the customer.
  bool billing_country_changed_by_user = 49;
  // @inject_tag: json:"vat_payer" bson:"vat_payer" validate:"oneof=buyer seller nobody"
  //
  // The responsible for VAT. Available values: buyer (VAT is added to the order charge), seller (VAT is included in the order charge), nobody (VAT exempt).
  string vat_payer = 50;
  // @inject_tag: json:"is_production" bson:"is_production"
  //
  // Has a true value for a production payment and false for a test payment that goes through a test sandbox.
  bool is_production = 51;
  // @inject_tag: json:"merchant_info" bson:"merchant_info"
  //
  // The merchant's company data.
  OrderViewMerchantInfo merchant_info = 52;
  // @inject_tag: json:"-"
  //
  // DEPRECATED! Use the recurring_subscription_id property
  // Exists recurring for order
  bool recurring = 53;
  // @inject_tag: json:"-"
  //
  // DEPRECATED! Use the recurring_subscription_id property
  // Recurring identity for order
  string recurring_id = 54;

  // @inject_tag: json:"payment_gross_revenue" bson:"payment_gross_revenue"
  //
  // The gross revenue from the payment.
  OrderViewMoney payment_gross_revenue = 55;

  // @inject_tag: json:"payment_refund_gross_revenue" bson:"payment_refund_gross_revenue"
  //
  // The gross revenue of the payment refund.
  OrderViewMoney payment_refund_gross_revenue = 56;

  // @inject_tag: json:"refund_tax_fee_total" bson:"refund_tax_fee_total"
  //
  // The total refund tax fee.
  OrderViewMoney refund_tax_fee_total = 57;

  // @inject_tag: json:"report_summary" bson:"report_summary"
  //
  // Transaction summary for reports
  OrderViewReportSummary report_summary = 58;
  // @inject_tag: json:"recurring_subscription_id"
  //
  // Identity of recurring subscription for order
  string recurring_subscription_id = 59;
  // @inject_tag: json:"recurring_plan_id"
  //
  // Identity of recurring plan for order
  string recurring_plan_id = 60;
}

message OrderViewPrivate {
  // @inject_tag: json:"-" bson:"_id" faker:"objectIdString"
  string id = 1; // unique internal order identifier in Protocol One
  // @inject_tag: json:"uuid" bson:"uuid"
  //
  // The public unique identifier for the order in PaySuper.
  string uuid = 2;
  // @inject_tag: json:"total_payment_amount" bson:"total_payment_amount"
  //
  // The total payment amount including all commissions.
  double total_payment_amount = 3;
  // @inject_tag: json:"currency" bson:"currency"
  //
  // The currency of the order. Three-letter Currency Code ISO 4217, in uppercase.
  string currency = 4;
  // @inject_tag: json:"project" bson:"project"
  //
  // The project data.
  ProjectOrder project = 5;
  // @inject_tag: json:"created_at" bson:"created_at"
  //
  // The date of the order creation.
  google.protobuf.Timestamp created_at = 6;
  // @inject_tag: json:"transaction" bson:"pm_order_id"
  //
  // The unique identifier for the order in the payment system.
  string transaction = 7;
  // @inject_tag: json:"payment_method" bson:"payment_method"
  //
  // The payment method data.
  PaymentMethodOrder payment_method = 8;
  // @inject_tag: json:"country_code" bson:"country_code"
  //
  // The customer's country code. Two-letter country code in ISO 3166-1, in uppercase.
  string country_code = 9;
  // @inject_tag: json:"merchant_id" bson:"merchant_id" faker:"objectIdString"
  //
  // The unique identifier for the merchant.
  string merchant_id = 10;
  // @inject_tag: json:"locale" bson:"locale"
  //
  // The customer's locale name. The language code in ISO 639-1 (for instance en-US).
  string locale = 11;
  // @inject_tag: json:"status" bson:"status"
  //
  // The status of the order. Available values: created, processed, canceled, rejected, refunded, chargeback, pending.
  string status = 12;
  // @inject_tag: json:"transaction_date" bson:"pm_order_close_date"
  //
  // The date in ISO 8601 of the processed transaction.
  google.protobuf.Timestamp transaction_date = 13;
  // @inject_tag: json:"user" bson:"user"
  //
  // The customer data.
  OrderUser user = 14;
  // @inject_tag: json:"billing_address" bson:"billing_address"
  //
  // The customer's billing address entered in payment form.
  OrderBillingAddress billing_address = 15;
  // @inject_tag: json:"type" bson:"type"
  //
  // The order type. It depends on your sales option (Game Keys, Virtual Items, Virtual Currency the simple checkout). For products created as Game Keys use the key type, as Virtual Items - the product type, as Virtual Currency - the virtual_currency type, for a simple checkout - the simple type. Enum values: key, product, virtual_currency, simple.
  string type = 16;
  // @inject_tag: json:"is_vat_deduction" bson:"is_vat_deduction"
  //
  // Has a true value if VAT can be deducted.
  bool is_vat_deduction = 17;
  // @inject_tag: json:"payment_gross_revenue_local" bson:"payment_gross_revenue_local"
  //
  // The gross revenue from the payment in the customer's region currency.
  OrderViewMoney payment_gross_revenue_local = 18;
  // @inject_tag: json:"payment_gross_revenue_origin" bson:"payment_gross_revenue_origin"
  //
  // The origin gross revenue from the payment.
  OrderViewMoney payment_gross_revenue_origin = 19;
  // @inject_tag: json:"payment_gross_revenue" bson:"payment_gross_revenue"
  //
  // The gross revenue from the payment.
  OrderViewMoney payment_gross_revenue = 20;
  // @inject_tag: json:"payment_tax_fee" bson:"payment_tax_fee"
  //
  // The tax fee of the payment.
  OrderViewMoney payment_tax_fee = 21;
  // @inject_tag: json:"payment_tax_fee_local" bson:"payment_tax_fee_local"
  //
  // The tax fee of the payment in the customer's region currency.
  OrderViewMoney payment_tax_fee_local = 22;
  // @inject_tag: json:"payment_tax_fee_origin" bson:"payment_tax_fee_origin"
  //
  // The origin tax fee of the payment.
  OrderViewMoney payment_tax_fee_origin = 23;
  // @inject_tag: json:"payment_tax_fee_currency_exchange_fee" bson:"payment_tax_fee_currency_exchange_fee"
  //
  // The tax fee of the payment for the currency exchange.
  OrderViewMoney payment_tax_fee_currency_exchange_fee = 24;
  // @inject_tag: json:"payment_tax_fee_total" bson:"payment_tax_fee_total"
  //
  // The tax fee total of the payment.
  OrderViewMoney payment_tax_fee_total = 25;
  // @inject_tag: json:"payment_gross_revenue_fx" bson:"payment_gross_revenue_fx"
  //
  // The gross revenue from the foreign exchange of the payment.
  OrderViewMoney payment_gross_revenue_fx = 26;
  // @inject_tag: json:"payment_gross_revenue_fx_tax_fee" bson:"payment_gross_revenue_fx_tax_fee"
  //
  // The gross revenue from the foreign exchange of the payment tax fee.
  OrderViewMoney payment_gross_revenue_fx_tax_fee = 27;
  // @inject_tag: json:"payment_gross_revenue_fx_profit" bson:"payment_gross_revenue_fx_profit"
  //
  // The gross revenue from the foreign exchange of the profit.
  OrderViewMoney payment_gross_revenue_fx_profit = 28;
  // @inject_tag: json:"gross_revenue" bson:"gross_revenue"
  //
  // The gross revenue.
  OrderViewMoney gross_revenue = 29;
  // @inject_tag: json:"tax_fee" bson:"tax_fee"
  //
  // The tax fee.
  OrderViewMoney tax_fee = 30;
  // @inject_tag: json:"tax_fee_currency_exchange_fee" bson:"tax_fee_currency_exchange_fee"
  //
  // The tax fee for the currency exchange.
  OrderViewMoney tax_fee_currency_exchange_fee = 31;
  // @inject_tag: json:"tax_fee_total" bson:"tax_fee_total"
  //
  // The total tax fee.
  OrderViewMoney tax_fee_total = 32;
  // @inject_tag: json:"method_fee_total" bson:"method_fee_total"
  //
  // The method fee total.
  OrderViewMoney method_fee_total = 33;
  // @inject_tag: json:"method_fee_tariff" bson:"method_fee_tariff"
  //
  // The tariff of the method fee.
  OrderViewMoney method_fee_tariff = 34;
  // @inject_tag: json:"paysuper_method_fee_tariff_self_cost" bson:"paysuper_method_fee_tariff_self_cost"
  //
  // The self-cost tariff of the PaySuper method fee.
  OrderViewMoney paysuper_method_fee_tariff_self_cost = 35;
  // @inject_tag: json:"paysuper_method_fee_profit" bson:"paysuper_method_fee_profit"
  //
  // The profit of the PaySuper method fee.
  OrderViewMoney paysuper_method_fee_profit = 36;
  // @inject_tag: json:"method_fixed_fee_tariff" bson:"method_fixed_fee_tariff"
  //
  // The tariff of the fixed method fee.
  OrderViewMoney method_fixed_fee_tariff = 37;
  // @inject_tag: json:"paysuper_method_fixed_fee_tariff_fx_profit" bson:"paysuper_method_fixed_fee_tariff_fx_profit"
  //
  // The PaySuper fixed method fee tariff for the foreign exchange of the profit.
  OrderViewMoney paysuper_method_fixed_fee_tariff_fx_profit = 38;
  // @inject_tag: json:"paysuper_method_fixed_fee_tariff_self_cost" bson:"paysuper_method_fixed_fee_tariff_self_cost"
  //
  // The self-cost tariff of the PaySuper fixed method fee.
  OrderViewMoney paysuper_method_fixed_fee_tariff_self_cost = 39;
  // @inject_tag: json:"paysuper_method_fixed_fee_tariff_total_profit" bson:"paysuper_method_fixed_fee_tariff_total_profit"
  //
  // The total profit of the PaySuper fixed method fee tariff.
  OrderViewMoney paysuper_method_fixed_fee_tariff_total_profit = 40;
  // @inject_tag: json:"paysuper_fixed_fee" bson:"paysuper_fixed_fee"
  //
  // The PaySuper fixed fee.
  OrderViewMoney paysuper_fixed_fee = 41;
  // @inject_tag: json:"paysuper_fixed_fee_fx_profit" bson:"paysuper_fixed_fee_fx_profit"
  //
  // The FX profit of the PaySuper fixed fee.
  OrderViewMoney paysuper_fixed_fee_fx_profit = 42;
  // @inject_tag: json:"fees_total" bson:"fees_total"
  //
  // The total fees.
  OrderViewMoney fees_total = 43;
  // @inject_tag: json:"fees_total_local" bson:"fees_total_local"
  //
  // The total fees in the customer's region currency.
  OrderViewMoney fees_total_local = 44;
  // @inject_tag: json:"net_revenue" bson:"net_revenue"
  //
  // The net revenue.
  OrderViewMoney net_revenue = 45;
  // @inject_tag: json:"paysuper_method_total_profit" bson:"paysuper_method_total_profit"
  //
  // The total profit of the PaySuper method.
  OrderViewMoney paysuper_method_total_profit = 46;
  // @inject_tag: json:"paysuper_total_profit" bson:"paysuper_total_profit"
  //
  // The PaySuper total profit.
  OrderViewMoney paysuper_total_profit = 47;
  // @inject_tag: json:"payment_refund_gross_revenue_local" bson:"payment_refund_gross_revenue_local"
  //
  // The gross revenue of the payment refund in the customer's region currency.
  OrderViewMoney payment_refund_gross_revenue_local = 48;
  // @inject_tag: json:"payment_refund_gross_revenue_origin" bson:"payment_refund_gross_revenue_origin"
  //
  // The origin gross revenue of the payment refund.
  OrderViewMoney payment_refund_gross_revenue_origin = 49;
  // @inject_tag: json:"payment_refund_gross_revenue" bson:"payment_refund_gross_revenue"
  //
  // The gross revenue of the payment refund.
  OrderViewMoney payment_refund_gross_revenue = 50;
  // @inject_tag: json:"payment_refund_tax_fee" bson:"payment_refund_tax_fee"
  //
  // The tax fee of the payment refund.
  OrderViewMoney payment_refund_tax_fee = 51;
  // @inject_tag: json:"payment_refund_tax_fee_local" bson:"payment_refund_tax_fee_local"
  //
  // The tax fee of the payment refund in the customer's region currency.
  OrderViewMoney payment_refund_tax_fee_local = 52;
  // @inject_tag: json:"payment_refund_tax_fee_origin" bson:"payment_refund_tax_fee_origin"
  //
  // The origin tax fee of the payment refund.
  OrderViewMoney payment_refund_tax_fee_origin = 53;
  // @inject_tag: json:"payment_refund_fee_tariff" bson:"payment_refund_fee_tariff"
  //
  // The fee tariff of the payment refund.
  OrderViewMoney payment_refund_fee_tariff = 54;
  // @inject_tag: json:"method_refund_fixed_fee_tariff" bson:"method_refund_fixed_fee_tariff"
  //
  // The fixed fee tariff of the method refund.
  OrderViewMoney method_refund_fixed_fee_tariff = 55;
  // @inject_tag: json:"refund_gross_revenue" bson:"refund_gross_revenue"
  //
  // The gross revenue from the refund.
  OrderViewMoney refund_gross_revenue = 56;
  // @inject_tag: json:"refund_gross_revenue_fx" bson:"refund_gross_revenue_fx"
  //
  // The gross revenue from the foreign exchange of the refund.
  OrderViewMoney refund_gross_revenue_fx = 57;
  // @inject_tag: json:"method_refund_fee_tariff" bson:"method_refund_fee_tariff"
  //
  // The fee tariff for the method refund.
  OrderViewMoney method_refund_fee_tariff = 58;
  // @inject_tag: json:"paysuper_method_refund_fee_tariff_profit" bson:"paysuper_method_refund_fee_tariff_profit"
  //
  // The PaySuper method refund fee tariff profit.
  OrderViewMoney paysuper_method_refund_fee_tariff_profit = 59;
  // @inject_tag: json:"paysuper_method_refund_fixed_fee_tariff_self_cost" bson:"paysuper_method_refund_fixed_fee_tariff_self_cost"
  //
  // The PaySuper method refund fixed fee tariff self-cost.
  OrderViewMoney paysuper_method_refund_fixed_fee_tariff_self_cost = 60;
  // @inject_tag: json:"merchant_refund_fixed_fee_tariff" bson:"merchant_refund_fixed_fee_tariff"
  //
  // The merchant refund fixed fee tariff.
  OrderViewMoney merchant_refund_fixed_fee_tariff = 61;
  // @inject_tag: json:"paysuper_method_refund_fixed_fee_tariff_profit" bson:"paysuper_method_refund_fixed_fee_tariff_profit"
  //
  // The PaySuper method refund fixed fee tariff profit.
  OrderViewMoney paysuper_method_refund_fixed_fee_tariff_profit = 62;
  // @inject_tag: json:"refund_tax_fee" bson:"refund_tax_fee"
  //
  // The refund tax fee.
  OrderViewMoney refund_tax_fee = 63;
  // @inject_tag: json:"refund_tax_fee_currency_exchange_fee" bson:"refund_tax_fee_currency_exchange_fee"
  //
  // The refund tax fee for the currency exchange fee.
  OrderViewMoney refund_tax_fee_currency_exchange_fee = 64;
  // @inject_tag: json:"paysuper_refund_tax_fee_currency_exchange_fee" bson:"paysuper_refund_tax_fee_currency_exchange_fee"
  //
  // The PaySuper refund tax fee for the currency exchange fee.
  OrderViewMoney paysuper_refund_tax_fee_currency_exchange_fee = 65;
  // @inject_tag: json:"refund_tax_fee_total" bson:"refund_tax_fee_total"
  //
  // The total refund tax fee.
  OrderViewMoney refund_tax_fee_total = 66;
  // @inject_tag: json:"refund_reverse_revenue" bson:"refund_reverse_revenue"
  //
  // The refund reverse revenue.
  OrderViewMoney refund_reverse_revenue = 67;
  // @inject_tag: json:"refund_fees_total" bson:"refund_fees_total"
  //
  // The refund total fees.
  OrderViewMoney refund_fees_total = 68;
  // @inject_tag: json:"refund_fees_total_local" bson:"refund_fees_total_local"
  //
  // The total fees in the customer's region currency.
  OrderViewMoney refund_fees_total_local = 69;
  // @inject_tag: json:"paysuper_refund_total_profit" bson:"paysuper_refund_total_profit"
  //
  // The PaySuper refund total profit.
  OrderViewMoney paysuper_refund_total_profit = 70;
  //@inject_tag: json:"issuer" bson:"issuer"
  //
  // The order issuer data.
  OrderIssuer issuer = 71;
  // @inject_tag: json:"items" bson:"items"
  //
  // The list of products in the order.
  repeated OrderItem items = 72;
  //@inject_tag: json:"merchant_payout_currency" bson:"merchant_payout_currency"
  //
  // The merchant's payout currency.
  string merchant_payout_currency = 73;
  //@inject_tag: json:"parent_order" bson:"parent_order"
  //
  // The parent order data (for refunds only).
  ParentOrder parent_order = 74;
  //@inject_tag: json:"refund" bson:"refund"
  //
  // The notification of refund. Has a null value if the order is not refunded.
  OrderNotificationRefund refund = 75;
  //@inject_tag: json:"cancellation" bson:"cancellation"
  //
  // The notification of the cancellation. Has a null value if the order is not canceled.
  OrderNotificationCancellation cancellation = 76;
  // @inject_tag: json:"mcc_code" bson:"mcc_code"
  //
  // The Merchant Category Code (MCC) is a four-digit number listed in ISO 18245.
  string mcc_code = 77;
  // @inject_tag: json:"operating_company_id" bson:"operating_company_id"
  //
  // The unique identifier for the operating company.
  string operating_company_id = 78;
  // @inject_tag: json:"is_high_risk" bson:"is_high_risk"
  //
  // Has a true value if the customer can select another country while the payments are disallowed for a country determined by their IP address.
  bool is_high_risk = 79;
  // @inject_tag: json:"refund_allowed"  bson:"refund_allowed"
  //
  // Has a true value if the payment method allows a refund.
  bool refund_allowed = 80;
  // @inject_tag: json:"order_charge" bson:"order_charge"
  //
  // The order charge.
  OrderViewMoney order_charge = 81;
  // @inject_tag: json:"payment_ip_country" bson:"payment_ip_country"
  //
  // The IP address of the country where the order was paid.
  string payment_ip_country = 82;
  // @inject_tag: json:"is_ip_country_mismatch_bin" bson:"is_ip_country_mismatch_bin"
  //
  // Has a true value if the country from the card's BIN has not been matched to the country defined by the IP address (for card payments only).
  bool is_ip_country_mismatch_bin = 83;
  // @inject_tag: json:"billing_country_changed_by_user" bson:"billing_country_changed_by_user"
  //
  // Has a true value if the country was selected by the customer.
  bool billing_country_changed_by_user = 84;
  // @inject_tag: json:"vat_payer" bson:"vat_payer" validate:"oneof=buyer seller nobody"
  //
  // The responsible for VAT. Available values: buyer (VAT is added to the order charge), seller (VAT is included in the order charge), nobody (VAT exempt).
  string vat_payer = 85;
  // @inject_tag: json:"is_production" bson:"is_production"
  //
  // Has a true value for a production payment and false for a test payment that goes through a test sandbox.
  bool is_production = 86;
  // @inject_tag: json:"merchant_info" bson:"merchant_info"
  //
  // The merchant's company data.
  OrderViewMerchantInfo merchant_info = 87;
  // @inject_tag: json:"order_charge_before_vat" bson:"order_charge_before_vat"
  //
  // The order charge excluding VAT.
  OrderViewMoney order_charge_before_vat = 88;
  // @inject_tag: json:"tax_rate" bson:"tax_rate"
  //
  // The tax rate.
  double tax_rate = 89;
  // @inject_tag: json:"payment_method_terminal_id" bson:"payment_method_terminal_id"
  //
  // The unique identifier of terminal of payment method
  string payment_method_terminal_id = 90;
  // @inject_tag: json:"-" bson:"recurring"
  //
  // DEPRECATED! Use the recurring_subscription_id property
  // Exists recurring for order
  bool recurring = 91;
  // @inject_tag: json:"-" bson:"recurring_id"
  //
  // DEPRECATED! Use the recurring_subscription_id property
  // Recurring identity for order
  string recurring_id = 92;
  // @inject_tag: json:"-" bson:"royalty_report_id"
  //
  // The royalty report's identifier which include this order
  string royalty_report_id = 93;
  // @inject_tag: json:"-" bson:"metadata_values"
  //
  // Only values from metadata field
  repeated string metadata_values = 94;
  // @inject_tag: json:"-" bson:"amount_before_vat"
  //
  // The order amount excluding commissions.
  double amount_before_vat = 95;

  // @inject_tag: json:"report_summary" bson:"report_summary"
  //
  // Transaction summary for reports
  OrderViewReportSummary report_summary = 96;
  // @inject_tag: json:"recurring_subscription_id"
  //
  // Identity of recurring subscription for order
  string recurring_subscription_id = 97;
  // @inject_tag: json:"recurring_plan_id"
  //
  // Identity of recurring plan for order
  string recurring_plan_id = 98;
}

message RecommendedPrice {
  // @inject_tag: json:"region"
  //
  // The region's name.
  string region = 1;
  // @inject_tag: json:"currency"
  //
  // Three-letter currency code in ISO 4217, in uppercase.
  string currency = 2;
  // @inject_tag: json:"amount"
  //
  // The recommended currency conversion price.
  double amount = 3;
}

message PriceTable {
  //@inject_tag: json:"id" bson:"_id" validate:"omitempty,hexadecimal,len=24" faker:"objectIdString"
  string id = 1;
  //@inject_tag: json:"currency" bson:"currency" validate:"required,alpha,len=3"
  string currency = 2;
  // @inject_tag: json:"ranges"
  repeated PriceTableRange ranges = 3;
}

message PriceTableRange {
  //@inject_tag: json:"position" bson:"position"
  //
  // The order number in a pricing table.
  int32 position = 1;
  // @inject_tag: json:"from"
  //
  // The lower boundary value of the range.
  double from = 3;
  // @inject_tag: json:"to"
  //
  // The upper boundary value of the range.
  double to = 4;
}

message Id {
  string id = 1;
}

message RangeInt {
  //@inject_tag: json:"from"
  //
  // The lower boundary value of the range.
  int32 from = 1;
  //@inject_tag: json:"to"
  //
  // The upper boundary value of the range.
  int32 to = 2;
}

message MerchantTariffRatesPayment {
  //@inject_tag: json:"min_amount" bson:"min_amount"
  //
  // The minimum payment amount.
  double min_amount = 1;
  //@inject_tag: json:"max_amount" bson:"max_amount"
  //
  // The maximum payment amount.
  double max_amount = 2;
  //@inject_tag: json:"method_name" bson:"method_name"
  //
  // The payment method's name.
  string method_name = 3;
  //@inject_tag: json:"method_percent_fee" bson:"method_percent_fee"
  //
  // The fee of the payment method in percent.
  double method_percent_fee = 4;
  //@inject_tag: json:"method_fixed_fee" bson:"method_fixed_fee"
  //
  // The fixed fee of the payment method in the particular currency.
  double method_fixed_fee = 5;
  //@inject_tag: json:"method_fixed_fee_currency" bson:"method_fixed_fee_currency"
  //
  // The currency of the fixed fee of the payment method. Three-letter currency code ISO 4217, in uppercase.
  string method_fixed_fee_currency = 6;
  //@inject_tag: json:"ps_percent_fee" bson:"ps_percent_fee"
  //
  // The PaySuper fee in percent.
  double ps_percent_fee = 7;
  //@inject_tag: json:"ps_fixed_fee" bson:"ps_fixed_fee"
  //
  // The PaySuper fixed fee in a particular currency.
  double ps_fixed_fee = 8;
  //@inject_tag: json:"ps_fixed_fee_currency" bson:"ps_fixed_fee_currency"
  //
  // The currency of the PaySuper fixed fee of the payment method. Three-letter currency code ISO 4217, in uppercase.
  string ps_fixed_fee_currency = 9;
  //@inject_tag: json:"merchant_home_region" bson:"merchant_home_region"
  //
  // The merchant's home region name. Available values: asia, europe, latin_america, russia_and_cis, worldwide.
  string merchant_home_region = 10;
  //@inject_tag: json:"payer_region" bson:"payer_region"
  //
  // The customer's region name. Available values: asia, europe, latin_america, russia_and_cis, worldwide.
  string payer_region = 11;
  // @inject_tag: json:"mcc_code" bson:"mcc_code"
  //
  // The Merchant Category Code (MCC) is a four-digit number listed in ISO 18245.
  string mcc_code = 12;
  // @inject_tag: json:"is_active" bson:"is_active"
  //
  // Has a true value if the payment method is active.
  bool is_active = 13;
}

message MerchantTariffRatesSettingsItem {
  //@inject_tag: json:"method_name" bson:"method_name"
  //
  // The method's name.
  string method_name = 1;
  //@inject_tag: json:"method_percent_fee" bson:"method_percent_fee"
  //
  // The fee of the method in percent.
  double method_percent_fee = 2;
  //@inject_tag: json:"method_fixed_fee" bson:"method_fixed_fee"
  //
  // The fixed fee of the method in the particular currency.
  double method_fixed_fee = 3;
  //@inject_tag: json:"method_fixed_fee_currency" bson:"method_fixed_fee_currency"
  //
  // The currency of the fixed fee of the method. Three-letter currency code ISO 4217, in uppercase.
  string method_fixed_fee_currency = 4;
  //@inject_tag: json:"is_paid_by_merchant" bson:"is_paid_by_merchant"
  //
  // Has a true value if the method is paid by the merchant.
  bool is_paid_by_merchant = 5;
}

message MerchantTariffRatesSettings {
  //@inject_tag: json:"refund" bson:"refund"
  repeated MerchantTariffRatesSettingsItem refund = 1;
  //@inject_tag: json:"chargeback" bson:"chargeback"
  repeated MerchantTariffRatesSettingsItem chargeback = 2;
  //@inject_tag: json:"payout" bson:"payout"
  map<string, MerchantTariffRatesSettingsItem> payout = 3;
  //@inject_tag: json:"minimal_payout" bson:"minimal_payout"
  map<string, float> minimal_payout = 4;
  //@inject_tag: json:"mcc_code" bson:"mcc_code"
  string mcc_code = 5;
}

message Key {
  //@inject_tag: json:"id" bson:"_id" faker:"objectIdString"
  //
  // The unique identifier for the key.
  string id = 1;
  //@inject_tag: json:"code" validate:"required,max=50"
  //
  // The activation code.
  string code = 2;
  //@inject_tag: validate:"required,hexadecimal,len=24" faker:"objectIdString"
  //
  // The unique identifier for the key's product.
  string key_product_id = 3;
  //@inject_tag: validate:"required,max=255"
  //
  // The unique identifier for the platform. Available values: steam, gog, uplay, origin, psn, xbox, nintendo, itch, egs.
  string platform_id = 5;
  //@inject_tag: validate:"omitempty,hexadecimal,len=24" faker:"objectIdString"
  //
  // The unique identifier for the order when redeeming the code (can be empty).
  string order_id = 6;
  // The date the key has been created.
  google.protobuf.Timestamp created_at = 7;
  //@inject_tag: validate:"omitempty"
  //
  // The date the key has been reserved.
  google.protobuf.Timestamp reserved_to = 8;
  //@inject_tag: validate:"omitempty"
  //
  // The date the key has been redeemed.
  google.protobuf.Timestamp redeemed_at = 9;
}

message PayoutDocument {
  //@inject_tag: json:"id" bson:"_id" validate:"omitempty,hexadecimal,len=24" faker:"objectIdString"
  //
  // The unique identifier for the payout document.
  string id = 1;
  //@inject_tag: json:"merchant_id" bson:"merchant_id" validate:"omitempty,hexadecimal,len=24" faker:"objectIdString"
  //
  // The unique identifier for the merchant who is the owner of the payout document.
  string merchant_id = 2;
  //@inject_tag: json:"source_id"
  //
  // The list of the unique identifiers for the royalty reports.
  repeated string source_id = 3;
  // @inject_tag: json:"total_fees" validate:"numeric,gte=0"
  //
  // The total amount of fees.
  double total_fees = 4;
  // @inject_tag: json:"balance" validate:"numeric,gte=0"
  //
  // The payout amount.
  double balance = 5;
  //@inject_tag: json:"currency" validate:"required,alpha,len=3"
  //
  // The payout amount currency. Three-letter Currency Code ISO 4217, in uppercase.
  string currency = 6;
  // @inject_tag: json:"period_from"
  //
  // The start date of the payout period .
  google.protobuf.Timestamp period_from = 7;
  // @inject_tag: json:"period_to"
  //
  // The end date of the payout period.
  google.protobuf.Timestamp period_to = 8;
  // @inject_tag: json:"total_transactions"
  //
  // The total number of transactions.
  int32 total_transactions = 9;
  //@inject_tag: json:"description" validate:"omitempty,max=255"
  //
  // The additional description of the payout.
  string description = 10;
  //@inject_tag: json:"destination" validate:"max=255"
  //
  // The merchant's banking data.
  MerchantBanking destination = 11;
  //@inject_tag: json:"merchant_agreement_number" validate:"max=255"
  //
  // The merchant's license agreement number.
  string merchant_agreement_number = 12;
  // @inject_tag: json:"company"
  //
  // Information about the merchant's company.
  MerchantCompanyInfo company = 13;
  //@inject_tag: json:"status" validate:"required,oneof=skip pending in_progress paid canceled failed"
  //
  // The document status. Available values: skip, pending, in_progress, paid, canceled, failed.
  string status = 14;
  //@inject_tag: json:"transaction" validate:"max=255"
  //
  // The unique identifier for the payout transaction.
  string transaction = 15;
  //@inject_tag: json:"failure_code" validate:"omitempty,oneof=account_closed account_frozen account_restricted destination_bank_invalid could_not_process declined insufficient_funds invalid_account_number incorrect_account_holder_name invalid_currency"
  //
  // The payout's failure code. Available values: account_closed, account_frozen, account_restricted, destination_bank_invalid, could_not_process, declined, insufficient_funds, invalid_account_number, incorrect_account_holder_name, invalid_currency.
  string failure_code = 16;
  //@inject_tag: json:"failure_message" validate:"max=255"
  //
  // The payout's failure message.
  string failure_message = 17;
  //@inject_tag: json:"failure_transaction" validate:"max=255"
  //
  // The unique identifier for the payout failure transaction.
  string failure_transaction = 18;
  //@inject_tag: json:"created_at"
  //
  // The date of the payout creation.
  google.protobuf.Timestamp created_at = 24;
  //@inject_tag: json:"updated_at"
  //
  // The date of the payout last update.
  google.protobuf.Timestamp updated_at = 25;
  //@inject_tag: json:"arrival_date"
  //
  // The payout arrival date.
  google.protobuf.Timestamp arrival_date = 26;
  //@inject_tag: json:"paid_at"
  //
  // The payout date.
  google.protobuf.Timestamp paid_at = 27;
  // @inject_tag: json:"operating_company_id" bson:"operating_company_id" faker:"objectIdString"
  //
  // The unique identifier for the operating company.
  string operating_company_id = 28;
  //@inject_tag: json:"increment_id" bson:"autoincrement_id" validate:"omitempty,numeric,gt=0"
  //
  // The autoincrement unique identifier for the payout document.
  int64 autoincrement_id = 29;
  // @inject_tag: json:"string_period_from" bson:"string_period_from"
  //
  // Period from in string format.
  string string_period_from = 30;
  // @inject_tag: json:"string_period_to" bson:"string_period_to"
  //
  // Period to in string format.
  string string_period_to = 31;
  // @inject_tag: json:"b2b_vat_base" bson:"b2b_vat_base" validate:"numeric,gte=0"
  //
  // The total Licensee Revenue Share amount as base for b2b vat calculation
  double b2b_vat_base = 32;
  // @inject_tag: json:"b2b_vat_rate" bson:"b2b_vat_rate" validate:"numeric,gte=0"
  //
  // Effective rate of b2b_vat.
  double b2b_vat_rate = 33;
  // @inject_tag: json:"b2b_vat_amount" bson:"b2b_vat_amount" validate:"numeric,gte=0"
  //
  // The b2b vat amount.
  double b2b_vat_amount = 34;
  // @inject_tag: json:"fees_excluding_vat" bson:"fees_excluding_vat" validate:"numeric,gte=0"
  //
  // The b2b vat amount.
  double fees_excluding_vat = 35;
}

message PayoutDocumentChanges {
  // @inject_tag: faker:"objectIdString"
  string id = 1;
  // @inject_tag: faker:"objectIdString"
  string payout_document_id = 2;
  string source = 3;
  string ip = 4;
  string hash = 5;
  google.protobuf.Timestamp created_at = 6;
}

message MerchantBalance {
  //@inject_tag: json:"id" validate:"required,hexadecimal,len=24" faker:"objectIdString"
  //
  // The unique identifier for the merchant's balance.
  string id = 1;
  //@inject_tag: json:"merchant_id" validate:"required,hexadecimal,len=24" faker:"objectIdString"
  //
  // The unique identifier for the merchant.
  string merchant_id = 2;
  //@inject_tag: json:"currency" validate:"required,alpha,len=3"
  //
  // The balance currency. Three-letter currency code ISO 4217, in uppercase.
  string currency = 3;
  //@inject_tag: json:"debit" validate:"required,numeric"
  //
  // The debit balance.
  double debit = 4;
  //@inject_tag: json:"credit" validate:"required,numeric"
  //
  // The credit balance.
  double credit = 5;
  //@inject_tag: json:"rolling_reserve" validate:"required,numeric"
  //
  // The rolling reserve balance.
  double rolling_reserve = 6;
  //@inject_tag: json:"total" validate:"required,numeric"
  //
  // The total amount.
  double total = 7;
  // The date of the balance creation.
  google.protobuf.Timestamp created_at = 8;
}

message OrderReceipt {
  //@inject_tag: json:"total_price"
  //
  // The total order price not including VAT formatted with a sign of the order currency.
  string total_price = 1;
  //@inject_tag: json:"transaction_id"
  //
  // The unique identifier for the transaction.
  string transaction_id = 2;
  //@inject_tag: json:"transaction_date"
  //
  // The transaction date.
  string transaction_date = 3;
  //@inject_tag: json:"project_name"
  //
  // The project's name.
  string project_name = 4;
  //@inject_tag: json:"merchant_name"
  //
  // The merchant's name.
  string merchant_name = 5;
  //@inject_tag: json:"items"
  //
  // The receipt's items data.
  repeated OrderReceiptItem items = 6;
  //@inject_tag: json:"order_type"
  //
  // The type of the order.
  string order_type = 7;
  //@inject_tag: json:"platform_name"
  //
  // The platform's name (if any).
  string platform_name = 8;
  //@inject_tag: json:"payment_partner"
  //
  // The payment partner's name.
  string payment_partner = 9;
  // @inject_tag: json:"vat_payer"
  //
  // The responsible for VAT. Available values: buyer (VAT is added to the order charge), seller (VAT is included in the order charge), nobody (VAT exempt).
  string vat_payer = 10;
  //@inject_tag: json:"vat_in_order_currency"
  //
  // VAT amount formatted with a sign of the order currency.
  string vat_in_order_currency = 11;
  //@inject_tag: json:"vat_in_charge_currency"
  //
  // VAT amount formatted with an order charge currency sign.
  string vat_in_charge_currency = 12;
  //@inject_tag: json:"total_amount"
  //
  // The order total amount including VAT formatted with a sign of the order currency.
  string total_amount = 13;
  //@inject_tag: json:"total_charge"
  //
  // The order total amount including VAT formatted with a sign of the order charge currency.
  string total_charge = 14;
  //@inject_tag: json:"receipt_id"
  //
  // The unique identifier for the order receipt.
  string receipt_id = 15;
  //@inject_tag: json:"url"
  //
  // The order receipt URL.
  string url = 16;
  //@inject_tag: json:"vat_rate"
  //
  // The order VAT rate formatted with a percent sign.
  string vat_rate = 17;
  //@inject_tag: json:"customer_email"
  //
  //The customer's email.
  string customer_email = 18;
  //@inject_tag: json:"customer_uuid"
  //
  //The customer's public identifier.
  string customer_uuid = 19;
  //@inject_tag: json:"subscription_view_url"
  //
  //The url for show recurring subscription of customer.
  string subscription_view_url = 20;
  //@inject_tag: json:"subscriptions_management_url"
  //
  //The url for manage recurring subscriptions of customer.
  string subscriptions_management_url = 21;
  //@inject_tag: json:"recurring_period"
  //
  //The period alias for recurring payments.
  string recurring_period = 22;
  //@inject_tag: json:"recurring_interval"
  //
  //The interval for recurring period.
  string recurring_interval = 23;
  //@inject_tag: json:"recurring_date_end"
  //
  //The last day for recurring payments.
  string recurring_date_end = 24;
  // @inject_tag: json:"trademark"
  //
  // The merchant's trade mark.
  string trademark = 25;
}

message OrderReceiptItem {
  //@inject_tag: json:"name"
  //
  // The receipt's item name.
  string name = 1;
  //@inject_tag: json:"price"
  //
  // The receipt's item price.
  string price = 2;
}

message HasCurrencyItem {
  //@inject_tag: json:"currency" validate:"required,alpha,len=3"
  //
  // Three-letter currency code ISO 4217, in uppercase.
  string currency = 1;
  //@inject_tag: json:"region" validate:"required,region_price"
  //
  // The region of the price.
  string region = 2;
}

message LocalizedUrl {
  //@inject_tag: validate:"omitempty,uri" json:"en"
  //
  // The URL for EN localization.
  string en = 1;
  //@inject_tag: validate:"omitempty,uri" json:"ru"
  //
  // The URL for RU localization.
  string ru = 2;
  //@inject_tag: validate:"omitempty,uri" json:"es"
  //
  // The URL for ES localization.
  string es = 3;
  //@inject_tag: validate:"omitempty,uri" json:"de"
  //
  // The URL for DE localization.
  string de = 4;
  //@inject_tag: validate:"omitempty,uri" json:"zh"
  //
  // The URL for ZH localization.
  string zh = 5;
  //@inject_tag: validate:"omitempty,uri" json:"fr"
  //
  // The URL for FR localization.
  string fr = 6;
  //@inject_tag: validate:"omitempty,uri" json:"ar"
  //
  // The URL for AR localization.
  string ar = 7;
  //@inject_tag: validate:"omitempty,uri" json:"pt"
  //
  // The URL for PT localization.
  string pt = 8;
  //@inject_tag: validate:"omitempty,uri" json:"it"
  //
  // The URL for IT localization.
  string it = 9;
  //@inject_tag: validate:"omitempty,uri" json:"pl"
  //
  // The URL for PL localization.
  string pl = 10;
  //@inject_tag: validate:"omitempty,uri" json:"el"
  //
  // The URL for EL localization.
  string el = 11;
  //@inject_tag: validate:"omitempty,uri" json:"ko"
  //
  // The URL for KO localization.
  string ko = 12;
  //@inject_tag: validate:"omitempty,uri" json:"ja"
  //
  // The URL for JA localization.
  string ja = 13;
  //@inject_tag: validate:"omitempty,uri" json:"vl"
  //
  // The URL for VL localization.
  string vl = 14;
  //@inject_tag: validate:"omitempty,uri" json:"he"
  //
  // The URL for HE localization.
  string he = 15;
  //@inject_tag: validate:"omitempty,uri" json:"th"
  //
  // The URL for TH localization.
  string th = 16;
  //@inject_tag: validate:"omitempty,uri" json:"cs"
  //
  // The URL for CS localization.
  string cs = 17;
  //@inject_tag: validate:"omitempty,uri" json:"bg"
  //
  // The URL for BG localization.
  string bg = 18;
  //@inject_tag: validate:"omitempty,uri" json:"fi"
  //
  // The URL for FI localization.
  string fi = 19;
  //@inject_tag: validate:"omitempty,uri" json:"sv"
  //
  // The URL for SV localization.
  string sv = 20;
  //@inject_tag: validate:"omitempty,uri" json:"da"
  //
  // The URL for DA localization.
  string da = 21;
  //@inject_tag: validate:"omitempty,uri" json:"tr"
  //
  // The URL for TR localization.
  string tr = 22;
}

message ImageCollection {
  //@inject_tag: json:"images"
  //
  // The list of URLs for covers for each localization.
  LocalizedUrl images = 1;
  //@inject_tag: json:"use_one_for_all"
  //
  // Has a true value if the single cover is used for all localizations.
  bool use_one_for_all = 2;
}

message ProductPrice {
  // @inject_tag: json:"amount" validate:"required,numeric,gt=0"
  //
  // The product's price.
  double amount = 1;
  //@inject_tag: json:"currency" validate:"omitempty,alpha,len=3"
  //
  // The product's price currency. Three-letter Currency Code ISO 4217, in uppercase.
  string currency = 2;
  //@inject_tag: json:"region" validate:"omitempty,region_price"
  //
  // The product's price region.
  string region = 3;
  //@inject_tag: json:"is_virtual_currency" bson:"is_virtual_currency"
  //
  // Has a true value if the product's amount in the virtual currency.
  bool is_virtual_currency = 4;
}

message ProjectVirtualCurrency {
  //@inject_tag: json:"logo" validate:"omitempty,url"
  //
  // The logo URL for the virtual currency.
  string logo = 1;
  // @inject_tag: json:"name" validate:"required,min=1"
  //
  // The list of localized names for the virtual currency.
  map<string, string> name = 2;
  // @inject_tag: json:"success_message" validate:"required,min=1"
  //
  // The list of localized notifications about the successful virtual currency purchase.
  map<string, string> success_message = 3;
  //@inject_tag: json:"prices" validate:"required,min=1,currency_price,dive"
  //
  // The list of the virtual currency pricing based on regions.
  repeated ProductPrice prices = 4;
  //@inject_tag: json:"min_purchase_value"
  //
  // The minimum limit of the virtual currency.
  double min_purchase_value = 5;
  //@inject_tag: json:"max_purchase_value"
  //
  // The maximum limit of the virtual currency.
  double max_purchase_value = 6;
  //@inject_tag: json:"sell_count_type" validate:"omitempty,oneof=fractional integral"
  //
  // The number representation of the virtual currency amount. Available values: fractional (for example: 1,58), integral (1, 2, 5 etc).
  string sell_count_type = 7;
}
message OrderCreateByPaylink {
  //@inject_tag: json:"id" validate:"required,hexadecimal,len=24"
  string paylink_id = 1;
  string payer_ip = 2;
  // @inject_tag: json:"referer"
  string issuer_url = 3;
  // @inject_tag: json:"is_embedded"
  bool is_embedded = 4;
  //@inject_tag: bson:"utm_source" json:"utm_source"
  string utm_source = 5;
  //@inject_tag: bson:"utm_medium" json:"utm_medium"
  string utm_medium = 6;
  //@inject_tag: bson:"utm_campaign" json:"utm_campaign"
  string utm_campaign = 7;
  string cookie = 8;
}

message UserIpData {
  // @inject_tag: json:"country"
  //
  // The customer's country. Two-letter country code in ISO 3166-1, in uppercase (for instance US).
  string country = 1;
  // @inject_tag: json:"city"
  //
  // The customer's city.
  string city = 2;
  // @inject_tag: json:"zip"
  //
  // The customer's postal code.
  string zip = 3;
}

message PaymentFormDataChangeResponseItem {
  // @inject_tag: json:"user_address_data_required"
  //
  // Has a true value if it's required to get a real customer's geo-position information.
  bool user_address_data_required = 1;
  // @inject_tag: json:"user_ip_data"
  //
  // The customer's IP address.
  UserIpData user_ip_data = 2;
  // The brand of the card issuer.
  string brand = 3;
  //@inject_tag: json:"country_payments_allowed"
  //
  // Has a true value if the payments are allowed from this customer's country.
  bool country_payments_allowed = 4;
  //@inject_tag: json:"country_change_allowed"
  //
  // Has a true value if the customer can select another country while payments are disallowed for his country.
  bool country_change_allowed = 5;
  // @inject_tag: json:"has_vat"
  //
  // Has a true value if the payment has the VAT commission.
  bool has_vat = 6;
  // @inject_tag: json:"vat"
  //
  // The amount of VAT.
  double vat = 7;
  // @inject_tag: json:"amount"
  //
  // The payment amount without VAT.
  double amount = 8;
  // @inject_tag: json:"total_amount"
  //
  // The payment amount including VAT.
  double total_amount = 9;
  //@inject_tag: json:"currency"
  //
  // The currency of the order.
  string currency = 10;
  // @inject_tag: json:"items"
  //
  // A list of purchased items in this order.
  repeated billing.OrderItem items = 11;
  // @inject_tag: json:"charge_currency"
  //
  // The currency of the order charge. It can differ from the order currency because it also depends on the customer's card currency.
  string charge_currency = 12;
  // @inject_tag: json:"charge_amount"
  //
  // The total amount of the order charge.
  double charge_amount = 13;
  // @inject_tag: json:"vat_in_charge_currency"
  //
  // The VAT currency of the order charge. It can differ from the order currency because it depends on the user's card currency.
  double vat_in_charge_currency = 14;
  // @inject_tag: json:"vat_rate"
  //
  // VAT rate.
  double vat_rate = 15;
}

message OperatingCompany {
  // @inject_tag: bson:"_id" json:"id" faker:"objectIdString"
  //
  // The unique identifier for the operating company.
  string id = 1;
  // @inject_tag: bson:"name" json:"name" validate:"required"
  //
  // The operating company's name.
  string name = 2;
  // @inject_tag: bson:"country" json:"country" validate:"required,alpha,len=2"
  //
  // The operating company's country.
  string country = 3;
  // @inject_tag: bson:"registration_number" json:"registration_number" validate:"required"
  //
  // The operating company's registration number.
  string registration_number = 4;
  // @inject_tag: bson:"vat_number" json:"vat_number" validate:"required"
  //
  // The operating company's VAT number.
  string vat_number = 5;
  // @inject_tag: bson:"address" json:"address" validate:"required"
  //
  // The operating company's address.
  string address = 6;
  // @inject_tag: bson:"vat_address" json:"vat_address" validate:"required"
  //
  // The operating company's VAT address.
  string vat_address = 7;
  // @inject_tag: bson:"signatory_name" json:"signatory_name" validate:"required"
  //
  // The authorized signer's name of the operating company.
  string signatory_name = 8;
  // @inject_tag: bson:"signatory_position" json:"signatory_position" validate:"required"
  //
  // The authorized signer's position in the operating company.
  string signatory_position = 9;
  // @inject_tag: bson:"banking_details" json:"banking_details" validate:"required"
  //
  // The baking details including bank, bank address, account number, SWIFT/BIC, intermediary bank.
  string banking_details = 10;
  // @inject_tag: bson:"payment_countries" json:"payment_countries" validate:"omitempty,dive,alpha,len=2"
  //
  // The list of the countries allowed for a payment.
  repeated string payment_countries = 11;
  // @inject_tag: json:"created_at"
  //
  // The date of the operating company creation.
  google.protobuf.Timestamp created_at = 12;
  // @inject_tag: json:"updated_at"
  //
  // The date of the operating company last update.
  google.protobuf.Timestamp updated_at = 13;
  // @inject_tag: bson:"registration_date" json:"registration_date" validate:"required"
  //
  // The date of the operating company registration.
  string registration_date = 14;
  // @inject_tag: bson:"email" json:"email" validate:"required,email"
  //
  // The operating company's email.
  string email = 15;
}

message PaymentMinLimitSystem {
  // @inject_tag: bson:"_id" json:"-" faker:"objectIdString"
  string id = 1;
  //@inject_tag: validate:"required,alpha,len=3" json:"currency" bson:"currency" required:"true"
  //
  // The system limit currency.
  string currency = 2;
  // @inject_tag: validate:"required,numeric,gt=0" json:"amount" bson:"amount" required:"true"
  //
  // The system limit amount.
  double amount = 3;
  // @inject_tag: json:"created_at"
  //
  // The date of the system limit created.
  google.protobuf.Timestamp created_at = 4;
  // @inject_tag: json:"updated_at"
  //
  // The date of the system limit last update.
  google.protobuf.Timestamp updated_at = 5;
}

message UserRole {
  //@inject_tag: json:"id" validate:"required,hexadecimal,len=24" required:"true" faker:"objectIdString"
  //
  // The unique identifier for the user's role.
  string id = 1;
  //@inject_tag: json:"merchant_id" validate:"required,hexadecimal,len=24" required:"true" faker:"objectIdString"
  //
  // The unique identifier for the merchant (only for merchant users).
  string merchant_id = 3;
  //@inject_tag: json:"role" validate:"required" required:"true"
  //
  // The user's role.
  string role = 4;
  //@inject_tag: json:"status" bson:"status" validate="oneof=invited accepted"
  //
  // The user's invitation status. Available values: invited, approved.
  string status = 5;
  //@inject_tag: json:"user_id" bson:"user_id" validate:"required,hexadecimal,len=24" required:"true" faker:"objectIdString"
  //
  // The unique identifier for the user.
  string user_id = 6;
  //@inject_tag: json:"first_name" bson:"first_name"  validate:"required" required:"true"
  //
  // The user's first name.
  string first_name = 7;
  //@inject_tag: json:"last_name" bson:"last_name" validate:"required" required:"true"
  //
  // The user's last name.
  string last_name = 8;
  //@inject_tag: json:"email" bson:"email" validate:"required,email" required:"true"
  //
  // The user's email address.
  string email = 9;
  // @inject_tag: json:"created_at"
  //
  // The date of the user's role creation.
  google.protobuf.Timestamp created_at = 10;
  // @inject_tag: json:"updated_at"
  //
  // The date of the user's role last update.
  google.protobuf.Timestamp updated_at = 11;
}

message RoleListItem {
  //@inject_tag: json:"id"
  //
  // The unique identifier for the role.
  string id = 1;
  //@inject_tag: json:"name"
  //
  // The role's name.
  string name = 2;
}

message ActOfCompletionDocument {
  //@inject_tag: json:"merchant_id" bson:"merchant_id" validate:"omitempty,hexadecimal,len=24" faker:"objectIdString"
  //
  // The unique identifier for the merchant who is the owner of the payout document.
  string merchant_id = 1;
  // @inject_tag: json:"total_fees" validate:"numeric,gte=0"
  //
  // The total amount of fees.
  double total_fees = 2;
  // @inject_tag: json:"balance" validate:"numeric,gte=0"
  //
  // The payout amount.
  double balance = 3;
  // @inject_tag: json:"total_transactions"
  //
  // The total number of transactions.
  int32 total_transactions = 4;
  // @inject_tag: json:"b2b_vat_base" bson:"b2b_vat_base" validate:"numeric,gte=0"
  //
  // The total Licensee Revenue Share amount as base for b2b vat calculation
  double b2b_vat_base = 5;
  //@inject_tag: json:"b2b_vat_rate" bson:"b2b_vat_rate" validate:"numeric,gte=0"
  //
  // Effective rate of b2b_vat.
  double b2b_vat_rate = 6;
  // @inject_tag: json:"b2b_vat_amount" bson:"b2b_vat_amount" validate:"numeric,gte=0"
  //
  // The b2b vat amount.
  double b2b_vat_amount = 7;
  // @inject_tag: json:"fees_excluding_vat" bson:"fees_excluding_vat" validate:"numeric,gte=0"
  //
  // The b2b vat amount.
  double fees_excluding_vat = 8;
  // @inject_tag: json:"corrections_amount" bson:"corrections_amount" validate:"numeric,gte=0"
  //
  // The b2b vat amount.
  double corrections_amount = 9;
}

message BrowserCookie {
  string customer_id = 1;
  string virtual_customer_id = 2;
  string ip = 3;
  string ip_country = 4;
  string selected_country = 5;
  string user_agent = 6;
  string accept_language = 7;
  int32 session_count = 8;
}

message MerchantDocument {
  // @inject_tag: json:"id" validate:"omitempty,hexadecimal,len=24" faker:"objectIdString"
  //
  // The unique identifier for the merchant document.
  string id = 1;
  // @inject_tag: json:"merchant_id" validate:"required,hexadecimal,len=24" faker:"objectIdString" param:"merchant_id"
  //
  // The merchant identifier for the document.
  string merchant_id = 2;
  // @inject_tag: json:"user_id" validate:"required,hexadecimal,len=24" faker:"objectIdString"
  //
  // ID of the user who added the document.
  string user_id = 3;
  // @inject_tag: json:"original_name" validate:"required"
  //
  // Original uploaded file name.
  string original_name = 4;
  // @inject_tag: json:"-"
  //
  // The path to the saved file in the S3 storage.
  string file_path = 5;
  // @inject_tag: json:"description" validate:"omitempty"
  //
  // The optional description for file.
  string description = 6;
  // @inject_tag: json:"created_at"
  //
  // The date of the merchant document creation.
  google.protobuf.Timestamp created_at = 7;
}

message RecurringPlan {
  // @inject_tag: json:"id" validate:"omitempty,hexadecimal,len=24" param:"plan_id" faker:"objectIdString"
  //
  // The unique identifier of recurring plan.
  string id = 1;
  // @inject_tag: json:"merchant_id" validate:"required,hexadecimal,len=24" param:"merchant_id" faker:"objectIdString"
  //
  // The identifier of the merchant who owns the plan.
  string merchant_id = 2;
  // @inject_tag: json:"project_id" validate:"required,hexadecimal,len=24" param:"project_id" faker:"objectIdString"
  //
  // The identifier of the merchant project.
  string project_id = 3;
  // @inject_tag: json:"name" validate:"required" required:"true"
  //
  // The list of the plan localized names.
  map<string, string> name = 4;
  // @inject_tag: json:"charge" validate:"required" required:"true"
  //
  // The plan charge settings.
  RecurringPlanCharge charge = 5;
  // @inject_tag: json:"external_id" validate:"omitempty,alphanum,lte=32"
  //
  // Plan external ID (up to 32 characters).
  string external_id = 6;
  // @inject_tag: json:"description" validate:"omitempty"
  //
  // The list of the plan localized description
  map<string, string> description = 7;
  // @inject_tag: json:"group_id" validate:"omitempty,alphanum,lte=32"
  //
  // Group ID the plans are linked to (up to 32 characters).
  string group_id = 8;
  // @inject_tag: json:"expiration" validate:"omitempty"
  //
  // Subscription expiration details.
  RecurringPlanPeriod expiration = 9;
  // @inject_tag: json:"trial" validate:"omitempty"
  //
  // Trial period details.
  RecurringPlanPeriod trial = 10;
  // @inject_tag: json:"grace_period" validate:"omitempty"
  //
  // Trial period details.
  RecurringPlanPeriod grace_period = 11;
  // @inject_tag: json:"tags" validate:"omitempty"
  //
  // Plan tags.
  repeated string tags = 12;
  // @inject_tag: json:"status" validate:"omitempty,oneof=active disabled"
  //
  // Subscription plan status.
  string status = 13;
  // @inject_tag: json:"created_at"
  //
  // The date of the recurring plan creation.
  google.protobuf.Timestamp created_at = 14;
  // @inject_tag: json:"updated_at"
  //
  // The date of the recurring plan last updated.
  google.protobuf.Timestamp updated_at = 15;
  // @inject_tag: json:"-"
  //
  // The date of the recurring plan deleted.
  google.protobuf.Timestamp deleted_at = 16;
}

message RecurringPlanCharge {
  // @inject_tag: json:"period" validate:"required"
  //
  // Billing period of the recurring plan.
  RecurringPlanPeriod period = 1;
  // @inject_tag: json:"amount" validate:"required,numeric,gte=0"
  //
  // The plan charge amount as a positive number.
  double amount = 2;
  // @inject_tag: json:"currency" validate:"required,alpha,len=3"
  //
  // The currency of the plan charge. Three-letter Currency Code ISO 4217, in uppercase.
  string currency = 3;
}

message RecurringPlanPeriod {
  // @inject_tag: json:"value" validate:"required"
  //
  // Number of time units.
  int32 value = 1;
  // @inject_tag: json:"type" validate:"required,oneof=minute day week month year"
  //
  // Time unit.
  string type = 2;
}

message RecurringSubscription {
  // @inject_tag: json:"id" validate:"omitempty,hexadecimal,len=24" param:"subscription_id" faker:"objectIdString"
  //
  // The unique identifier of recurring subscription.
  string id = 1;
  // @inject_tag: json:"plan" validate:"required"
  //
  // The recurring plan settings.
  RecurringPlan plan = 2;
  // @inject_tag: json:"customer" validate:"required"
  //
  // Information about the owner of the subscription.
  RecurringSubscriptionCustomer customer = 3;
  // @inject_tag: json:"project" validate:"required"
  //
  // Information about the product of the subscription.
  RecurringSubscriptionProject project = 4;
  // @inject_tag: json:"status" validate:"required,oneof=active canceled none_renewing"
  //
  // Status of the recurring subscription. May be an active, canceled or none_renewing.
  string status = 5;
  // @inject_tag: json:"item_type" validate:"required,oneof=simple, product, key, virtual_currency"
  //
  // The type of the product for subscription. Available values: simple, product, key or virtual_currency.
  string item_type = 6;
  // @inject_tag: json:"item_list" validate:"omitempty"
  //
  // List of identifiers for a subscription product type or key.
  repeated string item_list = 7;
  // @inject_tag: json:"-" validate:"omitempty"
  //
  // The CardPay recurring plan identifier.
  string cardpay_plan_id = 8;
  // @inject_tag: json:"-" validate:"omitempty"
  //
  // The CardPay subscription identifier.
  string cardpay_subscription_id = 9;
  // @inject_tag: json:"total_amount" validate:"omitempty"
  //
  // The total amount of payments for the subscription.
  double total_amount = 10;
  // @inject_tag: json:"created_at"
  //
  // Date and time the subscription was created.
  google.protobuf.Timestamp created_at = 11;
  // @inject_tag: json:"updated_at"
  //
  // Date and time the subscription was updated.
  google.protobuf.Timestamp updated_at = 12;
  // @inject_tag: json:"expire_at"
  //
  // Subscription end date and time.
  google.protobuf.Timestamp expire_at = 13;
  // @inject_tag: json:"last_payment_at"
  //
  // Date and time of the last subscription payment.
  google.protobuf.Timestamp last_payment_at = 14;
  // @inject_tag: json:"canceled_at"
  //
  // Date and time of the canceled subscription.
  google.protobuf.Timestamp canceled_at = 15;
  // @inject_tag: json:"renewal_pending"
  //
  // Subscription pending renewal.
  bool renewal_pending = 16;
}

message SubscriptionOrder {
  string id = 1;
  float amount = 2;
  string currency = 3;
  google.protobuf.Timestamp date = 4;
  // @inject_tag: json:"card_number"
  string card_number = 5;
  // @inject_tag: json:"product_name"
  repeated string product_name = 6;
}

message RecurringSubscriptionCustomer {
  // @inject_tag: json:"id" validate:"required,hexadecimal,len=24" faker:"objectIdString"
  //
  // The identifier of customer.
  string id = 1;
  // The UUID identifier of customer.
  string uuid = 2;
  // The external identifier of customer.
  string external_id = 3;
  // The email address of customer.
  string email = 4;
  // The phone number of customer.
  string phone = 5;
}

message RecurringSubscriptionProject {
  // @inject_tag: json:"id" validate:"required,hexadecimal,len=24" faker:"objectIdString"
  //
  // The identifier of project.
  string id = 1;
  // The multi language name of project.
  map<string, string> name = 2;
}

message CardPayAddress {
  string country = 1;
  string city = 2;
  string phone = 3;
  string state = 4;
  string street = 5;
  string zip = 6;
}

message CardPayItem {
  string name = 1;
  string description = 2;
  int32 count = 3;
  double price = 4;
}

message CardPayMerchantOrder {
  //// @inject_tag: validate:"required,hexadecimal,len=24"
  string id = 1;
  string description = 2;
  repeated CardPayItem items = 3;
  CardPayAddress shipping_address = 4;
}

message CallbackCardPayBankCardAccount {
  string holder = 1;
  string issuing_country_code = 2;
  string masked_pan = 3;
  string token = 4;
}

message CallbackCardPayCryptoCurrencyAccount {
  string crypto_address = 1;
  string crypto_transaction_id = 2;
  string prc_amount = 3;
  string prc_currency = 4;
}

message CardPayCustomer {
  string email = 1;
  string ip = 2;
  string id = 3;
  string locale = 4;
}

message CardPayEWalletAccount {
  string id = 1;
}

message CallbackCardPayPaymentData {
  string id = 1;
  double amount = 2;
  string auth_code = 3;
  string created = 4;
  string currency = 5;
  string decline_code = 6;
  string decline_reason = 7;
  string description = 8;
  bool is_3d = 9;
  string note = 10;
  string rrn = 11;
  string status = 12;
}

message CardPayCallbackRecurringDataFilling {
  string id = 1;
}

message CardPayCallbackRecurringDataSubscription {
  string id = 1;
}

message CardPayCallbackRecurringData {
  string id = 1;
  double amount = 2;
  string auth_code = 3;
  string created = 4;
  string currency = 5;
  string decline_code = 6;
  string decline_reason = 7;
  string description = 8;
  bool is_3d = 9;
  string note = 10;
  string rrn = 11;
  string status = 12;
  CardPayCallbackRecurringDataFilling filing = 13;
  CardPayCallbackRecurringDataSubscription subscription = 14;
}

message CardPayPaymentCallback {
  CardPayMerchantOrder merchant_order = 1;
  string payment_method = 2;
  string callback_time = 3;
  CallbackCardPayBankCardAccount card_account = 4;
  CallbackCardPayCryptoCurrencyAccount cryptocurrency_account = 5;
  CardPayCustomer customer = 6;
  CardPayEWalletAccount ewallet_account = 7;
  // @inject_tag: json:"payment_data,omitempty"
  CallbackCardPayPaymentData payment_data = 8;
  // @inject_tag: json:"recurring_data,omitempty"
  CardPayCallbackRecurringData recurring_data = 9;
}

message CardPayRefundCallbackRefundData {
  // @inject_tag: validate:"required,numeric,gt=0"
  double amount = 1;
  // @inject_tag: validate:"required"
  string created = 2;
  // @inject_tag: validate:"required,alpha,len=3"
  string currency	= 3;
  // @inject_tag: validate:"required"
  string id = 4;
  // @inject_tag: validate:"required"
  string status = 5;
  string auth_code = 6;
  string decline_code = 7;
  string decline_reason = 8;
  bool is_3d = 9;
  string rrn = 10;
}

message CardPayRefundCallbackPaymentData {
  // @inject_tag: validate:"required"
  string id = 1;
  // @inject_tag: validate:"numeric,gte=0"
  double remaining_amount = 2;
}

message CardPayRefundCallback {
  // @inject_tag: validate:"required"
  CardPayMerchantOrder merchant_order = 1;
  // @inject_tag: validate:"required"
  string payment_method = 2;
  // @inject_tag: validate:"required"
  CardPayRefundCallbackPaymentData payment_data = 3;
  // @inject_tag: validate:"required"
  CardPayRefundCallbackRefundData refund_data = 4;
  string callback_time = 5;
  // @inject_tag: json:"-"
  CallbackCardPayBankCardAccount card_account = 6;
  CardPayCustomer customer = 7;
  // @inject_tag: json:"-"
  CardPayEWalletAccount ewallet_account = 8;
}

message WebHookPaymentMessage {
  Order order = 1;
  bool force_retry = 2;
}