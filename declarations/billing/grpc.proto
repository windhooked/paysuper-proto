syntax = "proto3";

option go_package = "./;billingpb";
package grpc;

import "google/protobuf/timestamp.proto";
import "billing.proto";
import "paylink.proto";

service BillingService {
  rpc OrderCreateByPaylink (billing.OrderCreateByPaylink) returns (OrderCreateProcessResponse) {}
  rpc OrderCreateProcess (billing.OrderCreateRequest) returns (OrderCreateProcessResponse) {}
  rpc PaymentFormJsonDataProcess (PaymentFormJsonDataRequest) returns (PaymentFormJsonDataResponse) {}
  rpc PaymentCreateProcess (PaymentCreateRequest) returns (PaymentCreateResponse) {}
  rpc PaymentCallbackProcess (PaymentNotifyRequest) returns (PaymentNotifyResponse) {}
  rpc OrderReceipt (OrderReceiptRequest) returns (OrderReceiptResponse) {}
  rpc OrderReCreateProcess (OrderReCreateProcessRequest) returns (OrderCreateProcessResponse) {}

  rpc UpdateOrder (billing.Order) returns (EmptyResponse) {}

  rpc GetMerchantBy (GetMerchantByRequest) returns (GetMerchantResponse) {}
  rpc ListMerchants (MerchantListingRequest) returns (MerchantListingResponse) {}
  rpc ListMerchantsForAgreement (MerchantListingRequest) returns (ListMerchantsForAgreementResponse) {}
  rpc ChangeMerchant (OnboardingRequest) returns (ChangeMerchantResponse) {}
  rpc ChangeMerchantStatus (MerchantChangeStatusRequest) returns (ChangeMerchantStatusResponse) {}
  rpc SetMerchantOperatingCompany (SetMerchantOperatingCompanyRequest) returns (SetMerchantOperatingCompanyResponse) {}
  rpc SetMerchantAcceptedStatus (SetMerchantAcceptedStatusRequest) returns (SetMerchantAcceptedStatusResponse) {}
  rpc ChangeMerchantData (ChangeMerchantDataRequest) returns (ChangeMerchantDataResponse) {}
  rpc SetMerchantS3Agreement (SetMerchantS3AgreementRequest) returns (ChangeMerchantDataResponse) {}
  rpc GetMerchantTariffRates (GetMerchantTariffRatesRequest) returns (GetMerchantTariffRatesResponse) {}
  rpc SetMerchantTariffRates (SetMerchantTariffRatesRequest) returns (CheckProjectRequestSignatureResponse) {}
  rpc ChangeMerchantManualPayouts(ChangeMerchantManualPayoutsRequest) returns (ChangeMerchantManualPayoutsResponse) {}
  rpc RefreshMerchantApiToken (RefreshMerchantApiTokenRequest) returns (RefreshMerchantApiTokenResponse) {}

  rpc CreateNotification (NotificationRequest) returns (CreateNotificationResponse) {}
  rpc GetNotification (GetNotificationRequest) returns (billing.Notification) {}
  rpc ListNotifications (ListingNotificationRequest) returns (Notifications) {}
  rpc MarkNotificationAsRead (GetNotificationRequest) returns (billing.Notification) {}

  rpc ListMerchantPaymentMethods (ListMerchantPaymentMethodsRequest) returns (ListingMerchantPaymentMethod) {}
  rpc GetMerchantPaymentMethod (GetMerchantPaymentMethodRequest) returns (GetMerchantPaymentMethodResponse) {}
  rpc ChangeMerchantPaymentMethod (MerchantPaymentMethodRequest) returns (MerchantPaymentMethodResponse) {}

  rpc CreateRefund (CreateRefundRequest) returns (CreateRefundResponse) {}
  rpc ListRefunds (ListRefundsRequest) returns (ListRefundsResponse) {}
  rpc GetRefund (GetRefundRequest) returns (CreateRefundResponse) {}
  rpc ProcessRefundCallback (CallbackRequest) returns (PaymentNotifyResponse) {}

  rpc PaymentFormLanguageChanged (PaymentFormUserChangeLangRequest) returns (PaymentFormDataChangeResponse) {}
  rpc PaymentFormPaymentAccountChanged (PaymentFormUserChangePaymentAccountRequest) returns (PaymentFormDataChangeResponse) {}
  rpc ProcessBillingAddress (ProcessBillingAddressRequest) returns (ProcessBillingAddressResponse) {}

  rpc CreateOrUpdateProduct (Product) returns (Product) {}
  rpc ListProducts (ListProductsRequest) returns (ListProductsResponse) {}
  rpc GetProduct (RequestProduct) returns (GetProductResponse) {}
  rpc DeleteProduct (RequestProduct) returns (EmptyResponse) {}
  rpc GetProductsForOrder (GetProductsForOrderRequest) returns (ListProductsResponse) {}
  rpc GetProductPrices (RequestProduct) returns (ProductPricesResponse) {}
  rpc UpdateProductPrices (UpdateProductPricesRequest) returns (ResponseError) {}

  rpc ChangeProject (billing.Project) returns (ChangeProjectResponse) {}
  rpc GetProject (GetProjectRequest) returns (ChangeProjectResponse) {}
  rpc ListProjects (ListProjectsRequest) returns (ListProjectsResponse) {}
  rpc DeleteProject (GetProjectRequest) returns (ChangeProjectResponse) {}

  rpc CreateToken (TokenRequest) returns (TokenResponse) {}
  rpc CheckProjectRequestSignature (CheckProjectRequestSignatureRequest) returns (CheckProjectRequestSignatureResponse) {}

  rpc GetCountriesList (EmptyRequest) returns (billing.CountriesList) {}
  rpc GetCountriesListForOrder (GetCountriesListForOrderRequest) returns (GetCountriesListForOrderResponse) {}
  rpc GetCountry (billing.GetCountryRequest) returns (billing.Country) {}
  rpc UpdateCountry (billing.Country) returns (billing.Country) {}

  rpc GetOrderPublic (GetOrderRequest) returns (GetOrderPublicResponse) {}
  rpc GetOrderPrivate (GetOrderRequest) returns (GetOrderPrivateResponse) {}
  rpc SendOrderToWebHookNotifier (GetOrderRequest) returns (ResponseError) {}
  rpc FindAllOrdersPublic (ListOrdersRequest) returns (ListOrdersPublicResponse) {}
  rpc FindAllOrdersPrivate (ListOrdersRequest) returns (ListOrdersPrivateResponse) {}
  rpc FindAllOrders (ListOrdersRequest) returns (ListOrdersResponse) {}
  rpc IsOrderCanBePaying (IsOrderCanBePayingRequest) returns (IsOrderCanBePayingResponse) {}

  rpc GetPriceGroup (billing.GetPriceGroupRequest) returns (billing.PriceGroup) {}
  rpc UpdatePriceGroup (billing.PriceGroup) returns (billing.PriceGroup) {}
  rpc GetPriceGroupByCountry (PriceGroupByCountryRequest) returns (billing.PriceGroup) {}
  rpc GetPriceGroupCurrencies (EmptyRequest) returns (PriceGroupCurrenciesResponse) {}
  rpc GetPriceGroupCurrencyByRegion (PriceGroupByRegionRequest) returns (PriceGroupCurrenciesResponse) {}
  rpc GetRecommendedPriceByPriceGroup (RecommendedPriceRequest) returns (RecommendedPriceResponse) {}
  rpc GetRecommendedPriceByConversion (RecommendedPriceRequest) returns (RecommendedPriceResponse) {}
  rpc GetRecommendedPriceTable (RecommendedPriceTableRequest) returns (RecommendedPriceTableResponse) {}
  rpc GetPriceGroupByRegion (GetPriceGroupByRegionRequest) returns (GetPriceGroupByRegionResponse) {}

  rpc SetUserNotifySales (SetUserNotifyRequest) returns (EmptyResponse) {}
  rpc SetUserNotifyNewRegion (SetUserNotifyRequest) returns (EmptyResponse) {}

  rpc CreateOrUpdatePaymentMethod (billing.PaymentMethod) returns (ChangePaymentMethodResponse) {}
  rpc CreateOrUpdatePaymentMethodProductionSettings (ChangePaymentMethodParamsRequest) returns (ChangePaymentMethodParamsResponse) {}
  rpc GetPaymentMethodProductionSettings (GetPaymentMethodSettingsRequest) returns (GetPaymentMethodSettingsResponse) {}
  rpc DeletePaymentMethodProductionSettings (GetPaymentMethodSettingsRequest) returns (ChangePaymentMethodParamsResponse) {}
  rpc CreateOrUpdatePaymentMethodTestSettings (ChangePaymentMethodParamsRequest) returns (ChangePaymentMethodParamsResponse) {}
  rpc GetPaymentMethodTestSettings (GetPaymentMethodSettingsRequest) returns (GetPaymentMethodSettingsResponse) {}
  rpc DeletePaymentMethodTestSettings (GetPaymentMethodSettingsRequest) returns (ChangePaymentMethodParamsResponse) {}

  rpc FindByZipCode (FindByZipCodeRequest) returns (FindByZipCodeResponse) {}

  rpc GetAllPaymentChannelCostSystem (EmptyRequest) returns (PaymentChannelCostSystemListResponse) {}
  rpc GetPaymentChannelCostSystem (billing.PaymentChannelCostSystemRequest) returns (PaymentChannelCostSystemResponse) {}
  rpc SetPaymentChannelCostSystem (billing.PaymentChannelCostSystem) returns (PaymentChannelCostSystemResponse) {}
  rpc DeletePaymentChannelCostSystem (billing.PaymentCostDeleteRequest) returns (ResponseError) {}

  rpc GetAllPaymentChannelCostMerchant (billing.PaymentChannelCostMerchantListRequest) returns (PaymentChannelCostMerchantListResponse) {}
  rpc GetPaymentChannelCostMerchant (billing.PaymentChannelCostMerchantRequest) returns (PaymentChannelCostMerchantResponse) {}
  rpc SetPaymentChannelCostMerchant (billing.PaymentChannelCostMerchant) returns (PaymentChannelCostMerchantResponse) {}
  rpc SetAllPaymentChannelCostMerchant (SetAllPaymentChannelCostMerchantRequest) returns (SetAllPaymentChannelCostMerchantResponse) {}
  rpc DeletePaymentChannelCostMerchant (billing.PaymentCostDeleteRequest) returns (ResponseError) {}

  rpc GetAllMoneyBackCostSystem (EmptyRequest) returns (MoneyBackCostSystemListResponse) {}
  rpc GetMoneyBackCostSystem (billing.MoneyBackCostSystemRequest) returns (MoneyBackCostSystemResponse) {}
  rpc SetMoneyBackCostSystem (billing.MoneyBackCostSystem) returns (MoneyBackCostSystemResponse) {}
  rpc DeleteMoneyBackCostSystem (billing.PaymentCostDeleteRequest) returns (ResponseError) {}

  rpc GetAllMoneyBackCostMerchant (billing.MoneyBackCostMerchantListRequest) returns (MoneyBackCostMerchantListResponse) {}
  rpc GetMoneyBackCostMerchant (billing.MoneyBackCostMerchantRequest) returns (MoneyBackCostMerchantResponse) {}
  rpc SetMoneyBackCostMerchant (billing.MoneyBackCostMerchant) returns (MoneyBackCostMerchantResponse) {}
  rpc DeleteMoneyBackCostMerchant (billing.PaymentCostDeleteRequest) returns (ResponseError) {}

  rpc CreateAccountingEntry (CreateAccountingEntryRequest) returns (CreateAccountingEntryResponse) {}

  rpc GetUserProfile (GetUserProfileRequest) returns (GetUserProfileResponse) {}
  rpc CreateOrUpdateUserProfile (UserProfile) returns (CreateOrUpdateUserProfileResponse) {}
  rpc ConfirmUserEmail (ConfirmUserEmailRequest) returns (ConfirmUserEmailResponse) {}
  rpc CreatePageReview (CreatePageReviewRequest) returns (CheckProjectRequestSignatureResponse) {}

  rpc CreateRoyaltyReport (CreateRoyaltyReportRequest) returns (CreateRoyaltyReportRequest) {}
  rpc ListRoyaltyReports (ListRoyaltyReportsRequest) returns (ListRoyaltyReportsResponse) {}
  rpc GetRoyaltyReport (GetRoyaltyReportRequest) returns (GetRoyaltyReportResponse) {}
  rpc ChangeRoyaltyReport (ChangeRoyaltyReportRequest) returns (ResponseError) {}
  rpc ListRoyaltyReportOrders (ListRoyaltyReportOrdersRequest) returns (TransactionsResponse) {}
  rpc MerchantReviewRoyaltyReport (MerchantReviewRoyaltyReportRequest) returns (ResponseError) {}
  rpc AutoAcceptRoyaltyReports (EmptyRequest) returns (EmptyResponse) {}
  rpc RoyaltyReportPdfUploaded (RoyaltyReportPdfUploadedRequest) returns (RoyaltyReportPdfUploadedResponse) {}

  rpc GetVatReportsDashboard (EmptyRequest) returns (VatReportsResponse) {}
  rpc GetVatReportsForCountry (VatReportsRequest) returns (VatReportsResponse) {}
  rpc GetVatReportTransactions (VatTransactionsRequest) returns (PrivateTransactionsResponse) {}
  rpc ProcessVatReports (ProcessVatReportsRequest) returns (EmptyResponse) {}
  rpc UpdateVatReportStatus (UpdateVatReportStatusRequest) returns (ResponseError) {}
  rpc GetVatReport (VatReportRequest) returns (VatReportResponse) {}

  rpc CalcAnnualTurnovers (EmptyRequest) returns (EmptyResponse) {}
  rpc GetMerchantOnboardingCompleteData (SetMerchantS3AgreementRequest) returns (GetMerchantOnboardingCompleteDataResponse) {}
  rpc CreateOrUpdateKeyProduct (CreateOrUpdateKeyProductRequest) returns (KeyProductResponse) {}
  rpc GetKeyProducts (ListKeyProductsRequest) returns (ListKeyProductsResponse) {}
  rpc GetKeyProduct (RequestKeyProductMerchant) returns (KeyProductResponse) {}
  rpc DeleteKeyProduct (RequestKeyProductMerchant) returns (EmptyResponseWithStatus) {}
  rpc PublishKeyProduct (PublishKeyProductRequest) returns (KeyProductResponse) {}
  rpc UnPublishKeyProduct (UnPublishKeyProductRequest) returns (KeyProductResponse) {}
  rpc GetKeyProductsForOrder (GetKeyProductsForOrderRequest) returns (ListKeyProductsResponse) {}
  rpc GetKeyProductInfo (GetKeyProductInfoRequest) returns (GetKeyProductInfoResponse) {}

  rpc GetPlatforms (ListPlatformsRequest) returns (ListPlatformsResponse) {}

  rpc GetAvailableKeysCount (GetPlatformKeyCountRequest) returns (GetPlatformKeyCountResponse) {}
  rpc UploadKeysFile (PlatformKeysFileRequest) returns (PlatformKeysFileResponse) {}
  rpc GetKeyByID (KeyForOrderRequest) returns (GetKeyForOrderRequestResponse) {}
  rpc ReserveKeyForOrder (PlatformKeyReserveRequest) returns (PlatformKeyReserveResponse) {}
  rpc FinishRedeemKeyForOrder (KeyForOrderRequest) returns (GetKeyForOrderRequestResponse) {}
  rpc CancelRedeemKeyForOrder (KeyForOrderRequest) returns (EmptyResponseWithStatus) {}

  rpc ChangeCodeInOrder (ChangeCodeInOrderRequest) returns (ChangeCodeInOrderResponse) {}

  rpc GetDashboardMainReport (GetDashboardMainRequest) returns (GetDashboardMainResponse) {}
  rpc GetDashboardRevenueDynamicsReport (GetDashboardMainRequest) returns (GetDashboardRevenueDynamicsReportResponse) {}
  rpc GetDashboardBaseReport (GetDashboardBaseReportRequest) returns (GetDashboardBaseReportResponse) {}

  rpc GetDashboardCustomersReport(DashboardCustomerReportRequest) returns (GetDashboardCustomerReportResponse) {}
  rpc GetDashboardCustomerArpu(DashboardCustomerReportArpuRequest) returns (DashboardCustomerReportArpuResponse) {}

  rpc CreatePayoutDocument (CreatePayoutDocumentRequest) returns (CreatePayoutDocumentResponse) {}
  rpc UpdatePayoutDocument (UpdatePayoutDocumentRequest) returns (PayoutDocumentResponse) {}
  rpc GetPayoutDocuments (GetPayoutDocumentsRequest) returns (GetPayoutDocumentsResponse) {}
  rpc GetPayoutDocument (GetPayoutDocumentRequest) returns (PayoutDocumentResponse) {}
  rpc GetPayoutDocumentRoyaltyReports (GetPayoutDocumentRequest) returns (ListRoyaltyReportsResponse) {}
  rpc PayoutDocumentPdfUploaded (PayoutDocumentPdfUploadedRequest) returns (PayoutDocumentPdfUploadedResponse) {}
  rpc AutoCreatePayoutDocuments(EmptyRequest) returns (EmptyResponse) {}

  rpc GetMerchantBalance (GetMerchantBalanceRequest) returns (GetMerchantBalanceResponse) {}

  rpc PaymentFormPlatformChanged (PaymentFormUserChangePlatformRequest) returns (PaymentFormDataChangeResponse) {}

  rpc CheckSkuAndKeyProject(CheckSkuAndKeyProjectRequest) returns (EmptyResponseWithStatus) {}

  rpc GetPaylinks (GetPaylinksRequest) returns (GetPaylinksResponse) {}
  rpc GetPaylink (PaylinkRequest) returns (GetPaylinkResponse) {}
  rpc IncrPaylinkVisits (PaylinkRequestById) returns (EmptyResponse) {}
  rpc GetPaylinkURL (GetPaylinkURLRequest) returns (GetPaylinkUrlResponse) {}
  rpc CreateOrUpdatePaylink (paylink.CreatePaylinkRequest) returns (GetPaylinkResponse) {}
  rpc DeletePaylink (PaylinkRequest) returns (EmptyResponseWithStatus) {}
  rpc GetPaylinkStatTotal (GetPaylinkStatCommonRequest) returns (GetPaylinkStatCommonResponse) {}
  rpc GetPaylinkStatByCountry (GetPaylinkStatCommonRequest) returns (GetPaylinkStatCommonGroupResponse) {}
  rpc GetPaylinkStatByReferrer (GetPaylinkStatCommonRequest) returns (GetPaylinkStatCommonGroupResponse) {}
  rpc GetPaylinkStatByDate (GetPaylinkStatCommonRequest) returns (GetPaylinkStatCommonGroupResponse) {}
  rpc GetPaylinkStatByUtm (GetPaylinkStatCommonRequest) returns (GetPaylinkStatCommonGroupResponse) {}
  rpc GetPaylinkTransactions (GetPaylinkTransactionsRequest) returns (TransactionsResponse) {}
  rpc GetPaylinkUrlByShortLink (GetPaylinkUrlByShortLinkRequest) returns (GetPaylinkUrlByShortLinkResponse) {}

  rpc DeleteSavedCard(DeleteSavedCardRequest) returns (EmptyResponseWithStatus) {}

  rpc GetOperatingCompaniesList (EmptyRequest) returns (GetOperatingCompaniesListResponse) {}
  rpc AddOperatingCompany (billing.OperatingCompany) returns (EmptyResponseWithStatus) {}
  rpc GetOperatingCompany (GetOperatingCompanyRequest) returns (GetOperatingCompanyResponse) {}

  rpc GetPaymentMinLimitsSystem (EmptyRequest) returns (GetPaymentMinLimitsSystemResponse) {}
  rpc SetPaymentMinLimitSystem (billing.PaymentMinLimitSystem) returns (EmptyResponseWithStatus) {}

  rpc GetMerchantUsers(GetMerchantUsersRequest) returns (GetMerchantUsersResponse) {}
  rpc GetAdminUsers(EmptyRequest) returns (GetAdminUsersResponse) {}
  rpc InviteUserMerchant(InviteUserMerchantRequest) returns (InviteUserMerchantResponse) {}
  rpc InviteUserAdmin(InviteUserAdminRequest) returns (InviteUserAdminResponse) {}
  rpc ResendInviteMerchant(ResendInviteMerchantRequest) returns (EmptyResponseWithStatus) {}
  rpc ResendInviteAdmin(ResendInviteAdminRequest) returns (EmptyResponseWithStatus) {}
  rpc AcceptInvite(AcceptInviteRequest) returns (AcceptInviteResponse) {}
  rpc CheckInviteToken(CheckInviteTokenRequest) returns (CheckInviteTokenResponse) {}
  rpc GetMerchantsForUser(GetMerchantsForUserRequest) returns (GetMerchantsForUserResponse) {}
  rpc ChangeRoleForMerchantUser(ChangeRoleForMerchantUserRequest) returns (EmptyResponseWithStatus) {}
  rpc ChangeRoleForAdminUser(ChangeRoleForAdminUserRequest) returns (EmptyResponseWithStatus) {}
  rpc GetRoleList(GetRoleListRequest) returns (GetRoleListResponse) {}
  rpc DeleteMerchantUser(MerchantRoleRequest) returns (EmptyResponseWithStatus) {}
  rpc DeleteAdminUser(AdminRoleRequest) returns (EmptyResponseWithStatus) {}
  rpc GetMerchantUserRole(MerchantRoleRequest) returns (UserRoleResponse) {}
  rpc GetAdminUserRole(AdminRoleRequest) returns (UserRoleResponse) {}
  rpc GetCommonUserProfile(CommonUserProfileRequest) returns (CommonUserProfileResponse) {}
  rpc GetAdminByUserId(CommonUserProfileRequest) returns (UserRoleResponse) {}

  rpc SendWebhookToMerchant(billing.OrderCreateRequest) returns (SendWebhookToMerchantResponse) {}
  rpc NotifyWebhookTestResults(NotifyWebhookTestResultsRequest) returns (EmptyResponseWithStatus) {}
  rpc RoyaltyReportFinanceDone(ReportFinanceDoneRequest) returns (EmptyResponseWithStatus) {}
  rpc PayoutFinanceDone(ReportFinanceDoneRequest) returns (EmptyResponseWithStatus) {}
  rpc GetActOfCompletion(ActOfCompletionRequest) returns (ActOfCompletionResponse) {}
  rpc GetActsOfCompletionList(ActsOfCompletionListRequest) returns (ActsOfCompletionListResponse) {}
  rpc SetCustomerPaymentActivity(SetCustomerPaymentActivityRequest) returns (EmptyResponseWithStatus) {}

  rpc GetCustomerList(ListCustomersRequest) returns (ListCustomersResponse) {}
  rpc GetCustomerInfo(GetCustomerInfoRequest) returns (GetCustomerInfoResponse) {}
  rpc GetCustomerShortInfo(GetCustomerShortInfoRequest) returns (GetCustomerShortInfoResponse) {}

  rpc DeserializeCookie(DeserializeCookieRequest) returns (DeserializeCookieResponse) {}

  rpc DeleteCustomerCard(DeleteCustomerCardRequest) returns (EmptyResponseWithStatus) {}

  rpc AddRecurringPlan(billing.RecurringPlan) returns (AddRecurringPlanResponse) {}
  rpc UpdateRecurringPlan(billing.RecurringPlan) returns (UpdateRecurringPlanResponse) {}
  rpc EnableRecurringPlan(EnableRecurringPlanRequest) returns (EnableRecurringPlanResponse) {}
  rpc DisableRecurringPlan(DisableRecurringPlanRequest) returns (DisableRecurringPlanResponse) {}
  rpc DeleteRecurringPlan(DeleteRecurringPlanRequest) returns (DeleteRecurringPlanResponse) {}
  rpc GetRecurringPlan(GetRecurringPlanRequest) returns (GetRecurringPlanResponse) {}
  rpc GetRecurringPlans(GetRecurringPlansRequest) returns (GetRecurringPlansResponse) {}
  rpc GetRecurringPlanStat(GetRecurringPlanStatRequest) returns (GetRecurringPlanStatResponse) {}
  rpc FindExpiredSubscriptions(FindExpiredSubscriptionsRequest) returns (FindExpiredSubscriptionsResponse) {}
  rpc DeleteRecurringSubscription(DeleteRecurringSubscriptionRequest) returns (EmptyResponseWithStatus) {}
  rpc FindSubscriptions(FindSubscriptionsRequest) returns (FindSubscriptionsResponse) {}
  rpc GetSubscription(GetSubscriptionRequest) returns (GetSubscriptionResponse) {}
  rpc GetSubscriptionsOrders(GetSubscriptionsOrdersRequest) returns (GetSubscriptionsOrdersResponse) {}
  rpc SetSubscriptionRenewalPending(SetSubscriptionRenewalPendingRequest) returns (EmptyResponseWithStatus) {}

  rpc AddMerchantDocument(billing.MerchantDocument) returns (AddMerchantDocumentResponse) {}
  rpc GetMerchantDocuments(GetMerchantDocumentsRequest) returns (GetMerchantDocumentsResponse) {}
  rpc GetMerchantDocument(GetMerchantDocumentRequest) returns (GetMerchantDocumentResponse) {}

  rpc Ping(EmptyRequest) returns (EmptyResponse) {}
}

message EmptyRequest {}
message EmptyResponse {}

message EmptyResponseWithStatus {
  // The response status code.
  int32 status = 1;
  // The response error message (if any).
  ResponseErrorMessage message = 2;
}

message CheckSkuAndKeyProjectRequest {
  //@inject_tag: validate:"required,max=255"
  //
  // The SKU of the project's product.
  string sku = 1;
  //@inject_tag: validate:"required,hexadecimal,len=24" param:"project_id" json:"-"
  string project_id = 2;
  // @inject_tag: validate:"required,hexadecimal,len=24" param:"merchant_id"
  string merchant_id = 3;
}

message ChangeCodeInOrderRequest {
  //@inject_tag: validate:"required" json:"-"
  string order_id = 1;
  //@inject_tag: validate:"required,hexadecimal,len=24" required:"true"
  //
  // The unique identifier for the key-activated product.
  string key_product_id = 2;
}

message ChangeCodeInOrderResponse {
  int32 status = 1;
  ResponseErrorMessage message = 2;
  billing.Order order = 3;
}

message GetPlatformKeyCountResponse {
  // The response status code.
  int32 status = 1;
  // The response error message (if any).
  ResponseErrorMessage message = 2;
  //@inject_tag: json:"count"
  //
  // The total number of keys for products.
  int32 count = 3;
}

message KeyForOrderRequest {
  //@inject_tag: validate:"required,hexadecimal,len=24"
  string key_id = 1;
  // @inject_tag: validate:"required,hexadecimal,len=24" param:"merchant_id"
  string merchant_id = 2;
}

message GetKeyForOrderRequestResponse {
  int32 status = 1;
  ResponseErrorMessage message = 2;
  //@inject_tag: json:"key"
  billing.Key key = 3;
}

message PlatformKeyReserveResponse {
  int32 status = 1;
  ResponseErrorMessage message = 2;
  //@inject_tag: json:"key_id"
  string key_id = 3;
}

message PlatformKeyReserveRequest {
  //@inject_tag: validate:"required,hexadecimal,len=24"
  string key_product_id = 2;
  //@inject_tag: validate:"hexadecimal,len=24"
  string merchant_id = 3;
  //@inject_tag: validate:"required,max=255"
  string platform_id = 4;
  //@inject_tag: validate:"required"
  int32 ttl = 5;
  //@inject_tag: validate:"required,hexadecimal,len=24"
  string order_id = 6;
}

message PlatformKeysFileResponse {
  // The response status code.
  int32 status = 1;
  // The response error message (if any).
  ResponseErrorMessage message = 2;
  // The number of the processed keys.
  int32 keys_processed = 3;
  // The total number of keys.
  int32 total_count = 4;
}

message PlatformKeysFileRequest {
  //@inject_tag: validate:"required,max=10485760" required:"true"
  //
  // The file with keys.
  bytes file = 1;
  //@inject_tag: validate:"required,hexadecimal,len=24" json:"-"
  string key_product_id = 2;
  //@inject_tag: validate:"hexadecimal,len=24" json:"-" param:"merchant_id"
  string merchant_id = 3;
  //@inject_tag: validate:"required,max=255" json:"-"
  string platform_id = 4;
}

message GetPlatformKeyCountRequest {
  //@inject_tag: query:"key_product_id" validate:"required,hexadecimal,len=24"
  string key_product_id = 1;
  //@inject_tag: validate:"hexadecimal,len=24" param:"merchant_id"
  string merchant_id = 2;
  //@inject_tag: query:"platform_id" validate:"required,max=255"
  string platform_id = 3;
}

message RemovePlatformRequest {
  //@inject_tag: validate:"required,hexadecimal,len=24"
  string key_product_id = 1;
  //@inject_tag: validate:"hexadecimal,len=24" json:"merchant_id"
  string merchant_id = 2;
  //@inject_tag: validate:"required,max=255"
  string platform_id = 3;
}

message KeyProductResponse {
  int32 status = 1;
  ResponseErrorMessage message = 2;
  //@inject_tag: json:"product"
  KeyProduct product = 3;
}

message CreateOrUpdateKeyProductRequest {
  //@inject_tag: validate:"required,min=1" required:"true"
  //
  // The list of the product's localized names.
  map<string, string> name = 1;
  //@inject_tag: validate:"required,hexadecimal,len=24" required:"true"
  //
  // The unique identifier for the project.
  string project_id = 2;
  //@inject_tag: validate:"required,min=1" required:"true"
  //
  // The list of the product's localized concise descriptions.
  map<string, string> description = 3;
  //@inject_tag: json:"long_description"
  //
  // The list of the product's localized extended descriptions.
  map<string, string> long_description = 4;
  //@inject_tag: validate:"required,max=255" required:"true"
  //
  // The SKU of the product.
  string sku = 5;
  //@inject_tag: json:"cover"
  //
  // The product's covers for each localization.
  billing.ImageCollection cover = 6;
  //@inject_tag: validate:"omitempty,url" json:"url"
  //
  // The product's URL in the merchant project.
  string url = 7;
  //@inject_tag: validate:"required,alpha,len=3" json:"default_currency" required:"true"
  //
  // The product's default currency. Three-letter Currency Code ISO 4217, in uppercase.
  string default_currency = 8;
  //@inject_tag: validate:"hexadecimal,len=24" json:"merchant_id" param:"merchant_id"
  //
  // The unique identifier for the merchant.
  string merchant_id = 9;
  //@inject_tag: validate:"omitempty,hexadecimal,len=24"
  //
  // The unique identifier for the key-activated product.
  string id = 10;
  //@inject_tag: json:"object" validate:"required" required:"true"
  //
  // The system constant that contains the returned object's type.
  string object = 11;
  //@inject_tag: json:"metadata"
  //
  // The string-value description for the product.
  map<string, string> metadata = 12;
  //@inject_tag: validate:"dive" json:"platforms"
  //
  // The list of the platforms.
  repeated PlatformPrice platforms = 13;
  // @inject_tag: json:"pricing" validate:"required,oneof=currency manual steam default" required:"true"
  //
  // The pricing mode. Available values: currency, manual, steam, default.
  string pricing = 14;
  // @inject_tag: json:"minimal_limit_notify" validate:"omitempty"
  //
  // The minimum number of keys to send a notification that they are running out.
  int32 minimal_limit_notify = 15;
}

message UnPublishKeyProductRequest {
  //@inject_tag: validate:"required,hexadecimal,len=24" json:"-"
  string key_product_id = 1;
  //@inject_tag: validate:"required" json:"-" param:"merchant_id"
  string merchant_id = 2;
}

message PublishKeyProductRequest {
  //@inject_tag: validate:"required,hexadecimal,len=24" json:"-"
  string key_product_id = 1;
  //@inject_tag: validate:"hexadecimal,len=24" json:"-" param:"merchant_id"
  string merchant_id = 2;
}

message ListPlatformsRequest {
  // @inject_tag: query:"limit" validate:"required,numeric,gt=0"
  int32 limit = 1;
  // @inject_tag: query:"offset" validate:"omitempty,numeric,gte=0"
  int32 offset = 2;
}

message ListPlatformsResponse {
  // The response status code.
  int32 status = 1;
  // The response error message (if any).
  ResponseErrorMessage message = 2;
  // @inject_tag: json:"limit"
  //
  // The number of platforms returned in one page.
  int32 limit = 3;
  // @inject_tag: json:"offset"
  //
  // The ranking number of the first item on the page.
  int32 offset = 4;
  // @inject_tag: json:"count"
  //
  // The total number of found products.
  int32 count = 5;
  // @inject_tag: json:"platforms"
  //
  // The list of platforms.
  repeated Platform platforms = 6;
}

message ListKeyProductsResponse {
  // The response status code.
  int32 status = 1;
  // The response error message (if any).
  ResponseErrorMessage message = 2;
  // @inject_tag: json:"limit"
  //
  // The number of products returned in one page.
  int64 limit = 3;
  // @inject_tag: json:"offset"
  //
  // The ranking number of the first item on the page.
  int64 offset = 4;
  // @inject_tag: json:"count"
  //
  // The total number of found products.
  int64 count = 5;
  // @inject_tag: json:"products"
  //
  // The list of key-activated products.
  repeated KeyProduct products = 6;
}

message ListKeyProductsRequest {
  //@inject_tag: query:"name" json:"name"
  string name = 1;
  //@inject_tag: query:"sku" json:"sku"
  string sku = 2;
  // @inject_tag: query:"limit" validate:"required,numeric,gt=0" json:"limit"
  int64 limit = 3;
  // @inject_tag: query:"offset" validate:"omitempty,numeric,gte=0" json:"offset"
  int64 offset = 4;
  //@inject_tag: validate:"required,hexadecimal,len=24" param:"merchant_id"
  string merchant_id = 5;
  //@inject_tag: query:"project_id" validate:"omitempty,hexadecimal,len=24"
  string project_id = 6;
  //@inject_tag: query:"enabled" validate:"omitempty,oneof=true false"
  string enabled = 7;
}

message PaymentCreateRequest {
  // @inject_tag: required:"true"
  //
  // The customer's payment requisites.
  map<string, string> data = 1;
  // @inject_tag: json:"-"
  string ip = 3;
  // @inject_tag: json:"-"
  string accept_language = 4;
  // @inject_tag: json:"-"
  string user_agent = 5;
  string cookie = 6;
}

message PaymentCreateResponse {
  int32 status = 1;
  ResponseErrorMessage message = 2;
  string redirect_url = 3;
  bool need_redirect = 4;
  // @inject_tag: json:"-"
  string cookie = 5;
  google.protobuf.Timestamp recurring_expire_date = 6;
}

message PaymentFormJsonDataRequest {
  // @inject_tag: validate:"required,uuid" param:"order_id"
  string order_id = 1;
  string scheme = 2;
  string host = 3;
  string locale = 4;
  string ip = 5;
  string user_agent = 6;
  string cookie = 7;
  string referer = 8;
  bool is_embedded = 9;
  string issuer_reference = 10;
  string issuer_reference_type = 11;
  string utm_source = 12;
  string utm_medium = 13;
  string utm_campaign = 14;
}

message PaymentFormJsonDataProject {
  // @inject_tag: json:"name"
  //
  // The project's name.
  string name = 1;
  // @inject_tag: json:"url_success"
  //
  // The redirect URL for a successful payment. Has an empty value if the dynamic notify URLs option is not set in the Project Settings.
  string url_success = 2;
  // @inject_tag: json:"url_fail"
  //
  // The redirect URL for a failed payment. Has an empty value if the dynamic notify URLs option is not set in the Project Settings.
  string url_fail = 3;
  // @inject_tag: json:"id"
  //
  // The unique identifier for the project.
  string id = 4;
  //@inject_tag: json:"redirect_settings" bson:"redirect_settings" validate:"required,dive"
  //
  //Object contain setting for user's redirect after when payment ending
  billing.ProjectRedirectSettings redirect_settings = 5;
  // @inject_tag: json:"form_default_text"
  //
  // The localized default text on payment form ("In-game purchase")
  string form_default_text = 6;
}

message PaymentFormJsonData {
  // The unique identifier for the order.
  string id = 1;
  // @inject_tag: json:"account,omitempty"
  //
  // The customer account in the merchant project. Can be an empty string.
  string account = 2;
  // @inject_tag: json:"has_vat"
  //
  // Has a true value if the payment has the VAT commission.
  bool has_vat = 3;
  // @inject_tag: json:"vat"
  //
  // The amount of VAT.
  double vat = 4;
  // The payment amount without VAT.
  double amount = 5;
  // The payment amount including VAT.
  double total_amount = 6;
  // The currency of the payment order.
  string currency = 7;
  // The PaySuper Project data.
  PaymentFormJsonDataProject project = 8;
  // The available payment methods list.
  repeated billing.PaymentFormPaymentMethod payment_methods = 9;
  // An access token to subscribe a WebSocket private channel.
  string token = 11;
  // @inject_tag: json:"user_address_data_required"
  //
  // Has a true value if it's required to get a real customer's geo-position information.
  bool user_address_data_required = 12;
  // @inject_tag: json:"user_ip_data"
  //
  // The customer's IP address data.
  billing.UserIpData user_ip_data = 13;
  // @inject_tag: json:"items" validate="omitempty,gte=1,dive"
  //
  // The list of purchased items in this order. Can be null for a payment order with the simple or virtual_currency types.
  repeated billing.OrderItem items = 14;
  // @inject_tag: json:"email"
  //
  // The customer's email.
  string email = 16;
  // @inject_tag: json:"description"
  //
  // An order description.
  string description = 17;
  //@inject_tag: json:"country_payments_allowed"
  //
  // Has a true value if the payments are allowed from this customer's country.
  bool country_payments_allowed = 18;
  //@inject_tag: json:"country_change_allowed"
  //
  // Has a true value if the customer can select another country while payments are disallowed for his country.
  bool country_change_allowed = 19;
  //@inject_tag: json:"platforms"
  //
  // The list of supported platforms if this payment is for the key type. For another types, this field can be null.
  repeated Platform platforms = 20;
  //@inject_tag: json:"lang"
  //
  // The language predefined by the payment token in the merchant project for a payment form.
  string lang = 21;
  //@inject_tag: json:"is_already_processed"
  //
  // Has a true value if the order has already been processed.
  bool is_already_processed = 22;
  //@inject_tag: json:"receipt_url"
  //
  // A receipt link for a completed payment.
  string receipt_url = 23;
  //@inject_tag: json:"type"
  //
  // The order type. It depends on your sales option (Game Keys, Virtual Items, Virtual Currency, the simple checkout). Available values: key, product, virtual_currency, simple.
  string type = 24;
  // @inject_tag: json:"charge_currency"
  //
  // The currency of the order charge. It can differ from the order currency because it also depends on the customer's card currency.
  string charge_currency = 25;
  // @inject_tag: json:"charge_amount"
  //
  // The total amount of the order charge.
  double charge_amount = 26;
  // @inject_tag: json:"vat_in_charge_currency"
  //
  // The VAT currency of the order charge. It can differ from the order currency because it depends on the customer's card currency.
  double vat_in_charge_currency = 27;
  // @inject_tag: json:"vat_rate"
  //
  // VAT rate.
  double vat_rate = 28;
  // @inject_tag: json:"vat_payer"
  //
  // The responsible for VAT. Available values: buyer (VAT is added to the order charge), seller (VAT is included in the order charge), nobody (VAT exempt).
  string vat_payer = 29;
  // @inject_tag: json:"is_production"
  //
  // Has a true value for a production payment and false for a test payment that goes through a test sandbox.
  bool is_production = 30;
  //@inject_tag: json:"recurring_settings"
  //
  //Settings for recurring payments.
  billing.OrderRecurringSettings recurring_settings = 31;
  //@inject_tag: json:"recurring_management_url"
  //
  //URL for managing customer recurring subscriptions.
  string recurring_management_url = 32;
}

message PaymentFormJsonDataResponse {
  //@inject_tag: json:"status"
  int32 status = 1;
  //@inject_tag: json:"message"
  ResponseErrorMessage message = 2;
  //@inject_tag: json:"item"
  PaymentFormJsonData item = 3;
  // @inject_tag: json:"-"
  string cookie = 4;
}

message PaymentNotifyRequest {
  string order_id = 1;
  bytes request = 2;
  string signature = 3;
}

message PaymentNotifyResponse {
  int32 status = 1;
  string error = 2;
}

message OnboardingRequest {
  // @inject_tag: validate:"omitempty,hexadecimal,len=24"
  string id = 1;
  //@inject_tag: validate:"required"
  billing.MerchantUser user = 2;
  billing.MerchantCompanyInfo company = 3;
  billing.MerchantContact contacts = 14;
  billing.MerchantBanking banking = 15;
}

message FindByIdRequest {
  string id = 1;
}

message MerchantListingRequest {
  // @inject_tag: query:"name"
  string name = 1;
  int32 is_signed = 2;
  // @inject_tag: query:"last_payout_date_from" validate:"omitempty,datetime"
  string last_payout_date_from = 3;
  // @inject_tag: query:"last_payout_date_to" validate:"omitempty,datetime"
  string last_payout_date_to = 4;
  // @inject_tag: query:"last_payout_amount" validate:"omitempty,numeric"
  double last_payout_amount = 5;
  // @inject_tag: query:"sort[]"
  repeated string sort = 6;
  // @inject_tag: query:"limit" validate:"omitempty,numeric,gt=0"
  int64 limit = 7;
  // @inject_tag: query:"offset" validate:"omitempty,numeric,gte=0"
  int64 offset = 8;
  // @inject_tag: query:"quick_search"
  string quick_search = 9;
  // @inject_tag: query:"status[]"
  repeated int32 statuses = 10;
  // @inject_tag: query:"registration_date_from" validate:"omitempty,datetime"
  string registration_date_from = 11;
  // @inject_tag: query:"registration_date_to" validate:"omitempty,datetime"
  string registration_date_to = 12;
  // @inject_tag: query:"received_date_from" validate:"omitempty,datetime"
  string received_date_from = 13;
  // @inject_tag: query:"received_date_to" validate:"omitempty,datetime"
  string received_date_to = 14;
  // @inject_tag: query:"status_last_updated_from" validate:"omitempty,datetime"
  string status_last_updated_from = 15;
  // @inject_tag: query:"status_last_updated_to" validate:"omitempty,datetime"
  string status_last_updated_to = 16;
}

message MerchantListingResponse {
  // @inject_tag: json:"count"
  //
  // The total number of the merchants.
  int64 count = 1;
  // @inject_tag: json:"items"
  //
  // The merchants list.
  repeated billing.MerchantShortInfo items = 2;
}

message ListMerchantsForAgreementResponse {
  // @inject_tag: json:"count"
  //
  // The total number of the merchants.
  int64 count = 1;
  // @inject_tag: json:"items"
  //
  // The merchants list.
  repeated billing.Merchant items = 2;
}

message MerchantChangeStatusRequest {
  // @inject_tag: validate:"required,hexadecimal" json:"-" param:"merchant_id"
  string merchant_id = 1;
  // @inject_tag: json:"-"
  string user_id = 2;
  // @inject_tag: validate:"omitempty,numeric,oneof=5 6 4 11"
  //
  // The merchant's status. Available values: 5 - removed, 6 - rejected, 4 - signed, 11 - suspend.
  int32 status = 3;
  // The information about changes.
  string message = 4;
}

message NotificationRequest {
  // @inject_tag: validate:"required,hexadecimal" json:"-" param:"merchant_id"
  string merchant_id = 1;
  // @inject_tag: json:"-"
  string user_id = 2;
  // @inject_tag: validate:"required" required:"true"
  //
  // The notification title.
  string title = 3;
  // @inject_tag: validate:"required" required:"true"
  //
  // The notification message.
  string message = 4;
}

message Notifications {
  // @inject_tag: json:"count"
  //
  // The total number of found notifications.
  int64 count = 1;
  // @inject_tag: json:"items"
  //
  // The list of notifications.
  repeated billing.Notification items = 2;
}

message ListingNotificationRequest {
  // @inject_tag: validate:"required,hexadecimal,len=24" param:"merchant_id"
  string merchant_id = 1;
  // @inject_tag: query:"user" validate:"omitempty,hexadecimal,len=24"
  string user_id = 2;
  // @inject_tag: query:"-"
  int32 is_system = 3;
  // @inject_tag: query:"limit" validate:"omitempty,numeric,gt=0"
  int64 limit = 4;
  // @inject_tag: query:"offset" validate:"omitempty,numeric,gte=0"
  int64 offset = 5;
  // @inject_tag: query:"sort[]"
  repeated string sort = 6;
  // @inject_tag: query:"is_system"
  bool query_is_system = 7;
}

message ListingMerchantPaymentMethod {
  repeated billing.MerchantPaymentMethod payment_methods = 1;
}

message GetMerchantPaymentMethodRequest {
  // @inject_tag: validate:"required,hexadecimal,len=24"
  string merchant_id = 1;
  // @inject_tag: query:"payment_method_id", validate:"required,hexadecimal,len=24"
  string payment_method_id = 2;
}

message GetMerchantPaymentMethodResponse {
  int32 status = 1;
  ResponseErrorMessage message = 2;
  billing.MerchantPaymentMethod item = 3;
}

message ListMerchantPaymentMethodsRequest {
  // @inject_tag: validate:"required,hexadecimal,len=24"
  string merchant_id = 1;
  // @inject_tag: query:"method_name"
  string payment_method_name = 2;
  // @inject_tag: query:"sort[]"
  repeated string sort = 3;
}

message MerchantPaymentMethodRequest {
  // @inject_tag: validate:"required,hexadecimal,len=24"
  string merchant_id = 2;
  // @inject_tag: validate:"required,dive"
  billing.MerchantPaymentMethodIdentification payment_method = 3;
  // @inject_tag: validate:"required,dive"
  billing.MerchantPaymentMethodCommissions commission = 4;
  // @inject_tag: validate:"required,dive"
  billing.MerchantPaymentMethodIntegration integration = 5;
  // @inject_tag: validate:"required"
  bool is_active = 6;
  // @inject_tag: validate:"required,hexadecimal,len=24"
  string user_id = 7;
}

message MerchantPaymentMethodResponse {
  int32 status = 1;
  ResponseErrorMessage message = 2;
  billing.MerchantPaymentMethod item = 3;
}

message GetMerchantResponse {
  int32 status = 1;
  ResponseErrorMessage message = 2;
  billing.Merchant item = 3;
}

message GetNotificationRequest {
  // @inject_tag: validate:"required,hexadecimal,len=24" param:"merchant_id"
  string merchant_id = 1;
  // @inject_tag: validate:"required,hexadecimal,len=24" param:"notification_id"
  string notification_id = 2;
}

message CreateRefundRequest {
  // @inject_tag: validate:"required,uuid" json:"-"
  string order_id = 1;
  // @inject_tag: validate:"required,numeric,gt=0" required:"true"
  //
  // The refund amount.
  double amount = 2;
  // The unique identifier for the user initiated an action on the return.
  string creator_id = 3;
  // The refund reason. Available values: Customer's request, Redeem chargeback, Purchase not provided, Card data was stolen.
  string reason = 4;
  // Has a true value if this refund is a chargeback.
  bool is_chargeback = 5;
  // @inject_tag: validate:"omitempty,hexadecimal,len=24" json:"-"
  string merchant_id = 6;
}

message CreateRefundResponse {
  int32 status = 1;
  ResponseErrorMessage message = 2;
  billing.Refund item = 3;
}

message ListRefundsRequest {
  // @inject_tag: validate:"required,uuid" param:"order_id"
  string order_id = 1;
  // @inject_tag: validate:"required,hexadecimal,len=24" param:"merchant_id"
  string merchant_id = 2;
  // @inject_tag: query:"limit" validate:"omitempty,numeric,gt=0"
  int64 limit = 7;
  // @inject_tag: query:"offset" validate:"omitempty,numeric,gte=0"
  int64 offset = 8;
}

message ListRefundsResponse {
  // @inject_tag: json:"count"
  //
  // The total number of found refunds.
  int64 count = 1;
  // @inject_tag: json:"items"
  //
  // The list of the refunds.
  repeated billing.Refund items = 2;
}

message GetRefundRequest {
  // @inject_tag: validate:"required,uuid" param:"order_id"
  string order_id = 1;
  // @inject_tag: validate:"required,hexadecimal,len=24" param:"refund_id"
  string refund_id = 2;
  // @inject_tag: validate:"omitempty,hexadecimal,len=24"
  string merchant_id = 3;
}

message CallbackRequest {
  string handler = 1;
  bytes body = 2;
  string signature = 3;
}

message PaymentFormDataChangedRequest {
  string order_id = 1;
  string lang = 2;
  string account = 3;
}

message PaymentFormUserChangePlatformRequest {
  // @inject_tag: validate:"required,uuid" param:"order_id" required:"true"
  //
  // The unique identifier for the order.
  string order_id = 1;
  // @inject_tag: validate:"required,min=2,max=255" required:"true"
  //
  // The platform's name. Available values: steam, gog, uplay, origin, psn, xbox, nintendo, itch, egs.
  string platform = 2;
}

message PaymentFormUserChangeLangRequest {
  // @inject_tag: validate:"required,uuid" param:"order_id" required:"true"
  //
  // The unique identifier for the order.
  string order_id = 1;
  // @inject_tag: validate:"required,len=2" required:"true"
  //
  // The language code.
  string lang = 2;
  // @inject_tag: json:"-"
  string ip = 3;
  // @inject_tag: json:"-"
  string accept_language = 4;
  // @inject_tag: json:"-"
  string user_agent = 5;
}

message PaymentFormUserChangePaymentAccountRequest {
  // @inject_tag: validate:"required,uuid" param:"order_id" required:"true"
  //
  // The unique identifier for the order.
  string order_id = 1;
  // @inject_tag: validate:"required,hexadecimal,len=24" required:"true"
  //
  // The unique identifier for the payment method.
  string method_id = 2;
  // @inject_tag: validate:"required" required:"true"
  //
  // The customer account in the merchant project.
  string account = 3;
  // @inject_tag: json:"-"
  string ip = 4;
  // @inject_tag: json:"-"
  string accept_language = 5;
  // @inject_tag: json:"-"
  string user_agent = 6;
}

message PaymentFormDataChangeResponse {
  int32 status = 1;
  ResponseErrorMessage message = 2;
  billing.PaymentFormDataChangeResponseItem item = 3;
}

message ProcessBillingAddressRequest {
  // @inject_tag: validate:"required,uuid" param:"order_id" required:"true"
  //
  // The unique identifier for the order.
  string order_id = 1;
  // @inject_tag: validate:"required,len=2" required:"true"
  //
  // The customer's country. Two-letter country code in ISO 3166-1, in uppercase (for instance US).
  string country = 2;
  // @inject_tag: validate:"omitempty,zip_usa"
  //
  // The customer's ZIP code.
  string zip = 4;
  // @inject_tag: json:"-"
  string ip = 5;
  // @inject_tag: json:"-"
  string cookie = 6;
}

message ProcessBillingAddressResponseItem {
  // @inject_tag: json:"has_vat"
  //
  // Has a true value if the payment has the VAT commission.
  bool has_vat = 2;
  // @inject_tag: json:"vat"
  //
  // The amount of VAT.
  double vat = 3;
  // @inject_tag: json:"amount"
  //
  // The payment amount without VAT.
  double amount = 4;
  // @inject_tag: json:"total_amount"
  //
  // The payment amount including VAT.
  double total_amount = 5;
  //@inject_tag: json:"currency"
  //
  // The currency of the order.
  string currency = 6;
  // @inject_tag: json:"items"
  //
  // The list of purchased items in this order. Can be null for a payment order with the simple or virtual_currency types.
  repeated billing.OrderItem items = 7;
  // @inject_tag: json:"charge_currency"
  //
  // The currency of the order charge. It can differ from the order currency because it also depends on the customer's card currency.
  string charge_currency = 8;
  // @inject_tag: json:"charge_amount"
  //
  // The total amount of the order charge.
  double charge_amount = 9;
  // @inject_tag: json:"vat_in_charge_currency"
  //
  // The VAT currency of the order charge. It can differ from the order currency because it depends on the customer's card currency.
  double vat_in_charge_currency = 10;
  // @inject_tag: json:"country_change_allowed"
  //
  // Has a true value if the customer can select another country while payments are disallowed for his country.
  bool country_change_allowed = 11;
  // @inject_tag: json:"vat_rate"
  //
  // VAT rate.
  double vat_rate = 12;
}

message ProcessBillingAddressResponse {
  int32 status = 1;
  ResponseErrorMessage message = 2;
  ProcessBillingAddressResponseItem item = 3;
  // @inject_tag: json:"-"
  string cookie = 4;
}

message GetMerchantByRequest {
  //@inject_tag: validate:"hexadecimal,len=24" param:"merchant_id"
  string merchant_id = 1;
  string user_id = 2;
}

message ChangeMerchantDataRequest {
  // @inject_tag: validate:"required,hexadecimal,len=24" param:"merchant_id"
  //
  // The unique identifier for the merchant.
  string merchant_id = 1;
  // Has a true value if the merchant has signed the license agreement.
  bool has_merchant_signature = 3;
  // Has a true value if PaySuper has signed the license agreement.
  bool has_psp_signature = 4;
}

message ChangeMerchantDataResponse {
  int32 status = 1;
  ResponseErrorMessage message = 2;
  billing.Merchant item = 3;
}

message ChangeMerchantResponse {
  int32 status = 1;
  ResponseErrorMessage message = 2;
  billing.Merchant item = 3;
}

message ChangeMerchantStatusResponse {
  int32 status = 1;
  ResponseErrorMessage message = 2;
  billing.Merchant item = 3;
}

message CreateNotificationResponse {
  int32 status = 1;
  ResponseErrorMessage message = 2;
  billing.Notification item = 3;
}

message OrderCreateProcessResponse {
  int32 status = 1;
  ResponseErrorMessage message = 2;
  billing.Order item = 3;
}

message SetMerchantS3AgreementRequest {
  // @inject_tag: validate:"required,hexadecimal,len=24" param:"merchant_id"
  string merchant_id = 1;
  // @inject_tag: json:"-"
  string s3_agreement_name = 2;
}

message KeyProductInfo {
  // The unique identifier for the product.
  string id = 1;
  // The unique identifier for the product's project.
  string project_id = 2;
  // The localized name of the product.
  string name = 3;
  // The localized concise description of the product.
  string description = 4;
  // The localized extended description of the product.
  string long_description = 5;
  // The list of the URL images of the product.
  repeated string images = 6;
  // The list of the platforms data.
  repeated PlatformPriceInfo platforms = 7;
}

message PlatformPriceInfo {
  // The unique identifier for the platform.
  string id = 1;
  // The platform's name.
  string name = 2;
  // The product price data.
  ProductPriceInfo price = 3;
}

message ProductPriceInfo {
  // The product's price.
  double amount = 1;
  // The product's price currency.
  string currency = 2;
  // The product's region.
  string region = 3;
  // Has a true value if the price was calculated in the default currency instead of the specified.
  bool is_fallback = 4;
}

message KeyProduct {
  //@inject_tag: validate:"omitempty,hexadecimal,len=24" json:"id" faker:"objectIdString"
  //
  // The unique identifier for the key-activated product.
  string id = 1;
  //@inject_tag: validate:"required,hexadecimal,len=24" json:"-" faker:"objectIdString"
  string merchant_id = 2;
  //@inject_tag: validate:"required,hexadecimal,len=24" json:"project_id" faker:"objectIdString"
  //
  // The unique identifier for the project.
  string project_id = 3;
  //@inject_tag: validate:"omitempty" json:"object"
  //
  // The system constant that contains the returned object's type.
  string object = 4;
  //@inject_tag: validate:"required" json:"sku"
  //
  // The SKU of the product.
  string sku = 5;
  //@inject_tag: validate:"required" json:"name"
  //
  // The list of the product's localized names.
  map<string, string> name = 6;
  //@inject_tag: validate:"required,alpha,len=3" json:"default_currency"
  //
  // The product's default currency. Three-letter Currency Code ISO 4217, in uppercase.
  string default_currency = 7;
  //@inject_tag: json:"enabled"
  //
  // Has a true value if the product is enabled.
  bool enabled = 8;
  //@inject_tag: validate:"required,min=1,dive" json:"platforms"
  //
  // The list of the platforms.
  repeated PlatformPrice platforms = 9;
  //@inject_tag: validate:"required" json:"description"
  //
  // The list of the product's localized concise descriptions.
  map<string, string> description = 10;
  //@inject_tag: validate:"omitempty" json:"long_description"
  //
  // The list of the product's localized extended descriptions.
  map<string, string> long_description = 11;
  //@inject_tag: json:"created_at"
  //
  // The date of the product creation.
  google.protobuf.Timestamp created_at = 12;
  //@inject_tag: json:"updated_at"
  //
  // The date of the product last update.
  google.protobuf.Timestamp updated_at = 13;
  //@inject_tag: json:"cover"
  //
  // The product's covers for each localization.
  billing.ImageCollection cover = 14;
  //@inject_tag: validate:"omitempty,url" json:"url"
  //
  // The product's URL in the merchant project.
  string url = 15;
  //@inject_tag: json:"metadata"
  //
  // The string-value description for the product.
  map<string, string> metadata = 16;
  //@inject_tag: json:"-"
  bool deleted = 17;
  //@inject_tag: json:"published_at"
  //
  // Tha date of the product publishing.
  google.protobuf.Timestamp published_at = 18;
  // @inject_tag: json:"pricing" validate:"required,oneof=currency manual steam default"
  //
  // The pricing mode. Available values: currency, manual, steam, default.
  string pricing = 19;
  // @inject_tag: json:"minimal_limit_notify" validate:"omitempty"
  //
  // The minimum number of keys to send a notification that they are running out.
  int32 minimal_limit_notify = 20;
}

message PlatformPrice {
  //@inject_tag: validate:"required" json:"id"
  //
  // The unique name of the platform. Available values: steam, gog, uplay, origin, psn, xbox, nintendo, itch, egs.
  string id = 1;
  //@inject_tag: json:"name"
  //
  // The full name of the platform. (for instance for gog - Good old games.com)
  string name = 2;
  //@inject_tag: validate:"required,min=1,currency_price,dive" json:"prices"
  //
  // The list of the key pricing for all platforms.
  repeated billing.ProductPrice prices = 3;
  //@inject_tag: validate:"omitempty,url" json:"eula_url"
  //
  // The license agreement link of the platform.
  string eula_url = 4;
  //@inject_tag: validate:"omitempty,url" json:"activation_url"
  //
  // The link of the key's activation rules for the platform.
  string activation_url = 5;
  //@inject_tag: validate:"omitempty" json:"count"
  //
  // The number of created keys for the platform.
  int32 count = 6;
  //@inject_tag: validate:"dive" json:"os"
  //
  // An available operation systems for keys on this platform.
  repeated PlatformOs os = 7;
  //@inject_tag: json:"console_only"
  bool console_only = 8;
}

message PlatformOs {
  //@inject_tag: validate:"required,oneof=win mac linux steam" json:"id"
  //
  // The unique name of the operation system. Available values: win, mac, linux and steam.
  string id = 1;
  //@inject_tag: json:"name"
  //
  // The full name of the operation system. (for instance for steam - SteamOS)
  string name = 2;
}

message Platform {
  //@inject_tag: validate:"required,hexadecimal,len=24" json:"id" required:"true"
  //
  // The unique identifier for the platform.
  string id = 1;
  //@inject_tag: json:"name"
  //
  // The platform's name. Available values: steam, gog, uplay, origin, psn, xbox, nintendo, itch, egs.
  string name = 2;
  //@inject_tag: json:"-"
  string icon = 3;
  //@inject_tag: json:"-"
  int32 order = 4;
  //@inject_tag: json:"-"
  string activation_instruction_url = 5;
  //@inject_tag: json:"os"
  repeated PlatformOs os = 6;
  //@inject_tag: json:"console_only"
  bool console_only = 7;
}

message Product {
  //@inject_tag: validate:"omitempty,hexadecimal,len=24" json:"id" bson:"_id" faker:"objectIdString"
  //
  // The unique identifier for the product.
  string id = 1;
  //@inject_tag: validate:"required,hexadecimal,len=24" json:"-" bson:"merchant_id" required:"true" faker:"objectIdString" param:"merchant_id"
  //
  // The unique identifier for the product's merchant.
  string merchant_id = 2;
  //@inject_tag: validate:"required,hexadecimal,len=24" json:"project_id" bson:"project_id" required:"true" faker:"objectIdString"
  //
  // The unique identifier for the product's project.
  string project_id = 3;
  //@inject_tag: validate:"required" json:"object" required:"true"
  //
  // The system constant that contains the returned object's type. Const value: product.
  string object = 4;
  //@inject_tag: validate:"required" json:"type" required:"true"
  //
  // The product's type.
  string type = 5;
  //@inject_tag: validate:"required" json:"sku" bson:"sku" required:"true"
  //
  // The SKU of the product.
  string sku = 6;
  //@inject_tag: validate:"required" json:"name" required:"true"
  //
  // The list of the product's localized names.
  map<string, string> name = 7;
  //@inject_tag: validate:"required,alpha,len=3" json:"default_currency" required:"true"
  //
  // The product's default currency.
  string default_currency = 8;
  //@inject_tag: json:"enabled"
  //
  // Has a true value if the product is enabled.
  bool enabled = 9;
  //@inject_tag: validate:"required,min=1,currency_price,dive" json:"prices"
  //
  // The product's price.
  repeated billing.ProductPrice prices = 10;
  //@inject_tag: validate:"required" json:"description"
  //
  // The list of the product's localized concise descriptions.
  map<string, string> description = 11;
  //@inject_tag: validate:"omitempty" json:"long_description"
  //
  // The list of the product's localized extended descriptions.
  map<string, string> long_description = 12;
  //@inject_tag: json:"created_at"
  //
  // The date the product has been created.
  google.protobuf.Timestamp created_at = 13;
  //@inject_tag: json:"updated_at"
  //
  // The date the product has been updated.
  google.protobuf.Timestamp updated_at = 14;
  //@inject_tag: validate:"dive,omitempty,uri" json:"images"
  //
  // The product's images URL list.
  repeated string images = 15;
  //@inject_tag: validate:"omitempty,url" json:"url"
  //
  // The product's URL in the merchant project.
  string url = 16;
  //@inject_tag: json:"metadata"
  //
  // The string-value description for the product's object.
  map<string, string> metadata = 17;
  //@inject_tag: json:"-" bson:"deleted"
  bool deleted = 18;
  // @inject_tag: json:"pricing" validate:"required,oneof=currency manual steam default" required:"true"
  //
  // The pricing mode. Available values: currency, manual, steam, default.
  string pricing = 19;
  // @inject_tag: json:"billing_type" validate:"required,oneof=real virtual" required:"true"
  //
  // The billing type. Available values: real, virtual.
  string billing_type = 20;
}

message ListProductsRequest {
  //@inject_tag: json:"name" query:"name"
  string name = 1;
  //@inject_tag: json:"sku" query:"sku"
  string sku = 2;
  // @inject_tag: validate:"required,numeric,gt=0" json:"limit" query:"limit"
  int64 limit = 3;
  // @inject_tag: validate:"omitempty,numeric,gte=0" json:"offset" query:"offset"
  int64 offset = 4;
  //@inject_tag: validate:"required,hexadecimal,len=24" json:"merchant_id" bson:"merchant_id" param:"merchant_id"
  string merchant_id = 5;
  //@inject_tag: validate:"omitempty,hexadecimal,len=24" json:"project_id" bson:"project_id" query:"project_id"
  string project_id = 6;
  //@inject_tag: validate:"omitempty,oneof=all true false" json:"enabled" query:"enabled"
  string enabled = 7;
}

message GetProductsForOrderRequest {
  //@inject_tag: validate:"required,hexadecimal,len=24" json:"project_id" bson:"project_id"
  string project_id = 1;
  //@inject_tag: validate:"required,dive,hexadecimal,len=24" json:"ids" bson:"ids"
  repeated string ids = 2;
}

message GetKeyProductInfoRequest {
  // @inject_tag: json:"country" query:"country"
  string country = 1;
  // @inject_tag: json:"key_product_id" validate:"required,hexadecimal,len=24"
  string key_product_id = 2;
  // @inject_tag: json:"language" query:"language"
  string language = 3;
  // @inject_tag: json:"currency" query:"currency"
  string currency = 4;
}

message GetKeyProductInfoResponse {
  int32 status = 1;
  ResponseErrorMessage message = 2;
  KeyProductInfo key_product = 3;
}

message GetKeyProductsForOrderRequest {
  //@inject_tag: query:"project_id" validate:"required,hexadecimal,len=24"
  string project_id = 1;
  //@inject_tag: query:"ids[]" validate:"required,dive,hexadecimal,len=24"
  repeated string ids = 2;
}

message ListProductsResponse {
  // @inject_tag: json:"limit"
  //
  // The number of products returned in one page.
  int64 limit = 1;
  // @inject_tag: json:"offset"
  //
  // The ranking number of the first item on the page.
  int64 offset = 2;
  // @inject_tag: json:"count"
  //
  // The total number of found items.
  int64 total = 3;
  // @inject_tag: json:"items"
  //
  // The list of products.
  repeated Product products = 5;
}

message RequestProduct {
  //@inject_tag: validate:"required,hexadecimal,len=24" param:"product_id"
  string id = 1;
  //@inject_tag: validate:"hexadecimal,len=24" param:"merchant_id"
  string merchant_id = 2;
}

message RequestKeyProductMerchant {
  //@inject_tag: query:"id" validate:"required,hexadecimal,len=24"
  string id = 1;
  //@inject_tag: validate:"hexadecimal,len=24" param:"merchant_id"
  string merchant_id = 2;
}

message RequestKeyProduct {
  //@inject_tag: query:"id" validate:"required,hexadecimal,len=24"
  string id = 1;
}

message I18NTextSearchable {
  //@inject_tag: validate:"required,alpha,len=2" json:"lang"
  string lang = 1;
  //@inject_tag: validate:"required" json:"value"
  string value = 2;
}

message ChangeProjectResponse {
  // The response status code.
  int32 status = 1;
  // The response error message (if any).
  ResponseErrorMessage message = 2;
  // The project data.
  billing.Project item = 3;
}

message GetProjectRequest {
  //@inject_tag: validate:"omitempty,hexadecimal,len=24" param:"merchant_id"
  string merchant_id = 1;
  //@inject_tag: validate:"required,hexadecimal,len=24" param:"project_id"
  string project_id = 2;
}

message ListProjectsRequest {
  //@inject_tag: validate:"omitempty,hexadecimal,len=24" param:"merchant_id"
  string merchant_id = 1;
  // @inject_tag: query:"limit" validate:"omitempty,numeric,gt=0"
  int32 limit = 2;
  // @inject_tag: query:"offset" validate:"omitempty,numeric,gte=0"
  int32 offset = 3;
  // @inject_tag: query:"quick_search"
  string quick_search = 4;
  // @inject_tag: query:"status[]"
  repeated int32 statuses = 5;
  // @inject_tag: query:"sort[]"
  repeated string sort = 6;
}

message ListProjectsResponse {
  //@inject_tag: json:"count"
  //
  // The total number of found projects.
  int64 count = 1;
  //@inject_tag: json:"items"
  //
  // The list of the projects.
  repeated billing.Project items = 2;
}

message TokenRequest {
  //@inject_tag: validate:"required" required:"true"
  //
  // The customer data.
  billing.TokenUser user = 1;
  //@inject_tag: validate:"required" required:"true"
  //
  // The payment order data.
  billing.TokenSettings settings = 2;
}

message TokenResponse {
  int32 status = 1;
  ResponseErrorMessage message = 2;
  string token = 3;
}

message CheckProjectRequestSignatureRequest {
  string body = 1;
  string project_id = 2;
  string signature = 3;
}

message CheckProjectRequestSignatureResponse {
  int32 status = 1;
  ResponseErrorMessage message = 2;
}

message ListOrdersRequest {
  // @inject_tag: query:"id" validate:"omitempty,uuid"
  string id = 1;
  // @inject_tag: query:"project[]" validate:"omitempty,dive,hexadecimal,len=24"
  repeated string project = 2;
  // @inject_tag: query:"payment_method[]" validate:"omitempty,dive,hexadecimal,len=24"
  repeated string payment_method = 3;
  // @inject_tag: query:"country[]" validate:"omitempty,dive,alpha,len=2"
  repeated string country = 4;
  // @inject_tag: query:"status[]" validate:"omitempty,dive,alpha,oneof=created processed canceled rejected refunded chargeback pending"
  repeated string status = 5;
  // @inject_tag: query:"account"
  string account = 6;
  // @inject_tag: query:"pm_date_from" validate:"omitempty,datetime"
  string pm_date_from = 7;
  // @inject_tag: query:"pm_date_to" validate:"omitempty,datetime"
  string pm_date_to = 8;
  // @inject_tag: query:"project_date_from" validate:"omitempty,datetime"
  string project_date_from = 9;
  // @inject_tag: query:"project_date_to" validate:"omitempty,datetime"
  string project_date_to = 10;
  // @inject_tag: query:"quick_search"
  string quick_search = 11;
  // @inject_tag: query:"limit" validate:"omitempty,numeric,gt=0,lte=1000"
  int64 limit = 12;
  // @inject_tag: query:"offset" validate:"omitempty,numeric,gte=0"
  int64 offset = 13;
  // @inject_tag: query:"sort[]"
  repeated string sort = 14;
  // @inject_tag: validate:"omitempty,dive,hexadecimal,len=24"
  repeated string merchant = 15;
  // @inject_tag: query:"-"  json:"-"
  string status_notification_failed_for = 16;
  // @inject_tag: query:"type" validate:"omitempty,oneof=simple product key"
  string type = 17;
  // @inject_tag: query:"hide_test"
  bool hide_test = 18;
  // @inject_tag: query:"merchant_name" validate:"omitempty,company_name,max=60"
  string merchant_name = 19;
  // @inject_tag: query:"royalty_report_id" validate:"omitempty,hexadecimal,len=24"
  string royalty_report_id = 20;
  // @inject_tag: query:"invoice_id"
  //
  // Unique identifier of order in merchant's billing system
  string invoice_id = 21;
}

message GetOrderRequest {
  // @inject_tag: validate:"required,uuid" param:"order_id"
  string order_id = 1;
  // @inject_tag: validate:"omitempty,hexadecimal,len=24" param:"merchant_id"
  string merchant_id = 2;
}

message IsOrderCanBePayingRequest {
  string project_id = 1;
  string order_id = 2;
}

message IsOrderCanBePayingResponse {
  int32 status = 1;
  ResponseErrorMessage message = 2;
  billing.Order item = 3;
}

message SetUserNotifyRequest {
  // @inject_tag: validate:"required,uuid" param:"order_id" required:"true"
  //
  // The unique identifier for the order.
  string order_uuid = 1;
  // @inject_tag: query:"enable_notification" form:"enable_notification" json:"enable_notification"
  //
  // Has a true value if the customer has confirmed to receive notifications.
  bool enable_notification = 2;
  // @inject_tag: query:"email" form:"email" json:"email" validate:"omitempty,email"
  //
  // The customer's email for notifications.
  string email = 3;
}

message NotifyUserSales {
  //@inject_tag: bson:"email"
  string email = 1;
  //@inject_tag: bson:"order_id"
  string order_id = 2;
  //@inject_tag: bson:"user_id"
  string user_id = 3;
  //@inject_tag: bson:"created_at"
  string date = 4;
}

message NotifyUserNewRegion {
  //@inject_tag: bson:"country_iso_code_a2"
  string country_iso_code_a2 = 1;
  //@inject_tag: bson:"email"
  string email = 2;
  //@inject_tag: bson:"order_id"
  string order_id = 3;
  //@inject_tag: bson:"user_id"
  string user_id = 4;
  //@inject_tag: bson:"date"
  string date = 5;
}

message GetPaymentMethodSettingsRequest {
  // @inject_tag: query:"payment_method_id" validate:"required,hexadecimal,len=24"
  string payment_method_id = 1;
  // @inject_tag: query:"currency_a3" validate:"omitempty,alpha,len=3"
  string currency_a3 = 2;
  // @inject_tag: query:"mcc_code" validate:"omitempty,numeric,len=4"
  string mcc_code = 3;
  // @inject_tag: query:"operating_company_id" validate:"omitempty,hexadecimal,len=24"
  string operating_company_id = 4;
}

message GetPaymentMethodSettingsResponse {
  // @inject_tag: json:"params"
  //
  // The payment method settings.
  repeated billing.PaymentMethodParams params = 1;
}

message ChangePaymentMethodRequest {
  // @inject_tag: query:"payment_method_id" validate:"required,hexadecimal,len=24"
  string payment_method_id = 1;
  // @inject_tag: query:"params" validate:"required"
  billing.PaymentMethod params = 2;
}

message ChangePaymentMethodParamsRequest {
  // @inject_tag: query:"payment_method_id" validate:"required,hexadecimal,len=24"
  string payment_method_id = 1;
  // @inject_tag: query:"params" validate:"required"
  billing.PaymentMethodParams params = 2;
}

message ChangePaymentMethodResponse {
  // The response status code.
  int32 status = 1;
  // The response error message (if any).
  string message = 2;
}

message ChangePaymentMethodParamsResponse {
  // The response status code.
  int32 status = 1;
  // The response error message (if any).
  string message = 2;
}

message FindByZipCodeRequest {
  // @inject_tag: query:"country" validate:"required,len=2"
  string country = 1;
  // @inject_tag: query:"zip" validate:"required,gte=2"
  string zip = 2;
  // @inject_tag: query:"limit" validate:"omitempty,numeric,gt=0"
  int64 limit = 3;
  // @inject_tag: query:"offset" validate:"omitempty,numeric,gte=0"
  int64 offset = 4;
}

message FindByZipCodeResponse {
  // @inject_tag: json:"count"
  //
  // The total number of found cities.
  int32 count = 1;
  // @inject_tag: json:"items"
  //
  // The data found by the ZIP code.
  repeated billing.ZipCode items = 2;
}

message ResponseError {
  //@inject_tag: json:"status"
  int32 status = 1;
  //@inject_tag: json:"message"
  ResponseErrorMessage message = 2;
}

message ResponseErrorMessage {
  //@inject_tag: json:"code"
  //
  // The error code.
  string code = 1;
  //@inject_tag: json:"message"
  //
  // The error short description.
  string message = 2;
  //@inject_tag: json:"details,omitempty"
  //
  // The error details.
  string details = 3;
}

message CreateAccountingEntryRequest {
  // @inject_tag: validate:"required"
  string type = 1;
  // @inject_tag: validate:"omitempty,hexadecimal,len=24"
  string order_id = 2;
  // @inject_tag: validate:"omitempty,hexadecimal,len=24"
  string refund_id = 3;
  // @inject_tag: validate:"omitempty,hexadecimal,len=24"
  string merchant_id = 4;
  // @inject_tag: validate:"required,numeric"
  double amount = 5;
  // @inject_tag: validate:"required,alpha,len=3"
  string currency = 6;
  // @inject_tag: validate:"required,oneof=pending available"
  string status = 7;
  // @inject_tag: validate:"omitempty,numeric,gt=0"
  int64 date = 8;
  //@inject_tag: json:"country" validate:"required,alpha,len=2"
  string country = 9;
  //@inject_tag: json:"reason"
  string reason = 10;
}

message CreateAccountingEntryResponse {
  int32 status = 1;
  ResponseErrorMessage message = 2;
  billing.AccountingEntry item = 3;
}

message CreateRoyaltyReportRequest {
  repeated string merchants = 1;
}

message ListRoyaltyReportsRequest {
  // @inject_tag: query:"period_from" validate:"omitempty,datetime"
  string period_from = 1;
  // @inject_tag: query:"period_to" validate:"omitempty,datetime"
  string period_to = 2;
  // @inject_tag: validate:"omitempty,hexadecimal,len=24" param:"merchant_id"
  string merchant_id = 3;
  //@inject_tag: query:"status[]" validate:"omitempty,dive,oneof=pending accepted canceled dispute waiting_payment paid"
  repeated string status = 4;
  // @inject_tag: query:"limit" validate:"omitempty,numeric,gt=0"
  int64 limit = 5;
  // @inject_tag: query:"offset" validate:"omitempty,numeric,gte=0"
  int64 offset = 6;
  // @inject_tag: query:"sort[]"
  repeated string sort = 7;
}

message RoyaltyReportsPaginate {
  // @inject_tag: json:"count"
  //
  // The total number of reports.
  int64 count = 1;
  // @inject_tag: json:"items"
  //
  // The royalty reports list.
  repeated billing.RoyaltyReport items = 2;
}

message ListRoyaltyReportsResponse {
  int32 status = 1;
  // @inject_tag: json:"message,omitempty"
  ResponseErrorMessage message = 2;
  // @inject_tag: json:"data"
  RoyaltyReportsPaginate data = 3;
}

message ListRoyaltyReportOrdersRequest {
  // @inject_tag: validate:"omitempty,hexadecimal,len=24" param:"merchant_id"
  string merchant_id = 1;
  // @inject_tag: query:"report_id" validate:"required,hexadecimal,len=24" param:"report_id"
  string report_id = 2;
  // @inject_tag: query:"limit" validate:"omitempty,numeric,gt=0"
  int64 limit = 3;
  // @inject_tag: query:"offset" validate:"omitempty,numeric,gte=0"
  int64 offset = 4;
}

message ChangeRoyaltyReportCorrection {
  // The correction amount.
  double amount = 1;
  // The correction reason.
  string reason = 2;
}

message GetRoyaltyReportRequest {
  // @inject_tag: json:"merchant_id" validate:"omitempty,hexadecimal,len=24" param:"merchant_id"
  string merchant_id = 1;
  // @inject_tag: json:"report_id" validate:"required,hexadecimal,len=24" param:"report_id"
  string report_id = 2;
}

message GetRoyaltyReportResponse {
  //@inject_tag: json:"status"
  int32 status = 1;
  //@inject_tag: json:"message"
  ResponseErrorMessage message = 2;
  //@inject_tag: json:"item"
  billing.RoyaltyReport item = 3;
}

message ChangeRoyaltyReportRequest {
  // @inject_tag: validate:"required,hexadecimal,len=24" json:"merchant_id" param:"merchant_id"
  string merchant_id = 1;
  // @inject_tag: json:"-" validate:"required,hexadecimal,len=24" param:"report_id"
  string report_id = 2;
  // @inject_tag: json:"status" validate:"omitempty,oneof=pending skipped accepted canceled dispute ready_for_invoice payment_in_progress payment_done payment_error"
  //
  // The report status. Available values: pending, skipped, accepted, canceled, dispute, ready_for_invoice, payment_in_progress, payment_done, payment_error.
  string status = 3;
  // @inject_tag: json:"correction"
  //
  // The report correction.
  ChangeRoyaltyReportCorrection correction = 4;
  // @inject_tag: json:"-"
  string ip = 5;
}

message MerchantReviewRoyaltyReportRequest {
  // @inject_tag: validate:"required,hexadecimal,len=24" json:"-" param:"merchant_id"
  string merchant_id = 1;
  // @inject_tag: validate:"required,hexadecimal,len=24" param:"report_id" json:"-"
  string report_id = 2;
  //@inject_tag: json:"is_accepted" json:"-"
  bool is_accepted = 3;
  // @inject_tag: json:"-"
  string ip = 4;
  //@inject_tag: json:"dispute_reason"
  //
  // The dispute reason.
  string dispute_reason = 5;
}

message PaymentChannelCostSystemListResponse {
  //@inject_tag: json:"status"
  int32 status = 1;
  //@inject_tag: json:"message"
  ResponseErrorMessage message = 2;
  //@inject_tag: json:"item"
  billing.PaymentChannelCostSystemList item = 3;
}

message PaymentChannelCostSystemResponse {
  //@inject_tag: json:"status"
  int32 status = 1;
  //@inject_tag: json:"message"
  ResponseErrorMessage message = 2;
  //@inject_tag: json:"item"
  billing.PaymentChannelCostSystem item = 3;
}

message PaymentChannelCostMerchantListResponse {
  //@inject_tag: json:"status"
  int32 status = 1;
  //@inject_tag: json:"message"
  ResponseErrorMessage message = 2;
  //@inject_tag: json:"item"
  billing.PaymentChannelCostMerchantList item = 3;
}

message PaymentChannelCostMerchantResponse {
  //@inject_tag: json:"status"
  int32 status = 1;
  //@inject_tag: json:"message"
  ResponseErrorMessage message = 2;
  //@inject_tag: json:"item"
  billing.PaymentChannelCostMerchant item = 3;
}

message MoneyBackCostSystemListResponse {
  //@inject_tag: json:"status"
  int32 status = 1;
  //@inject_tag: json:"message"
  ResponseErrorMessage message = 2;
  //@inject_tag: json:"item"
  billing.MoneyBackCostSystemList item = 3;
}

message MoneyBackCostSystemResponse {
  //@inject_tag: json:"status"
  int32 status = 1;
  //@inject_tag: json:"message"
  ResponseErrorMessage message = 2;
  //@inject_tag: json:"item"
  billing.MoneyBackCostSystem item = 3;
}

message MoneyBackCostMerchantListResponse {
  //@inject_tag: json:"status"
  int32 status = 1;
  //@inject_tag: json:"message"
  ResponseErrorMessage message = 2;
  //@inject_tag: json:"item"
  billing.MoneyBackCostMerchantList item = 3;
}

message MoneyBackCostMerchantResponse {
  //@inject_tag: json:"status"
  int32 status = 1;
  //@inject_tag: json:"message"
  ResponseErrorMessage message = 2;
  //@inject_tag: json:"item"
  billing.MoneyBackCostMerchant item = 3;
}

message PriceGroupByCountryRequest {
  //@inject_tag: validate:"required,alpha,len=2"
  string country = 1;
}

message PriceGroupCurrenciesResponse {
  //@inject_tag: json:"regions"
  //
  // A list of regions.
  repeated PriceGroupRegions region = 1;
}

message PriceGroupRegions {
  //@inject_tag: json:"currency"
  //
  // The region's currency.
  string currency = 1;
  //@inject_tag: json:"regions"
  //
  // The region data.
  repeated PriceGroupRegion regions = 2;
}

message PriceGroupRegion {
  //@inject_tag: json:"region"
  //
  // The region's name.
  string region = 1;
  //@inject_tag: json:"country"
  //
  // The country's name.
  repeated string country = 2;
}

message PriceGroupByRegionRequest {
  //@inject_tag: validate:"required,alpha"
  string region = 1;
}

message RecommendedPriceRequest {
  // @inject_tag: validate:"required,numeric,gte=0"
  double amount = 1;
  // @inject_tag: validate:"required,alpha,len=3"
  string currency = 2;
}

message RecommendedPriceResponse {
  // @inject_tag: json:"recommended_price"
  //
  // A list of recommended currency conversion prices.
  repeated billing.RecommendedPrice recommended_price = 1;
}

message RecommendedPriceTableRequest {
  // @inject_tag: validate:"required,alpha,len=3"
  //
  // Three-letter currency code in ISO 4217, in uppercase.
  string currency = 1;
}

message RecommendedPriceTableResponse {
  // @inject_tag: json:"ranges"
  //
  // The price ranges list.
  repeated billing.PriceTableRange ranges = 1;
}

message ProductPricesResponse {
  // @inject_tag: json:"product_price"
  repeated billing.ProductPrice product_price = 1;
}

message UpdateProductPricesRequest {
  //@inject_tag: validate:"required,hexadecimal,len=24" json:"product_id" param:"product_id"
  string product_id = 1;
  //@inject_tag: validate:"required,min=1,currency_price,dive" json:"prices"
  repeated billing.ProductPrice prices = 2;
  //@inject_tag: validate:"hexadecimal,len=24" param:"merchant_id"
  string merchant_id = 3;
}

message UserProfilePersonal {
  //@inject_tag: json:"first_name" bson:"first_name" validate:"required,name,max=30" required:"true"
  //
  // The user's first name.
  string first_name = 1;
  //@inject_tag: json:"last_name" bson:"last_name" validate:"required,name,max=30" required:"true"
  //
  // The user's last name.
  string last_name = 2;
  //@inject_tag: json:"position" bson:"position" validate:"required,position" required:"true"
  //
  // The user's position in the company.
  string position = 3;
}

message UserProfileHelp {
  //@inject_tag: json:"product_promotion_and_development" bson:"product_promotion_and_development"
  //
  // Has a true value if the user needs help with product promotion and development.
  bool product_promotion_and_development = 1;
  //@inject_tag: json:"released_game_promotion" bson:"released_game_promotion"
  //
  // Has a true value if the user needs help with games promotion that have already been released.
  bool released_game_promotion = 2;
  //@inject_tag: json:"international_sales" bson:"international_sales"
  //
  // Has a true value if the user needs help with international sales.
  bool international_sales = 3;
  //@inject_tag: json:"other" bson:"other"
  //
  // Has a true value if the user needs help with other problems.
  bool other = 4;
}

message UserProfileCompanyMonetization {
  //@inject_tag: json:"paid_subscription" bson:"paid_subscription"
  //
  // Has a true value if the monetization strategy is buying the paid subscription by company's users.
  bool paid_subscription = 1;
  //@inject_tag: json:"in_game_advertising" bson:"in_game_advertising"
  //
  // Has a true value if the monetization strategy is buying the in-game advertising.
  bool in_game_advertising = 2;
  //@inject_tag: json:"in_game_purchases" bson:"in_game_purchases"
  //
  // Has a true value if the monetization strategy is buying in-game purchases by company's users.
  bool in_game_purchases = 3;
  //@inject_tag: json:"premium_access" bson:"premium_access"
  //
  // Has a true value if the monetization strategy is buying the premium access by company's users.
  bool premium_access = 4;
  //@inject_tag: json:"other" bson:"other"
  //
  // Has a true value if the monetization has the other strategy.
  bool other = 5;
}

message UserProfileCompanyPlatforms {
  //@inject_tag: json:"pc_mac" bson:"pc_mac"
  //
  // Has a true value if the platform is PC/MacOs.
  bool pc_mac = 1;
  //@inject_tag: json:"game_console" bson:"game_console"
  //
  // Has a true value if the platform is the game console.
  bool game_console = 2;
  //@inject_tag: json:"mobile_device" bson:"mobile_device"
  //
  // Has a true value if the platform is the mobile device.
  bool mobile_device = 3;
  //@inject_tag: json:"web_browser" bson:"web_browser"
  //
  // Has a true value if the platform is the web browser.
  bool web_browser = 4;
  //@inject_tag: json:"other" bson:"other"
  //
  // Has a true value if the platform has the other value.
  bool other = 5;
}

message UserProfileCompany {
  //@inject_tag: json:"company_name" bson:"company_name" validate:"required,company_name,max=60" required:"true"
  //
  // The company's name.
  string company_name = 1;
  //@inject_tag: json:"website" validate:"required,url" bson:"website" required:"true"
  //
  // The company's website.
  string website = 2;
  //@inject_tag: json:"annual_income" bson:"annual_income" validate:"required" required:"true"
  //
  // The company's annual income.
  billing.RangeInt annual_income = 3;
  //@inject_tag: json:"number_of_employees" bson:"number_of_employees" validate:"required" required:"true"
  //
  // The company's number of employees.
  billing.RangeInt number_of_employees = 4;
  //@inject_tag: json:"kind_of_activity" validate:"omitempty,oneof=develop_and_publish_your_games publish_games_of_other_companies publish_your_games_through_other_publishers other" bson:"kind_of_activity"
  //
  // The company's kind of activity. Available values: develop_and_publish_your_games, publish_games_of_other_companies, publish_your_games_through_other_publishers, other.
  string kind_of_activity = 5;
  //@inject_tag: json:"monetization" bson:"monetization"
  //
  // The company's monetization activities.
  UserProfileCompanyMonetization monetization = 6;
  //@inject_tag: json:"platforms" bson:"platforms"
  //
  // The company's platforms.
  UserProfileCompanyPlatforms platforms = 7;
}

message UserProfileEmail {
  //@inject_tag: json:"email" validate:"required,email" required:"true"
  //
  // The user's email address.
  string email = 1;
  //@inject_tag: json:"confirmed"
  //
  // Whether the user's email address has been verified.
  bool confirmed = 2;
  //@inject_tag: json:"confirmed_at"
  //
  // The date of the user's email confirmation.
  google.protobuf.Timestamp confirmed_at = 3;
  //@inject_tag: json:"-" bson:"-"
  string confirmation_url = 4;
  //@inject_tag: json:"-" bson:"is_confirmation_email_sent"
  bool is_confirmation_email_sent = 5;
}

message UserProfile {
  //@inject_tag: json:"id" faker:"objectIdString"
  //
  // The unique identifier for the PaySuper user.
  string id = 1;
  //@inject_tag: json:"-" validate:"required,hexadecimal,len=24" faker:"objectIdString"
  string user_id = 2;
  //@inject_tag: json:"email"
  //
  // The user's email data.
  UserProfileEmail email = 3;
  //@inject_tag: json:"personal"
  //
  // The user personal information.
  UserProfilePersonal personal = 4;
  //@inject_tag: json:"help"
  //
  // Information about the user's problem.
  UserProfileHelp help = 5;
  //@inject_tag: json:"company"
  //
  // Information about the user's company.
  UserProfileCompany company = 6;
  //@inject_tag: json:"last_step" bson:"last_step"
  //
  // The identifier for the last step of the wizard that the user need to finish.
  string last_step = 7;
  //@inject_tag: json:"centrifugo_token" bson:"centrifugo_token"
  //
  // The user authorisation token to connect to the Centrifugo channel.
  string centrifugo_token = 8;
  // @inject_tag: json:"created_at"
  //
  // The date of the user creation.
  google.protobuf.Timestamp created_at = 9;
  // @inject_tag: json:"updated_at"
  //
  // The date of the user last update.
  google.protobuf.Timestamp updated_at = 10;
  //@inject_tag: json:"locale" bson:"locale" validate:"omitempty,alpha"
  //
  // The user language locale.
  string locale = 11;
}

message CommonUserProfileRequest {
  //@inject_tag: json:"user_id" validate:"required,hexadecimal,len=24"
  string user_id = 1;
  //@inject_tag: json:"merchant_id" validate:"omitempty,hexadecimal,len=24" param:"merchant_id"
  string merchant_id = 2;
}

message CommonUserProfileResponse {
  int32 status = 1;
  ResponseErrorMessage message = 2;
  CommonUserProfile profile = 3;
}

message CommonUserProfile {
  // The user profile data.
  UserProfile profile = 1;
  // The user's role.
  billing.UserRole role = 2;
  // The user permissions.
  repeated Permission permissions = 3;
  // Information about the merchant (the full list of parameters returns only for the owner and the short list for others).
  billing.Merchant merchant = 4;
}

message GetUserProfileRequest {
  //@inject_tag: validate:"required,hexadecimal,len=24"
  string user_id = 1;
  //@inject_tag: validate:"omitempty,hexadecimal,len=24"
  string profile_id = 2;
}

message GetUserProfileResponse {
  int32 status = 1;
  ResponseErrorMessage message = 2;
  MainUserProfile item = 3;
}

message MainUserProfile {
  UserProfile profile = 1;
  repeated MerchantForUserInfo merchants = 2;
}

message CreateOrUpdateUserProfileResponse {
  int32 status = 1;
  ResponseErrorMessage message = 2;
  UserProfile item = 3;
}

message PageReview {
  //@inject_tag: faker:"objectIdString"
  string id = 1;
  //@inject_tag: json:"user_id" bson:"user_id"
  string user_id = 2;
  string review = 3;
  string url = 4;
  bool is_read = 5;
  // @inject_tag: json:"created_at"
  google.protobuf.Timestamp created_at = 6;
  // @inject_tag: json:"updated_at"
  google.protobuf.Timestamp updated_at = 7;
}

message CreatePageReviewRequest {
  //@inject_tag: validate:"required,hexadecimal,len=24" json:"-"
  string user_id = 1;
  //@inject_tag: validate:"required,max=500" required:"true"
  //
  // The feedback message.
  string review = 2;
  //@inject_tag: validate:"required" required:"true"
  //
  // The feedback page URL.
  string url = 3;
}

message ConfirmUserEmailRequest {
  //@inject_tag: validate:"required" required:"true"
  //
  // An encripted string to confirm the user registration.
  string token = 1;
}

message ConfirmUserEmailResponse {
  int32 status = 1;
  ResponseErrorMessage message = 2;
  UserProfile profile = 3;
}

message VatTransactionsRequest {
  //@inject_tag: json:"vat_report_id" validate:"required,hexadecimal,len=24"
  string vat_report_id = 1;
  // @inject_tag: query:"limit" validate:"omitempty,numeric,gt=0"
  int64 limit = 2;
  // @inject_tag: query:"offset" validate:"omitempty,numeric,gte=0"
  int64 offset = 3;
  // @inject_tag: query:"sort[]"
  repeated string sort = 4;
}

message TransactionsPaginate {
  // @inject_tag: json:"count"
  //
  // The total number of found transactions.
  int32 count = 1;
  // @inject_tag: json:"items"
  //
  // The list of the transactions.
  repeated billing.OrderViewPublic items = 2;
}

message TransactionsResponse {
  int32 status = 1;
  // @inject_tag: json:"message,omitempty"
  ResponseErrorMessage message = 2;
  // @inject_tag: json:"data"
  TransactionsPaginate data = 3;
}

message VatReportsRequest {
  //@inject_tag: json:"country" query:"country" validate:"required,alpha,len=2"
  string country = 1;
  // @inject_tag: query:"limit" validate:"omitempty,numeric,gt=0"
  int64 limit = 2;
  // @inject_tag: query:"offset" validate:"omitempty,numeric,gte=0"
  int64 offset = 3;
  // @inject_tag: query:"sort[]"
  repeated string sort = 4;
}

message VatReportsPaginate {
  // @inject_tag: json:"count"
  //
  // The total number of the found reports.
  int32 count = 1;
  // @inject_tag: json:"items"
  //
  // The VAT reports list.
  repeated billing.VatReport items = 2;
}

message VatReportsResponse {
  int32 status = 1;
  // @inject_tag: json:"message,omitempty"
  ResponseErrorMessage message = 2;
  // @inject_tag: json:"data"
  VatReportsPaginate data = 3;
}

message ProcessVatReportsRequest {
  google.protobuf.Timestamp date = 1;
}

message UpdateVatReportStatusRequest {
  //@inject_tag: json:"-" bson:"_id" validate:"hexadecimal,len=24"
  string id = 1;
  //@inject_tag: json:"status" bson:"status" validate:"required,alpha,oneof=paid canceled"
  //
  // The VAT report status. Available values: paid, canceled.
  string status = 2;
}

message GetMerchantOnboardingCompleteDataResponseItem {
  //@inject_tag: json:"status"
  //
  // The filling out status. Available values: draft, life.
  string status = 1;
  //@inject_tag: json:"steps"
  //
  // The list of the steps completed.
  billing.MerchantCompletedSteps steps = 2;
  //@inject_tag: json:"complete_steps_count"
  //
  // The number of steps completed.
  int32 complete_steps_count = 3;
}

message GetMerchantOnboardingCompleteDataResponse {
  int32 status = 1;
  ResponseErrorMessage message = 2;
  GetMerchantOnboardingCompleteDataResponseItem item = 3;
}

message GetMerchantTariffRatesRequest {
  // @inject_tag: query:"region" validate:"required,tariff_region"
  string home_region = 1;
  //@inject_tag: query:"payer_region" validate:"omitempty,tariff_region"
  string payer_region = 2;
  // @inject_tag: query:"min_amount" validate:"omitempty,numeric,gte=0"
  double min_amount = 3;
  // @inject_tag: query:"max_amount" validate:"omitempty,numeric,gt=0"
  double max_amount = 4;
  // @inject_tag: query:"merchant_operations_type" json:"merchant_operations_type" validate:"oneof=high-risk low-risk"
  string merchant_operations_type = 5;
}

message GetMerchantTariffRatesResponseItems {
  // The payment tariffs.
  repeated billing.MerchantTariffRatesPayment payment = 1;
  //@inject_tag: json:"-"
  repeated billing.MerchantTariffRatesSettingsItem refund = 2;
  //@inject_tag: json:"chargeback"
  //
  // The chargeback tariffs.
  repeated billing.MerchantTariffRatesSettingsItem chargeback = 3;
  //@inject_tag: json:"payout"
  //
  // The payout tariffs.
  map<string, billing.MerchantTariffRatesSettingsItem> payout = 4;
  //@inject_tag: json:"minimal_payout"
  //
  // The minimum payout limits.
  map<string, float> minimal_payout = 5;
  //@inject_tag: json:"mcc_code"
  //
  // The Merchant Category Code (MCC) is a four-digit number listed in ISO 18245.
  string mcc_code = 6;
}

message GetMerchantTariffRatesResponse {
  int32 status = 1;
  ResponseErrorMessage message = 2;
  GetMerchantTariffRatesResponseItems items = 3;
}

message SetMerchantTariffRatesRequest {
  //@inject_tag: json:"merchant_id" validate:"required,hexadecimal,len=24" param:"merchant_id"
  string merchant_id = 1;
  // @inject_tag: json:"home_region" validate:"required,tariff_region"
  string home_region = 2;
  // @inject_tag: json:"merchant_operations_type" validate:"oneof=high-risk low-risk"
  string merchant_operations_type = 3;
}

message ListOrdersPublicResponseItem {
  // @inject_tag: json:"count"
  //
  // The total number of found orders.
  int64 count = 1;
  // @inject_tag: json:"items"
  //
  // The list of the orders.
  repeated billing.OrderViewPublic items = 2;
}

message ListOrdersPrivateResponseItem {
  // @inject_tag: json:"count"
  int64 count = 1;
  // @inject_tag: json:"items"
  repeated billing.OrderViewPrivate items = 2;
}

message ListOrdersPublicResponse {
  int32 status = 1;
  ResponseErrorMessage message = 2;
  ListOrdersPublicResponseItem Item = 3;
}

message ListOrdersPrivateResponse {
  int32 status = 1;
  ResponseErrorMessage message = 2;
  ListOrdersPrivateResponseItem Item = 3;
}

message ListOrdersResponseItem {
  // @inject_tag: json:"count"
  int64 count = 1;
  // @inject_tag: json:"items"
  repeated billing.Order items = 2;
}

message ListOrdersResponse {
  int32 status = 1;
  ResponseErrorMessage message = 2;
  ListOrdersResponseItem Item = 3;
}

message GetOrderPublicResponse {
  int32 status = 1;
  ResponseErrorMessage message = 2;
  billing.OrderViewPublic item = 3;
}

message GetOrderPrivateResponse {
  int32 status = 1;
  ResponseErrorMessage message = 2;
  billing.OrderViewPrivate item = 3;
}

message GetOriginalOrderResponse {
  int32 status = 1;
  ResponseErrorMessage message = 2;
  billing.Order item = 3;
}

message GetDashboardMainRequest {
  //@inject_tag: validate:"required,hexadecimal,len=24" param:"merchant_id"
  string merchant_id = 1;
  //@inject_tag: query:"period" validate:"required,oneof=current_month previous_month current_quarter previous_quarter current_year previous_year"
  string period = 2;
}

message GetDashboardMainResponse {
  int32 status = 1;
  ResponseErrorMessage message = 2;
  DashboardMainReport item = 3;
}

message GetDashboardBaseReportRequest {
  //@inject_tag: validate:"required,hexadecimal,len=24" param:"merchant_id"
  string merchant_id = 1;
  //@inject_tag: query:"period" validate:"required,oneof=current_day previous_day current_week previous_week current_month previous_month current_quarter previous_quarter current_year previous_year"
  string period = 2;
}

message GetDashboardBaseReportResponse {
  int32 status = 1;
  ResponseErrorMessage message = 2;
  DashboardBaseReports item = 3;
}

message GetDashboardRevenueDynamicsReportResponse {
  int32 status = 1;
  ResponseErrorMessage message = 2;
  DashboardRevenueDynamicReport item = 3;
}

message DashboardAmountItemWithChart {
  //@inject_tag: json:"amount_current"
  //
  // The total amount calculated for the current period.
  double amount_current = 1;
  //@inject_tag: json:"amount_previous"
  //
  // The total amount calculated for the previous period.
  double amount_previous = 2;
  //@inject_tag: json:"currency"
  //
  // The current report amount currency. Three-letter currency code ISO 4217, in uppercase.
  string currency = 3;
  //@inject_tag: json:"chart"
  //
  // The list of points for drawing the chart.
  repeated DashboardChartItemFloat chart = 4;
}

message DashboardChartItemFloat {
  //@inject_tag: json:"label" bson:"label"
  //
  // The point label. For example, if the period of the report equals to month then the point label will be equal to one day.
  int64 label = 1;
  //@inject_tag: json:"value" bson:"value"
  //
  // The point value.
  double value = 2;
}

message DashboardMainReportTotalTransactions {
  //@inject_tag: json:"count_current" bson:"count"
  //
  // The total amount calculated for the current period.
  int64 count_current = 1;
  //@inject_tag: json:"count_previous"
  //
  // The total amount calculated for the previous period.
  int64 count_previous = 2;
  //@inject_tag: json:"chart"
  //
  // The list of data for drawing the chart.
  repeated DashboardChartItemFloat chart = 3;
}

message DashboardMainReport {
  //@inject_tag: json:"gross_revenue" bson:"gross_revenue"
  //
  // The gross revenue data.
  DashboardAmountItemWithChart gross_revenue = 1;
  //@inject_tag: json:"vat" bson:"vat"
  //
  // VAT data.
  DashboardAmountItemWithChart vat = 2;
  //@inject_tag: json:"total_transactions" bson:"total_transactions"
  //
  // The transactions data.
  DashboardMainReportTotalTransactions total_transactions = 3;
  //@inject_tag: json:"arpu" bson:"arpu"
  //
  // ARPU data.
  DashboardAmountItemWithChart arpu = 4;
}

message DashboardRevenueDynamicReport {
  //@inject_tag: json:"currency"
  //
  // The current report amount currency. Three-letter currency code ISO 4217, in uppercase.
  string currency = 1;
  //@inject_tag: json:"items"
  //
  // The list of points for drawing the chart.
  repeated DashboardRevenueDynamicReportItem items = 2;
}

message DashboardRevenueDynamicReportItem {
  //@inject_tag: json:"label"
  //
  // The point label. For example, if the period of the report equals to month then the point label will be equal to one day.
  int64 label = 1;
  //@inject_tag: json:"amount"
  //
  // The revenue amount.
  double amount = 2;
  //@inject_tag: json:"-"
  string currency = 3;
  //@inject_tag: json:"count"
  //
  // The total number of transactions.
  int64 count = 4;
}

message DashboardRevenueByCountryReportTop {
  //@inject_tag: json:"country"
  //
  // The country's name.
  string country = 1;
  //@inject_tag: json:"amount"
  //
  // The revenue amount for this country.
  double amount = 2;
}

message DashboardRevenueByCountryReportChartItem {
  //@inject_tag: json:"label"
  //
  // The point label. For example, if the period of the report equals to month then the point label will be equal to one day.
  int64 label = 1;
  //@inject_tag: json:"amount"
  //
  // The amount by country.
  double amount = 2;
}

message DashboardRevenueByCountryReport {
  //@inject_tag: json:"currency"
  //
  // The current report amount currency. Three-letter currency code ISO 4217, in uppercase.
  string currency = 1;
  //@inject_tag: json:"top" bson:"top"
  //
  // The list of data about top 5 revenue countries for the specified period.
  repeated DashboardRevenueByCountryReportTop top = 2;
  //@inject_tag: json:"total_current" bson:"total"
  //
  // The total revenue amount for the specified period.
  double total_current = 3;
  //@inject_tag: json:"total_previous"
  //
  // The total revenue amount for the previous period.
  double total_previous = 4;
  //@inject_tag: json:"chart" bson:"chart"
  //
  // The list of points for drawing the chart.
  repeated DashboardRevenueByCountryReportChartItem chart = 5;
}

message DashboardSalesTodayReportTop {
  //@inject_tag: json:"name" bson:"name"
  //
  // The name of the sold item (product or project).
  string name = 1;
  //@inject_tag: json:"count" bson:"count"
  //
  // The total number of items (products or projects) which were sold for the specified period.
  int64 count = 2;
}

message DashboardChartItemInt {
  //@inject_tag: json:"label" bson:"label"
  //
  // The point label. For example, if the period of the report equals to month then the point label will be equal to one day.
  int64 label = 1;
  //@inject_tag: json:"value" bson:"value"
  //
  // The point value.
  int64 value = 2;
}

message DashboardSalesTodayReport {
  //@inject_tag: json:"top" bson:"top"
  //
  // The list of data about top 5 merchant's products (projects) which were sold for the specified period.
  repeated DashboardSalesTodayReportTop top = 1;
  //@inject_tag: json:"total_current" bson:"total"
  //
  // The total number of items (products or projects) which were sold for the specified period.
  int64 total_current = 2;
  //@inject_tag: json:"total_previous"
  //
  // The total number of items (products or projects) which were sold for the previous period.
  int64 total_previous = 3;
  //@inject_tag: json:"chart" bson:"chart"
  //
  // The list of points for drawing the chart.
  repeated DashboardChartItemInt chart = 4;
}

message DashboardSourcesReport {
  //@inject_tag: json:"top" bson:"top"
  //
  // The list of data about top 5 source URLs for the specified period.
  repeated DashboardSalesTodayReportTop top = 1;
  //@inject_tag: json:"total_current" bson:"total"
  //
  // The total number of transactions for the specified period.
  int64 total_current = 2;
  //@inject_tag: json:"total_previous"
  //
  // The total number of transactions for the previous period.
  int64 total_previous = 3;
  //@inject_tag: json:"chart" bson:"chart"
  //
  // The list of points for drawing the chart.
  repeated DashboardChartItemInt chart = 4;
}

message DashboardBaseReports {
  //@inject_tag: json:"revenue_by_country"
  //
  // The data for the Dashboard block Revenue by country.
  DashboardRevenueByCountryReport revenue_by_country = 1;
  //@inject_tag: json:"sales_today"
  //
  // The data for the Dashboard block Sales today.
  DashboardSalesTodayReport sales_today = 2;
  //@inject_tag: json:"sources"
  //
  // The data for the Dashboard block Sources.
  DashboardSourcesReport sources = 4;
}

message CreatePayoutDocumentRequest {
  //@inject_tag: json:"description" validate:"max=255"
  //
  // The description of the payout document.
  string description = 1;
  //@inject_tag: json:"merchant_id" validate:"required,hexadecimal,len=24" required:"true" param:"merchant_id"
  //
  // The unique identifier for the merchant.
  string merchant_id = 2;
  //@inject_tag: json:"ip" validate:"required" required:"true"
  //
  // The IP address of the user which created the payout document.
  string ip = 3;
  //@inject_tag: json:"-" validate:"required"
  string initiator = 4;
  //@inject_tag: json:"-"
  bool is_auto_generation = 5;
}

message PayoutDocumentResponse {
  //@inject_tag: json:"status"
  int32 status = 1;
  //@inject_tag: json:"message"
  ResponseErrorMessage message = 2;
  //@inject_tag: json:"item"
  billing.PayoutDocument item = 3;
}

message CreatePayoutDocumentResponse {
  //@inject_tag: json:"status"
  int32 status = 1;
  //@inject_tag: json:"message"
  ResponseErrorMessage message = 2;
  //@inject_tag: json:"items"
  repeated billing.PayoutDocument items = 3;
}

message UpdatePayoutDocumentRequest {
  //@inject_tag: json:"payout_document_id" validate:"required,hexadecimal,len=24" param:"payout_document_id"
  //
  // The unique identifier for the payout document.
  string payout_document_id = 1;
  //@inject_tag: json:"transaction" validate:"omitempty,max=255"
  //
  // The unique identifier for the payout transaction.
  string transaction = 2;
  //@inject_tag: json:"status" validate:"required,oneof=skip pending in_progress paid canceled failed"
  //
  // The document status. Available values: skip, pending, in_progress, paid, canceled, failed.
  string status = 3;
  //@inject_tag: json:"failure_code" validate:"omitempty,oneof=account_closed account_frozen account_restricted destination_bank_invalid could_not_process declined insufficient_funds invalid_account_number incorrect_account_holder_name invalid_currency"
  //
  // The payout's failure code. Available values: account_closed, account_frozen, account_restricted, destination_bank_invalid, could_not_process, declined, insufficient_funds, invalid_account_number, incorrect_account_holder_name, invalid_currency.
  string failure_code = 4;
  //@inject_tag: json:"failure_message" validate:"omitempty,max=255"
  //
  // The payout's failure message.
  string failure_message = 5;
  //@inject_tag: json:"failure_transaction" validate:"omitempty,max=255"
  //
  // The unique identifier for the payout failure transaction.
  string failure_transaction = 6;
  //@inject_tag: json:"ip"
  //
  // The IP address of the user which updated the payout document.
  string ip = 7;
}

message GetPayoutDocumentRequest {
  //@inject_tag: validate:"required,hexadecimal,len=24" param:"payout_document_id"
  string payout_document_id = 1;
  //@inject_tag: validate:"omitempty,hexadecimal,len=24" param:"merchant_id"
  string merchant_id = 2;
}

message GetPayoutDocumentsRequest {
  //@inject_tag: query:"payout_document_id" validate:"omitempty,hexadecimal,len=24"
  string payout_document_id = 1;
  //@inject_tag: query:"status[]" validate:"omitempty,dive,oneof=skip pending in_progress paid canceled failed"
  repeated string status = 2;
  //@inject_tag: validate:"omitempty,hexadecimal,len=24" param:"merchant_id"
  string merchant_id = 3;
  // @inject_tag: query:"date_from" validate:"omitempty,datetime"
  string date_from = 4;
  // @inject_tag: query:"date_to" validate:"omitempty,datetime"
  string date_to = 5;
  // @inject_tag: query:"limit" validate:"omitempty,numeric,gt=0"
  int64 limit = 6;
  // @inject_tag: query:"offset" validate:"omitempty,numeric,gte=0"
  int64 offset = 7;
  //@inject_tag: validate:"omitempty,hexadecimal,len=24"
  string operating_company_id = 8;
}

message PayoutDocumentsPaginate {
  // @inject_tag: json:"count"
  //
  // The total number of the payout documents.
  int32 count = 1;
  // @inject_tag: json:"items"
  //
  // The list of the payout documents.
  repeated billing.PayoutDocument items = 2;
}

message GetPayoutDocumentsResponse {
  int32 status = 1;
  // @inject_tag: json:"message,omitempty"
  ResponseErrorMessage message = 2;
  // @inject_tag: json:"data"
  PayoutDocumentsPaginate data = 3;
}

message UpdatePayoutDocumentSignaturesRequest {
  //@inject_tag: query:"payout_document_id" validate:"required,hexadecimal,len=24"
  string payout_document_id = 1;
  // @inject_tag: json:"has_merchant_signature"
  bool has_merchant_signature = 2;
  // @inject_tag: json:"has_psp_signature"
  bool has_psp_signature = 3;
  // @inject_tag: json:"signed_document_file_url"
  string signed_document_file_url = 4;
}

message GetMerchantBalanceRequest {
  //@inject_tag: validate:"required,hexadecimal,len=24" param:"merchant_id"
  string merchant_id = 1;
}

message GetMerchantBalanceResponse {
  int32 status = 1;
  ResponseErrorMessage message = 2;
  billing.MerchantBalance item = 3;
}

message PayoutDocumentPdfUploadedRequest {
  //@inject_tag: validate:"required,hexadecimal,len=24"
  string id = 1;
  //@inject_tag: validate:"required"
  string filename = 2;
  //@inject_tag: validate:"required,numeric,gte=0"
  int32 retention_time = 3;
  //@inject_tag: validate:"required,hexadecimal,len=24"
  string payout_id = 4;
  bytes content = 5;
}

message PayoutDocumentPdfUploadedResponse {
  int32 status = 1;
  ResponseErrorMessage message = 2;
}

message OrderReceiptRequest {
  // @inject_tag: validate:"required,uuid" param:"order_id"
  string order_id = 1;
  // @inject_tag: validate:"required,uuid" param:"receipt_id"
  string receipt_id = 2;
}

message OrderReceiptResponse {
  int32 status = 1;
  ResponseErrorMessage message = 2;
  billing.OrderReceipt receipt = 3;
}

message GetProductResponse {
  // The response status code.
  int32 status = 1;
  // The response error message (if any).
  ResponseErrorMessage message = 2;
  // The product data.
  Product item = 3;
}

message GetPriceGroupByRegionResponse {
  int32 status = 1;
  ResponseErrorMessage message = 2;
  //@inject_tag: json:"group"
  billing.PriceGroup Group = 3;
}

message GetPriceGroupByRegionRequest {
  //@inject_tag: json:"region" validate:"required"
  string region = 1;
}

message ChangeMerchantManualPayoutsRequest {
  // @inject_tag: validate:"required,hexadecimal,len=24" param:"merchant_id"
  string merchant_id = 1;
  bool manual_payouts_enabled = 2;
}

message ChangeMerchantManualPayoutsResponse {
  int32 status = 1;
  ResponseErrorMessage message = 2;
  billing.Merchant item = 3;
}

message GetPaylinksRequest {
  //@inject_tag: validate:"required,hexadecimal,len=24" param:"merchant_id"
  string merchant_id = 1;
  //@inject_tag: validate:"omitempty,hexadecimal,len=24"
  string project_id = 2;
  // @inject_tag: validate:"required,numeric,gte=1"
  int64 limit = 3;
  // @inject_tag: validate:"omitempty,numeric,gte=0"
  int64 offset = 4;
}

message SendWebhookToMerchantResponse {
  // The response status code.
  int32 status = 1;
  // The response error message (if any).
  ResponseErrorMessage message = 2;
  // The unique identifier for the order.
  string order_id = 3;
}

message PaylinksPaginate {
  // @inject_tag: json:"count"
  //
  // The total number of found paylinks.
  int32 count = 1;
  // @inject_tag: json:"items"
  //
  // The list of paylinks.
  repeated paylink.Paylink items = 2;
}

message NotifyWebhookTestResultsRequest {
  string type = 1;
  string project_id = 2;
  bool is_passed = 3;
  string test_case = 4;
}

message GetPaylinksResponse {
  int32 status = 1;
  // @inject_tag: json:"message,omitempty"
  ResponseErrorMessage message = 2;
  // @inject_tag: json:"data"
  PaylinksPaginate data = 3;
}

message PaylinkRequestById {
  //@inject_tag: validate:"required,hexadecimal,len=24"
  string id = 1;
  // @inject_tag: query:"utm_source"
  string utm_source = 2;
  // @inject_tag: query:"utm_medium"
  string utm_medium = 3;
  // @inject_tag: query:"utm_campaign"
  string utm_campaign = 4;
}

message PaylinkRequest {
  //@inject_tag: validate:"required,hexadecimal,len=24" param="id"
  string id = 1;
  //@inject_tag: validate:"required,hexadecimal,len=24" param:"merchant_id"
  string merchant_id = 2;
}

message GetPaylinkResponse {
  int32 status = 1;
  // @inject_tag: json:"message,omitempty"
  ResponseErrorMessage message = 2;
  // @inject_tag: json:"item"
  paylink.Paylink item = 3;
}

message GetPaylinkUrlByShortLinkRequest {
  //@inject_tag: validate:"required,hexadecimal" param="id"
  string id = 1;
  string url_mask = 2;
  // @inject_tag: query:"utm_source"
  string utm_source = 3;
  // @inject_tag: query:"utm_medium"
  string utm_medium = 4;
  // @inject_tag: query:"utm_campaign"
  string utm_campaign = 5;
}

message GetPaylinkUrlByShortLinkResponse {
  int32 status = 1;
  // @inject_tag: json:"message,omitempty"
  ResponseErrorMessage message = 2;
  // @inject_tag: json:"url"
  string url = 3;
}

message GetPaylinkURLRequest {
  //@inject_tag: validate:"required,hexadecimal,len=24"
  string id = 1;
  //@inject_tag: validate:"required,hexadecimal,len=24" param:"merchant_id"
  string merchant_id = 2;
  string url_mask = 3;
  // @inject_tag: query:"utm_source"
  string utm_source = 4;
  // @inject_tag: query:"utm_medium"
  string utm_medium = 5;
  // @inject_tag: query:"utm_campaign"
  string utm_campaign = 6;
}

message GetPaylinkUrlResponse {
  int32 status = 1;
  // @inject_tag: json:"message,omitempty"
  ResponseErrorMessage message = 2;
  // @inject_tag: json:"url"
  string url = 4;
}

message GetPaylinkStatCommonRequest {
  //@inject_tag: validate:"required,hexadecimal" param:"id"
  string id = 1;
  //@inject_tag: validate:"required,hexadecimal,len=24" param:"merchant_id"
  string merchant_id = 2;
  // @inject_tag: query:"period_from" validate:"omitempty,numeric,gte=0"
  int64 period_from = 3;
  // @inject_tag: query:"period_to" validate:"omitempty,numeric,gte=0"
  int64 period_to = 4;
}

message GetPaylinkTransactionsRequest {
  // @inject_tag: validate:"required,hexadecimal,len=24" param:"merchant_id"
  string merchant_id = 1;
  //@inject_tag: validate:"required,hexadecimal,len=24" param="id"
  string id = 2;
  // @inject_tag: query:"limit" validate:"omitempty,numeric,gt=0"
  int64 limit = 3;
  // @inject_tag: query:"offset" validate:"omitempty,numeric,gte=0"
  int64 offset = 4;
}

message GetPaylinkStatCommonResponse {
  int32 status = 1;
  // @inject_tag: json:"message,omitempty"
  ResponseErrorMessage message = 2;
  // @inject_tag: json:"item"
  paylink.StatCommon item = 3;
}

message GetPaylinkStatCommonGroupResponse {
  int32 status = 1;
  // @inject_tag: json:"message,omitempty"
  ResponseErrorMessage message = 2;
  // @inject_tag: json:"item"
  paylink.GroupStatCommon item = 3;
}

message RoyaltyReportPdfUploadedRequest {
  //@inject_tag: validate:"required,hexadecimal,len=24"
  string id = 1;
  //@inject_tag: validate:"required"
  string filename = 2;
  //@inject_tag: validate:"required,numeric,gte=0"
  int32 retention_time = 3;
  //@inject_tag: validate:"required,hexadecimal,len=24"
  string royalty_report_id = 4;
  bytes content = 5;
}

message RoyaltyReportPdfUploadedResponse {
  int32 status = 1;
  ResponseErrorMessage message = 2;
}

message DeleteSavedCardRequest {
  //@inject_tag: validate:"required,hexadecimal,len=24" required:"true"
  //
  // The unique identifier for the saved card.
  string id = 1;
  //@inject_tag: validate:"required" json:"-"
  string cookie = 2;
}

message GetOperatingCompaniesListResponse {
  int32 status = 1;
  // @inject_tag: json:"message,omitempty"
  ResponseErrorMessage message = 2;
  // @inject_tag: json:"items"
  repeated billing.OperatingCompany items = 3;
}

message GetPaymentMinLimitsSystemResponse {
  int32 status = 1;
  // @inject_tag: json:"message,omitempty"
  ResponseErrorMessage message = 2;
  // @inject_tag: json:"items"
  repeated billing.PaymentMinLimitSystem items = 3;
}

message SetMerchantOperatingCompanyRequest {
  // @inject_tag: json:"id" validate:"required,hexadecimal,len=24" json:"-" param:"merchant_id"
  string merchant_id = 1;
  // @inject_tag: json:"operating_company_id" validate:"required,hexadecimal,len=24"
  //
  // The unique identifier for the operating company.
  string operating_company_id = 2;
  // @inject_tag: json:"dont_charge_vat"
  //
  // Has a true value if the merchant doesn't pay VAT.
  bool dont_charge_vat = 3;
}

message SetMerchantOperatingCompanyResponse {
  int32 status = 1;
  ResponseErrorMessage message = 2;
  billing.Merchant item = 3;
}

message SetMerchantAcceptedStatusRequest {
  // @inject_tag: json:"id" validate:"required,hexadecimal,len=24" json:"-" param:"merchant_id"
  string merchant_id = 1;
}

message SetMerchantAcceptedStatusResponse {
  int32 status = 1;
  ResponseErrorMessage message = 2;
  billing.Merchant item = 3;
}

message GetOperatingCompanyRequest {
  // @inject_tag: json:"id" validate:"required,hexadecimal,len=24"
  string id = 2;
}

message GetOperatingCompanyResponse {
  int32 status = 1;
  ResponseErrorMessage message = 2;
  billing.OperatingCompany company = 3;
}

message OrderReCreateProcessRequest {
  // @inject_tag: validate:"required,uuid"
  string order_id = 1;
}

message GetMerchantUsersRequest {
  //@inject_tag: json:"merchant_id" validate:"required" param:"merchant_id"
  string merchant_id = 1;
}

message GetMerchantUsersResponse {
  int32 status = 1;
  ResponseErrorMessage message = 2;
  repeated billing.UserRole users = 3;
}

message InviteUserMerchantRequest {
  //@inject_tag: validate:"required,hexadecimal,len=24" required:"true" param:"merchant_id"
  //
  // The unique identifier for the merchant.
  string merchant_id = 1;
  //@inject_tag: validate:"required,email" required:"true"
  //
  // The user's email address to obtain an invitation about the merchant role.
  string email = 2;
  //@inject_tag: validate:"required" required:"true"
  //
  // The merchant role for the invited user. Available values: merchant_developer, merchant_accounting, merchant_support, merchant_view_only.
  string role = 3;
}

message InviteUserMerchantResponse {
  // The response status code.
  int32 status = 1;
  // The response error message (if any).
  ResponseErrorMessage message = 2;
  // The merchant role data for the invited user.
  billing.UserRole role = 3;
}

message InviteUserAdminRequest {
  //@inject_tag: validate:"required,email" required:"true"
  //
  // The user's email address to obtain an invitation about the admin role.
  string email = 1;
  //@inject_tag: validate:"required" required:"true"
  //
  // The admin role for the invited user.
  string role = 2;
}

message InviteUserAdminResponse {
  // The response status code.
  int32 status = 1;
  // The response error message (if any).
  ResponseErrorMessage message = 2;
  // The user role data.
  billing.UserRole role = 3;
}

message ResendInviteMerchantRequest {
  //@inject_tag: validate:"required,hexadecimal,len=24" required:"true" param:"merchant_id"
  //
  // The unique identifier for the merchant.
  string merchant_id = 1;
  //@inject_tag: validate:"required,email" required:"true"
  //
  // The user's email address.
  string email = 2;
}

message ResendInviteAdminRequest {
  //@inject_tag: validate:"required,email" required:"true"
  //
  // The user's email.
  string email = 1;
}

message GetAdminUserRequest {
  //@inject_tag: validate:"required,hexadecimal,len=24"
  string id = 1;
}

message GetAdminUserResponse {
  int32 status = 1;
  ResponseErrorMessage message = 2;
  billing.UserRole role = 3;
}

message CheckInviteTokenRequest {
  //@inject_tag: validate:"required" required:"true"
  //
  // The invitation token.
  string token = 1;
  //@inject_tag: validate:"required,email" required:"true"
  //
  // The user's email address.
  string email = 2;
}

message CheckInviteTokenResponse {
  // The response status code.
  int32 status = 1;
  // The response error message (if any).
  ResponseErrorMessage message = 2;
  // The unique identifier for the role.
  string role_id = 3;
  // The type of the invitation. Available values: admin, merchant.
  string role_type = 4;
}

message AcceptInviteRequest {
  //@inject_tag: validate:"required" required:"true"
  //
  // The invitation token.
  string token = 1;
  //@inject_tag: validate:"required,hexadecimal,len=24" required:"true"
  //
  // The unique identifier for the user.
  string user_id = 2;
  //@inject_tag: validate:"required,email" required:"true"
  //
  // The user's email address.
  string email = 5;
}

message AcceptInviteResponse {
  // The response status code.
  int32 status = 1;
  // The response error message (if any).
  ResponseErrorMessage message = 2;
  // The user's role data.
  billing.UserRole role = 3;
}

message GetAdminUsersResponse {
  int32 status = 1;
  ResponseErrorMessage message = 2;
  repeated billing.UserRole users = 3;
}

message GetMerchantsForUserRequest {
  //@inject_tag: json:"user_id" validate:"required"
  string user_id = 1;
}

message GetMerchantsForUserResponse {
  // The response status code.
  int32 status = 1;
  // The response error message (if any).
  ResponseErrorMessage message = 2;
  // The list of merchants.
  repeated MerchantForUserInfo merchants = 3;
}

message MerchantForUserInfo {
  // The unique identifier for the merchant.
  string id = 1;
  // The merchant's name.
  string name = 2;
  // The user's role in the merchant.
  string role = 3;
}

message ChangeRoleForMerchantUserRequest {
  //@inject_tag: validate:"required,hexadecimal,len=24" param:"role_id"
  string role_id = 1;
  //@inject_tag: validate:"required,hexadecimal,len=24" param:"merchant_id"
  string merchant_id = 2;
  //@inject_tag: validate:"required"
  string role = 3;
}

message ChangeRoleForAdminUserRequest {
  //@inject_tag: validate:"required,hexadecimal,len=24" param:"role_id" json:"-"
  string role_id = 1;
  //@inject_tag: validate:"required" required:"true"
  //
  // The user role's name.
  string role = 3;
}

message GetRoleListRequest {
  //@inject_tag: validate:"required,oneof=merchant system"
  string type = 1;
}

message GetRoleListResponse {
  // The list of the roles.
  repeated billing.RoleListItem items = 1;
}

message AdminRoleRequest {
  //@inject_tag: validate:"required,hexadecimal,len=24" param:"role_id"
  string role_id = 1;
}

message MerchantRoleRequest {
  //@inject_tag: validate:"required,hexadecimal,len=24" param:"role_id"
  string role_id = 1;
  //@inject_tag: validate:"required,hexadecimal,len=24" param:"merchant_id"
  string merchant_id = 2;
}

message Permission {
  // The permission's name that stored in the Casbin server.
  string name = 1;
  // The URL that is accessable by this permission.
  string access = 2;
}

message UserRoleResponse {
  // The response status code.
  int32 status = 1;
  // The response error message (if any).
  ResponseErrorMessage message = 2;
  // The user's role.
  billing.UserRole user_role = 3;
}

message GetCountriesListForOrderRequest {
  //@inject_tag: validate:"required,uuid" json:"order_id" query:"order_id" param:"order_id"
  string order_id = 1;
}

message GetCountriesListForOrderResponse {
  int32 status = 1;
  ResponseErrorMessage message = 2;
  billing.CountriesList item = 3;
}

message VatReportRequest {
  //@inject_tag: json:"id" validate:"required,hexadecimal,len=24"
  string id = 1;
}

message PrivateTransactionsPaginate {
  // @inject_tag: json:"count"
  //
  // The total number of transactions.
  int32 count = 1;
  // @inject_tag: json:"items"
  //
  // The transactions list.
  repeated billing.OrderViewPrivate items = 2;
}

message VatReportResponse {
  //@inject_tag: json:"status"
  int32 status = 1;
  // @inject_tag: json:"message,omitempty"
  ResponseErrorMessage message = 2;
  // @inject_tag: json:"vat"
  billing.VatReport vat = 3;
}

message PrivateTransactionsResponse {
  int32 status = 1;
  // @inject_tag: json:"message,omitempty"
  ResponseErrorMessage message = 2;
  // @inject_tag: json:"data"
  PrivateTransactionsPaginate data = 3;
}

message ReportFinanceDoneRequest {
  string royalty_report_id = 1;
  string merchant_id = 2;
  string merchant_name = 3;
  string period_from = 4;
  string period_to = 5;
  string license_agreement_number = 6;
  string operating_company_name = 7;
  string file_name = 8;
  bytes file_content = 9;
  string payout_id = 10;
}

message SetCustomerPaymentActivityRequest {
  string customer_id = 1;
  string merchant_id = 2;
  string type = 3;
  google.protobuf.Timestamp processing_at = 4;
  double amount = 5;
}

message ActOfCompletionRequest {
  //@inject_tag: validate:"required,hexadecimal,len=24" param:"merchant_id"
  string merchant_id = 1;
  // @inject_tag: json:"date_from" validate:"required,date"
  string date_from = 2;
  // @inject_tag: json:"date_to" validate:"required,date"
  string date_to = 3;
  // @inject_tag: json:"file_type" validate:"omitempty,oneof=pdf xlsx"
  string file_type = 4;
}

message ActOfCompletionResponse {
  //@inject_tag: json:"status"
  int32 status = 1;
  //@inject_tag: json:"message"
  ResponseErrorMessage message = 2;
  //@inject_tag: json:"item"
  billing.ActOfCompletionDocument item = 3;
}

message ActsOfCompletionListRequest {
  //@inject_tag: validate:"required,hexadecimal,len=24" param:"merchant_id"
  string merchant_id = 1;
}

message ActsOfCompletionListItem {
  //@inject_tag: json:"date_title"
  string date_title = 1;
  //@inject_tag: json:"date_from"
  string date_from = 2;
  //@inject_tag: json:"date_to"
  string date_to = 3;
}

message ActsOfCompletionListResponse {
  //@inject_tag: json:"status"
  int32 status = 1;
  //@inject_tag: json:"message"
  ResponseErrorMessage message = 2;
  //@inject_tag: json:"items"
  repeated ActsOfCompletionListItem items = 3;
}

message GetDashboardCustomerReportResponse {
  int32 status = 1;
  ResponseErrorMessage message = 2;
  DashboardCustomerReport item = 3;
}

message DashboardCustomerReportArpuRequest {
  //@inject_tag: validate:"required,hexadecimal,len=24"
  string merchant_id = 1;

  //@inject_tag: validate:"required"
  string customer_id = 2;
}

message DashboardCustomerReportArpuResponse {
  int32 status = 1;
  ResponseErrorMessage message = 2;

  //@inject_tag: json:"item"
  DashboardAmountItemWithChart item = 3;
}

message DashboardCustomerReportRequest {
  //@inject_tag: validate:"required,hexadecimal,len=24" param:"merchant_id"
  string merchant_id = 1;
  //@inject_tag: query:"period" validate:"required,oneof=current_day previous_day current_week previous_week current_month previous_month current_quarter previous_quarter current_year previous_year"
  string period = 2;
}

message DashboardCustomerReport {
  //@inject_tag: json:"dynamic"
  DashboardCustomerDynamic dynamic = 1;
  //@inject_tag: json:"new_customers_percentage"
  float new_customers_percentage = 2;
  //@inject_tag: json:"new_customers_per_day"
  float new_customers_per_day = 3;
  //@inject_tag: json:"returning_customers_percentage"
  float returning_customers_percentage = 4;
  //@inject_tag: json:"lost_customers_percentage"
  float lost_customers_percentage = 5;
  //@inject_tag: json:"arppu"
  DashboardCustomerArppu arppu = 6;
  //@inject_tag: json:"top20"
  DashboardCustomerTop20 top20 = 7;
  //@inject_tag: json:"chart" bson:"chart"
  repeated DashboardChartItemInt chart = 8;
}

message DashboardCustomerDynamic {
  //@inject_tag: json:"current"
  int64 current = 1;
  //@inject_tag: json:"previous"
  int64 previous = 2;
  //@inject_tag: json:"delta"
  float delta = 3;
}

message DashboardCustomerAltv {
  //@inject_tag: json:"revenue"
  float revenue = 1;
  //@inject_tag: json:"currency"
  string currency = 2;
}

message DashboardCustomerArppu {
  //@inject_tag: json:"revenue"
  float revenue = 1;
  //@inject_tag: json:"currency"
  string currency = 2;
  //@inject_tag: json:"avg_orders"
  float avg_orders = 3;
}

message DashboardCustomerTop20 {
  //@inject_tag: json:"revenue"
  float revenue = 1;
  //@inject_tag: json:"currency"
  string currency = 2;
  //@inject_tag: json:"customer_count"
  int32 customer_count = 3;
}

message ListCustomersRequest {
  // @inject_tag: validate:"omitempty,hexadecimal,len=24" param:"merchant_id"
  string merchant_id = 1;
  //@inject_tag: json:"external_id"
  string external_id = 2;
  //@inject_tag: json:"email"
  string email = 3;
  //@inject_tag: json:"phone"
  string phone = 4;
  //@inject_tag: json:"name"
  string name = 5;
  //@inject_tag: json:"country"
  string country = 6;
  //@inject_tag: json:"language"
  string language = 7;
  //@inject_tag: json:"amount"
  AmountFilter amount = 8;
  // @inject_tag: query:"limit" validate:"omitempty,numeric,gt=0"
  int64 limit = 9;
  // @inject_tag: query:"offset" validate:"omitempty,numeric,gte=0"
  int64 offset = 10;
  //@inject_tag: json:"quick_search"
  string quick_search = 11;
  //@inject_tag: json:"project_id"
  string project_id = 12;
}

message AmountFilter {
  //@inject_tag: json:"from"
  float from = 1;
  //@inject_tag: json:"to"
  float to = 2;
}

message ListCustomersResponse {
  int32 status = 1;
  ResponseErrorMessage message = 2;

  //@inject_tag: json:"items"
  repeated ShortCustomerInfo items = 3;
  //@inject_tag: json:"count"
  int64 count = 4;
}

message ShortCustomerInfo {
  //@inject_tag: json:"id"
  string id = 1;
  //@inject_tag: json:"external_id"
  string external_id = 2;
  //@inject_tag: json:"country"
  string country = 3;
  //@inject_tag: json:"language"
  string language = 4;
  //@inject_tag: json:"last_order"
  google.protobuf.Timestamp last_order = 5;
  //@inject_tag: json:"orders"
  int64 orders = 6;
  //@inject_tag: json:"revenue"
  double revenue = 7;
  //@inject_tag: json:"email"
  string email = 8;
  //@inject_tag: json:"currency"
  string currency = 9;
}

message GetCustomerInfoRequest {
  // @inject_tag: validate:"hexadecimal,len=24" param:"merchant_id"
  string merchant_id = 1;
  string user_id = 2;
}

message GetCustomerInfoResponse {
  int32 status = 1;
  ResponseErrorMessage message = 2;
  billing.Customer item = 3;
}

message DeserializeCookieRequest {
  string cookie = 1;
}

message DeserializeCookieResponse {
  int32 status = 1;
  ResponseErrorMessage message = 2;
  billing.BrowserCookie item = 3;
}

message DeleteCustomerCardRequest {
  string id = 1;
  string customer_id = 2;
}

message GetSubscriptionRequest {
  // @inject_tag: param:"id"
  string id = 1;
  string cookie = 2;
  // @inject_tag: param:"merchant_id"
  string merchant_id = 4;
  // @inject_tag: param:"project_id"
  string project_id = 5;
}

message GetSubscriptionResponse {
  int32 status = 1;
  ResponseErrorMessage message = 2;
  billing.RecurringSubscription subscription = 3;
}

message FindSubscriptionsRequest {
  string cookie = 1;
  // @inject_tag: query:"limit" validate:"omitempty,numeric,gt=0"
  int64 limit = 3;
  // @inject_tag: query:"offset" validate:"omitempty,numeric,gte=0"
  int64 offset = 4;
  // @inject_tag: json:"merchant_id" param:"merchant_id"
  string merchant_id = 5;
  // @inject_tag: query:"quick_filter"
  string quick_filter = 6;
  // @inject_tag: query:"user_id" validate:"omitempty,hexadecimal,len=24"
  string user_id = 7;
  // @inject_tag: query:"status" validate:"omitempty,oneof=active canceled no_renewing"
  string status = 8;
  // @inject_tag: query:"datetime_from" validate:"omitempty,datetime"
  string datetime_from = 9;
  // @inject_tag: query:"datetime_to" validate:"omitempty,datetime"
  string datetime_to = 10;
  // @inject_tag: query:"plan_id"
  string plan_id = 11;
  // @inject_tag: query:"sort[]"
  repeated string sort = 12;
  // @inject_tag: query:"locale"
  string locale = 13;
}

message FindSubscriptionsResponse {
  //@inject_tag: json:"list"
  repeated billing.RecurringSubscription list = 1;
  ResponseErrorMessage message = 2;
  int32 status = 3;
  //@inject_tag: json:"count"
  int64 count = 4;
}

message GetRecurringPlanStatRequest {
  // @inject_tag: json:"merchant_id" param:"merchant_id"
  string merchant_id = 1;
  // @inject_tag: query:"plan_id"
  string plan_id = 2;
  // @inject_tag: query:"datetime_from" validate:"omitempty,datetime"
  string datetime_from = 3;
  // @inject_tag: query:"datetime_to" validate:"omitempty,datetime"
  string datetime_to = 4;
}

message GetRecurringPlanStatResponse {
  ResponseErrorMessage message = 1;
  int32 status = 2;
  // @inject_tag: json:"active_subscriptions_count"
  int64 active_subscriptions_count = 3;
  // @inject_tag: json:"canceled_subscriptions_count"
  int64 canceled_subscriptions_count = 4;
  // @inject_tag: json:"no_renewing_subscriptions_count"
  int64 no_renewing_subscriptions_count = 5;
  // @inject_tag: json:"reactivate_subscriptions_count"
  int64 reactivate_subscriptions_count = 6;
}

message AddRecurringPlanResponse {
  int32 status = 1;
  ResponseErrorMessage message = 2;
  billing.RecurringPlan item = 3;
}

message UpdateRecurringPlanResponse {
  int32 status = 1;
  ResponseErrorMessage message = 2;
}

message EnableRecurringPlanRequest {
  //@inject_tag: json:"merchant_id" param:"merchant_id"
  string merchant_id = 1;
  // @inject_tag: json:"project_id" validate:"required,hexadecimal,len=24" param:"project_id"
  string project_id = 2;
  //@inject_tag: json:"plan_id" validate:"required,hexadecimal,len=24" param:"plan_id"
  string plan_id = 3;
}

message EnableRecurringPlanResponse {
  int32 status = 1;
  ResponseErrorMessage message = 2;
}

message DisableRecurringPlanRequest {
  //@inject_tag: json:"merchant_id" param:"merchant_id"
  string merchant_id = 1;
  // @inject_tag: json:"project_id" validate:"required,hexadecimal,len=24" param:"project_id"
  string project_id = 2;
  //@inject_tag: json:"plan_id" validate:"required,hexadecimal,len=24" param:"plan_id"
  string plan_id = 3;
}

message DisableRecurringPlanResponse {
  int32 status = 1;
  ResponseErrorMessage message = 2;
}

message DeleteRecurringPlanRequest {
  //@inject_tag: json:"merchant_id" param:"merchant_id"
  string merchant_id = 1;
  // @inject_tag: json:"project_id" validate:"required,hexadecimal,len=24" param:"project_id"
  string project_id = 2;
  //@inject_tag: json:"plan_id" validate:"required,hexadecimal,len=24" param:"plan_id"
  string plan_id = 3;
}

message DeleteRecurringPlanResponse {
  int32 status = 1;
  ResponseErrorMessage message = 2;
}

message GetRecurringPlanRequest {
  // @inject_tag: param:"merchant_id"
  string merchant_id = 1;
  // @inject_tag: json:"project_id" validate:"omitempty,hexadecimal,len=24" param:"project_id"
  string project_id = 2;
  //@inject_tag: json:"plan_id" validate:"required,hexadecimal,len=24" param:"plan_id"
  string plan_id = 3;
}

message GetRecurringPlanResponse {
  int32 status = 1;
  ResponseErrorMessage message = 2;
  billing.RecurringPlan item = 3;
}

message GetRecurringPlansRequest {
  // @inject_tag: param:"merchant_id"
  string merchant_id = 1;
  // @inject_tag: json:"project_id" validate:"required,hexadecimal,len=24" param:"project_id"
  string project_id = 2;
  // @inject_tag: json:"external_id" query:"external_id"
  string external_id = 3;
  // @inject_tag: json:"group_id" query:"group_id"
  string group_id = 4;
  // @inject_tag: json:"query" query:"query"
  string query = 5;
  // @inject_tag: query:"limit" query:"limit" validate:"omitempty,numeric,gt=0"
  int32 limit = 6;
  // @inject_tag: query:"offset" query:"offset" validate:"omitempty,numeric,gte=0"
  int32 offset = 7;
  // @inject_tag: query:"sort[]"
  repeated string sort = 8;
  // @inject_tag: query:"locale"
  string locale = 9;
}

message GetRecurringPlansResponse {
  int32 status = 1;
  ResponseErrorMessage message = 2;
  // @inject_tag: json:"list"
  repeated billing.RecurringPlan list = 3;
  // @inject_tag: json:"count"
  int32 count = 4;
}

message FindExpiredSubscriptionsRequest {
  string expire_at = 1;
}

message FindExpiredSubscriptionsResponse {
  int32 status = 1;
  ResponseErrorMessage message = 2;
  // @inject_tag: json:"list"
  repeated billing.RecurringSubscription list = 3;
}

message DeleteSubscriptionRequest {
  string id = 1;
}

message DeleteSubscriptionResponse {
  int32 status = 1;
  string message = 2;
}

message GetCustomerShortInfoRequest {
  //@inject_tag: validate:"required"
  string cookie = 1;
}

message GetCustomerShortInfoResponse {
  int32 status = 1;
  ResponseErrorMessage message = 2;
  CustomerShortInfo item = 3;
}

message CustomerShortInfo {
  string email = 1;
  string name = 2;
  string id = 3;
}

message GetSubscriptionsOrdersRequest {
  string cookie = 1;
  // @inject_tag: query:"limit" validate:"omitempty,numeric,gt=0"
  int64 limit = 4;
  // @inject_tag: query:"offset" validate:"omitempty,numeric,gte=0"
  int64 offset = 5;
  // @inject_tag: param:"merchant_id"
  string merchant_id = 6;
  // @inject_tag: query:"project_id" validate:"omitempty,hexadecimal,len=24"
  string project_id = 7;
  // @inject_tag: query:"subscription_id" validate:"omitempty,hexadecimal,len=24"
  string subscription_id = 8;
  // @inject_tag: query:"user_id" validate:"omitempty,hexadecimal,len=24"
  string user_id = 9;
  // @inject_tag: query:"status" validate:"omitempty,oneof=processed canceled rejected refunded"
  string status = 10;
  // @inject_tag: query:"datetime_from" validate:"omitempty,datetime"
  string datetime_from = 11;
  // @inject_tag: query:"datetime_to" validate:"omitempty,datetime"
  string datetime_to = 12;
}

message GetSubscriptionsOrdersResponse {
  int32 status = 1;
  ResponseErrorMessage message = 2;
  // @inject_tag: json:"list"
  repeated billing.SubscriptionOrder list = 3;
  // @inject_tag: json:"count"
  int64 count = 4;
}

message DeleteRecurringSubscriptionRequest {
  // @inject_tag: validate:"required" param:"id"
  string id = 1;
  string cookie = 3;
  // @inject_tag: param:"merchant_id"
  string merchant_id = 4;
}

message SetSubscriptionRenewalPendingRequest {
  string cookie = 1;
  // @inject_tag: validate:"required" param:"id"
  string id = 2;
  bool status = 3;
}

message AddMerchantDocumentResponse {
  billing.MerchantDocument item = 1;
  ResponseErrorMessage message = 2;
  int32 status = 3;
}

message GetMerchantDocumentsRequest {
  // @inject_tag: param:"merchant_id"
  string merchant_id = 1;
  // @inject_tag: query:"limit" validate:"omitempty,numeric,gt=0"
  int64 limit = 2;
  // @inject_tag: query:"offset" validate:"omitempty,numeric,gte=0"
  int64 offset = 3;
}

message GetMerchantDocumentsResponse {
  //@inject_tag: json:"list"
  repeated billing.MerchantDocument list = 1;
  ResponseErrorMessage message = 2;
  int32 status = 3;
  //@inject_tag: json:"count"
  int64 count = 4;
}

message GetMerchantDocumentRequest {
  // @inject_tag: param:"merchant_id"
  string merchant_id = 1;
  // @inject_tag: param:"id"
  string id = 2;
}

message GetMerchantDocumentResponse {
  billing.MerchantDocument item = 1;
  ResponseErrorMessage message = 2;
  int32 status = 3;
}

message SetAllPaymentChannelCostMerchantRequest {
  //@inject_tag: validate:"required,hexadecimal,len=24"
  string merchant_id = 1;
  //@inject_tag: validate:"required,min=1,dive" json:"costs"
  repeated billing.PaymentChannelCostMerchant costs = 2;
}

message SetAllPaymentChannelCostMerchantResponse {
  //@inject_tag: json:"status"
  int32 status = 1;
  //@inject_tag: json:"message"
  ResponseErrorMessage message = 2;
  //@inject_tag: json:"items"
  repeated billing.PaymentChannelCostMerchant items = 3;
}

message RefreshMerchantApiTokenRequest {
  //@inject_tag: json:"merchant_id" validate:"omitempty,hexadecimal,len=24" param:"merchant_id"
  string merchant_id = 1;
}

message RefreshMerchantApiTokenResponse {
  //@inject_tag: json:"status"
  int32 status = 1;
  //@inject_tag: json:"message"
  ResponseErrorMessage message = 2;
  //@inject_tag: json:"item"
  billing.Merchant item = 3;
}
